from typing import Any, List, Protocol, Tuple

Title = str
Message = str
Translation = Tuple[Title, Message]


class Locale(Protocol):
    """Locale is an interface for defining custom error strings"""

    def required(self) -> Translation:
        """Returns error info for "required" schema validation"""
        ...

    def unique(self) -> Translation:
        """Returns error info for "unique" schema validation"""
        ...

    def min_length(self, cell_value: Any, min: Any) -> Translation:
        """Returns error info for "minLength" schema validation"""
        ...

    def max_length(self, cell_value: Any, max: Any) -> Translation:
        """Returns error info for "maxLength" schema validation"""
        ...

    def minimum(self, cell_value: Any, min: Any) -> Translation:
        """Returns error info for "minimum" schema validation"""
        ...

    def maximum(self, cell_value: Any, max: Any) -> Translation:
        """Returns error info for "maximum" schema validation"""
        ...

    def pattern(self, cell_value: str, example: str, pattern: str) -> Translation:
        """Returns error info for "pattern" schema validation"""
        ...

    def enum(self, enum_values: Any) -> Translation:
        """Returns error info for "enum" schema validation"""
        ...

    def encoding(self) -> Translation: ...

    def missing_cell(self) -> Translation: ...

    def unique_error(self) -> Translation: ...

    def truncated_value(self) -> Translation: ...

    def forbidden_value(self) -> Translation: ...

    def sequential_value(self) -> Translation: ...

    def ascii_value(self) -> Translation: ...

    def extra_cell(self) -> Translation: ...

    def date_type(self, field_value: Any, expected_date_format: str) -> Translation: ...

    def year_type(self, field_value: Any) -> Translation: ...

    def number_type(self, field_value: Any) -> Translation: ...

    def integer_type(self, field_value: Any) -> Translation: ...

    def string_type(self, field_format: Any) -> Translation: ...

    def boolean_type(
        self, true_values: List[str], false_values: List[str]
    ) -> Translation: ...

    def array_type(self) -> Translation: ...

    def missing_label(self, field_name: str) -> Translation: ...

    def duplicate_labels(self) -> Translation: ...

    def blank_header(self) -> Translation: ...
    def blank_row(self) -> Translation: ...

    def primary_key(self) -> Translation: ...

    def foreign_key(self) -> Translation: ...

    def duplicate_row(self) -> Translation: ...

    def row_constraint(self) -> Translation: ...
