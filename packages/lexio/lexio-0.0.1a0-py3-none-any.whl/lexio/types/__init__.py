# generated by datamodel-codegen:
#   filename:  types.json
#   timestamp: 2025-01-28T12:06:10+00:00

from __future__ import annotations

from typing import Annotated, Any, List, Literal, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel


class Model(RootModel[Any]):
    root: Any


class Message(BaseModel):
    """
    Represents a message in the chat
    """

    model_config = ConfigDict(
        extra='forbid',
    )
    role: Annotated[Literal['assistant', 'user'], Field(title='role')]
    """
    The role of the message sender
    """
    content: Annotated[str, Field(title='content')]
    """
    The content of the message
    """


class Rect(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    top: Annotated[float, Field(title='top')]
    left: Annotated[float, Field(title='left')]
    width: Annotated[float, Field(title='width')]
    height: Annotated[float, Field(title='height')]


class PDFHighlight(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    page: Annotated[float, Field(title='page')]
    rect: Annotated[Rect, Field(title='rect')]
    comment: Annotated[Optional[str], Field(title='comment')] = None


class RetrieveResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field___toStringTag_23: Annotated[
        str, Field(alias='__@toStringTag@23', title='__@toStringTag@23')
    ]


class GenerateInput(RootModel[List[Message]]):
    root: List[Message]


class AsyncIterableGenerateStreamChunk(RootModel[Any]):
    root: Any


class PromiseString(RootModel[Any]):
    root: Any


class Record(RootModel[Any]):
    root: Any


class Uint8Array(RootModel[Any]):
    root: Any


class BaseSourceContent(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    metadata: Annotated[Optional[Record], Field(title='metadata')] = None


class BaseRetrievalResult(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    sourceName: Annotated[Optional[str], Field(title='sourceName')] = None
    relevanceScore: Annotated[Optional[float], Field(title='relevanceScore')] = None
    metadata: Annotated[Optional[Record], Field(title='metadata')] = None
    highlights: Annotated[Optional[List[PDFHighlight]], Field(title='highlights')] = (
        None
    )


class SourceReference(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Annotated[
        Optional[Literal['html', 'markdown', 'pdf']], Field(title='type')
    ] = None
    sourceReference: Annotated[str, Field(title='sourceReference')]
    sourceName: Annotated[Optional[str], Field(title='sourceName')] = None
    relevanceScore: Annotated[Optional[float], Field(title='relevanceScore')] = None
    metadata: Annotated[Optional[Record], Field(title='metadata')] = None
    highlights: Annotated[Optional[List[PDFHighlight]], Field(title='highlights')] = (
        None
    )


class TextContent(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    text: Annotated[str, Field(title='text')]
    sourceName: Annotated[Optional[str], Field(title='sourceName')] = None
    relevanceScore: Annotated[Optional[float], Field(title='relevanceScore')] = None
    metadata: Annotated[Optional[Record], Field(title='metadata')] = None
    highlights: Annotated[Optional[List[PDFHighlight]], Field(title='highlights')] = (
        None
    )


class MarkdownSourceContent(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    content: Annotated[str, Field(title='content')]
    type: Annotated[Literal['markdown'], Field(title='type')]
    metadata: Annotated[Optional[Record], Field(title='metadata')] = None


class HTMLSourceContent(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    content: Annotated[str, Field(title='content')]
    type: Annotated[Literal['html'], Field(title='type')]
    metadata: Annotated[Optional[Record], Field(title='metadata')] = None


class PDFSourceContent(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    content: Annotated[Uint8Array, Field(title='content')]
    type: Annotated[Literal['pdf'], Field(title='type')]
    highlights: Annotated[Optional[List[PDFHighlight]], Field(title='highlights')] = (
        None
    )
    metadata: Annotated[Optional[Record], Field(title='metadata')] = None


class SourceContent(
    RootModel[Union[MarkdownSourceContent, HTMLSourceContent, PDFSourceContent]]
):
    root: Annotated[
        Union[MarkdownSourceContent, HTMLSourceContent, PDFSourceContent],
        Field(title='SourceContent'),
    ]


class GenerateResponse(
    RootModel[Union[PromiseString, AsyncIterableGenerateStreamChunk]]
):
    root: Annotated[
        Union[PromiseString, AsyncIterableGenerateStreamChunk],
        Field(title='GenerateResponse'),
    ]


class RetrievalResult(RootModel[Union[SourceReference, TextContent]]):
    root: Annotated[Union[SourceReference, TextContent], Field(title='RetrievalResult')]
