"""
Copyright (C) 2022-2025 Stella Technologies (UK) Limited.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
IN THE SOFTWARE.
"""

from datetime import datetime

import pytest
from freezegun import freeze_time
from stellanow_api_internals.datatypes.workflow_mgmt import (
    StellaEventDetailed,
    StellaField,
    StellaFieldType,
    StellaModelDetailed,
    StellaModelField,
    StellaModelFieldType,
    StellaShortEntity,
)

from stellanow_cli.code_generators.python.code_generator import CodeGenerator as PythonCodeGenerator


@pytest.fixture
def test_event():
    return StellaEventDetailed(
        id="1",
        name="test_event",
        projectId="40c03f71-b509-4713-87f6-10bac6591939",
        entities=[
            StellaShortEntity(id="", name="entity1"),
            StellaShortEntity(id="", name="entity2"),
        ],
        fields=[
            StellaField(id="", name="field1", fieldType=StellaFieldType(value="Decimal"), required=True),
            StellaField(id="", name="field2", fieldType=StellaFieldType(value="Integer"), required=True),
            StellaField(id="", name="fieldValue3", fieldType=StellaFieldType(value="Boolean"), required=True),
            StellaField(id="", name="field4", fieldType=StellaFieldType(value="String"), required=True),
            StellaField(id="", name="field5", fieldType=StellaFieldType(value="Date"), required=True),
            StellaField(id="", name="field6", fieldType=StellaFieldType(value="DateTime"), required=True),
            StellaField(id="", name="field7", fieldType=StellaFieldType(value="Any"), required=True),
            StellaField(
                id="",
                name="field8",
                fieldType=StellaFieldType(value="Model", modelRef="34a736ed-0b51-415a-ac24-0c6a975e9381"),
                required=True,
            ),
        ],
        isActive=True,
        createdAt=datetime(2022, 1, 1).strftime("%Y-%m-%dT%H:%M:%S"),
        updatedAt=datetime(2022, 1, 2).strftime("%Y-%m-%dT%H:%M:%S"),
        description="Test event",
    )


@pytest.fixture
def model_details():
    return {
        "34a736ed-0b51-415a-ac24-0c6a975e9381": StellaModelDetailed(
            id="34a736ed-0b51-415a-ac24-0c6a975e9381",
            name="TestStructure",
            description="A test model",
            createdAt=datetime(2022, 1, 1).strftime("%Y-%m-%dT%H:%M:%S"),
            updatedAt=datetime(2022, 1, 2).strftime("%Y-%m-%dT%H:%M:%S"),
            fields=[
                StellaModelField(
                    id="fieldA",
                    name="fieldA",
                    fieldType=StellaModelFieldType(value="String"),
                ),
                StellaModelField(
                    id="fieldB",
                    name="fieldB",
                    fieldType=StellaModelFieldType(value="Integer"),
                ),
            ],
        ),
    }


@freeze_time("2025-02-28 07:41:02")
def test_generate_class_handles_all_valueTypes(test_event, model_details):
    generated_class = PythonCodeGenerator.generate_message_class(test_event, model_details)

    expected_class = '''
    """
    This file is auto-generated by StellaNowCLI. DO NOT EDIT.

    Event ID: 1
    Generated: 2025-02-28T07:41:02Z
    """
    from datetime import date, datetime
    
    from stellanow_sdk_python.messages.message_base import StellaNowMessageBase
    from models.test_structure_model import TestStructureModel


    class TestEventMessage(StellaNowMessageBase):
        entity1EntityId: str
        entity2EntityId: str
        field1: float
        field2: int
        fieldValue3: bool
        field4: str
        field5: date
        field6: datetime
        field7: Any
        field8: TestStructureModel

        def __init__(self, entity1EntityId: str, entity2EntityId: str, field1: float, field2: int, fieldValue3: bool, field4: str, field5: date, field6: datetime, field7: Any, field8: TestStructureModel):
            super().__init__(
                event_name="test_event",
                entities=[{"type": "entity1", "id": entity1EntityId}, {"type": "entity2", "id": entity2EntityId}],
                entity1EntityId=entity1EntityId,
                entity2EntityId=entity2EntityId,
                field1=field1,
                field2=field2,
                fieldValue3=fieldValue3,
                field4=field4,
                field5=field5,
                field6=field6,
                field7=field7,
                field8=field8
            )
            
            
"""
Generated from:

{
    "createdAt": "2022-01-01 00:00:00",
    "updatedAt": "2022-01-02 00:00:00",
    "id": "1",
    "name": "test_event",
    "projectId": "40c03f71-b509-4713-87f6-10bac6591939",
    "isActive": true,
    "description": "Test event",
    "fields": [
        {
            "id": "",
            "name": "field1",
            "fieldType": {
                "value": "Decimal"
            },
            "required": true
        },
        {
            "id": "",
            "name": "field2",
            "fieldType": {
                "value": "Integer"
            },
            "required": true
        },
        {
            "id": "",
            "name": "fieldValue3",
            "fieldType": {
                "value": "Boolean"
            },
            "required": true
        },
        {
            "id": "",
            "name": "field4",
            "fieldType": {
                "value": "String"
            },
            "required": true
        },
        {
            "id": "",
            "name": "field5",
            "fieldType": {
                "value": "Date"
            },
            "required": true
        },
        {
            "id": "",
            "name": "field6",
            "fieldType": {
                "value": "DateTime"
            },
            "required": true
        },
        {
            "id": "",
            "name": "field7",
            "fieldType": {
                "value": "Any"
            },
            "required": true
        },
        {
            "id": "",
            "name": "field8",
            "fieldType": {
                "value": "Model",
                "modelRef": "34a736ed-0b51-415a-ac24-0c6a975e9381"
            },
            "required": true
        }
    ],
    "entities": [
        {
            "id": "",
            "name": "entity1"
        },
        {
            "id": "",
            "name": "entity2"
        }
    ]
}
"""
    '''

    def normalize_whitespace(s):
        return "\n".join(line.strip() for line in s.strip().splitlines())

    assert normalize_whitespace(generated_class) == normalize_whitespace(
        expected_class
    ), "Generated class does not match the expected output."
