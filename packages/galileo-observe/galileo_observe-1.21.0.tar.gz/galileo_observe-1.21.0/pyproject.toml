[tool.poetry]
name = "galileo-observe"
version = "1.21.0"
description = "ðŸ“ˆ Monitor your LLM integration with Galileo Observe!"
authors = ["Galileo Technologies Inc. <team@rungalileo.io>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.9,<3.14"
pydantic = "^2.5.2"
pytz = ">=2024,<2026"
pyjwt = "^2.8.0"
tiktoken = ">=0.7,<0.10"
langchain-core = { version = "^0.3.0", optional = true }
httpx = ">0.27.0,<=0.29.0"
galileo-core = "^3.14.0"

[tool.poetry.extras]
langchain = ["langchain-core"]
all = ["langchain-core"]


[tool.poetry.group.test.dependencies]
pytest = "^8.0.1"
coverage = "^7.2.3"
pytest-cov = "^6.0.0"
pytest-xdist = "^3.3.1"
pytest-socket = "^0.7"
requests-mock = "^1.11.0"
pytest-asyncio = "^0.25.0"
galileo-core = { extras = ["testing"], version = "^3.0.0" }
pytest-env = "^1.1.5"


[tool.poetry.group.dev.dependencies]
pre-commit = "^4.0.1"
mypy = "^1.14.0"
types-requests = "^2.31.0.1"
types-pytz = "^2025.1"
openai = "^1.58.1"


[tool.poetry.group.docs.dependencies]
mkdocs = "^1.6.0"
mkdocs-material = "^9.5.33"
mkdocstrings = "^0.28"
mkdocstrings-python = "^1.10.8"
griffe-fieldz = "^0.2.0"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Test.
[tool.pytest.ini_options]
env = [
    "GALILEO_CONSOLE_URL=http://localtest:8088",
    "GALILEO_API_KEY=api-1234567890",
]
addopts = [
    # Run tests in parallel.
    "-n",
    "auto",
    # Show local variables in tracebacks.
    "--showlocals",
    # Show extra test summary info as specified by chars.
    "-o",
    "console_output_style=progress",
    # Disable warnings.
    "--disable-warnings",
    # Show slowest 10 test durations.
    "--durations=10",
    # Disable internet access.
    "--disable-socket",
    # Enable Unix socket access for async tests.
    "--allow-unix-socket",
]
asyncio_default_fixture_loop_scope = "function"

# Linters and formatters.
[tool.ruff]
line-length = 120
fix = true
src = ["src"]


[tool.ruff.format]
skip-magic-trailing-comma = true

[tool.ruff.lint]
select = ["E4", "E7", "E9", "F", "I", "UP", "ASYNC"]
ignore = []

[tool.ruff.lint.isort]
known-first-party = ["galileo_core"]
split-on-trailing-comma = false

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.docformatter]
style = "numpy"
recursive = true
wrap-summaries = 120
wrap-descriptions = 120


[tool.mypy]
mypy_path = ["src"]
disallow_untyped_defs = true
plugins = ["pydantic.mypy"]

# Release.
[tool.semantic_release]
version_variables = ["galileo_observe/__init__.py:__version__"]
version_toml = ["pyproject.toml:tool.poetry.version"]
version_source = "tag"
commit_message = "chore(release): v{version}\n\nAutomatically generated by python-semantic-release"

[tool.semantic_release.commit_parser_options]
# Release patch version on these tags,
# https://python-semantic-release.readthedocs.io/en/latest/configuration.html#commit-parser-options-dict-str-any
patch_tags = ["fix", "perf", "chore", "docs", "style", "refactor"]
