# coding: utf-8

"""
    Mayanode API

    Mayanode REST API.  # noqa: E501

    OpenAPI spec version: 1.118.0
    Contact: devs@mayachain.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CACAOPoolResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pol': 'POL',
        'providers': 'CACAOPoolResponseProviders',
        'reserve': 'CACAOPoolResponseReserve'
    }

    attribute_map = {
        'pol': 'pol',
        'providers': 'providers',
        'reserve': 'reserve'
    }

    def __init__(self, pol=None, providers=None, reserve=None):  # noqa: E501
        """CACAOPoolResponse - a model defined in Swagger"""  # noqa: E501
        self._pol = None
        self._providers = None
        self._reserve = None
        self.discriminator = None
        self.pol = pol
        self.providers = providers
        self.reserve = reserve

    @property
    def pol(self):
        """Gets the pol of this CACAOPoolResponse.  # noqa: E501


        :return: The pol of this CACAOPoolResponse.  # noqa: E501
        :rtype: POL
        """
        return self._pol

    @pol.setter
    def pol(self, pol):
        """Sets the pol of this CACAOPoolResponse.


        :param pol: The pol of this CACAOPoolResponse.  # noqa: E501
        :type: POL
        """
        if pol is None:
            raise ValueError("Invalid value for `pol`, must not be `None`")  # noqa: E501

        self._pol = pol

    @property
    def providers(self):
        """Gets the providers of this CACAOPoolResponse.  # noqa: E501


        :return: The providers of this CACAOPoolResponse.  # noqa: E501
        :rtype: CACAOPoolResponseProviders
        """
        return self._providers

    @providers.setter
    def providers(self, providers):
        """Sets the providers of this CACAOPoolResponse.


        :param providers: The providers of this CACAOPoolResponse.  # noqa: E501
        :type: CACAOPoolResponseProviders
        """
        if providers is None:
            raise ValueError("Invalid value for `providers`, must not be `None`")  # noqa: E501

        self._providers = providers

    @property
    def reserve(self):
        """Gets the reserve of this CACAOPoolResponse.  # noqa: E501


        :return: The reserve of this CACAOPoolResponse.  # noqa: E501
        :rtype: CACAOPoolResponseReserve
        """
        return self._reserve

    @reserve.setter
    def reserve(self, reserve):
        """Sets the reserve of this CACAOPoolResponse.


        :param reserve: The reserve of this CACAOPoolResponse.  # noqa: E501
        :type: CACAOPoolResponseReserve
        """
        if reserve is None:
            raise ValueError("Invalid value for `reserve`, must not be `None`")  # noqa: E501

        self._reserve = reserve

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CACAOPoolResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CACAOPoolResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
