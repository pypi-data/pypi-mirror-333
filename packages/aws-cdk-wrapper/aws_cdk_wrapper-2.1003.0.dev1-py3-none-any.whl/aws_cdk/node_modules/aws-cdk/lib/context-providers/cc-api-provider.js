"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CcApiContextProviderPlugin = void 0;
const sdk_provider_1 = require("../api/aws-auth/sdk-provider");
const error_1 = require("../toolkit/error");
const util_1 = require("../util");
class CcApiContextProviderPlugin {
    constructor(aws) {
        this.aws = aws;
    }
    /**
     * This returns a data object with the value from CloudControl API result.
     * args.typeName - see https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/supported-resources.html
     * args.exactIdentifier -  use CC API getResource.
     * args.propertyMatch - use CCP API listResources to get resources and propertyMatch to search through the list.
     * args.propertiesToReturn - Properties from CC API to return.
     */
    async getValue(args) {
        const cloudControl = (await (0, sdk_provider_1.initContextProviderSdk)(this.aws, args)).cloudControl();
        const result = await this.findResources(cloudControl, args);
        return result;
    }
    async findResources(cc, args) {
        if (args.exactIdentifier && args.propertyMatch) {
            throw new error_1.ContextProviderError(`Specify either exactIdentifier or propertyMatch, but not both. Failed to find resources using CC API for type ${args.typeName}.`);
        }
        if (!args.exactIdentifier && !args.propertyMatch) {
            throw new error_1.ContextProviderError(`Neither exactIdentifier nor propertyMatch is specified. Failed to find resources using CC API for type ${args.typeName}.`);
        }
        if (args.exactIdentifier) {
            // use getResource to get the exact indentifier
            return this.getResource(cc, args.typeName, args.exactIdentifier, args.propertiesToReturn);
        }
        else {
            // use listResource
            return this.listResources(cc, args.typeName, args.propertyMatch, args.propertiesToReturn);
        }
    }
    /**
     * Calls getResource from CC API to get the resource.
     * See https://docs.aws.amazon.com/cli/latest/reference/cloudcontrol/get-resource.html
     *
     * If the exactIdentifier is not found, then an empty map is returned.
     * If the resource is found, then a map of the identifier to a map of property values is returned.
     */
    async getResource(cc, typeName, exactIdentifier, propertiesToReturn) {
        var _a, _b, _c, _d, _e;
        const resultObjs = [];
        try {
            const result = await cc.getResource({
                TypeName: typeName,
                Identifier: exactIdentifier,
            });
            const id = (_b = (_a = result.ResourceDescription) === null || _a === void 0 ? void 0 : _a.Identifier) !== null && _b !== void 0 ? _b : '';
            if (id !== '') {
                const propsObject = JSON.parse((_d = (_c = result.ResourceDescription) === null || _c === void 0 ? void 0 : _c.Properties) !== null && _d !== void 0 ? _d : '');
                const propsObj = (0, util_1.getResultObj)(propsObject, (_e = result.ResourceDescription) === null || _e === void 0 ? void 0 : _e.Identifier, propertiesToReturn);
                resultObjs.push(propsObj);
            }
            else {
                throw new error_1.ContextProviderError(`Could not get resource ${exactIdentifier}.`);
            }
        }
        catch (err) {
            throw new error_1.ContextProviderError(`Encountered CC API error while getting resource ${exactIdentifier}. Error: ${err}`);
        }
        return resultObjs;
    }
    /**
     * Calls listResources from CC API to get the resources and apply args.propertyMatch to find the resources.
     * See https://docs.aws.amazon.com/cli/latest/reference/cloudcontrol/list-resources.html
     *
     * Since exactIdentifier is not specified, propertyMatch must be specified.
     * This returns an object where the ids are object keys and values are objects with keys of args.propertiesToReturn.
     */
    async listResources(cc, typeName, propertyMatch, propertiesToReturn) {
        var _a;
        const resultObjs = [];
        try {
            const result = await cc.listResources({
                TypeName: typeName,
            });
            (_a = result.ResourceDescriptions) === null || _a === void 0 ? void 0 : _a.forEach((resource) => {
                var _a, _b;
                const id = (_a = resource.Identifier) !== null && _a !== void 0 ? _a : '';
                if (id !== '') {
                    const propsObject = JSON.parse((_b = resource.Properties) !== null && _b !== void 0 ? _b : '');
                    const filters = Object.entries(propertyMatch);
                    let match = false;
                    if (filters) {
                        match = filters.every((record, _index, _arr) => {
                            const key = record[0];
                            const expected = record[1];
                            const actual = (0, util_1.findJsonValue)(propsObject, key);
                            return propertyMatchesFilter(actual, expected);
                        });
                        function propertyMatchesFilter(actual, expected) {
                            // For now we just check for strict equality, but we can implement pattern matching and fuzzy matching here later
                            return expected === actual;
                        }
                    }
                    if (match) {
                        const propsObj = (0, util_1.getResultObj)(propsObject, resource.Identifier, propertiesToReturn);
                        resultObjs.push(propsObj);
                    }
                }
            });
        }
        catch (err) {
            throw new error_1.ContextProviderError(`Could not get resources ${JSON.stringify(propertyMatch)}. Error: ${err}`);
        }
        return resultObjs;
    }
}
exports.CcApiContextProviderPlugin = CcApiContextProviderPlugin;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2MtYXBpLXByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2MtYXBpLXByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVBLCtEQUF3RjtBQUV4Riw0Q0FBd0Q7QUFDeEQsa0NBQXNEO0FBRXRELE1BQWEsMEJBQTBCO0lBQ3JDLFlBQTZCLEdBQWdCO1FBQWhCLFFBQUcsR0FBSCxHQUFHLENBQWE7SUFDN0MsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNJLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBdUI7UUFDM0MsTUFBTSxZQUFZLEdBQUcsQ0FBQyxNQUFNLElBQUEscUNBQXNCLEVBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBRW5GLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDNUQsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVPLEtBQUssQ0FBQyxhQUFhLENBQUMsRUFBdUIsRUFBRSxJQUF1QjtRQUMxRSxJQUFJLElBQUksQ0FBQyxlQUFlLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1lBQy9DLE1BQU0sSUFBSSw0QkFBb0IsQ0FBQyxpSEFBaUgsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7UUFDcEssQ0FBQztRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1lBQ2pELE1BQU0sSUFBSSw0QkFBb0IsQ0FBQywwR0FBMEcsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7UUFDN0osQ0FBQztRQUVELElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1lBQ3pCLCtDQUErQztZQUMvQyxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxRQUFRLEVB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QUFBLG9CQUFhLEVBQUMsV0FBVyxFQUFFLEdBQUcsQ0FBQyxDQUFDOzRCQUMvQyxPQUFPLHFCQUFxQixDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQzt3QkFDakQsQ0FBQyxDQUFDLENBQUM7d0JBRUgsU0FBUyxxQkFBcUIsQ0FBQyxNQUFXLEVBQUUsUUFBaUI7NEJBQzNELGlIQUFpSDs0QkFDakgsT0FBTyxRQUFRLEtBQUssTUFBTSxDQUFDO3dCQUM3QixDQUFDO29CQUNILENBQUM7b0JBRUQsSUFBSSxLQUFLLEVBQUUsQ0FBQzt3QkFDVixNQUFNLFFBQVEsR0FBRyxJQUFBLG1CQUFZLEVBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxVQUFXLEVBQUUsa0JBQWtCLENBQUMsQ0FBQzt3QkFDckYsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztvQkFDNUIsQ0FBQztnQkFDSCxDQUFDO1lBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDO1FBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztZQUNiLE1BQU0sSUFBSSw0QkFBb0IsQ0FBQywyQkFBMkIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQzVHLENBQUM7UUFDRCxPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDO0NBQ0Y7QUF2SEQsZ0VBdUhDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBDY0FwaUNvbnRleHRRdWVyeSB9IGZyb20gJ0Bhd3MtY2RrL2Nsb3VkLWFzc2VtYmx5LXNjaGVtYSc7XG5pbXBvcnQgeyBJQ2xvdWRDb250cm9sQ2xpZW50IH0gZnJvbSAnLi4vYXBpJztcbmltcG9ydCB7IHR5cGUgU2RrUHJvdmlkZXIsIGluaXRDb250ZXh0UHJvdmlkZXJTZGsgfSBmcm9tICcuLi9hcGkvYXdzLWF1dGgvc2RrLXByb3ZpZGVyJztcbmltcG9ydCB7IENvbnRleHRQcm92aWRlclBsdWdpbiB9IGZyb20gJy4uL2FwaS9wbHVnaW4nO1xuaW1wb3J0IHsgQ29udGV4dFByb3ZpZGVyRXJyb3IgfSBmcm9tICcuLi90b29sa2l0L2Vycm9yJztcbmltcG9ydCB7IGZpbmRKc29uVmFsdWUsIGdldFJlc3VsdE9iaiB9IGZyb20gJy4uL3V0aWwnO1xuXG5leHBvcnQgY2xhc3MgQ2NBcGlDb250ZXh0UHJvdmlkZXJQbHVnaW4gaW1wbGVtZW50cyBDb250ZXh0UHJvdmlkZXJQbHVnaW4ge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGF3czogU2RrUHJvdmlkZXIpIHtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIHJldHVybnMgYSBkYXRhIG9iamVjdCB3aXRoIHRoZSB2YWx1ZSBmcm9tIENsb3VkQ29udHJvbCBBUEkgcmVzdWx0LlxuICAgKiBhcmdzLnR5cGVOYW1lIC0gc2VlIGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9jbG91ZGNvbnRyb2xhcGkvbGF0ZXN0L3VzZXJndWlkZS9zdXBwb3J0ZWQtcmVzb3VyY2VzLmh0bWxcbiAgICogYXJncy5leGFjdElkZW50aWZpZXIgLSAgdXNlIENDIEFQSSBnZXRSZXNvdXJjZS5cbiAgICogYXJncy5wcm9wZXJ0eU1hdGNoIC0gdXNlIENDUCBBUEkgbGlzdFJlc291cmNlcyB0byBnZXQgcmVzb3VyY2VzIGFuZCBwcm9wZXJ0eU1hdGNoIHRvIHNlYXJjaCB0aHJvdWdoIHRoZSBsaXN0LlxuICAgKiBhcmdzLnByb3BlcnRpZXNUb1JldHVybiAtIFByb3BlcnRpZXMgZnJvbSBDQyBBUEkgdG8gcmV0dXJuLlxuICAgKi9cbiAgcHVibGljIGFzeW5jIGdldFZhbHVlKGFyZ3M6IENjQXBpQ29udGV4dFF1ZXJ5KSB7XG4gICAgY29uc3QgY2xvdWRDb250cm9sID0gKGF3YWl0IGluaXRDb250ZXh0UHJvdmlkZXJTZGsodGhpcy5hd3MsIGFyZ3MpKS5jbG91ZENvbnRyb2woKTtcblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuZmluZFJlc291cmNlcyhjbG91ZENvbnRyb2wsIGFyZ3MpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGZpbmRSZXNvdXJjZXMoY2M6IElDbG91ZENvbnRyb2xDbGllbnQsIGFyZ3M6IENjQXBpQ29udGV4dFF1ZXJ5KTogUHJvbWlzZTx7W2tleTogc3RyaW5nXTogYW55fSBbXT4ge1xuICAgIGlmIChhcmdzLmV4YWN0SWRlbnRpZmllciAmJiBhcmdzLnByb3BlcnR5TWF0Y2gpIHtcbiAgICAgIHRocm93IG5ldyBDb250ZXh0UHJvdmlkZXJFcnJvcihgU3BlY2lmeSBlaXRoZXIgZXhhY3RJZGVudGlmaWVyIG9yIHByb3BlcnR5TWF0Y2gsIGJ1dCBub3QgYm90aC4gRmFpbGVkIHRvIGZpbmQgcmVzb3VyY2VzIHVzaW5nIENDIEFQSSBmb3IgdHlwZSAke2FyZ3MudHlwZU5hbWV9LmApO1xuICAgIH1cbiAgICBpZiAoIWFyZ3MuZXhhY3RJZGVudGlmaWVyICYmICFhcmdzLnByb3BlcnR5TWF0Y2gpIHtcbiAgICAgIHRocm93IG5ldyBDb250ZXh0UHJvdmlkZXJFcnJvcihgTmVpdGhlciBleGFjdElkZW50aWZpZXIgbm9yIHByb3BlcnR5TWF0Y2ggaXMgc3BlY2lmaWVkLiBGYWlsZWQgdG8gZmluZCByZXNvdXJjZXMgdXNpbmcgQ0MgQVBJIGZvciB0eXBlICR7YXJncy50eXBlTmFtZX0uYCk7XG4gICAgfVxuXG4gICAgaWYgKGFyZ3MuZXhhY3RJZGVudGlmaWVyKSB7XG4gICAgICAvLyB1c2UgZ2V0UmVzb3VyY2UgdG8gZ2V0IHRoZSBleGFjdCBpbmRlbnRpZmllclxuICAgICAgcmV0dXJuIHRoaXMuZ2V0UmVzb3VyY2UoY2MsIGFyZ3MudHlwZU5hbWUsIGFyZ3MuZXhhY3RJZGVudGlmaWVyLCBhcmdzLnByb3BlcnRpZXNUb1JldHVybik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHVzZSBsaXN0UmVzb3VyY2VcbiAgICAgIHJldHVybiB0aGlzLmxpc3RSZXNvdXJjZXMoY2MsIGFyZ3MudHlwZU5hbWUsIGFyZ3MucHJvcGVydHlNYXRjaCEsIGFyZ3MucHJvcGVydGllc1RvUmV0dXJuKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2FsbHMgZ2V0UmVzb3VyY2UgZnJvbSBDQyBBUEkgdG8gZ2V0IHRoZSByZXNvdXJjZS5cbiAgICogU2VlIGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9jbGkvbGF0ZXN0L3JlZmVyZW5jZS9jbG91ZGNvbnRyb2wvZ2V0LXJlc291cmNlLmh0bWxcbiAgICpcbiAgICogSWYgdGhlIGV4YWN0SWRlbnRpZmllciBpcyBub3QgZm91bmQsIHRoZW4gYW4gZW1wdHkgbWFwIGlzIHJldHVybmVkLlxuICAgKiBJZiB0aGUgcmVzb3VyY2UgaXMgZm91bmQsIHRoZW4gYSBtYXAgb2YgdGhlIGlkZW50aWZpZXIgdG8gYSBtYXAgb2YgcHJvcGVydHkgdmFsdWVzIGlzIHJldHVybmVkLlxuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBnZXRSZXNvdXJjZShcbiAgICBjYzogSUNsb3VkQ29udHJvbENsaWVudCxcbiAgICB0eXBlTmFtZTogc3RyaW5nLFxuICAgIGV4YWN0SWRlbnRpZmllcjogc3RyaW5nLFxuICAgIHByb3BlcnRpZXNUb1JldHVybjogc3RyaW5nW10sXG4gICk6IFByb21pc2U8e1trZXk6IHN0cmluZ106IGFueX1bXT4ge1xuICAgIGNvbnN0IHJlc3VsdE9ianM6IHtba2V5OiBzdHJpbmddOiBhbnl9W10gPSBbXTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY2MuZ2V0UmVzb3VyY2Uoe1xuICAgICAgICBUeXBlTmFtZTogdHlwZU5hbWUsXG4gICAgICAgIElkZW50aWZpZXI6IGV4YWN0SWRlbnRpZmllcixcbiAgICAgIH0pO1xuICAgICAgY29uc3QgaWQgPSByZXN1bHQuUmVzb3VyY2VEZXNjcmlwdGlvbj8uSWRlbnRpZmllciA/PyAnJztcbiAgICAgIGlmIChpZCAhPT0gJycpIHtcbiAgICAgICAgY29uc3QgcHJvcHNPYmplY3QgPSBKU09OLnBhcnNlKHJlc3VsdC5SZXNvdXJjZURlc2NyaXB0aW9uPy5Qcm9wZXJ0aWVzID8/ICcnKTtcbiAgICAgICAgY29uc3QgcHJvcHNPYmogPSBnZXRSZXN1bHRPYmoocHJvcHNPYmplY3QsIHJlc3VsdC5SZXNvdXJjZURlc2NyaXB0aW9uPy5JZGVudGlmaWVyISwgcHJvcGVydGllc1RvUmV0dXJuKTtcbiAgICAgICAgcmVzdWx0T2Jqcy5wdXNoKHByb3BzT2JqKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBDb250ZXh0UHJvdmlkZXJFcnJvcihgQ291bGQgbm90IGdldCByZXNvdXJjZSAke2V4YWN0SWRlbnRpZmllcn0uYCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICB0aHJvdyBuZXcgQ29udGV4dFByb3ZpZGVyRXJyb3IoYEVuY291bnRlcmVkIENDIEFQSSBlcnJvciB3aGlsZSBnZXR0aW5nIHJlc291cmNlICR7ZXhhY3RJZGVudGlmaWVyfS4gRXJyb3I6ICR7ZXJyfWApO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0T2JqcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxscyBsaXN0UmVzb3VyY2VzIGZyb20gQ0MgQVBJIHRvIGdldCB0aGUgcmVzb3VyY2VzIGFuZCBhcHBseSBhcmdzLnByb3BlcnR5TWF0Y2ggdG8gZmluZCB0aGUgcmVzb3VyY2VzLlxuICAgKiBTZWUgaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2NsaS9sYXRlc3QvcmVmZXJlbmNlL2Nsb3VkY29udHJvbC9saXN0LXJlc291cmNlcy5odG1sXG4gICAqXG4gICAqIFNpbmNlIGV4YWN0SWRlbnRpZmllciBpcyBub3Qgc3BlY2lmaWVkLCBwcm9wZXJ0eU1hdGNoIG11c3QgYmUgc3BlY2lmaWVkLlxuICAgKiBUaGlzIHJldHVybnMgYW4gb2JqZWN0IHdoZXJlIHRoZSBpZHMgYXJlIG9iamVjdCBrZXlzIGFuZCB2YWx1ZXMgYXJlIG9iamVjdHMgd2l0aCBrZXlzIG9mIGFyZ3MucHJvcGVydGllc1RvUmV0dXJuLlxuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBsaXN0UmVzb3VyY2VzKFxuICAgIGNjOiBJQ2xvdWRDb250cm9sQ2xpZW50LFxuICAgIHR5cGVOYW1lOiBzdHJpbmcsXG4gICAgcHJvcGVydHlNYXRjaDogUmVjb3JkPHN0cmluZywgdW5rbm93bj4sXG4gICAgcHJvcGVydGllc1RvUmV0dXJuOiBzdHJpbmdbXSxcbiAgKTogUHJvbWlzZTx7W2tleTogc3RyaW5nXTogYW55fVtdPiB7XG4gICAgY29uc3QgcmVzdWx0T2Jqczoge1trZXk6IHN0cmluZ106IGFueX1bXSA9IFtdO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNjLmxpc3RSZXNvdXJjZXMoe1xuICAgICAgICBUeXBlTmFtZTogdHlwZU5hbWUsXG4gICAgICB9KTtcbiAgICAgIHJlc3VsdC5SZXNvdXJjZURlc2NyaXB0aW9ucz8uZm9yRWFjaCgocmVzb3VyY2UpID0+IHtcbiAgICAgICAgY29uc3QgaWQgPSByZXNvdXJjZS5JZGVudGlmaWVyID8/ICcnO1xuICAgICAgICBpZiAoaWQgIT09ICcnKSB7XG4gICAgICAgICAgY29uc3QgcHJvcHNPYmplY3QgPSBKU09OLnBhcnNlKHJlc291cmNlLlByb3BlcnRpZXMgPz8gJycpO1xuXG4gICAgICAgICAgY29uc3QgZmlsdGVycyA9IE9iamVjdC5lbnRyaWVzKHByb3BlcnR5TWF0Y2gpO1xuICAgICAgICAgIGxldCBtYXRjaCA9IGZhbHNlO1xuICAgICAgICAgIGlmIChmaWx0ZXJzKSB7XG4gICAgICAgICAgICBtYXRjaCA9IGZpbHRlcnMuZXZlcnkoKHJlY29yZCwgX2luZGV4LCBfYXJyKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IGtleSA9IHJlY29yZFswXTtcbiAgICAgICAgICAgICAgY29uc3QgZXhwZWN0ZWQgPSByZWNvcmRbMV07XG4gICAgICAgICAgICAgIGNvbnN0IGFjdHVhbCA9IGZpbmRKc29uVmFsdWUocHJvcHNPYmplY3QsIGtleSk7XG4gICAgICAgICAgICAgIHJldHVybiBwcm9wZXJ0eU1hdGNoZXNGaWx0ZXIoYWN0dWFsLCBleHBlY3RlZCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gcHJvcGVydHlNYXRjaGVzRmlsdGVyKGFjdHVhbDogYW55LCBleHBlY3RlZDogdW5rbm93bikge1xuICAgICAgICAgICAgICAvLyBGb3Igbm93IHdlIGp1c3QgY2hlY2sgZm9yIHN0cmljdCBlcXVhbGl0eSwgYnV0IHdlIGNhbiBpbXBsZW1lbnQgcGF0dGVybiBtYXRjaGluZyBhbmQgZnV6enkgbWF0Y2hpbmcgaGVyZSBsYXRlclxuICAgICAgICAgICAgICByZXR1cm4gZXhwZWN0ZWQgPT09IGFjdHVhbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIGNvbnN0IHByb3BzT2JqID0gZ2V0UmVzdWx0T2JqKHByb3BzT2JqZWN0LCByZXNvdXJjZS5JZGVudGlmaWVyISwgcHJvcGVydGllc1RvUmV0dXJuKTtcbiAgICAgICAgICAgIHJlc3VsdE9ianMucHVzaChwcm9wc09iaik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHRocm93IG5ldyBDb250ZXh0UHJvdmlkZXJFcnJvcihgQ291bGQgbm90IGdldCByZXNvdXJjZXMgJHtKU09OLnN0cmluZ2lmeShwcm9wZXJ0eU1hdGNoKX0uIEVycm9yOiAke2Vycn1gKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdE9ianM7XG4gIH1cbn1cbiJdfQ==