"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequireApproval = void 0;
exports.printStackDiff = printStackDiff;
exports.printSecurityDiff = printSecurityDiff;
const util_1 = require("util");
const cxschema = require("@aws-cdk/cloud-assembly-schema");
const cloudformation_diff_1 = require("@aws-cdk/cloudformation-diff");
const chalk = require("chalk");
const logging_1 = require("./logging");
const error_1 = require("./toolkit/error");
/**
 * Pretty-prints the differences between two template states to the console.
 *
 * @param oldTemplate the old/current state of the stack.
 * @param newTemplate the new/target state of the stack.
 * @param strict      do not filter out AWS::CDK::Metadata or Rules
 * @param context     lines of context to use in arbitrary JSON diff
 * @param quiet       silences \'There were no differences\' messages
 *
 * @returns the number of stacks in this stack tree that have differences, including the top-level root stack
 */
function printStackDiff(oldTemplate, newTemplate, strict, context, quiet, stackName, changeSet, isImport, stream = process.stderr, nestedStackTemplates) {
    var _a;
    let diff = (0, cloudformation_diff_1.fullDiff)(oldTemplate, newTemplate.template, changeSet, isImport);
    // must output the stack name if there are differences, even if quiet
    if (stackName && (!quiet || !diff.isEmpty)) {
        stream.write((0, util_1.format)('Stack %s\n', chalk.bold(stackName)));
    }
    if (!quiet && isImport) {
        stream.write('Parameters and rules created during migration do not affect resource configuration.\n');
    }
    // detect and filter out mangled characters from the diff
    let filteredChangesCount = 0;
    if (diff.differenceCount && !strict) {
        const mangledNewTemplate = JSON.parse((0, cloudformation_diff_1.mangleLikeCloudFormation)(JSON.stringify(newTemplate.template)));
        const mangledDiff = (0, cloudformation_diff_1.fullDiff)(oldTemplate, mangledNewTemplate, changeSet);
        filteredChangesCount = Math.max(0, diff.differenceCount - mangledDiff.differenceCount);
        if (filteredChangesCount > 0) {
            diff = mangledDiff;
        }
    }
    // filter out 'AWS::CDK::Metadata' resources from the template
    // filter out 'CheckBootstrapVersion' rules from the template
    if (!strict) {
        obscureDiff(diff);
    }
    let stackDiffCount = 0;
    if (!diff.isEmpty) {
        stackDiffCount++;
        (0, cloudformation_diff_1.formatDifferences)(stream, diff, {
            ...logicalIdMapFromTemplate(oldTemplate),
            ...buildLogicalToPathMap(newTemplate),
        }, context);
    }
    else if (!quiet) {
        (0, logging_1.info)(chalk.green('There were no differences'));
    }
    if (filteredChangesCount > 0) {
        (0, logging_1.info)(chalk.yellow(`Omitted ${filteredChangesCount} changes because they are likely mangled non-ASCII characters. Use --strict to print them.`));
    }
    for (const nestedStackLogicalId of Object.keys(nestedStackTemplates !== null && nestedStackTemplates !== void 0 ? nestedStackTemplates : {})) {
        if (!nestedStackTemplates) {
            break;
        }
        const nestedStack = nestedStackTemplates[nestedStackLogicalId];
        newTemplate._template = nestedStack.generatedTemplate;
        stackDiffCount += printStackDiff(nestedStack.deployedTemplate, newTemplate, strict, context, quiet, (_a = nestedStack.physicalName) !== null && _a !== void 0 ? _a : nestedStackLogicalId, undefined, isImport, stream, nestedStack.nestedStackTemplates);
    }
    return stackDiffCount;
}
var RequireApproval;
(function (RequireApproval) {
    RequireApproval["Never"] = "never";
    RequireApproval["AnyChange"] = "any-change";
    RequireApproval["Broadening"] = "broadening";
})(RequireApproval || (exports.RequireApproval = RequireApproval = {}));
/**
 * Print the security changes of this diff, if the change is impactful enough according to the approval level
 *
 * Returns true if the changes are prompt-worthy, false otherwise.
 */
function printSecurityDiff(oldTemplate, newTemplate, requireApproval, _quiet, stackName, changeSet, stream = process.stderr) {
    const diff = (0, cloudformation_diff_1.fullDiff)(oldTemplate, newTemplate.template, changeSet);
    if (diffRequiresApproval(diff, requireApproval)) {
        stream.write((0, util_1.format)('Stack %s\n', chalk.bold(stackName)));
        // eslint-disable-next-line max-len
        (0, logging_1.warning)(`This deployment will make potentially sensitive changes according to your current security approval level (--require-approval ${requireApproval}).`);
        (0, logging_1.warning)('Please confirm you intend to make the following modifications:\n');
        (0, cloudformation_diff_1.formatSecurityChanges)(process.stdout, diff, buildLogicalToPathMap(newTemplate));
        return true;
    }
    return false;
}
/**
 * Return whether the diff has security-impacting changes that need confirmation
 *
 * TODO: Filter the security impact determination based off of an enum that allows
 * us to pick minimum "severities" to alert on.
 */
function diffRequiresApproval(diff, requireApproval) {
    switch (requireApproval) {
        case RequireApproval.Never: return false;
        case RequireApproval.AnyChange: return diff.permissionsAnyChanges;
        case RequireApproval.Broadening: return diff.permissionsBroadened;
        default: throw new error_1.ToolkitError(`Unrecognized approval level: ${requireApproval}`);
    }
}
function buildLogicalToPathMap(stack) {
    const map = {};
    for (const md of stack.findMetadataByType(cxschema.ArtifactMetadataEntryType.LOGICAL_ID)) {
        map[md.data] = md.path;
    }
    return map;
}
function logicalIdMapFromTemplate(template) {
    var _a, _b;
    const ret = {};
    for (const [logicalId, resource] of Object.entries((_a = template.Resources) !== null && _a !== void 0 ? _a : {})) {
        const path = (_b = resource === null || resource === void 0 ? void 0 : resource.Metadata) === null || _b === void 0 ? void 0 : _b['aws:cdk:path'];
        if (path) {
            ret[logicalId] = path;
        }
    }
    return ret;
}
/**
 * Remove any template elements that we don't want to show users.
 * This is currently:
 * - AWS::CDK::Metadata resource
 * - CheckBootstrapVersion Rule
 */
function obscureDiff(diff) {
    if (diff.unknown) {
        // see https://github.com/aws/aws-cdk/issues/17942
        diff.unknown = diff.unknown.filter(change => {
            var _a, _b;
            if (!change) {
                return true;
            }
            if ((_a = change.newValue) === null || _a === void 0 ? void 0 : _a.CheckBootstrapVersion) {
                return false;
            }
            if ((_b = change.oldValue) === null || _b === void 0 ? void 0 : _b.CheckBootstrapVersion) {
                return false;
            }
            return true;
        });
    }
    if (diff.resources) {
        diff.resources = diff.resources.filter(change => {
            if (!change) {
                return true;
            }
            if (change.newResourceType === 'AWS::CDK::Metadata') {
                return false;
            }
            if (change.oldResourceType === 'AWS::CDK::Metadata') {
                return false;
            }
            return true;
        });
    }
}
//# sourceMappingURL=data:application/json;base64,