"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Deployments = void 0;
const crypto_1 = require("crypto");
const cdk_assets = require("cdk-assets");
const chalk = require("chalk");
const asset_manifest_builder_1 = require("./asset-manifest-builder");
const asset_publishing_1 = require("./asset-publishing");
const checks_1 = require("./checks");
const cloudformation_1 = require("./cloudformation");
const deploy_stack_1 = require("./deploy-stack");
const nested_stack_helpers_1 = require("./nested-stack-helpers");
const messages_1 = require("../../cli/messages");
const error_1 = require("../../toolkit/error");
const util_1 = require("../../util");
const environment_1 = require("../environment");
const stack_events_1 = require("../stack-events");
const toolkit_info_1 = require("../toolkit-info");
const template_body_parameter_1 = require("../util/template-body-parameter");
const BOOTSTRAP_STACK_VERSION_FOR_ROLLBACK = 23;
/**
 * Scope for a single set of deployments from a set of Cloud Assembly Artifacts
 *
 * Manages lookup of SDKs, Bootstrap stacks, etc.
 */
class Deployments {
    constructor(props) {
        var _a;
        this.props = props;
        this.publisherCache = new Map();
        this.assetSdkProvider = props.sdkProvider;
        this.deployStackSdkProvider = props.sdkProvider;
        this.ioHost = props.ioHost;
        this.action = props.action;
        this.envs = new environment_1.EnvironmentAccess(props.sdkProvider, (_a = props.toolkitStackName) !== null && _a !== void 0 ? _a : toolkit_info_1.DEFAULT_TOOLKIT_STACK_NAME, { ioHost: this.ioHost, action: this.action });
    }
    /**
     * Resolves the environment for a stack.
     */
    async resolveEnvironment(stack) {
        return this.envs.resolveStackEnvironment(stack);
    }
    async readCurrentTemplateWithNestedStacks(rootStackArtifact, retrieveProcessedTemplate = false) {
        const env = await this.envs.accessStackForLookupBestEffort(rootStackArtifact);
        return (0, nested_stack_helpers_1.loadCurrentTemplateWithNestedStacks)(rootStackArtifact, env.sdk, retrieveProcessedTemplate);
    }
    async readCurrentTemplate(stackArtifact) {
        await this.ioHost.notify((0, messages_1.debug)(this.action, `Reading existing template for stack ${stackArtifact.displayName}.`));
        const env = await this.envs.accessStackForLookupBestEffort(stackArtifact);
        return (0, nested_stack_helpers_1.loadCurrentTemplate)(stackArtifact, env.sdk);
    }
    async resourceIdentifierSummaries(stackArtifact) {
        var _a;
        await this.ioHost.notify((0, messages_1.debug)(this.action, `Retrieving template summary for stack ${stackArtifact.displayName}.`));
        // Currently, needs to use `deploy-role` since it may need to read templates in the staging
        // bucket which have been encrypted with a KMS key (and lookup-role may not read encrypted things)
        const env = await this.envs.accessStackForReadOnlyStackOperations(stackArtifact);
        const cfn = env.sdk.cloudFormation();
        await (0, cloudformation_1.uploadStackTemplateAssets)(stackArtifact, this);
        // Upload the template, if necessary, before passing it to CFN
        const builder = new asset_manifest_builder_1.AssetManifestBuilder();
        const cfnParam = await (0, template_body_parameter_1.makeBodyParameter)(stackArtifact, env.resolvedEnvironment, builder, env.resources);
        // If the `makeBodyParameter` before this added assets, make sure to publish them before
        // calling the API.
        const addedAssets = builder.toManifest(stackArtifact.assembly.directory);
        for (const entry of addedAssets.entries) {
            await this.buildSingleAsset('no-version-validation', addedAssets, entry, {
                stack: stackArtifact,
            });
            await this.publishSingleAsset(addedAssets, entry, {
                stack: stackArtifact,
            });
        }
        const response = await cfn.getTemplateSummary(cfnParam);
        if (!response.ResourceIdentifierSummaries) {
            await this.ioHost.notify((0, messages_1.debug)(this.action, 'GetTemplateSummary API call did not return "ResourceIdentifierSummaries"'));
        }
        return (_a = response.ResourceIdentifierSummaries) !== null && _a !== void 0 ? _a : [];
    }
    async deployStack(options) {
        var _a;
        let deploymentMethod = options.deploymentMethod;
        if (options.changeSetName || options.execute !== undefined) {
            if (deploymentMethod) {
                throw new error_1.ToolkitError("You cannot supply both 'deploymentMethod' and 'changeSetName/execute'. Supply one or the other.");
            }
            deploymentMethod = {
                method: 'change-set',
                changeSetName: options.changeSetName,
                execute: options.execute,
            };
        }
        const env = await this.envs.accessStackForMutableStackOperations(options.stack);
        // Do a verification of the bootstrap stack version
        await this.validateBootstrapStackVersion(options.stack.stackName, options.stack.requiresBootstrapStackVersion, options.stack.bootstrapStackVersionSsmParameter, env.resources);
        const executionRoleArn = await env.replacePlaceholders((_a = options.roleArn) !== null && _a !== void 0 ? _a : options.stack.cloudFormationExecutionRoleArn);
        return (0, deploy_stack_1.deployStack)({
            stack: options.stack,
            resolvedEnvironment: env.resolvedEnvironment,
            deployName: options.deployName,
            notificationArns: options.notificationArns,
            sdk: env.sdk,
            sdkProvider: this.deployStackSdkProvider,
            roleArn: executionRoleArn,
            reuseAssets: options.reuseAssets,
            envResources: env.resources,
            tags: options.tags,
            deploymentMethod,
            force: options.force,
            parameters: options.parameters,
            usePreviousParameters: options.usePreviousParameters,
            rollback: options.rollback,
            hotswap: options.hotswap,
            hotswapPropertyOverrides: options.hotswapPropertyOverrides,
            extraUserAgent: options.extraUserAgent,
            resourcesToImport: options.resourcesToImport,
            overrideTemplate: options.overrideTemplate,
            assetParallelism: options.assetParallelism,
        }, { ioHost: this.ioHost, action: this.action });
    }
    async rollbackStack(options) {
        var _a, _b, _c;
        let resourcesToSkip = (_a = options.orphanLogicalIds) !== null && _a !== void 0 ? _a : [];
        if (options.force && resourcesToSkip.length > 0) {
            throw new error_1.ToolkitError('Cannot combine --force with --orphan');
        }
        const env = await this.envs.accessStackForMutableStackOperations(options.stack);
        if ((_b = options.validateBootstrapStackVersion) !== null && _b !== void 0 ? _b : true) {
            // Do a verification of the bootstrap stack version
            await this.validateBootstrapStackVersion(options.stack.stackName, BOOTSTRAP_STACK_VERSION_FOR_ROLLBACK, options.stack.bootstrapStackVersionSsmParameter, env.resources);
        }
        const cfn = env.sdk.cloudFormation();
        const deployName = options.stack.stackName;
        // We loop in case of `--force` and the stack ends up in `CONTINUE_UPDATE_ROLLBACK`.
        let maxLoops = 10;
        while (maxLoops--) {
            let cloudFormationStack = await cloudformation_1.CloudFormationStack.lookup(cfn, deployName);
            const executionRoleArn = await env.replacePlaceholders((_c = options.roleArn) !== null && _c !== void 0 ? _c : options.stack.cloudFormationExecutionRoleArn);
            switch (cloudFormationStack.stackStatus.rollbackChoice) {
                case stack_events_1.RollbackChoice.NONE:
                    await this.ioHost.notify((0, messages_1.warn)(this.action, `Stack ${deployName} does not need a rollback: ${cloudFormationStack.stackStatus}`));
                    return { notInRollbackableState: true };
                case stack_events_1.RollbackChoice.START_ROLLBACK:
                    await this.ioHost.notify((0, messages_1.debug)(this.action, `Initiating rollback of stack ${deployName}`));
                    await cfn.rollbackStack({
                        StackName: deployName,
                        RoleARN: executionRoleArn,
                        ClientRequestToken: (0, crypto_1.randomUUID)(),
                        // Enabling this is just the better overall default, the only reason it isn't the upstream default is backwards compatibility
                        RetainExceptOnCreate: true,
                    });
                    break;
                case stack_events_1.RollbackChoice.CONTINUE_UPDATE_ROLLBACK:
                    if (options.force) {
                        // Find the failed resources from the deployment and automatically skip them
                        // (Using deployment log because we definitely have `DescribeStackEvents` permissions, and we might not have
                        // `DescribeStackResources` permissions).
                        const poller = new stack_events_1.StackEventPoller(cfn, {
                            stackName: deployName,
                            stackStatuses: ['ROLLBACK_IN_PROGRESS', 'UPDATE_ROLLBACK_IN_PROGRESS'],
                        });
                        await poller.poll();
                        resourcesToSkip = poller.resourceErrors
                            .filter((r) => !r.isStackEvent && r.parentStackLogicalIds.length === 0)
                            .map((r) => { var _a; return (_a = r.event.LogicalResourceId) !== null && _a !== void 0 ? _a : ''; });
                    }
                    const skipDescription = resourcesToSkip.length > 0 ? ` (orphaning: ${resourcesToSkip.join(', ')})` : '';
                    await this.ioHost.notify((0, messages_1.warn)(this.action, `Continuing rollback of stack ${deployName}${skipDescription}`));
                    await cfn.continueUpdateRollback({
                        StackName: deployName,
                        ClientRequestToken: (0, crypto_1.randomUUID)(),
                        RoleARN: executionRoleArn,
                        ResourcesToSkip: resourcesToSkip,
                    });
                    break;
                case stack_events_1.RollbackChoice.ROLLBACK_FAILED:
                    await this.ioHost.notify((0, messages_1.warn)(this.action, `Stack ${deployName} failed creation and rollback. This state cannot be rolled back. You can recreate this stack by running 'cdk deploy'.`));
                    return { notInRollbackableState: true };
                default:
                    throw new error_1.ToolkitError(`Unexpected rollback choice: ${cloudFormationStack.stackStatus.rollbackChoice}`);
            }
            const monitor = new stack_events_1.StackActivityMonitor({
                cfn,
                stack: options.stack,
                stackName: deployName,
                ioHost: this.ioHost,
                action: this.action,
            });
            await monitor.start();
            let stackErrorMessage = undefined;
            let finalStackState = cloudFormationStack;
            try {
                const successStack = await (0, cloudformation_1.stabilizeStack)(cfn, { ioHost: this.ioHost, action: this.action }, deployName);
                // This shouldn't really happen, but catch it anyway. You never know.
                if (!successStack) {
                    throw new error_1.ToolkitError('Stack deploy failed (the stack disappeared while we were rolling it back)');
                }
                finalStackState = successStack;
                const errors = monitor.errors.join(', ');
                if (errors) {
                    stackErrorMessage = errors;
                }
            }
            catch (e) {
                stackErrorMessage = suffixWithErrors((0, util_1.formatErrorMessage)(e), monitor.errors);
            }
            finally {
                await monitor.stop();
            }
            if (finalStackState.stackStatus.isRollbackSuccess || !stackErrorMessage) {
                return { success: true };
            }
            // Either we need to ignore some resources to continue the rollback, or something went wrong
            if (finalStackState.stackStatus.rollbackChoice === stack_events_1.RollbackChoice.CONTINUE_UPDATE_ROLLBACK && options.force) {
                // Do another loop-de-loop
                continue;
            }
            throw new error_1.ToolkitError(`${stackErrorMessage} (fix problem and retry, or orphan these resources using --orphan or --force)`);
        }
        throw new error_1.ToolkitError("Rollback did not finish after a large number of iterations; stopping because it looks like we're not making progress anymore. You can retry if rollback was progressing as expected.");
    }
    async destroyStack(options) {
        var _a;
        const env = await this.envs.accessStackForMutableStackOperations(options.stack);
        const executionRoleArn = await env.replacePlaceholders((_a = options.roleArn) !== null && _a !== void 0 ? _a : options.stack.cloudFormationExecutionRoleArn);
        return (0, deploy_stack_1.destroyStack)({
            sdk: env.sdk,
            roleArn: executionRoleArn,
            stack: options.stack,
            deployName: options.deployName,
        }, { ioHost: this.ioHost, action: this.action });
    }
    async stackExists(options) {
        var _a;
        let env;
        if (options.tryLookupRole) {
            env = await this.envs.accessStackForLookupBestEffort(options.stack);
        }
        else {
            env = await this.envs.accessStackForReadOnlyStackOperations(options.stack);
        }
        const stack = await cloudformation_1.CloudFormationStack.lookup(env.sdk.cloudFormation(), (_a = options.deployName) !== null && _a !== void 0 ? _a : options.stack.stackName);
        return stack.exists;
    }
    /**
     * Build a single asset from an asset manifest
     *
     * If an assert manifest artifact is given, the bootstrap stack version
     * will be validated according to the constraints in that manifest artifact.
     * If that is not necessary, `'no-version-validation'` can be passed.
     */
    // eslint-disable-next-line max-len
    async buildSingleAsset(assetArtifact, assetManifest, asset, options) {
        if (assetArtifact !== 'no-version-validation') {
            const env = await this.envs.accessStackForReadOnlyStackOperations(options.stack);
            await this.validateBootstrapStackVersion(options.stack.stackName, assetArtifact.requiresBootstrapStackVersion, assetArtifact.bootstrapStackVersionSsmParameter, env.resources);
        }
        const resolvedEnvironment = await this.envs.resolveStackEnvironment(options.stack);
        const publisher = this.cachedPublisher(assetManifest, resolvedEnvironment, options.stackName);
        await publisher.buildEntry(asset);
        if (publisher.hasFailures) {
            throw new error_1.ToolkitError(`Failed to build asset ${asset.displayName(false)}`);
        }
    }
    /**
     * Publish a single asset from an asset manifest
     */
    async publishSingleAsset(assetManifest, asset, options) {
        const stackEnv = await this.envs.resolveStackEnvironment(options.stack);
        // No need to validate anymore, we already did that during build
        const publisher = this.cachedPublisher(assetManifest, stackEnv, options.stackName);
        await publisher.publishEntry(asset, { allowCrossAccount: await this.allowCrossAccountAssetPublishingForEnv(options.stack) });
        if (publisher.hasFailures) {
            throw new error_1.ToolkitError(`Failed to publish asset ${asset.displayName(true)}`);
        }
    }
    async allowCrossAccountAssetPublishingForEnv(stack) {
        if (this._allowCrossAccountAssetPublishing === undefined) {
            const env = await this.envs.accessStackForReadOnlyStackOperations(stack);
            this._allowCrossAccountAssetPublishing = await (0, checks_1.determineAllowCrossAccountAssetPublishing)(env.sdk, {
                ioHost: this.ioHost,
                action: this.action,
            }, this.props.toolkitStackName);
        }
        return this._allowCrossAccountAssetPublishing;
    }
    /**
     * Return whether a single asset has been published already
     */
    async isSingleAssetPublished(assetManifest, asset, options) {
        const stackEnv = await this.envs.resolveStackEnvironment(options.stack);
        const publisher = this.cachedPublisher(assetManifest, stackEnv, options.stackName);
        return publisher.isEntryPublished(asset);
    }
    /**
     * Validate that the bootstrap stack has the right version for this stack
     *
     * Call into envResources.validateVersion, but prepend the stack name in case of failure.
     */
    async validateBootstrapStackVersion(stackName, requiresBootstrapStackVersion, bootstrapStackVersionSsmParameter, envResources) {
        try {
            await envResources.validateVersion(requiresBootstrapStackVersion, bootstrapStackVersionSsmParameter);
        }
        catch (e) {
            throw new error_1.ToolkitError(`${stackName}: ${(0, util_1.formatErrorMessage)(e)}`);
        }
    }
    cachedPublisher(assetManifest, env, stackName) {
        const existing = this.publisherCache.get(assetManifest);
        if (existing) {
            return existing;
        }
        const prefix = stackName ? `${chalk.bold(stackName)}: ` : '';
        const publisher = new cdk_assets.AssetPublishing(assetManifest, {
            // The AssetPublishing class takes care of role assuming etc, so it's okay to
            // give it a direct `SdkProvider`.
            aws: new asset_publishing_1.PublishingAws(this.assetSdkProvider, env),
            progressListener: new ParallelSafeAssetProgress(prefix, { ioHost: this.ioHost, action: this.action }),
        });
        this.publisherCache.set(assetManifest, publisher);
        return publisher;
    }
}
exports.Deployments = Deployments;
/**
 * Asset progress that doesn't do anything with percentages (currently)
 */
class ParallelSafeAssetProgress extends asset_publishing_1.BasePublishProgressListener {
    constructor(prefix, { ioHost, action }) {
        super({ ioHost, action });
        this.prefix = prefix;
    }
    getMessage(type, event) {
        return `${this.prefix}${type}: ${event.message}`;
    }
}
function suffixWithErrors(msg, errors) {
    return errors && errors.length > 0 ? `${msg}: ${errors.join(', ')}` : msg;
}
//# sourceMappingURL=data:application/json;base64,