"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GarbageCollector = exports.ObjectAsset = exports.ImageAsset = exports.ECR_ISOLATED_TAG = exports.S3_ISOLATED_TAG = void 0;
const chalk = require("chalk");
const promptly = require("promptly");
const toolkit_info_1 = require("../toolkit-info");
const progress_printer_1 = require("./progress-printer");
const stack_refresh_1 = require("./stack-refresh");
const messages_1 = require("../../cli/messages");
const error_1 = require("../../toolkit/error");
const mode_1 = require("../plugin/mode");
// Must use a require() otherwise esbuild complains
// eslint-disable-next-line @typescript-eslint/no-require-imports
const pLimit = require('p-limit');
exports.S3_ISOLATED_TAG = 'aws-cdk:isolated';
exports.ECR_ISOLATED_TAG = 'aws-cdk.isolated'; // ':' is not valid in ECR tags
const P_LIMIT = 50;
const DAY = 24 * 60 * 60 * 1000; // Number of milliseconds in a day
/**
 * An image asset that lives in the bootstrapped ECR Repository
 */
class ImageAsset {
    constructor(digest, size, tags, manifest) {
        this.digest = digest;
        this.size = size;
        this.tags = tags;
        this.manifest = manifest;
    }
    getTag(tag) {
        return this.tags.find(t => t.includes(tag));
    }
    hasTag(tag) {
        return this.tags.some(t => t.includes(tag));
    }
    hasIsolatedTag() {
        return this.hasTag(exports.ECR_ISOLATED_TAG);
    }
    getIsolatedTag() {
        return this.getTag(exports.ECR_ISOLATED_TAG);
    }
    isolatedTagBefore(date) {
        const dateIsolated = this.dateIsolated();
        if (!dateIsolated || dateIsolated == '') {
            return false;
        }
        return new Date(dateIsolated) < date;
    }
    buildImageTag(inc) {
        // isolatedTag will look like "X-aws-cdk.isolated-YYYYY"
        return `${inc}-${exports.ECR_ISOLATED_TAG}-${String(Date.now())}`;
    }
    dateIsolated() {
        var _a;
        // isolatedTag will look like "X-aws-cdk.isolated-YYYYY"
        return (_a = this.getIsolatedTag()) === null || _a === void 0 ? void 0 : _a.split('-')[3];
    }
}
exports.ImageAsset = ImageAsset;
/**
 * An object asset that lives in the bootstrapped S3 Bucket
 */
class ObjectAsset {
    constructor(bucket, key, size) {
        this.bucket = bucket;
        this.key = key;
        this.size = size;
        this.cached_tags = undefined;
    }
    fileName() {
        return this.key.split('.')[0];
    }
    async allTags(s3) {
        if (this.cached_tags) {
            return this.cached_tags;
        }
        const response = await s3.getObjectTagging({ Bucket: this.bucket, Key: this.key });
        this.cached_tags = response.TagSet;
        return this.cached_tags;
    }
    getTag(tag) {
        var _a;
        if (!this.cached_tags) {
            throw new error_1.ToolkitError('Cannot call getTag before allTags');
        }
        return (_a = this.cached_tags.find((t) => t.Key === tag)) === null || _a === void 0 ? void 0 : _a.Value;
    }
    hasTag(tag) {
        if (!this.cached_tags) {
            throw new error_1.ToolkitError('Cannot call hasTag before allTags');
        }
        return this.cached_tags.some((t) => t.Key === tag);
    }
    hasIsolatedTag() {
        return this.hasTag(exports.S3_ISOLATED_TAG);
    }
    isolatedTagBefore(date) {
        const tagValue = this.getTag(exports.S3_ISOLATED_TAG);
        if (!tagValue || tagValue == '') {
            return false;
        }
        return new Date(tagValue) < date;
    }
}
exports.ObjectAsset = ObjectAsset;
/**
 * A class to facilitate Garbage Collection of S3 and ECR assets
 */
class GarbageCollector {
    constructor(props) {
        var _a, _b;
        this.props = props;
        this.ioHost = props.msg.ioHost;
        this.action = props.msg.action;
        this.garbageCollectS3Assets = ['s3', 'all'].includes(props.type);
        this.garbageCollectEcrAssets = ['ecr', 'all'].includes(props.type);
        this.permissionToDelete = ['delete-tagged', 'full'].includes(props.action);
        this.permissionToTag = ['tag', 'full'].includes(props.action);
        this.confirm = (_a = props.confirm) !== null && _a !== void 0 ? _a : true;
        this.bootstrapStackName = (_b = props.bootstrapStackName) !== null && _b !== void 0 ? _b : toolkit_info_1.DEFAULT_TOOLKIT_STACK_NAME;
    }
    /**
     * Perform garbage collection on the resolved environment.
     */
    async garbageCollect() {
        await this.ioHost.notify((0, messages_1.debug)(this.action, `${this.garbageCollectS3Assets} ${this.garbageCollectEcrAssets}`));
        // SDKs
        const sdk = (await this.props.sdkProvider.forEnvironment(this.props.resolvedEnvironment, mode_1.Mode.ForWriting)).sdk;
        const cfn = sdk.cloudFormation();
        const qualifier = await this.bootstrapQualifier(sdk, this.bootstrapStackName);
        const activeAssets = new stack_refresh_1.ActiveAssetCache();
        // Grab stack templates first
        await (0, stack_refresh_1.refreshStacks)(cfn, this.props.msg, activeAssets, qualifier);
        // Start the background refresh
        const backgroundStackRefresh = new stack_refresh_1.BackgroundStackRefresh({
            cfn,
            msg: this.props.msg,
            activeAssets,
            qualifier,
        });
        backgroundStackRefresh.start();
        try {
            if (this.garbageCollectS3Assets) {
                await this.garbageCollectS3(sdk, activeAssets, backgroundStackRefresh);
            }
            if (this.garbageCollectEcrAssets) {
                await this.garbageCollectEcr(sdk, activeAssets, backgroundStackRefresh);
            }
        }
        catch (err) {
            throw new error_1.ToolkitError(err);
        }
        finally {
            backgroundStackRefresh.stop();
        }
    }
    /**
     * Perform garbage collection on ECR assets
     */
    async garbageCollectEcr(sdk, activeAssets, backgroundStackRefresh) {
        const ecr = sdk.ecr();
        const repo = await this.bootstrapRepositoryName(sdk, this.bootstrapStackName);
        const numImages = await this.numImagesInRepo(ecr, repo);
        const printer = new progress_printer_1.ProgressPrinter(this.props.msg, numImages, 1000);
        await this.ioHost.notify((0, messages_1.debug)(this.action, `Found bootstrap repo ${repo} with ${numImages} images`));
        try {
            // const batches = 1;
            const batchSize = 1000;
            const currentTime = Date.now();
            const graceDays = this.props.rollbackBufferDays;
            await this.ioHost.notify((0, messages_1.debug)(this.action, `Parsing through ${numImages} images in batches`));
            printer.start();
            for await (const batch of this.readRepoInBatches(ecr, repo, batchSize, currentTime)) {
                await backgroundStackRefresh.noOlderThan(600000); // 10 mins
                const { included: isolated, excluded: notIsolated } = partition(batch, asset => !asset.tags.some(t => activeAssets.contains(t)));
                await this.ioHost.notify((0, messages_1.debug)(this.action, `${isolated.length} isolated images`));
                await this.ioHost.notify((0, messages_1.debug)(this.action, `${notIsolated.length} not isolated images`));
                await this.ioHost.notify((0, messages_1.debug)(this.action, `${batch.length} images total`));
                let deletables = isolated;
                let taggables = [];
                let untaggables = [];
                if (graceDays > 0) {
                    await this.ioHost.notify((0, messages_1.debug)(this.action, 'Filtering out images that are not old enough to delete'));
                    // We delete images that are not referenced in ActiveAssets and have the Isolated Tag with a date
                    // earlier than the current time - grace period.
                    deletables = isolated.filter(img => img.isolatedTagBefore(new Date(currentTime - (graceDays * DAY))));
                    // We tag images that are not referenced in ActiveAssets and do not have the Isolated Tag.
                    taggables = isolated.filter(img => !img.hasIsolatedTag());
                    // We untag images that are referenced in ActiveAssets and currently have the Isolated Tag.
                    untaggables = notIsolated.filter(img => img.hasIsolatedTag());
                }
                await this.ioHost.notify((0, messages_1.debug)(this.action, `${deletables.length} deletable assets`));
                await this.ioHost.notify((0, messages_1.debug)(this.action, `${taggables.length} taggable assets`));
                await this.ioHost.notify((0, messages_1.debug)(this.action, `${untaggables.length} assets to untag`));
                if (this.permissionToDelete && deletables.length > 0) {
                    await this.confirmationPrompt(printer, deletables, 'image');
                    await this.parallelDeleteEcr(ecr, repo, deletables, printer);
                }
                if (this.permissionToTag && taggables.length > 0) {
                    await this.parallelTagEcr(ecr, repo, taggables, printer);
                }
                if (this.permissionToTag && untaggables.length > 0) {
                    await this.parallelUntagEcr(ecr, repo, untaggables);
                }
                printer.reportScannedAsset(batch.length);
            }
        }
        catch (err) {
            throw new error_1.ToolkitError(err);
        }
        finally {
            printer.stop();
        }
    }
    /**
     * Perform garbage collection on S3 assets
     */
    async garbageCollectS3(sdk, activeAssets, backgroundStackRefresh) {
        const s3 = sdk.s3();
        const bucket = await this.bootstrapBucketName(sdk, this.bootstrapStackName);
        const numObjects = await this.numObjectsInBucket(s3, bucket);
        const printer = new progress_printer_1.ProgressPrinter(this.props.msg, numObjects, 1000);
        await this.ioHost.notify((0, messages_1.debug)(this.action, `Found bootstrap bucket ${bucket} with ${numObjects} objects`));
        try {
            const batchSize = 1000;
            const currentTime = Date.now();
            const graceDays = this.props.rollbackBufferDays;
            await this.ioHost.notify((0, messages_1.debug)(this.action, `Parsing through ${numObjects} objects in batches`));
            printer.start();
            // Process objects in batches of 1000
            // This is the batch limit of s3.DeleteObject and we intend to optimize for the "worst case" scenario
            // where gc is run for the first time on a long-standing bucket where ~100% of objects are isolated.
            for await (const batch of this.readBucketInBatches(s3, bucket, batchSize, currentTime)) {
                await backgroundStackRefresh.noOlderThan(600000); // 10 mins
                const { included: isolated, excluded: notIsolated } = partition(batch, asset => !activeAssets.contains(asset.fileName()));
                await this.ioHost.notify((0, messages_1.debug)(this.action, `${isolated.length} isolated assets`));
                await this.ioHost.notify((0, messages_1.debug)(this.action, `${notIsolated.length} not isolated assets`));
                await this.ioHost.notify((0, messages_1.debug)(this.action, `${batch.length} objects total`));
                let deletables = isolated;
                let taggables = [];
                let untaggables = [];
                if (graceDays > 0) {
                    await this.ioHost.notify((0, messages_1.debug)(this.action, 'Filtering out assets that are not old enough to delete'));
                    await this.parallelReadAllTags(s3, batch);
                    // We delete objects that are not referenced in ActiveAssets and have the Isolated Tag with a date
                    // earlier than the current time - grace period.
                    deletables = isolated.filter(obj => obj.isolatedTagBefore(new Date(currentTime - (graceDays * DAY))));
                    // We tag objects that are not referenced in ActiveAssets and do not have the Isolated Tag.
                    taggables = isolated.filter(obj => !obj.hasIsolatedTag());
                    // We untag objects that are referenced in ActiveAssets and currently have the Isolated Tag.
                    untaggables = notIsolated.filter(obj => obj.hasIsolatedTag());
                }
                await this.ioHost.notify((0, messages_1.debug)(this.action, `${deletables.length} deletable assets`));
                await this.ioHost.notify((0, messages_1.debug)(this.action, `${taggables.length} taggable assets`));
                await this.ioHost.notify((0, messages_1.debug)(this.action, `${untaggables.length} assets to untag`));
                if (this.permissionToDelete && deletables.length > 0) {
                    await this.confirmationPrompt(printer, deletables, 'object');
                    await this.parallelDeleteS3(s3, bucket, deletables, printer);
                }
                if (this.permissionToTag && taggables.length > 0) {
                    await this.parallelTagS3(s3, bucket, taggables, currentTime, printer);
                }
                if (this.permissionToTag && untaggables.length > 0) {
                    await this.parallelUntagS3(s3, bucket, untaggables);
                }
                printer.reportScannedAsset(batch.length);
            }
        }
        catch (err) {
            throw new error_1.ToolkitError(err);
        }
        finally {
            printer.stop();
        }
    }
    async parallelReadAllTags(s3, objects) {
        const limit = pLimit(P_LIMIT);
        for (const obj of objects) {
            await limit(() => obj.allTags(s3));
        }
    }
    /**
     * Untag assets that were previously tagged, but now currently referenced.
     * Since this is treated as an implementation detail, we do not print the results in the printer.
     */
    async parallelUntagEcr(ecr, repo, untaggables) {
        const limit = pLimit(P_LIMIT);
        for (const img of untaggables) {
            const tag = img.getIsolatedTag();
            await limit(() => ecr.batchDeleteImage({
                repositoryName: repo,
                imageIds: [{
                        imageTag: tag,
                    }],
            }));
        }
        await this.ioHost.notify((0, messages_1.debug)(this.action, `Untagged ${untaggables.length} assets`));
    }
    /**
     * Untag assets that were previously tagged, but now currently referenced.
     * Since this is treated as an implementation detail, we do not print the results in the printer.
     */
    async parallelUntagS3(s3, bucket, untaggables) {
        var _a;
        const limit = pLimit(P_LIMIT);
        for (const obj of untaggables) {
            const tags = (_a = await obj.allTags(s3)) !== null && _a !== void 0 ? _a : [];
            const updatedTags = tags.filter((tag) => tag.Key !== exports.S3_ISOLATED_TAG);
            await limit(() => s3.deleteObjectTagging({
                Bucket: bucket,
                Key: obj.key,
            }));
            await limit(() => s3.putObjectTagging({
                Bucket: bucket,
                Key: obj.key,
                Tagging: {
                    TagSet: updatedTags,
                },
            }));
        }
        await this.ioHost.notify((0, messages_1.debug)(this.action, `Untagged ${untaggables.length} assets`));
    }
    /**
     * Tag images in parallel using p-limit
     */
    async parallelTagEcr(ecr, repo, taggables, printer) {
        const limit = pLimit(P_LIMIT);
        for (let i = 0; i < taggables.length; i++) {
            const img = taggables[i];
            const tagEcr = async () => {
                try {
                    await ecr.putImage({
                        repositoryName: repo,
                        imageDigest: img.digest,
                        imageManifest: img.manifest,
                        imageTag: img.buildImageTag(i),
                    });
                }
                catch (error) {
                    // This is a false negative -- an isolated asset is untagged
                    // likely due to an imageTag collision. We can safely ignore,
                    // and the isolated asset will be tagged next time.
                    await this.ioHost.notify((0, messages_1.debug)(this.action, `Warning: unable to tag image ${JSON.stringify(img.tags)} with ${img.buildImageTag(i)} due to the following error: ${error}`));
                }
            };
            await limit(() => tagEcr());
        }
        printer.reportTaggedAsset(taggables);
        await this.ioHost.notify((0, messages_1.debug)(this.action, `Tagged ${taggables.length} assets`));
    }
    /**
     * Tag objects in parallel using p-limit. The putObjectTagging API does not
     * support batch tagging so we must handle the parallelism client-side.
     */
    async parallelTagS3(s3, bucket, taggables, date, printer) {
        const limit = pLimit(P_LIMIT);
        for (const obj of taggables) {
            await limit(() => s3.putObjectTagging({
                Bucket: bucket,
                Key: obj.key,
                Tagging: {
                    TagSet: [
                        {
                            Key: exports.S3_ISOLATED_TAG,
                            Value: String(date),
                        },
                    ],
                },
            }));
        }
        printer.reportTaggedAsset(taggables);
        await this.ioHost.notify((0, messages_1.debug)(this.action, `Tagged ${taggables.length} assets`));
    }
    /**
     * Delete images in parallel. The deleteImage API supports batches of 100.
     */
    async parallelDeleteEcr(ecr, repo, deletables, printer) {
        const batchSize = 100;
        const imagesToDelete = deletables.map(img => ({
            imageDigest: img.digest,
        }));
        try {
            const batches = [];
            for (let i = 0; i < imagesToDelete.length; i += batchSize) {
                batches.push(imagesToDelete.slice(i, i + batchSize));
            }
            // Delete images in batches
            for (const batch of batches) {
                await ecr.batchDeleteImage({
                    imageIds: batch,
                    repositoryName: repo,
                });
                const deletedCount = batch.length;
                await this.ioHost.notify((0, messages_1.debug)(this.action, `Deleted ${deletedCount} assets`));
                printer.reportDeletedAsset(deletables.slice(0, deletedCount));
            }
        }
        catch (err) {
            await this.ioHost.notify((0, messages_1.info)(this.action, chalk.red(`Error deleting images: ${err}`)));
        }
    }
    /**
     * Delete objects in parallel. The deleteObjects API supports batches of 1000.
     */
    async parallelDeleteS3(s3, bucket, deletables, printer) {
        const batchSize = 1000;
        const objectsToDelete = deletables.map(asset => ({
            Key: asset.key,
        }));
        try {
            const batches = [];
            for (let i = 0; i < objectsToDelete.length; i += batchSize) {
                batches.push(objectsToDelete.slice(i, i + batchSize));
            }
            // Delete objects in batches
            for (const batch of batches) {
                await s3.deleteObjects({
                    Bucket: bucket,
                    Delete: {
                        Objects: batch,
                        Quiet: true,
                    },
                });
                const deletedCount = batch.length;
                await this.ioHost.notify((0, messages_1.debug)(this.action, `Deleted ${deletedCount} assets`));
                printer.reportDeletedAsset(deletables.slice(0, deletedCount));
            }
        }
        catch (err) {
            await this.ioHost.notify((0, messages_1.debug)(this.action, chalk.red(`Error deleting objects: ${err}`)));
        }
    }
    async bootstrapBucketName(sdk, bootstrapStackName) {
        const toolkitInfo = await toolkit_info_1.ToolkitInfo.lookup(this.props.resolvedEnvironment, sdk, this.props.msg, bootstrapStackName);
        return toolkitInfo.bucketName;
    }
    async bootstrapRepositoryName(sdk, bootstrapStackName) {
        const toolkitInfo = await toolkit_info_1.ToolkitInfo.lookup(this.props.resolvedEnvironment, sdk, this.props.msg, bootstrapStackName);
        return toolkitInfo.repositoryName;
    }
    async bootstrapQualifier(sdk, bootstrapStackName) {
        const toolkitInfo = await toolkit_info_1.ToolkitInfo.lookup(this.props.resolvedEnvironment, sdk, this.props.msg, bootstrapStackName);
        return toolkitInfo.bootstrapStack.parameters.Qualifier;
    }
    async numObjectsInBucket(s3, bucket) {
        var _a;
        let totalCount = 0;
        let continuationToken;
        do {
            const response = await s3.listObjectsV2({
                Bucket: bucket,
                ContinuationToken: continuationToken,
            });
            totalCount += (_a = response.KeyCount) !== null && _a !== void 0 ? _a : 0;
            continuationToken = response.NextContinuationToken;
        } while (continuationToken);
        return totalCount;
    }
    async numImagesInRepo(ecr, repo) {
        var _a, _b;
        let totalCount = 0;
        let nextToken;
        do {
            const response = await ecr.listImages({
                repositoryName: repo,
                nextToken: nextToken,
            });
            totalCount += (_b = (_a = response.imageIds) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0;
            nextToken = response.nextToken;
        } while (nextToken);
        return totalCount;
    }
    async *readRepoInBatches(ecr, repo, batchSize = 1000, currentTime) {
        var _a, _b, _c, _d, _e, _f;
        let continuationToken;
        do {
            const batch = [];
            while (batch.length < batchSize) {
                const response = await ecr.listImages({
                    repositoryName: repo,
                    nextToken: continuationToken,
                });
                // No images in the repository
                if (!response.imageIds || response.imageIds.length === 0) {
                    break;
                }
                // map unique image digest to (possibly multiple) tags
                const images = imageMap((_a = response.imageIds) !== null && _a !== void 0 ? _a : []);
                const imageIds = Object.keys(images).map(key => ({
                    imageDigest: key,
                }));
                const describeImageInfo = await ecr.describeImages({
                    repositoryName: repo,
                    imageIds: imageIds,
                });
                const getImageInfo = await ecr.batchGetImage({
                    repositoryName: repo,
                    imageIds: imageIds,
                });
                const combinedImageInfo = (_b = describeImageInfo.imageDetails) === null || _b === void 0 ? void 0 : _b.map(imageDetail => {
                    var _a;
                    const matchingImage = (_a = getImageInfo.images) === null || _a === void 0 ? void 0 : _a.find(img => { var _a; return ((_a = img.imageId) === null || _a === void 0 ? void 0 : _a.imageDigest) === imageDetail.imageDigest; });
                    return {
                        ...imageDetail,
                        manifest: matchingImage === null || matchingImage === void 0 ? void 0 : matchingImage.imageManifest,
                    };
                });
                for (const image of combinedImageInfo !== null && combinedImageInfo !== void 0 ? combinedImageInfo : []) {
                    const lastModified = (_c = image.imagePushedAt) !== null && _c !== void 0 ? _c : new Date(currentTime);
                    // Store the image if it was pushed earlier than today - createdBufferDays
                    if (image.imageDigest && lastModified < new Date(currentTime - (this.props.createdBufferDays * DAY))) {
                        batch.push(new ImageAsset(image.imageDigest, (_d = image.imageSizeInBytes) !== null && _d !== void 0 ? _d : 0, (_e = image.imageTags) !== null && _e !== void 0 ? _e : [], (_f = image.manifest) !== null && _f !== void 0 ? _f : ''));
                    }
                }
                continuationToken = response.nextToken;
                if (!continuationToken)
                    break; // No more images to fetch
            }
            if (batch.length > 0) {
                yield batch;
            }
        } while (continuationToken);
    }
    /**
     * Generator function that reads objects from the S3 Bucket in batches.
     */
    async *readBucketInBatches(s3, bucket, batchSize = 1000, currentTime) {
        var _a;
        let continuationToken;
        do {
            const batch = [];
            while (batch.length < batchSize) {
                const response = await s3.listObjectsV2({
                    Bucket: bucket,
                    ContinuationToken: continuationToken,
                });
                (_a = response.Contents) === null || _a === void 0 ? void 0 : _a.forEach((obj) => {
                    var _a, _b, _c;
                    const key = (_a = obj.Key) !== null && _a !== void 0 ? _a : '';
                    const size = (_b = obj.Size) !== null && _b !== void 0 ? _b : 0;
                    const lastModified = (_c = obj.LastModified) !== null && _c !== void 0 ? _c : new Date(currentTime);
                    // Store the object if it has a Key and
                    // if it has not been modified since today - createdBufferDays
                    if (key && lastModified < new Date(currentTime - (this.props.createdBufferDays * DAY))) {
                        batch.push(new ObjectAsset(bucket, key, size));
                    }
                });
                continuationToken = response.NextContinuationToken;
                if (!continuationToken)
                    break; // No more objects to fetch
            }
            if (batch.length > 0) {
                yield batch;
            }
        } while (continuationToken);
    }
    async confirmationPrompt(printer, deletables, type) {
        const pluralize = (name, count) => {
            return count === 1 ? name : `${name}s`;
        };
        if (this.confirm) {
            const message = [
                `Found ${deletables.length} ${pluralize(type, deletables.length)} to delete based off of the following criteria:`,
                `- ${type}s have been isolated for > ${this.props.rollbackBufferDays} days`,
                `- ${type}s were created > ${this.props.createdBufferDays} days ago`,
                '',
                'Delete this batch (yes/no/delete-all)?',
            ].join('\n');
            printer.pause();
            const response = await promptly.prompt(message, { trim: true });
            // Anything other than yes/y/delete-all is treated as no
            if (!response || !['yes', 'y', 'delete-all'].includes(response.toLowerCase())) {
                throw new error_1.ToolkitError('Deletion aborted by user');
            }
            else if (response.toLowerCase() == 'delete-all') {
                this.confirm = false;
            }
        }
        printer.resume();
    }
}
exports.GarbageCollector = GarbageCollector;
function partition(xs, pred) {
    const result = {
        included: [],
        excluded: [],
    };
    for (const x of xs) {
        if (pred(x)) {
            result.included.push(x);
        }
        else {
            result.excluded.push(x);
        }
    }
    return result;
}
function imageMap(imageIds) {
    const images = {};
    for (const image of imageIds !== null && imageIds !== void 0 ? imageIds : []) {
        if (!image.imageDigest || !image.imageTag) {
            continue;
        }
        if (!images[image.imageDigest]) {
            images[image.imageDigest] = [];
        }
        images[image.imageDigest].push(image.imageTag);
    }
    return images;
}
//# sourceMappingURL=data:application/json;base64,