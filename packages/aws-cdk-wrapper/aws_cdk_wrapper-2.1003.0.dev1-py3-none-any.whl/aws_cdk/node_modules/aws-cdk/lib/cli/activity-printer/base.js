"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActivityPrinterBase = void 0;
const util_1 = require("../../util");
class ActivityPrinterBase {
    constructor(props) {
        this.props = props;
        /**
         * The with of the "resource type" column.
         */
        this.resourceTypeColumnWidth = (0, util_1.maxResourceTypeLength)({});
        /**
         * A list of resource IDs which are currently being processed
         */
        this.resourcesInProgress = {};
        this.rollingBack = false;
        this.failures = new Array();
        this.hookFailureMap = new Map();
        this.stream = props.stream;
    }
    /**
     * Receive a stack activity message
     */
    notify(msg) {
        switch (msg.code) {
            case 'CDK_TOOLKIT_I5501':
                this.start(msg.data);
                break;
            case 'CDK_TOOLKIT_I5502':
                this.activity(msg.data);
                break;
            case 'CDK_TOOLKIT_I5503':
                this.stop();
                break;
            default:
                // ignore all other messages
                break;
        }
    }
    start({ stack }) {
        this.resourceTypeColumnWidth = (0, util_1.maxResourceTypeLength)(stack.template);
    }
    activity(activity) {
        // process the activity and then call print
        this.addActivity(activity);
        this.print();
    }
    stop() {
        // final print after the stack is done
        this.print();
    }
    addActivity(activity) {
        var _a, _b, _c, _d, _e;
        const status = activity.event.ResourceStatus;
        const hookStatus = activity.event.HookStatus;
        const hookType = activity.event.HookType;
        if (!status || !activity.event.LogicalResourceId) {
            return;
        }
        this.stackProgress = activity.progress;
        if (status === 'ROLLBACK_IN_PROGRESS' || status === 'UPDATE_ROLLBACK_IN_PROGRESS') {
            // Only triggered on the stack once we've started doing a rollback
            this.rollingBack = true;
        }
        if (status.endsWith('_IN_PROGRESS')) {
            this.resourcesInProgress[activity.event.LogicalResourceId] = activity;
        }
        if ((0, util_1.stackEventHasErrorMessage)(status)) {
            const isCancelled = ((_a = activity.event.ResourceStatusReason) !== null && _a !== void 0 ? _a : '').indexOf('cancelled') > -1;
            // Cancelled is not an interesting failure reason
            if (!isCancelled) {
                this.failures.push(activity);
            }
        }
        if (status.endsWith('_COMPLETE') || status.endsWith('_FAILED')) {
            delete this.resourcesInProgress[activity.event.LogicalResourceId];
        }
        if (hookStatus !== undefined &&
            hookStatus.endsWith('_COMPLETE_FAILED') &&
            activity.event.LogicalResourceId !== undefined &&
            hookType !== undefined) {
            if (this.hookFailureMap.has(activity.event.LogicalResourceId)) {
                (_b = this.hookFailureMap.get(activity.event.LogicalResourceId)) === null || _b === void 0 ? void 0 : _b.set(hookType, (_c = activity.event.HookStatusReason) !== null && _c !== void 0 ? _c : '');
            }
            else {
                this.hookFailureMap.set(activity.event.LogicalResourceId, new Map());
                (_d = this.hookFailureMap.get(activity.event.LogicalResourceId)) === null || _d === void 0 ? void 0 : _d.set(hookType, (_e = activity.event.HookStatusReason) !== null && _e !== void 0 ? _e : '');
            }
        }
    }
    failureReason(activity) {
        var _a, _b;
        const resourceStatusReason = (_a = activity.event.ResourceStatusReason) !== null && _a !== void 0 ? _a : '';
        const logicalResourceId = (_b = activity.event.LogicalResourceId) !== null && _b !== void 0 ? _b : '';
        const hookFailureReasonMap = this.hookFailureMap.get(logicalResourceId);
        if (hookFailureReasonMap !== undefined) {
            for (const hookType of hookFailureReasonMap.keys()) {
                if (resourceStatusReason.includes(hookType)) {
                    return resourceStatusReason + ' : ' + hookFailureReasonMap.get(hookType);
                }
            }
        }
        return resourceStatusReason;
    }
    /**
     * Is the activity a meta activity for the stack itself.
     */
    isActivityForTheStack(activity) {
        return activity.event.PhysicalResourceId === activity.event.StackId;
    }
}
exports.ActivityPrinterBase = ActivityPrinterBase;
ActivityPrinterBase.TIMESTAMP_WIDTH = 12;
ActivityPrinterBase.STATUS_WIDTH = 20;
//# sourceMappingURL=data:application/json;base64,