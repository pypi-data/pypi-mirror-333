# -*- coding: utf-8 -*-
"""MTHM_20250312_00.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MINlT6FQh9LjMgvr-dpnRYVHjjAUO62F

# MultiThreadsManager
並列処理をサポートするクラス


```
2025/03/12 0.1.0完成。mtcopy実装。並列処理でコピーをスピード処理する。
```

# MultiThreadsManager

## 1. モジュール定義
"""

# @title a. MultiThreadsManager 定義

import os
import shutil
from concurrent.futures import ThreadPoolExecutor, as_completed
from tqdm import tqdm

class MultiThreadsManager:
    def __init__(self, max_workers=None):
        """
        コンストラクタ: スレッド数上限を指定可能。
        max_workersを指定しない場合、ThreadPoolExecutorのデフォルト値が使用される。
        """
        self.max_workers = max_workers

    def mtcopy(self, src_dir: str, dst_dir: str, desc = "Copying" ):
        """
        src_dir 内の全ファイルを dst_dir に並列コピーする。
        コピー中に失敗したファイルがあればエラーメッセージを表示する。
        """
        # コピー元ディレクトリのファイル一覧を取得
        # サブディレクトリは今回は対象にせず、トップレベルのファイルのみコピー
        try:
            files = [file for file in os.listdir(src_dir) if os.path.isfile(os.path.join(src_dir, file))]
        except Exception as e:
            raise RuntimeError(f"コピー元ディレクトリの読み取りに失敗しました: {e}")
        # コピー先ディレクトリを作成（存在しなければ）
        os.makedirs(dst_dir, exist_ok=True)

        # 進捗バーの設定
        total_files = len(files)
        if total_files == 0:
            print("コピーするファイルがありません。")
            return

        with tqdm(total=total_files, desc= desc, unit="files") as pbar:
            # スレッドプールでファイルコピータスクを並列実行
            with ThreadPoolExecutor(max_workers=self.max_workers) as executor:
                # 各ファイルのコピー処理を非同期で開始
                futures = []
                for fname in files:
                    src_path = os.path.join(src_dir, fname)
                    dst_path = os.path.join(dst_dir, fname)
                    # submitでコピータスクを登録
                    futures.append(executor.submit(shutil.copy2, src_path, dst_path))
                # タスク完了を待ちながら進捗バー更新
                for future in as_completed(futures):
                    try:
                        future.result()  # 実行中の例外をここで発生させる
                    except Exception as e:
                        # エラー発生: ファイル名特定のためメッセージ出力
                        tqdm.write(f"コピー失敗: {e}")
                    finally:
                        # 成功・失敗に関わらず1件処理完了
                        pbar.update(1)

"""## 2. テスト"""

# @title a. MultiThreadsManager テスト
import shutil
from google.colab import drive
drive.mount('/content/drive')

base_dst_dir = "/content/cEnv"
venv_src_dir = '/content/drive/MyDrive/cEnv/venv/kohya_env/bin'
venv_dst_dir = '/content/cEnv/venv/kohya_env/bin'
kohya_src_dir = "/content/drive/MyDrive/cEnv/app/kohya_ss/"
kohya_dst_dir = "/content/cEnv/app/kohya_ss/"

if __name__ == '__main__':
    shutil.rmtree( base_dst_dir, ignore_errors = True )
    # os.makedirs( dst_dir, exist_ok = True )
    mtmanager = MultiThreadsManager( max_workers = 16 )
    mtmanager.mtcopy( venv_src_dir, venv_dst_dir, desc = "venv" )
    mtmanager.mtcopy( kohya_src_dir, kohya_dst_dir, desc = "kohya" )