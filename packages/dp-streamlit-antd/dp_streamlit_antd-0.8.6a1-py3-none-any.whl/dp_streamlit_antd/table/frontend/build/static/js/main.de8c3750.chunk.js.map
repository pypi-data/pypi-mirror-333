{"version":3,"sources":["STTable.tsx","index.tsx"],"names":["isDate","dateStr","isNaN","Date","getDate","isFloat","floatStr","parseFloat","STTable","props","searchInput","getColumnSearchProps","dataIndex","linkable","args","filterDropdown","setSelectedKeys","selectedKeys","confirm","clearFilters","style","padding","ref","node","placeholder","value","onChange","e","target","onPressEnter","handleSearch","marginBottom","display","type","onClick","icon","SearchOutlined","size","width","handleReset","closeDropdown","setState","searchText","searchedColumn","filterIcon","filtered","color","undefined","onFilter","record","toString","toLowerCase","includes","onFilterDropdownOpenChange","visible","setTimeout","select","render","text","current_text","ellipsis_config","ellipsis","length","slice","x","state","highlightStyle","backgroundColor","searchWords","autoEscape","textToHighlight","placement","title","href","handleAction","bind","onPagerChange","page","pageSize","event","id","uuidv4","payload","action","records","column","Streamlit","setComponentValue","onSelectChange","selectedRowKeys","selectedRows","data","columns","row_key","actions_in_row","tags_columns","batch_actions","linkable_columns","sorter_columns","searchable_columns","expand_column","ellipsis_column_configs","default_expand_all_rows","iframes_in_row","iframe_height","rows_per_page","show_pager","expand_json","dynamic_pager_page","enable_dynamic_pager","dynamic_pager_total","unsafe_html_columns","sticky","scroll","rowSelectionType","actions","that","rowSelection","columnWidth","fixed","selections","Table","SELECTION_ALL","SELECTION_INVERT","SELECTION_NONE","map","showTitle","key","forEach","currentEllipsis","concat","action_width","i","Object","assign","defaultSortOrder","sorter","a","b","aa","bb","getTime","Number","localeCompare","tags","index","split","tag","dangerouslySetInnerHTML","__html","compact_layout","color_backgroud","pager","showQuickJumper","total","current","theme","token","components","colorBgContainer","tableSelectionColumnWidth","algorithm","compactAlgorithm","defaultAlgorithm","pagination","rowKey","dataSource","expandable","defaultExpandAllRows","onExpand","expanded","ajustHeight","expandedRowRender","indent","root","document","getElementById","clientWidth","margin","link","marginRight","frameBorder","src","height","summary","pageData","Summary","Row","Cell","colSpan","filter","item","reserve_select","this","stopPropagation","setFrameHeight","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.de8c3750.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport {\n  Table,\n  Input,\n  Button,\n  Tag,\n  Space,\n  InputRef,\n  Tooltip,\n  Popconfirm,\n  ConfigProvider,\n  theme,\n} from \"antd\"\nimport { TableToken } from \"antd/lib/table/style\"\nimport { ColumnType } from \"antd/lib/table\"\nimport { v4 as uuidv4 } from \"uuid\"\nimport Highlighter from \"react-highlight-words\"\nimport { SearchOutlined } from \"@ant-design/icons\"\nimport JSONPretty from \"react-json-pretty\"\n\ninterface IExtra {\n  action: string\n}\n\ninterface EventPayload {\n  action: string\n  records?: any[]\n  column?: string\n}\n\ninterface Event {\n  id: string\n  payload: EventPayload\n}\n\ninterface State {\n  //pagination?: any\n  filters?: any\n  sorter?: any\n  searchText?: string\n  searchedColumn?: string\n  selectedRowKeys?: React.Key[]\n  value?: any\n}\n\ninterface FilterConfirmProps {\n  closeDropdown: boolean\n}\n\ninterface ColumnFilterItem {\n  text: React.ReactNode\n  value: string | number | boolean\n  children?: ColumnFilterItem[]\n}\n\ninterface FilterDropdownProps {\n  prefixCls: string\n  setSelectedKeys: (selectedKeys: React.Key[]) => void\n  selectedKeys: React.Key[]\n  confirm: (param?: FilterConfirmProps) => void\n  clearFilters: () => void\n  filters?: ColumnFilterItem[]\n  visible: boolean\n}\n\nfunction isDate(dateStr: string) {\n  return !isNaN(new Date(dateStr).getDate())\n}\n\nfunction isFloat(floatStr: string) {\n  return !isNaN(parseFloat(floatStr))\n}\n\nclass STTable extends StreamlitComponentBase<State> {\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      searchedColumn: \"\",\n    }\n  }\n\n  searchInput?: InputRef\n\n  getColumnSearchProps = (dataIndex: string, linkable: boolean, args: any) => ({\n    filterDropdown: ({\n      setSelectedKeys,\n      selectedKeys,\n      confirm,\n      clearFilters,\n    }: FilterDropdownProps) => (\n      <div style={{ padding: 8 }}>\n        <Input\n          ref={(node: InputRef) => {\n            this.searchInput = node\n          }}\n          placeholder={`Search ${dataIndex}`}\n          value={selectedKeys[0]}\n          onChange={(e) =>\n            setSelectedKeys(e.target.value ? [e.target.value] : [])\n          }\n          onPressEnter={() =>\n            this.handleSearch(selectedKeys, confirm, dataIndex)\n          }\n          style={{ marginBottom: 8, display: \"block\" }}\n        />\n        <Space>\n          <Button\n            type=\"primary\"\n            onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n            icon={<SearchOutlined />}\n            size=\"small\"\n            style={{ width: 90 }}\n          >\n            Search\n          </Button>\n          <Button\n            onClick={() => this.handleReset(clearFilters)}\n            size=\"small\"\n            style={{ width: 90 }}\n          >\n            Reset\n          </Button>\n          <Button\n            type=\"link\"\n            size=\"small\"\n            onClick={() => {\n              confirm({ closeDropdown: false })\n              this.setState({\n                searchText: selectedKeys[0] as string,\n                searchedColumn: dataIndex,\n              })\n            }}\n          >\n            Filter\n          </Button>\n        </Space>\n      </div>\n    ),\n    filterIcon: (filtered: boolean) => (\n      <SearchOutlined style={{ color: filtered ? \"#1890ff\" : undefined }} />\n    ),\n    onFilter: (value: string, record: any) =>\n      record[dataIndex]\n        ? record[dataIndex]\n            .toString()\n            .toLowerCase()\n            .includes(value.toLowerCase())\n        : \"\",\n    onFilterDropdownOpenChange: (visible: boolean) => {\n      if (visible) {\n        setTimeout(() => this.searchInput && this.searchInput.select(), 100)\n      }\n    },\n    render: (text: string, record: any) => {\n      let current_text = text\n      const ellipsis_config = args && (args.ellipsis_config || {})\n      if (ellipsis_config[dataIndex]) {\n        const ellipsis = ellipsis_config[dataIndex]\n        if (typeof ellipsis === 'number' && text.length > ellipsis) {\n          current_text = text.slice(0, ellipsis) + '...'\n        }\n      }\n      let x =\n        this.state.searchedColumn && this.state.searchedColumn === dataIndex ? (\n          <Highlighter\n            highlightStyle={{ backgroundColor: \"#ffc069\", padding: 0 }}\n            searchWords={[this.state.searchText]}\n            autoEscape\n            textToHighlight={text ? text.toString() : \"\"}\n          />\n        ) : (\n          <Tooltip placement=\"topLeft\" title={text}>\n            {current_text}\n          </Tooltip>\n        )\n      if (linkable) {\n        x = (\n          <a href=\"#\" onClick={this.handleAction(\"ClickLink\", [record], dataIndex).bind(this)} >\n            {x}\n          </a>\n        )\n      }\n      return x\n    },\n  })\n\n  handleSearch = (\n    selectedKeys: React.Key[],\n    confirm: () => void,\n    dataIndex: string\n  ) => {\n    confirm()\n    this.setState({\n      searchText: selectedKeys[0] as string,\n      searchedColumn: dataIndex,\n    })\n  }\n\n  handleReset = (clearFilters: () => void) => {\n    clearFilters()\n    this.setState({ searchText: \"\" })\n  }\n\n  private handleAction(action: string, records: object[], column?: string, reserve_select?: boolean) {\n    const that = this\n    return function (e: React.MouseEvent<HTMLElement>) {\n      e.stopPropagation()\n      const event: Event = {\n        id: uuidv4(),\n        payload: {\n          action,\n          records,\n          column,\n        },\n      }\n      Streamlit.setComponentValue(event)\n      reserve_select || that.setState({ selectedRowKeys: [] })\n    }\n  }\n\n  ajustHeight() {\n    setTimeout(() => {\n      Streamlit.setFrameHeight()\n    }, 300)\n  }\n\n  componentDidMount() {\n    this.ajustHeight()\n  }\n\n  componentDidUpdate() {\n    this.ajustHeight()\n  }\n\n  onPagerChange = (page: Number, pageSize: Number) => {\n    const event: Event = {\n      id: uuidv4(),\n      payload: {\n        action: \"pager\",\n        records: [{\"page\": page, \"page_size\": pageSize}],\n        column: undefined,\n      },\n    }\n    Streamlit.setComponentValue(event)\n  }\n\n  onSelectChange = (selectedRowKeys: React.Key[], selectedRows: any[]) => {\n    this.setState({ selectedRowKeys })\n    const event: Event = {\n      id: uuidv4(),\n      payload: {\n        action: \"select\",\n        records: selectedRows,\n        column: undefined,\n      },\n    }\n    Streamlit.setComponentValue(event)\n  }\n\n  public render = (): ReactNode => {\n    const data = this.props.args.data\n    let columns: ColumnType<object>[] = this.props.args.columns\n    const {\n      row_key,\n      actions_in_row,\n      tags_columns,\n      batch_actions,\n      linkable_columns,\n      sorter_columns,\n      searchable_columns,\n      expand_column,\n      ellipsis_column_configs,\n      default_expand_all_rows,\n      iframes_in_row,\n      iframe_height,\n      rows_per_page,\n      show_pager,\n      expand_json,\n      dynamic_pager_page,\n      enable_dynamic_pager,\n      dynamic_pager_total,\n      unsafe_html_columns,\n      sticky = false,\n      scroll = { x: true },\n      rowSelectionType,\n    } = this.props.args\n    let actions = this.props.args.actions\n    const that = this\n\n    const { selectedRowKeys } = this.state\n    const rowSelection = {\n      columnWidth: '48px',\n      fixed: true,\n      selectedRowKeys,\n      onChange: this.onSelectChange,\n      selections: [\n        Table.SELECTION_ALL,\n        Table.SELECTION_INVERT,\n        Table.SELECTION_NONE,\n      ],\n      type: rowSelectionType ?? 'checkbox',\n    }\n\n    // eslint-disable-next-line\n    columns.map((column: ColumnType<object>) => {\n      column.ellipsis = {\n        showTitle: false,\n      }\n      if (linkable_columns.includes(column.key as string)) {\n        column.render = (text: string, record: any) => {\n          return (\n            <a\n              href=\"#\"\n              onClick={that\n                .handleAction(\"ClickLink\", [record], column.key?.toString())\n                .bind(that)}\n            >\n              {text}\n            </a>\n          )\n        }\n      }\n    })\n\n    if (ellipsis_column_configs && typeof ellipsis_column_configs === 'object') {\n      columns.forEach((column: ColumnType<object>) => {\n        const currentEllipsis = ellipsis_column_configs[column.key as string]\n        if (\n          currentEllipsis &&\n          (\n            typeof currentEllipsis === 'boolean' ||\n            (typeof currentEllipsis === 'object' && typeof currentEllipsis.showTitle === 'boolean')\n          )\n        ) {\n          column.ellipsis = currentEllipsis\n        }\n      })\n    }\n\n    if (actions || actions_in_row) {\n      columns = columns.concat({\n        title: \"Action\",\n        key: \"operation\",\n        width: this.props.args.action_width,\n        render: (text, record: any) => {\n          if (record[\"_antd_table_actions\"]) {\n            actions = record[\"_antd_table_actions\"]\n          }\n          return (\n            <Space size=\"middle\">\n              {actions.map(function (action: string, i: Number) {\n                // eslint-disable-next-line\n                return (\n                  <a\n                    href=\"#\"\n                    key={action}\n                    onClick={that.handleAction(action, [record]).bind(that)}\n                  >\n                    {action}\n                  </a>\n                )\n              })}\n            </Space>\n          )\n        },\n      })\n    }\n    if (searchable_columns) {\n      // eslint-disable-next-line\n      columns.map((column: ColumnType<object>) => {\n        if ((searchable_columns as string[]).includes(column.key as string)) {\n          Object.assign(\n            column,\n            this.getColumnSearchProps(\n              column.dataIndex as string,\n              linkable_columns.includes(column.key as string),\n              this.props.args\n            )\n          )\n        }\n      })\n    }\n    if (sorter_columns) {\n      // eslint-disable-next-line\n      columns.map((column: ColumnType<object>) => {\n        if ((sorter_columns as string[]).includes(column.key as string)) {\n          column.defaultSortOrder = undefined\n          if (!column.sorter) {\n            column.sorter = (a: any, b: any) => {\n              const aa = a[column.key as string]\n              const bb = b[column.key as string]\n              if (typeof aa === \"number\") {\n                return aa - bb\n              } else if (isDate(aa) && isDate(bb)) {\n                return new Date(aa).getTime() - new Date(bb).getTime()\n              } else if (isFloat(aa) && isFloat(bb)) {\n                return Number.parseFloat(aa) - Number.parseFloat(bb)\n              }\n              return aa.localeCompare(bb)\n            }\n          }\n        }\n      })\n    }\n    if (tags_columns) {\n      columns.map((column: ColumnType<object>) => {\n        if ((tags_columns as string[]).includes(column.key as string)) {\n          column.render = (tags: string, record: any, index: Number) => {\n            return (\n              <>\n                {tags.split(\",\").map((tag) => (\n                  <Tag color=\"blue\" key={\"tags/\" + tag + \"/\" + index}>\n                    {tag}\n                  </Tag>\n                ))}\n              </>\n            )\n          }\n        }\n      })\n    }\n\n    columns = unsafe_html_columns ? columns.map(\n      column => unsafe_html_columns.includes(column.key) ? { ...column, render: text => (<div dangerouslySetInnerHTML={{ __html: text }} />) } : column\n    ) : columns\n    const compact_layout = this.props.args.compact_layout\n    const color_backgroud = this.props.args.color_backgroud\n    let pager : any = false\n    if (show_pager) {\n      pager = { pageSize: rows_per_page, showQuickJumper: true }\n      if (enable_dynamic_pager){\n        pager.total = dynamic_pager_total\n        pager.current = dynamic_pager_page\n        pager.onChange = this.onPagerChange.bind(this)\n      }\n    }\n    return (\n      <ConfigProvider\n        theme={{\n          token: {},\n          components: {\n            Table: {\n              colorBgContainer: color_backgroud,\n              tableSelectionColumnWidth: 48,\n            } as TableToken,\n          },\n          algorithm: compact_layout\n            ? theme.compactAlgorithm\n            : theme.defaultAlgorithm,\n        }}\n      >\n        <Table\n          pagination={pager}\n          rowSelection={rowSelectionType || batch_actions ? rowSelection : undefined}\n          rowKey={row_key}\n          size={\"large\"}\n          columns={columns}\n          dataSource={data}\n          scroll={scroll}\n          sticky={sticky}\n          expandable={\n            expand_column || iframes_in_row\n              ? {\n                  defaultExpandAllRows: default_expand_all_rows,\n                  onExpand: (expanded: boolean, record: any) => {\n                    this.ajustHeight()\n                  },\n                  expandedRowRender: function (\n                    record: any,\n                    index,\n                    indent,\n                    expanded\n                  ) {\n                    const root = document.getElementById(\"root\")\n                    let width = 0\n                    if (root) {\n                      width = root.clientWidth\n                    }\n                    return (\n                      <>\n                        {expand_column &&\n                          (expand_json ? (\n                            <JSONPretty\n                              id=\"json-pretty\"\n                              data={record[expand_column as string]}\n                            ></JSONPretty>\n                          ) : (\n                            <p style={{ margin: 0 }}>\n                              {record[expand_column as string]}\n                            </p>\n                          ))}\n                        {record[\"_antd_table_iframes\"] &&\n                          record[\"_antd_table_iframes\"].map(\n                            (link: string, index: number) => {\n                              // eslint-disable-next-line\n                              return (\n                                <iframe\n                                  style={{ marginRight: \"3px\" }}\n                                  frameBorder=\"0\"\n                                  key={index.toString()}\n                                  src={link}\n                                  width={\n                                    width /\n                                      record[\"_antd_table_iframes\"].length -\n                                    12\n                                  }\n                                  height={iframe_height}\n                                >\n                                  Browser not compatible.\n                                </iframe>\n                              )\n                            }\n                          )}\n                      </>\n                    )\n                  },\n                }\n              : undefined\n          }\n          summary={(pageData) => {\n            return batch_actions ? (\n              <Table.Summary fixed=\"bottom\">\n                <Table.Summary.Row>\n                  <Table.Summary.Cell index={0} colSpan={columns.length}>\n                    <Space size=\"middle\">\n                      {batch_actions.map(function (action: string, i: Number) {\n                        const selectedKeys: string[] = (\n                          that.state.selectedRowKeys || []\n                        ).map((key: React.Key) => key.toString())\n                        const records: object[] = (data as object[]).filter(\n                          (item: any) =>\n                            selectedKeys.includes(item[row_key].toString())\n                        )\n                        return (\n                          <Button\n                            key={`${i}`}\n                            onClick={that\n                              .handleAction(action, records, undefined, true)\n                              .bind(that)}\n                          >\n                            {action}\n                          </Button>\n                        )\n                      })}\n                    </Space>\n                  </Table.Summary.Cell>\n                </Table.Summary.Row>\n              </Table.Summary>\n            ) : (\n              <></>\n            )\n          }}\n        />\n      </ConfigProvider>\n    )\n  }\n}\n\nexport default withStreamlitConnection(STTable)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport STTable from \"./STTable\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <STTable />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}