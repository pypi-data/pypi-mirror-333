Metadata-Version: 2.2
Name: ame-esper
Version: 0.1.0
Summary: An AI Agent
Author-email: rickey <hello_rickey@163.com>
License: MIT
Project-URL: Homepage, https://github.com/AmeNetwork/esper
Project-URL: Bug Tracker, https://github.com/AmeNetwork/esper/issues
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.13.2
Description-Content-Type: text/markdown
Requires-Dist: openai>=1.63.2
Requires-Dist: web3>=7.8.0
Requires-Dist: discord-py-interactions>=5.14.0
Requires-Dist: python-telegram-bot>=21.10
Requires-Dist: tweepy>=4.15.0
Requires-Dist: supabase>=2.13.0
Requires-Dist: tinydb>=4.8.2
Requires-Dist: fastapi>=0.115.8
Requires-Dist: uvicorn>=0.34.0
Requires-Dist: python-dotenv>=1.0.1
Requires-Dist: chromadb>=0.6.3
Requires-Dist: tiktoken>=0.9.0
Requires-Dist: canonicaljson>=2.0.0

# Esper

Esper is an AI agent project that integrates various components for social media interaction, blockchain operations, and API functionality.

## Installation

To install Esper, follow these steps:

```bash
git clone https://github.com/AmeNetwork/esper.git
cd esper
pip3 install requirements.txt
```

## Code Examples
Here are some examples of how to use Esper:
```python

from esper import Agent
from esper.ame import AmeComponent
from eth_account import Account
from esper.memory import Memory
import os
from esper.chat2web3 import Chat2Web3

# Initialize AmeComponent, connecting to a local Ethereum node
component = AmeComponent(
    "http://127.0.0.1:8545",  # URL of the local Ethereum node
    "0x29a79095352a718B3D7Fe84E1F14E9F34A35598e"  # Contract address
)

# Get the methods of the contract
methods = component.get_methods()

# Retrieve the private key from environment variables
private_key = os.getenv("EVM_PRIVATE_KEY")

# Create an account using the private key
account = Account.from_key(private_key)

# Initialize Chat2Web3 object for handling blockchain interactions
chat2web3 = Chat2Web3("evm", account)

# Add a method named "getUserNameByAddress" to chat2web3
chat2web3.add(
    "getUserNameByAddress",
    "when a user want to get user name and age, it will return 2 value, one is name, the one is age",
    methods["getUser"],  # Use the getUser method from the contract
)

# Initialize Memory object using SQLite as storage
memory = Memory(type="sqlite")

# Create an Agent instance
agent = Agent(
    name="test",  # Agent name
    description="test",  # Agent description
    memory=memory,  # Use the previously created memory object
    model="gpt-4o",  # Specify the model to use
    chat2web3=chat2web3  # Use the previously created chat2web3 object
)

# Use the agent to chat and retrieve the username for a specific address
response = agent.chat("get user name 0xa0Ee7A142d267C1f36714E4a8F75612F20a79720")
