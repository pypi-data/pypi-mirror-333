Metadata-Version: 2.2
Name: aioartifactory
Version: 0.1.1
Summary: Asynchronous Input Output (AIO) Artifactory
Author: Yan Kuang
License: MIT License
        
        Copyright (c) 2024 Yan Kuang
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/YTKme/aioartifactory
Project-URL: Bug Tracker, https://github.com/YTKme/aioartifactory/issues
Keywords: aioartifactory
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Libraries
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.11
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: aiofiles
Requires-Dist: aiohttp[speedups]
Requires-Dist: tealogger
Provides-Extra: develop
Requires-Dist: build; extra == "develop"
Requires-Dist: pytest-asyncio; extra == "develop"
Requires-Dist: pytest-cov; extra == "develop"
Requires-Dist: pytest; extra == "develop"
Requires-Dist: ruff; extra == "develop"
Requires-Dist: twine; extra == "develop"
Provides-Extra: test
Requires-Dist: pytest-asyncio; extra == "test"
Requires-Dist: pytest-cov; extra == "test"
Requires-Dist: pytest; extra == "test"
Requires-Dist: ruff; extra == "test"

# Python Asynchronous Input Output (AIO) Artifactory

Python Asynchronous Input Output (AIO) Artifactory

## Table of Content

* [JFrog Command Line Interface (CLI) Example](#jfrog-command-line-interface-cli-example)
    * [Deploy One File](#deploy-one-file)
        * [Command](#command)
        * [Output](#output)
        * [Result](#result)
    * [Retrieve One File](#retrieve-one-file)
        * [Command](#command-1)
        * [Output](#output-1)
        * [Result](#result-1)
* [Glossary](#glossary)
* [Reference](#reference)
    * [Artifactory](#artifactory)
    * [Visual Studio Code](#visual-studio-code)

## JFrog Command Line Interface (CLI) Example

### Deploy One File

#### Command

```bash
# Short
jf rt u /root/folder/subfolder/file.ext generic-repository[-local]/

# Long
jfrog rt upload /root/folder/subfolder/file.ext generic-repository[-local]/
```

#### Output

```text
15:54:51 [🔵Info] Log path: /Users/user/.jfrog/logs/jfrog-cli.2025-02-21.15-54-51.52108.log
15:54:51 [🔵Info] These files were uploaded:

📦 generic-repository[-local]
└── 📁 root
    └── 📁 folder
        └── 📁 subfolder
            └── 📄 file.ext


{
  "status": "success",
  "totals": {
    "success": 1,
    "failure": 0
  }
}
```

#### Result

```text
generic-repository[-local]/
│
└── root/
    └── folder/
        └── subfolder/
            └── file.ext
```

### Retrieve One File

#### Command

```bash
# Short
jf rt dl generic-repository[-local]/folder/subfolder/file.ext

# Long
jfrog rt download generic-repository[-local]/folder/subfolder/file.ext
```

#### Output

```text
15:43:59 [🔵Info] Log path: /Users/user/.jfrog/logs/jfrog-cli.2025-02-21.15-43-59.51631.log
{
  "status": "success",
  "totals": {
    "success": 1,
    "failure": 0
  }
}
```

#### Result

```text
folder/
│
└── subfolder/
    └── file.ext
```

## Glossary

### Local Path

The Local Path is represented by a file system path pointing to a
location on the local file system.

#### Example

```text
# Unix
/home/user/path/subpath/
```

```text
# Windows
C:\Users\user\path\subpath\
```

### Remote Path

The Remote Path is represented by a URL (Uniform Resource Locator)
pointing to a location on the Internet. It should be the URL for
Artifactory.

#### Example

```text
https://artifactory.acme.com/artifactory/repository/path/subpath/
```

## Reference

### Artifactory

* [Artifactory Query Language](https://jfrog.com/help/r/jfrog-artifactory-documentation/artifactory-query-language)
    * [Artifactory AQL Entity and Field](https://jfrog.com/help/r/jfrog-artifactory-documentation/aql-entities-and-fields)
* [Artifactory REST APIs](https://jfrog.com/help/r/jfrog-rest-apis/artifactory-rest-apis)
    * [Artifactory REST APIs SEARCHES](https://jfrog.com/help/r/jfrog-rest-apis/searches)
        * [Artifactory Maximum Number of Search Queries](https://jfrog.com/help/r/maximum-number-of-search-queries/maximum-number-of-search-queries.)
    * [Deploy Artifact APIs](https://jfrog.com/help/r/jfrog-rest-apis/deploy-artifact-apis)

### Visual Studio Code

* [pytest configuration settings](https://code.visualstudio.com/docs/python/testing#_pytest-configuration-settings)
