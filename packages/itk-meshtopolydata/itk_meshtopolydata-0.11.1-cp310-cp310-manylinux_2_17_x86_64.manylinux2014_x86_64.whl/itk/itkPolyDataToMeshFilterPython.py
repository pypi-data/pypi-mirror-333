# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _MeshToPolyDataPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkPolyDataToMeshFilterPython
else:
    import _itkPolyDataToMeshFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkPolyDataPython
import itk.itkVectorContainerPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkContinuousIndexPython
import itk.itkIndexPython
import itk.itkArrayPython
import itk.itkMeshBasePython
import itk.itkBoundingBoxPython
import itk.itkMapContainerPython
import itk.itkPointSetPython

def itkPolyDataToMeshFilterPDD_New():
    return itkPolyDataToMeshFilterPDD.New()

class itkPolyDataToMeshFilterPDD(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkPolyDataToMeshFilterPDD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPolyDataToMeshFilterPDD_Pointer"""
        return _itkPolyDataToMeshFilterPython.itkPolyDataToMeshFilterPDD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPolyDataToMeshFilterPDD_Pointer"""
        return _itkPolyDataToMeshFilterPython.itkPolyDataToMeshFilterPDD_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPolyDataD const *

        """
        return _itkPolyDataToMeshFilterPython.itkPolyDataToMeshFilterPDD_SetInput(self, input)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPolyDataD
        GetInput(self, idx) -> itkPolyDataD

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkPolyDataToMeshFilterPython.itkPolyDataToMeshFilterPDD_GetInput(self, *args)

    def GetOutput(self, *args):
        r"""
        GetOutput(self) -> itkMeshD3
        GetOutput(self) -> itkMeshD3
        GetOutput(self, idx) -> itkMeshD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkPolyDataToMeshFilterPython.itkPolyDataToMeshFilterPDD_GetOutput(self, *args)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkPolyDataToMeshFilterPython.itkPolyDataToMeshFilterPDD_GenerateOutputInformation(self)
    __swig_destroy__ = _itkPolyDataToMeshFilterPython.delete_itkPolyDataToMeshFilterPDD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPolyDataToMeshFilterPDD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPolyDataToMeshFilterPython.itkPolyDataToMeshFilterPDD_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPolyDataToMeshFilterPDD

        Create a new object of the class itkPolyDataToMeshFilterPDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPolyDataToMeshFilterPDD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPolyDataToMeshFilterPDD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPolyDataToMeshFilterPDD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPolyDataToMeshFilterPDD in _itkPolyDataToMeshFilterPython:
_itkPolyDataToMeshFilterPython.itkPolyDataToMeshFilterPDD_swigregister(itkPolyDataToMeshFilterPDD)

def itkPolyDataToMeshFilterPDF_New():
    return itkPolyDataToMeshFilterPDF.New()

class itkPolyDataToMeshFilterPDF(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkPolyDataToMeshFilterPDF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPolyDataToMeshFilterPDF_Pointer"""
        return _itkPolyDataToMeshFilterPython.itkPolyDataToMeshFilterPDF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPolyDataToMeshFilterPDF_Pointer"""
        return _itkPolyDataToMeshFilterPython.itkPolyDataToMeshFilterPDF_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPolyDataF const *

        """
        return _itkPolyDataToMeshFilterPython.itkPolyDataToMeshFilterPDF_SetInput(self, input)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPolyDataF
        GetInput(self, idx) -> itkPolyDataF

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkPolyDataToMeshFilterPython.itkPolyDataToMeshFilterPDF_GetInput(self, *args)

    def GetOutput(self, *args):
        r"""
        GetOutput(self) -> itkMeshF3
        GetOutput(self) -> itkMeshF3
        GetOutput(self, idx) -> itkMeshF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkPolyDataToMeshFilterPython.itkPolyDataToMeshFilterPDF_GetOutput(self, *args)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkPolyDataToMeshFilterPython.itkPolyDataToMeshFilterPDF_GenerateOutputInformation(self)
    __swig_destroy__ = _itkPolyDataToMeshFilterPython.delete_itkPolyDataToMeshFilterPDF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPolyDataToMeshFilterPDF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPolyDataToMeshFilterPython.itkPolyDataToMeshFilterPDF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPolyDataToMeshFilterPDF

        Create a new object of the class itkPolyDataToMeshFilterPDF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPolyDataToMeshFilterPDF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPolyDataToMeshFilterPDF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPolyDataToMeshFilterPDF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPolyDataToMeshFilterPDF in _itkPolyDataToMeshFilterPython:
_itkPolyDataToMeshFilterPython.itkPolyDataToMeshFilterPDF_swigregister(itkPolyDataToMeshFilterPDF)

def itkPolyDataToMeshFilterPDSS_New():
    return itkPolyDataToMeshFilterPDSS.New()

class itkPolyDataToMeshFilterPDSS(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkPolyDataToMeshFilterPDSS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPolyDataToMeshFilterPDSS_Pointer"""
        return _itkPolyDataToMeshFilterPython.itkPolyDataToMeshFilterPDSS___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPolyDataToMeshFilterPDSS_Pointer"""
        return _itkPolyDataToMeshFilterPython.itkPolyDataToMeshFilterPDSS_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPolyDataSS const *

        """
        return _itkPolyDataToMeshFilterPython.itkPolyDataToMeshFilterPDSS_SetInput(self, input)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPolyDataSS
        GetInput(self, idx) -> itkPolyDataSS

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkPolyDataToMeshFilterPython.itkPolyDataToMeshFilterPDSS_GetInput(self, *args)

    def GetOutput(self, *args):
        r"""
        GetOutput(self) -> itkMeshSS3
        GetOutput(self) -> itkMeshSS3
        GetOutput(self, idx) -> itkMeshSS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkPolyDataToMeshFilterPython.itkPolyDataToMeshFilterPDSS_GetOutput(self, *args)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkPolyDataToMeshFilterPython.itkPolyDataToMeshFilterPDSS_GenerateOutputInformation(self)
    __swig_destroy__ = _itkPolyDataToMeshFilterPython.delete_itkPolyDataToMeshFilterPDSS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPolyDataToMeshFilterPDSS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPolyDataToMeshFilterPython.itkPolyDataToMeshFilterPDSS_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPolyDataToMeshFilterPDSS

        Create a new object of the class itkPolyDataToMeshFilterPDSS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPolyDataToMeshFilterPDSS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPolyDataToMeshFilterPDSS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPolyDataToMeshFilterPDSS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPolyDataToMeshFilterPDSS in _itkPolyDataToMeshFilterPython:
_itkPolyDataToMeshFilterPython.itkPolyDataToMeshFilterPDSS_swigregister(itkPolyDataToMeshFilterPDSS)

def itkPolyDataToMeshFilterPDUC_New():
    return itkPolyDataToMeshFilterPDUC.New()

class itkPolyDataToMeshFilterPDUC(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkPolyDataToMeshFilterPDUC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPolyDataToMeshFilterPDUC_Pointer"""
        return _itkPolyDataToMeshFilterPython.itkPolyDataToMeshFilterPDUC___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPolyDataToMeshFilterPDUC_Pointer"""
        return _itkPolyDataToMeshFilterPython.itkPolyDataToMeshFilterPDUC_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPolyDataUC const *

        """
        return _itkPolyDataToMeshFilterPython.itkPolyDataToMeshFilterPDUC_SetInput(self, input)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPolyDataUC
        GetInput(self, idx) -> itkPolyDataUC

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkPolyDataToMeshFilterPython.itkPolyDataToMeshFilterPDUC_GetInput(self, *args)

    def GetOutput(self, *args):
        r"""
        GetOutput(self) -> itkMeshUC3
        GetOutput(self) -> itkMeshUC3
        GetOutput(self, idx) -> itkMeshUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkPolyDataToMeshFilterPython.itkPolyDataToMeshFilterPDUC_GetOutput(self, *args)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkPolyDataToMeshFilterPython.itkPolyDataToMeshFilterPDUC_GenerateOutputInformation(self)
    __swig_destroy__ = _itkPolyDataToMeshFilterPython.delete_itkPolyDataToMeshFilterPDUC

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPolyDataToMeshFilterPDUC

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPolyDataToMeshFilterPython.itkPolyDataToMeshFilterPDUC_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPolyDataToMeshFilterPDUC

        Create a new object of the class itkPolyDataToMeshFilterPDUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPolyDataToMeshFilterPDUC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPolyDataToMeshFilterPDUC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPolyDataToMeshFilterPDUC.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPolyDataToMeshFilterPDUC in _itkPolyDataToMeshFilterPython:
_itkPolyDataToMeshFilterPython.itkPolyDataToMeshFilterPDUC_swigregister(itkPolyDataToMeshFilterPDUC)

def itkPolyDataToMeshFilterPDUS_New():
    return itkPolyDataToMeshFilterPDUS.New()

class itkPolyDataToMeshFilterPDUS(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkPolyDataToMeshFilterPDUS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPolyDataToMeshFilterPDUS_Pointer"""
        return _itkPolyDataToMeshFilterPython.itkPolyDataToMeshFilterPDUS___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPolyDataToMeshFilterPDUS_Pointer"""
        return _itkPolyDataToMeshFilterPython.itkPolyDataToMeshFilterPDUS_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPolyDataUS const *

        """
        return _itkPolyDataToMeshFilterPython.itkPolyDataToMeshFilterPDUS_SetInput(self, input)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPolyDataUS
        GetInput(self, idx) -> itkPolyDataUS

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkPolyDataToMeshFilterPython.itkPolyDataToMeshFilterPDUS_GetInput(self, *args)

    def GetOutput(self, *args):
        r"""
        GetOutput(self) -> itkMeshUS3
        GetOutput(self) -> itkMeshUS3
        GetOutput(self, idx) -> itkMeshUS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkPolyDataToMeshFilterPython.itkPolyDataToMeshFilterPDUS_GetOutput(self, *args)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkPolyDataToMeshFilterPython.itkPolyDataToMeshFilterPDUS_GenerateOutputInformation(self)
    __swig_destroy__ = _itkPolyDataToMeshFilterPython.delete_itkPolyDataToMeshFilterPDUS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPolyDataToMeshFilterPDUS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPolyDataToMeshFilterPython.itkPolyDataToMeshFilterPDUS_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPolyDataToMeshFilterPDUS

        Create a new object of the class itkPolyDataToMeshFilterPDUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPolyDataToMeshFilterPDUS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPolyDataToMeshFilterPDUS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPolyDataToMeshFilterPDUS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPolyDataToMeshFilterPDUS in _itkPolyDataToMeshFilterPython:
_itkPolyDataToMeshFilterPython.itkPolyDataToMeshFilterPDUS_swigregister(itkPolyDataToMeshFilterPDUS)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def poly_data_to_mesh_filter(*args, **kwargs):
    """Functional interface for PolyDataToMeshFilter"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.PolyDataToMeshFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def poly_data_to_mesh_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.MeshToPolyData.PolyDataToMeshFilter
    poly_data_to_mesh_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    poly_data_to_mesh_filter.__doc__ = filter_object.__doc__



