# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _MeshToPolyDataPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkPolyDataPython
else:
    import _itkPolyDataPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkVectorContainerPython
import itk.itkArrayPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkContinuousIndexPython
import itk.itkIndexPython

def itkPolyDataD_New():
    return itkPolyDataD.New()

class itkPolyDataD(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPolyDataD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPolyDataD_Pointer"""
        return _itkPolyDataPython.itkPolyDataD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPolyDataD_Pointer"""
        return _itkPolyDataPython.itkPolyDataD_Clone(self)

    def GetNumberOfPoints(self):
        r"""GetNumberOfPoints(self) -> unsigned long"""
        return _itkPolyDataPython.itkPolyDataD_GetNumberOfPoints(self)

    def SetPoints(self, arg0):
        r"""
        SetPoints(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULPF3 *

        """
        return _itkPolyDataPython.itkPolyDataD_SetPoints(self, arg0)

    def GetPoints(self, *args):
        r"""
        GetPoints(self) -> itkVectorContainerULPF3
        GetPoints(self) -> itkVectorContainerULPF3
        """
        return _itkPolyDataPython.itkPolyDataD_GetPoints(self, *args)

    def SetVertices(self, arg0):
        r"""
        SetVertices(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULUI *

        """
        return _itkPolyDataPython.itkPolyDataD_SetVertices(self, arg0)

    def GetVertices(self, *args):
        r"""
        GetVertices(self) -> itkVectorContainerULUI
        GetVertices(self) -> itkVectorContainerULUI
        """
        return _itkPolyDataPython.itkPolyDataD_GetVertices(self, *args)

    def SetLines(self, arg0):
        r"""
        SetLines(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULUI *

        """
        return _itkPolyDataPython.itkPolyDataD_SetLines(self, arg0)

    def GetLines(self, *args):
        r"""
        GetLines(self) -> itkVectorContainerULUI
        GetLines(self) -> itkVectorContainerULUI
        """
        return _itkPolyDataPython.itkPolyDataD_GetLines(self, *args)

    def SetPolygons(self, arg0):
        r"""
        SetPolygons(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULUI *

        """
        return _itkPolyDataPython.itkPolyDataD_SetPolygons(self, arg0)

    def GetPolygons(self, *args):
        r"""
        GetPolygons(self) -> itkVectorContainerULUI
        GetPolygons(self) -> itkVectorContainerULUI
        """
        return _itkPolyDataPython.itkPolyDataD_GetPolygons(self, *args)

    def SetTriangleStrips(self, arg0):
        r"""
        SetTriangleStrips(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULUI *

        """
        return _itkPolyDataPython.itkPolyDataD_SetTriangleStrips(self, arg0)

    def GetTriangleStrips(self, *args):
        r"""
        GetTriangleStrips(self) -> itkVectorContainerULUI
        GetTriangleStrips(self) -> itkVectorContainerULUI
        """
        return _itkPolyDataPython.itkPolyDataD_GetTriangleStrips(self, *args)

    def SetPoint(self, arg0, arg1):
        r"""
        SetPoint(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long
        arg1: itkPointF3

        """
        return _itkPolyDataPython.itkPolyDataD_SetPoint(self, arg0, arg1)

    def GetPoint(self, *args):
        r"""
        GetPoint(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long
        arg1: itkPointF3 *

        GetPoint(self, arg0) -> itkPointF3

        Parameters
        ----------
        arg0: unsigned long

        """
        return _itkPolyDataPython.itkPolyDataD_GetPoint(self, *args)

    def SetPointData(self, *args):
        r"""
        SetPointData(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULD *

        SetPointData(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long
        arg1: double

        """
        return _itkPolyDataPython.itkPolyDataD_SetPointData(self, *args)

    def GetPointData(self, *args):
        r"""
        GetPointData(self) -> itkVectorContainerULD
        GetPointData(self) -> itkVectorContainerULD
        GetPointData(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long
        arg1: double *

        """
        return _itkPolyDataPython.itkPolyDataD_GetPointData(self, *args)

    def SetCellData(self, *args):
        r"""
        SetCellData(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULD *

        SetCellData(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long
        arg1: double

        """
        return _itkPolyDataPython.itkPolyDataD_SetCellData(self, *args)

    def GetCellData(self, *args):
        r"""
        GetCellData(self) -> itkVectorContainerULD
        GetCellData(self) -> itkVectorContainerULD
        GetCellData(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long
        arg1: double *

        """
        return _itkPolyDataPython.itkPolyDataD_GetCellData(self, *args)
    __swig_destroy__ = _itkPolyDataPython.delete_itkPolyDataD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPolyDataD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPolyDataPython.itkPolyDataD_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPolyDataD

        Create a new object of the class itkPolyDataD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPolyDataD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPolyDataD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPolyDataD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPolyDataD in _itkPolyDataPython:
_itkPolyDataPython.itkPolyDataD_swigregister(itkPolyDataD)

def itkPolyDataF_New():
    return itkPolyDataF.New()

class itkPolyDataF(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPolyDataF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPolyDataF_Pointer"""
        return _itkPolyDataPython.itkPolyDataF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPolyDataF_Pointer"""
        return _itkPolyDataPython.itkPolyDataF_Clone(self)

    def GetNumberOfPoints(self):
        r"""GetNumberOfPoints(self) -> unsigned long"""
        return _itkPolyDataPython.itkPolyDataF_GetNumberOfPoints(self)

    def SetPoints(self, arg0):
        r"""
        SetPoints(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULPF3 *

        """
        return _itkPolyDataPython.itkPolyDataF_SetPoints(self, arg0)

    def GetPoints(self, *args):
        r"""
        GetPoints(self) -> itkVectorContainerULPF3
        GetPoints(self) -> itkVectorContainerULPF3
        """
        return _itkPolyDataPython.itkPolyDataF_GetPoints(self, *args)

    def SetVertices(self, arg0):
        r"""
        SetVertices(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULUI *

        """
        return _itkPolyDataPython.itkPolyDataF_SetVertices(self, arg0)

    def GetVertices(self, *args):
        r"""
        GetVertices(self) -> itkVectorContainerULUI
        GetVertices(self) -> itkVectorContainerULUI
        """
        return _itkPolyDataPython.itkPolyDataF_GetVertices(self, *args)

    def SetLines(self, arg0):
        r"""
        SetLines(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULUI *

        """
        return _itkPolyDataPython.itkPolyDataF_SetLines(self, arg0)

    def GetLines(self, *args):
        r"""
        GetLines(self) -> itkVectorContainerULUI
        GetLines(self) -> itkVectorContainerULUI
        """
        return _itkPolyDataPython.itkPolyDataF_GetLines(self, *args)

    def SetPolygons(self, arg0):
        r"""
        SetPolygons(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULUI *

        """
        return _itkPolyDataPython.itkPolyDataF_SetPolygons(self, arg0)

    def GetPolygons(self, *args):
        r"""
        GetPolygons(self) -> itkVectorContainerULUI
        GetPolygons(self) -> itkVectorContainerULUI
        """
        return _itkPolyDataPython.itkPolyDataF_GetPolygons(self, *args)

    def SetTriangleStrips(self, arg0):
        r"""
        SetTriangleStrips(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULUI *

        """
        return _itkPolyDataPython.itkPolyDataF_SetTriangleStrips(self, arg0)

    def GetTriangleStrips(self, *args):
        r"""
        GetTriangleStrips(self) -> itkVectorContainerULUI
        GetTriangleStrips(self) -> itkVectorContainerULUI
        """
        return _itkPolyDataPython.itkPolyDataF_GetTriangleStrips(self, *args)

    def SetPoint(self, arg0, arg1):
        r"""
        SetPoint(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long
        arg1: itkPointF3

        """
        return _itkPolyDataPython.itkPolyDataF_SetPoint(self, arg0, arg1)

    def GetPoint(self, *args):
        r"""
        GetPoint(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long
        arg1: itkPointF3 *

        GetPoint(self, arg0) -> itkPointF3

        Parameters
        ----------
        arg0: unsigned long

        """
        return _itkPolyDataPython.itkPolyDataF_GetPoint(self, *args)

    def SetPointData(self, *args):
        r"""
        SetPointData(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULF *

        SetPointData(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long
        arg1: float

        """
        return _itkPolyDataPython.itkPolyDataF_SetPointData(self, *args)

    def GetPointData(self, *args):
        r"""
        GetPointData(self) -> itkVectorContainerULF
        GetPointData(self) -> itkVectorContainerULF
        GetPointData(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long
        arg1: float *

        """
        return _itkPolyDataPython.itkPolyDataF_GetPointData(self, *args)

    def SetCellData(self, *args):
        r"""
        SetCellData(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULF *

        SetCellData(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long
        arg1: float

        """
        return _itkPolyDataPython.itkPolyDataF_SetCellData(self, *args)

    def GetCellData(self, *args):
        r"""
        GetCellData(self) -> itkVectorContainerULF
        GetCellData(self) -> itkVectorContainerULF
        GetCellData(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long
        arg1: float *

        """
        return _itkPolyDataPython.itkPolyDataF_GetCellData(self, *args)
    __swig_destroy__ = _itkPolyDataPython.delete_itkPolyDataF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPolyDataF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPolyDataPython.itkPolyDataF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPolyDataF

        Create a new object of the class itkPolyDataF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPolyDataF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPolyDataF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPolyDataF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPolyDataF in _itkPolyDataPython:
_itkPolyDataPython.itkPolyDataF_swigregister(itkPolyDataF)

def itkPolyDataSS_New():
    return itkPolyDataSS.New()

class itkPolyDataSS(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPolyDataSS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPolyDataSS_Pointer"""
        return _itkPolyDataPython.itkPolyDataSS___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPolyDataSS_Pointer"""
        return _itkPolyDataPython.itkPolyDataSS_Clone(self)

    def GetNumberOfPoints(self):
        r"""GetNumberOfPoints(self) -> unsigned long"""
        return _itkPolyDataPython.itkPolyDataSS_GetNumberOfPoints(self)

    def SetPoints(self, arg0):
        r"""
        SetPoints(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULPF3 *

        """
        return _itkPolyDataPython.itkPolyDataSS_SetPoints(self, arg0)

    def GetPoints(self, *args):
        r"""
        GetPoints(self) -> itkVectorContainerULPF3
        GetPoints(self) -> itkVectorContainerULPF3
        """
        return _itkPolyDataPython.itkPolyDataSS_GetPoints(self, *args)

    def SetVertices(self, arg0):
        r"""
        SetVertices(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULUI *

        """
        return _itkPolyDataPython.itkPolyDataSS_SetVertices(self, arg0)

    def GetVertices(self, *args):
        r"""
        GetVertices(self) -> itkVectorContainerULUI
        GetVertices(self) -> itkVectorContainerULUI
        """
        return _itkPolyDataPython.itkPolyDataSS_GetVertices(self, *args)

    def SetLines(self, arg0):
        r"""
        SetLines(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULUI *

        """
        return _itkPolyDataPython.itkPolyDataSS_SetLines(self, arg0)

    def GetLines(self, *args):
        r"""
        GetLines(self) -> itkVectorContainerULUI
        GetLines(self) -> itkVectorContainerULUI
        """
        return _itkPolyDataPython.itkPolyDataSS_GetLines(self, *args)

    def SetPolygons(self, arg0):
        r"""
        SetPolygons(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULUI *

        """
        return _itkPolyDataPython.itkPolyDataSS_SetPolygons(self, arg0)

    def GetPolygons(self, *args):
        r"""
        GetPolygons(self) -> itkVectorContainerULUI
        GetPolygons(self) -> itkVectorContainerULUI
        """
        return _itkPolyDataPython.itkPolyDataSS_GetPolygons(self, *args)

    def SetTriangleStrips(self, arg0):
        r"""
        SetTriangleStrips(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULUI *

        """
        return _itkPolyDataPython.itkPolyDataSS_SetTriangleStrips(self, arg0)

    def GetTriangleStrips(self, *args):
        r"""
        GetTriangleStrips(self) -> itkVectorContainerULUI
        GetTriangleStrips(self) -> itkVectorContainerULUI
        """
        return _itkPolyDataPython.itkPolyDataSS_GetTriangleStrips(self, *args)

    def SetPoint(self, arg0, arg1):
        r"""
        SetPoint(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long
        arg1: itkPointF3

        """
        return _itkPolyDataPython.itkPolyDataSS_SetPoint(self, arg0, arg1)

    def GetPoint(self, *args):
        r"""
        GetPoint(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long
        arg1: itkPointF3 *

        GetPoint(self, arg0) -> itkPointF3

        Parameters
        ----------
        arg0: unsigned long

        """
        return _itkPolyDataPython.itkPolyDataSS_GetPoint(self, *args)

    def SetPointData(self, *args):
        r"""
        SetPointData(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULSS *

        SetPointData(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long
        arg1: short

        """
        return _itkPolyDataPython.itkPolyDataSS_SetPointData(self, *args)

    def GetPointData(self, *args):
        r"""
        GetPointData(self) -> itkVectorContainerULSS
        GetPointData(self) -> itkVectorContainerULSS
        GetPointData(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long
        arg1: short *

        """
        return _itkPolyDataPython.itkPolyDataSS_GetPointData(self, *args)

    def SetCellData(self, *args):
        r"""
        SetCellData(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULSS *

        SetCellData(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long
        arg1: short

        """
        return _itkPolyDataPython.itkPolyDataSS_SetCellData(self, *args)

    def GetCellData(self, *args):
        r"""
        GetCellData(self) -> itkVectorContainerULSS
        GetCellData(self) -> itkVectorContainerULSS
        GetCellData(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long
        arg1: short *

        """
        return _itkPolyDataPython.itkPolyDataSS_GetCellData(self, *args)
    __swig_destroy__ = _itkPolyDataPython.delete_itkPolyDataSS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPolyDataSS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPolyDataPython.itkPolyDataSS_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPolyDataSS

        Create a new object of the class itkPolyDataSS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPolyDataSS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPolyDataSS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPolyDataSS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPolyDataSS in _itkPolyDataPython:
_itkPolyDataPython.itkPolyDataSS_swigregister(itkPolyDataSS)

def itkPolyDataUC_New():
    return itkPolyDataUC.New()

class itkPolyDataUC(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPolyDataUC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPolyDataUC_Pointer"""
        return _itkPolyDataPython.itkPolyDataUC___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPolyDataUC_Pointer"""
        return _itkPolyDataPython.itkPolyDataUC_Clone(self)

    def GetNumberOfPoints(self):
        r"""GetNumberOfPoints(self) -> unsigned long"""
        return _itkPolyDataPython.itkPolyDataUC_GetNumberOfPoints(self)

    def SetPoints(self, arg0):
        r"""
        SetPoints(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULPF3 *

        """
        return _itkPolyDataPython.itkPolyDataUC_SetPoints(self, arg0)

    def GetPoints(self, *args):
        r"""
        GetPoints(self) -> itkVectorContainerULPF3
        GetPoints(self) -> itkVectorContainerULPF3
        """
        return _itkPolyDataPython.itkPolyDataUC_GetPoints(self, *args)

    def SetVertices(self, arg0):
        r"""
        SetVertices(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULUI *

        """
        return _itkPolyDataPython.itkPolyDataUC_SetVertices(self, arg0)

    def GetVertices(self, *args):
        r"""
        GetVertices(self) -> itkVectorContainerULUI
        GetVertices(self) -> itkVectorContainerULUI
        """
        return _itkPolyDataPython.itkPolyDataUC_GetVertices(self, *args)

    def SetLines(self, arg0):
        r"""
        SetLines(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULUI *

        """
        return _itkPolyDataPython.itkPolyDataUC_SetLines(self, arg0)

    def GetLines(self, *args):
        r"""
        GetLines(self) -> itkVectorContainerULUI
        GetLines(self) -> itkVectorContainerULUI
        """
        return _itkPolyDataPython.itkPolyDataUC_GetLines(self, *args)

    def SetPolygons(self, arg0):
        r"""
        SetPolygons(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULUI *

        """
        return _itkPolyDataPython.itkPolyDataUC_SetPolygons(self, arg0)

    def GetPolygons(self, *args):
        r"""
        GetPolygons(self) -> itkVectorContainerULUI
        GetPolygons(self) -> itkVectorContainerULUI
        """
        return _itkPolyDataPython.itkPolyDataUC_GetPolygons(self, *args)

    def SetTriangleStrips(self, arg0):
        r"""
        SetTriangleStrips(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULUI *

        """
        return _itkPolyDataPython.itkPolyDataUC_SetTriangleStrips(self, arg0)

    def GetTriangleStrips(self, *args):
        r"""
        GetTriangleStrips(self) -> itkVectorContainerULUI
        GetTriangleStrips(self) -> itkVectorContainerULUI
        """
        return _itkPolyDataPython.itkPolyDataUC_GetTriangleStrips(self, *args)

    def SetPoint(self, arg0, arg1):
        r"""
        SetPoint(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long
        arg1: itkPointF3

        """
        return _itkPolyDataPython.itkPolyDataUC_SetPoint(self, arg0, arg1)

    def GetPoint(self, *args):
        r"""
        GetPoint(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long
        arg1: itkPointF3 *

        GetPoint(self, arg0) -> itkPointF3

        Parameters
        ----------
        arg0: unsigned long

        """
        return _itkPolyDataPython.itkPolyDataUC_GetPoint(self, *args)

    def SetPointData(self, *args):
        r"""
        SetPointData(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULUC *

        SetPointData(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long
        arg1: unsigned char

        """
        return _itkPolyDataPython.itkPolyDataUC_SetPointData(self, *args)

    def GetPointData(self, *args):
        r"""
        GetPointData(self) -> itkVectorContainerULUC
        GetPointData(self) -> itkVectorContainerULUC
        GetPointData(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long
        arg1: unsigned char *

        """
        return _itkPolyDataPython.itkPolyDataUC_GetPointData(self, *args)

    def SetCellData(self, *args):
        r"""
        SetCellData(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULUC *

        SetCellData(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long
        arg1: unsigned char

        """
        return _itkPolyDataPython.itkPolyDataUC_SetCellData(self, *args)

    def GetCellData(self, *args):
        r"""
        GetCellData(self) -> itkVectorContainerULUC
        GetCellData(self) -> itkVectorContainerULUC
        GetCellData(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long
        arg1: unsigned char *

        """
        return _itkPolyDataPython.itkPolyDataUC_GetCellData(self, *args)
    __swig_destroy__ = _itkPolyDataPython.delete_itkPolyDataUC

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPolyDataUC

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPolyDataPython.itkPolyDataUC_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPolyDataUC

        Create a new object of the class itkPolyDataUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPolyDataUC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPolyDataUC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPolyDataUC.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPolyDataUC in _itkPolyDataPython:
_itkPolyDataPython.itkPolyDataUC_swigregister(itkPolyDataUC)

def itkPolyDataUS_New():
    return itkPolyDataUS.New()

class itkPolyDataUS(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPolyDataUS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPolyDataUS_Pointer"""
        return _itkPolyDataPython.itkPolyDataUS___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPolyDataUS_Pointer"""
        return _itkPolyDataPython.itkPolyDataUS_Clone(self)

    def GetNumberOfPoints(self):
        r"""GetNumberOfPoints(self) -> unsigned long"""
        return _itkPolyDataPython.itkPolyDataUS_GetNumberOfPoints(self)

    def SetPoints(self, arg0):
        r"""
        SetPoints(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULPF3 *

        """
        return _itkPolyDataPython.itkPolyDataUS_SetPoints(self, arg0)

    def GetPoints(self, *args):
        r"""
        GetPoints(self) -> itkVectorContainerULPF3
        GetPoints(self) -> itkVectorContainerULPF3
        """
        return _itkPolyDataPython.itkPolyDataUS_GetPoints(self, *args)

    def SetVertices(self, arg0):
        r"""
        SetVertices(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULUI *

        """
        return _itkPolyDataPython.itkPolyDataUS_SetVertices(self, arg0)

    def GetVertices(self, *args):
        r"""
        GetVertices(self) -> itkVectorContainerULUI
        GetVertices(self) -> itkVectorContainerULUI
        """
        return _itkPolyDataPython.itkPolyDataUS_GetVertices(self, *args)

    def SetLines(self, arg0):
        r"""
        SetLines(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULUI *

        """
        return _itkPolyDataPython.itkPolyDataUS_SetLines(self, arg0)

    def GetLines(self, *args):
        r"""
        GetLines(self) -> itkVectorContainerULUI
        GetLines(self) -> itkVectorContainerULUI
        """
        return _itkPolyDataPython.itkPolyDataUS_GetLines(self, *args)

    def SetPolygons(self, arg0):
        r"""
        SetPolygons(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULUI *

        """
        return _itkPolyDataPython.itkPolyDataUS_SetPolygons(self, arg0)

    def GetPolygons(self, *args):
        r"""
        GetPolygons(self) -> itkVectorContainerULUI
        GetPolygons(self) -> itkVectorContainerULUI
        """
        return _itkPolyDataPython.itkPolyDataUS_GetPolygons(self, *args)

    def SetTriangleStrips(self, arg0):
        r"""
        SetTriangleStrips(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULUI *

        """
        return _itkPolyDataPython.itkPolyDataUS_SetTriangleStrips(self, arg0)

    def GetTriangleStrips(self, *args):
        r"""
        GetTriangleStrips(self) -> itkVectorContainerULUI
        GetTriangleStrips(self) -> itkVectorContainerULUI
        """
        return _itkPolyDataPython.itkPolyDataUS_GetTriangleStrips(self, *args)

    def SetPoint(self, arg0, arg1):
        r"""
        SetPoint(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long
        arg1: itkPointF3

        """
        return _itkPolyDataPython.itkPolyDataUS_SetPoint(self, arg0, arg1)

    def GetPoint(self, *args):
        r"""
        GetPoint(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long
        arg1: itkPointF3 *

        GetPoint(self, arg0) -> itkPointF3

        Parameters
        ----------
        arg0: unsigned long

        """
        return _itkPolyDataPython.itkPolyDataUS_GetPoint(self, *args)

    def SetPointData(self, *args):
        r"""
        SetPointData(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULUS *

        SetPointData(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long
        arg1: unsigned short

        """
        return _itkPolyDataPython.itkPolyDataUS_SetPointData(self, *args)

    def GetPointData(self, *args):
        r"""
        GetPointData(self) -> itkVectorContainerULUS
        GetPointData(self) -> itkVectorContainerULUS
        GetPointData(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long
        arg1: unsigned short *

        """
        return _itkPolyDataPython.itkPolyDataUS_GetPointData(self, *args)

    def SetCellData(self, *args):
        r"""
        SetCellData(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULUS *

        SetCellData(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long
        arg1: unsigned short

        """
        return _itkPolyDataPython.itkPolyDataUS_SetCellData(self, *args)

    def GetCellData(self, *args):
        r"""
        GetCellData(self) -> itkVectorContainerULUS
        GetCellData(self) -> itkVectorContainerULUS
        GetCellData(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long
        arg1: unsigned short *

        """
        return _itkPolyDataPython.itkPolyDataUS_GetCellData(self, *args)
    __swig_destroy__ = _itkPolyDataPython.delete_itkPolyDataUS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPolyDataUS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPolyDataPython.itkPolyDataUS_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPolyDataUS

        Create a new object of the class itkPolyDataUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPolyDataUS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPolyDataUS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPolyDataUS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPolyDataUS in _itkPolyDataPython:
_itkPolyDataPython.itkPolyDataUS_swigregister(itkPolyDataUS)

