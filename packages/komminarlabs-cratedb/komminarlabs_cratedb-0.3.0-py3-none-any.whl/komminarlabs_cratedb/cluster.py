# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ClusterArgs', 'Cluster']

@pulumi.input_type
class ClusterArgs:
    def __init__(__self__, *,
                 crate_version: pulumi.Input[str],
                 organization_id: pulumi.Input[str],
                 password: pulumi.Input[str],
                 product_name: pulumi.Input[str],
                 product_tier: pulumi.Input[str],
                 project_id: pulumi.Input[str],
                 subscription_id: pulumi.Input[str],
                 username: pulumi.Input[str],
                 channel: Optional[pulumi.Input[str]] = None,
                 hardware_specs: Optional[pulumi.Input['ClusterHardwareSpecsArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 product_unit: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Cluster resource.
        :param pulumi.Input[str] crate_version: The CrateDB version of the cluster.
        :param pulumi.Input[str] organization_id: The organization id of the cluster.
        :param pulumi.Input[str] password: The password of the cluster.
        :param pulumi.Input[str] product_name: The product name of the cluster.
        :param pulumi.Input[str] product_tier: The product tier of the cluster.
        :param pulumi.Input[str] project_id: The project id of the cluster.
        :param pulumi.Input[str] subscription_id: The subscription id of the cluster.
        :param pulumi.Input[str] username: The username of the cluster.
        :param pulumi.Input[str] channel: The channel of the cluster. Default is `stable`.
        :param pulumi.Input['ClusterHardwareSpecsArgs'] hardware_specs: The hardware specs of the cluster.
        :param pulumi.Input[str] name: The name of the cluster.
        :param pulumi.Input[int] product_unit: The product unit of the cluster. Default is `0`.
        """
        pulumi.set(__self__, "crate_version", crate_version)
        pulumi.set(__self__, "organization_id", organization_id)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "product_name", product_name)
        pulumi.set(__self__, "product_tier", product_tier)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "subscription_id", subscription_id)
        pulumi.set(__self__, "username", username)
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if hardware_specs is not None:
            pulumi.set(__self__, "hardware_specs", hardware_specs)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if product_unit is not None:
            pulumi.set(__self__, "product_unit", product_unit)

    @property
    @pulumi.getter(name="crateVersion")
    def crate_version(self) -> pulumi.Input[str]:
        """
        The CrateDB version of the cluster.
        """
        return pulumi.get(self, "crate_version")

    @crate_version.setter
    def crate_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "crate_version", value)

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Input[str]:
        """
        The organization id of the cluster.
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "organization_id", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        The password of the cluster.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> pulumi.Input[str]:
        """
        The product name of the cluster.
        """
        return pulumi.get(self, "product_name")

    @product_name.setter
    def product_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "product_name", value)

    @property
    @pulumi.getter(name="productTier")
    def product_tier(self) -> pulumi.Input[str]:
        """
        The product tier of the cluster.
        """
        return pulumi.get(self, "product_tier")

    @product_tier.setter
    def product_tier(self, value: pulumi.Input[str]):
        pulumi.set(self, "product_tier", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        The project id of the cluster.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> pulumi.Input[str]:
        """
        The subscription id of the cluster.
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subscription_id", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        The username of the cluster.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def channel(self) -> Optional[pulumi.Input[str]]:
        """
        The channel of the cluster. Default is `stable`.
        """
        return pulumi.get(self, "channel")

    @channel.setter
    def channel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel", value)

    @property
    @pulumi.getter(name="hardwareSpecs")
    def hardware_specs(self) -> Optional[pulumi.Input['ClusterHardwareSpecsArgs']]:
        """
        The hardware specs of the cluster.
        """
        return pulumi.get(self, "hardware_specs")

    @hardware_specs.setter
    def hardware_specs(self, value: Optional[pulumi.Input['ClusterHardwareSpecsArgs']]):
        pulumi.set(self, "hardware_specs", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the cluster.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="productUnit")
    def product_unit(self) -> Optional[pulumi.Input[int]]:
        """
        The product unit of the cluster. Default is `0`.
        """
        return pulumi.get(self, "product_unit")

    @product_unit.setter
    def product_unit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "product_unit", value)


@pulumi.input_type
class _ClusterState:
    def __init__(__self__, *,
                 allow_custom_storage: Optional[pulumi.Input[bool]] = None,
                 allow_suspend: Optional[pulumi.Input[bool]] = None,
                 backup_schedule: Optional[pulumi.Input[str]] = None,
                 channel: Optional[pulumi.Input[str]] = None,
                 crate_version: Optional[pulumi.Input[str]] = None,
                 dc: Optional[pulumi.Input['ClusterDcArgs']] = None,
                 deletion_protected: Optional[pulumi.Input[bool]] = None,
                 external_ip: Optional[pulumi.Input[str]] = None,
                 fqdn: Optional[pulumi.Input[str]] = None,
                 gc_available: Optional[pulumi.Input[bool]] = None,
                 hardware_specs: Optional[pulumi.Input['ClusterHardwareSpecsArgs']] = None,
                 health: Optional[pulumi.Input['ClusterHealthArgs']] = None,
                 ip_whitelists: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIpWhitelistArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 num_nodes: Optional[pulumi.Input[int]] = None,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 origin: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 product_name: Optional[pulumi.Input[str]] = None,
                 product_tier: Optional[pulumi.Input[str]] = None,
                 product_unit: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 subscription_id: Optional[pulumi.Input[str]] = None,
                 suspended: Optional[pulumi.Input[bool]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Cluster resources.
        :param pulumi.Input[bool] allow_custom_storage: The allow custom storage flag.
        :param pulumi.Input[bool] allow_suspend: The allow suspend flag.
        :param pulumi.Input[str] backup_schedule: The backup schedule.
        :param pulumi.Input[str] channel: The channel of the cluster. Default is `stable`.
        :param pulumi.Input[str] crate_version: The CrateDB version of the cluster.
        :param pulumi.Input['ClusterDcArgs'] dc: The DublinCore of the cluster.
        :param pulumi.Input[bool] deletion_protected: The deletion protected flag.
        :param pulumi.Input[str] external_ip: The external IP address.
        :param pulumi.Input[str] fqdn: The Fully Qualified Domain Name.
        :param pulumi.Input[bool] gc_available: The garbage collection available flag.
        :param pulumi.Input['ClusterHardwareSpecsArgs'] hardware_specs: The hardware specs of the cluster.
        :param pulumi.Input['ClusterHealthArgs'] health: The health of the cluster.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIpWhitelistArgs']]] ip_whitelists: The IP whitelist of the cluster.
        :param pulumi.Input[str] name: The name of the cluster.
        :param pulumi.Input[int] num_nodes: The number of nodes in the cluster.
        :param pulumi.Input[str] organization_id: The organization id of the cluster.
        :param pulumi.Input[str] origin: The origin of the cluster.
        :param pulumi.Input[str] password: The password of the cluster.
        :param pulumi.Input[str] product_name: The product name of the cluster.
        :param pulumi.Input[str] product_tier: The product tier of the cluster.
        :param pulumi.Input[int] product_unit: The product unit of the cluster. Default is `0`.
        :param pulumi.Input[str] project_id: The project id of the cluster.
        :param pulumi.Input[str] subscription_id: The subscription id of the cluster.
        :param pulumi.Input[bool] suspended: The suspended flag.
        :param pulumi.Input[str] url: The URL of the cluster.
        :param pulumi.Input[str] username: The username of the cluster.
        """
        if allow_custom_storage is not None:
            pulumi.set(__self__, "allow_custom_storage", allow_custom_storage)
        if allow_suspend is not None:
            pulumi.set(__self__, "allow_suspend", allow_suspend)
        if backup_schedule is not None:
            pulumi.set(__self__, "backup_schedule", backup_schedule)
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if crate_version is not None:
            pulumi.set(__self__, "crate_version", crate_version)
        if dc is not None:
            pulumi.set(__self__, "dc", dc)
        if deletion_protected is not None:
            pulumi.set(__self__, "deletion_protected", deletion_protected)
        if external_ip is not None:
            pulumi.set(__self__, "external_ip", external_ip)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if gc_available is not None:
            pulumi.set(__self__, "gc_available", gc_available)
        if hardware_specs is not None:
            pulumi.set(__self__, "hardware_specs", hardware_specs)
        if health is not None:
            pulumi.set(__self__, "health", health)
        if ip_whitelists is not None:
            pulumi.set(__self__, "ip_whitelists", ip_whitelists)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if num_nodes is not None:
            pulumi.set(__self__, "num_nodes", num_nodes)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if product_name is not None:
            pulumi.set(__self__, "product_name", product_name)
        if product_tier is not None:
            pulumi.set(__self__, "product_tier", product_tier)
        if product_unit is not None:
            pulumi.set(__self__, "product_unit", product_unit)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)
        if suspended is not None:
            pulumi.set(__self__, "suspended", suspended)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="allowCustomStorage")
    def allow_custom_storage(self) -> Optional[pulumi.Input[bool]]:
        """
        The allow custom storage flag.
        """
        return pulumi.get(self, "allow_custom_storage")

    @allow_custom_storage.setter
    def allow_custom_storage(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_custom_storage", value)

    @property
    @pulumi.getter(name="allowSuspend")
    def allow_suspend(self) -> Optional[pulumi.Input[bool]]:
        """
        The allow suspend flag.
        """
        return pulumi.get(self, "allow_suspend")

    @allow_suspend.setter
    def allow_suspend(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_suspend", value)

    @property
    @pulumi.getter(name="backupSchedule")
    def backup_schedule(self) -> Optional[pulumi.Input[str]]:
        """
        The backup schedule.
        """
        return pulumi.get(self, "backup_schedule")

    @backup_schedule.setter
    def backup_schedule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_schedule", value)

    @property
    @pulumi.getter
    def channel(self) -> Optional[pulumi.Input[str]]:
        """
        The channel of the cluster. Default is `stable`.
        """
        return pulumi.get(self, "channel")

    @channel.setter
    def channel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel", value)

    @property
    @pulumi.getter(name="crateVersion")
    def crate_version(self) -> Optional[pulumi.Input[str]]:
        """
        The CrateDB version of the cluster.
        """
        return pulumi.get(self, "crate_version")

    @crate_version.setter
    def crate_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "crate_version", value)

    @property
    @pulumi.getter
    def dc(self) -> Optional[pulumi.Input['ClusterDcArgs']]:
        """
        The DublinCore of the cluster.
        """
        return pulumi.get(self, "dc")

    @dc.setter
    def dc(self, value: Optional[pulumi.Input['ClusterDcArgs']]):
        pulumi.set(self, "dc", value)

    @property
    @pulumi.getter(name="deletionProtected")
    def deletion_protected(self) -> Optional[pulumi.Input[bool]]:
        """
        The deletion protected flag.
        """
        return pulumi.get(self, "deletion_protected")

    @deletion_protected.setter
    def deletion_protected(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deletion_protected", value)

    @property
    @pulumi.getter(name="externalIp")
    def external_ip(self) -> Optional[pulumi.Input[str]]:
        """
        The external IP address.
        """
        return pulumi.get(self, "external_ip")

    @external_ip.setter
    def external_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_ip", value)

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        The Fully Qualified Domain Name.
        """
        return pulumi.get(self, "fqdn")

    @fqdn.setter
    def fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fqdn", value)

    @property
    @pulumi.getter(name="gcAvailable")
    def gc_available(self) -> Optional[pulumi.Input[bool]]:
        """
        The garbage collection available flag.
        """
        return pulumi.get(self, "gc_available")

    @gc_available.setter
    def gc_available(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "gc_available", value)

    @property
    @pulumi.getter(name="hardwareSpecs")
    def hardware_specs(self) -> Optional[pulumi.Input['ClusterHardwareSpecsArgs']]:
        """
        The hardware specs of the cluster.
        """
        return pulumi.get(self, "hardware_specs")

    @hardware_specs.setter
    def hardware_specs(self, value: Optional[pulumi.Input['ClusterHardwareSpecsArgs']]):
        pulumi.set(self, "hardware_specs", value)

    @property
    @pulumi.getter
    def health(self) -> Optional[pulumi.Input['ClusterHealthArgs']]:
        """
        The health of the cluster.
        """
        return pulumi.get(self, "health")

    @health.setter
    def health(self, value: Optional[pulumi.Input['ClusterHealthArgs']]):
        pulumi.set(self, "health", value)

    @property
    @pulumi.getter(name="ipWhitelists")
    def ip_whitelists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIpWhitelistArgs']]]]:
        """
        The IP whitelist of the cluster.
        """
        return pulumi.get(self, "ip_whitelists")

    @ip_whitelists.setter
    def ip_whitelists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIpWhitelistArgs']]]]):
        pulumi.set(self, "ip_whitelists", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the cluster.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="numNodes")
    def num_nodes(self) -> Optional[pulumi.Input[int]]:
        """
        The number of nodes in the cluster.
        """
        return pulumi.get(self, "num_nodes")

    @num_nodes.setter
    def num_nodes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "num_nodes", value)

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[pulumi.Input[str]]:
        """
        The organization id of the cluster.
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization_id", value)

    @property
    @pulumi.getter
    def origin(self) -> Optional[pulumi.Input[str]]:
        """
        The origin of the cluster.
        """
        return pulumi.get(self, "origin")

    @origin.setter
    def origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "origin", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The password of the cluster.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> Optional[pulumi.Input[str]]:
        """
        The product name of the cluster.
        """
        return pulumi.get(self, "product_name")

    @product_name.setter
    def product_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "product_name", value)

    @property
    @pulumi.getter(name="productTier")
    def product_tier(self) -> Optional[pulumi.Input[str]]:
        """
        The product tier of the cluster.
        """
        return pulumi.get(self, "product_tier")

    @product_tier.setter
    def product_tier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "product_tier", value)

    @property
    @pulumi.getter(name="productUnit")
    def product_unit(self) -> Optional[pulumi.Input[int]]:
        """
        The product unit of the cluster. Default is `0`.
        """
        return pulumi.get(self, "product_unit")

    @product_unit.setter
    def product_unit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "product_unit", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        The project id of the cluster.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[pulumi.Input[str]]:
        """
        The subscription id of the cluster.
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscription_id", value)

    @property
    @pulumi.getter
    def suspended(self) -> Optional[pulumi.Input[bool]]:
        """
        The suspended flag.
        """
        return pulumi.get(self, "suspended")

    @suspended.setter
    def suspended(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suspended", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the cluster.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        The username of the cluster.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


class Cluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 channel: Optional[pulumi.Input[str]] = None,
                 crate_version: Optional[pulumi.Input[str]] = None,
                 hardware_specs: Optional[pulumi.Input[Union['ClusterHardwareSpecsArgs', 'ClusterHardwareSpecsArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 product_name: Optional[pulumi.Input[str]] = None,
                 product_tier: Optional[pulumi.Input[str]] = None,
                 product_unit: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 subscription_id: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Creates and manages a cluster.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] channel: The channel of the cluster. Default is `stable`.
        :param pulumi.Input[str] crate_version: The CrateDB version of the cluster.
        :param pulumi.Input[Union['ClusterHardwareSpecsArgs', 'ClusterHardwareSpecsArgsDict']] hardware_specs: The hardware specs of the cluster.
        :param pulumi.Input[str] name: The name of the cluster.
        :param pulumi.Input[str] organization_id: The organization id of the cluster.
        :param pulumi.Input[str] password: The password of the cluster.
        :param pulumi.Input[str] product_name: The product name of the cluster.
        :param pulumi.Input[str] product_tier: The product tier of the cluster.
        :param pulumi.Input[int] product_unit: The product unit of the cluster. Default is `0`.
        :param pulumi.Input[str] project_id: The project id of the cluster.
        :param pulumi.Input[str] subscription_id: The subscription id of the cluster.
        :param pulumi.Input[str] username: The username of the cluster.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates and manages a cluster.

        :param str resource_name: The name of the resource.
        :param ClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 channel: Optional[pulumi.Input[str]] = None,
                 crate_version: Optional[pulumi.Input[str]] = None,
                 hardware_specs: Optional[pulumi.Input[Union['ClusterHardwareSpecsArgs', 'ClusterHardwareSpecsArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 product_name: Optional[pulumi.Input[str]] = None,
                 product_tier: Optional[pulumi.Input[str]] = None,
                 product_unit: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 subscription_id: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClusterArgs.__new__(ClusterArgs)

            __props__.__dict__["channel"] = channel
            if crate_version is None and not opts.urn:
                raise TypeError("Missing required property 'crate_version'")
            __props__.__dict__["crate_version"] = crate_version
            __props__.__dict__["hardware_specs"] = hardware_specs
            __props__.__dict__["name"] = name
            if organization_id is None and not opts.urn:
                raise TypeError("Missing required property 'organization_id'")
            __props__.__dict__["organization_id"] = organization_id
            if password is None and not opts.urn:
                raise TypeError("Missing required property 'password'")
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            if product_name is None and not opts.urn:
                raise TypeError("Missing required property 'product_name'")
            __props__.__dict__["product_name"] = product_name
            if product_tier is None and not opts.urn:
                raise TypeError("Missing required property 'product_tier'")
            __props__.__dict__["product_tier"] = product_tier
            __props__.__dict__["product_unit"] = product_unit
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            if subscription_id is None and not opts.urn:
                raise TypeError("Missing required property 'subscription_id'")
            __props__.__dict__["subscription_id"] = subscription_id
            if username is None and not opts.urn:
                raise TypeError("Missing required property 'username'")
            __props__.__dict__["username"] = username
            __props__.__dict__["allow_custom_storage"] = None
            __props__.__dict__["allow_suspend"] = None
            __props__.__dict__["backup_schedule"] = None
            __props__.__dict__["dc"] = None
            __props__.__dict__["deletion_protected"] = None
            __props__.__dict__["external_ip"] = None
            __props__.__dict__["fqdn"] = None
            __props__.__dict__["gc_available"] = None
            __props__.__dict__["health"] = None
            __props__.__dict__["ip_whitelists"] = None
            __props__.__dict__["num_nodes"] = None
            __props__.__dict__["origin"] = None
            __props__.__dict__["suspended"] = None
            __props__.__dict__["url"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Cluster, __self__).__init__(
            'cratedb:index/cluster:Cluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_custom_storage: Optional[pulumi.Input[bool]] = None,
            allow_suspend: Optional[pulumi.Input[bool]] = None,
            backup_schedule: Optional[pulumi.Input[str]] = None,
            channel: Optional[pulumi.Input[str]] = None,
            crate_version: Optional[pulumi.Input[str]] = None,
            dc: Optional[pulumi.Input[Union['ClusterDcArgs', 'ClusterDcArgsDict']]] = None,
            deletion_protected: Optional[pulumi.Input[bool]] = None,
            external_ip: Optional[pulumi.Input[str]] = None,
            fqdn: Optional[pulumi.Input[str]] = None,
            gc_available: Optional[pulumi.Input[bool]] = None,
            hardware_specs: Optional[pulumi.Input[Union['ClusterHardwareSpecsArgs', 'ClusterHardwareSpecsArgsDict']]] = None,
            health: Optional[pulumi.Input[Union['ClusterHealthArgs', 'ClusterHealthArgsDict']]] = None,
            ip_whitelists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ClusterIpWhitelistArgs', 'ClusterIpWhitelistArgsDict']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            num_nodes: Optional[pulumi.Input[int]] = None,
            organization_id: Optional[pulumi.Input[str]] = None,
            origin: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            product_name: Optional[pulumi.Input[str]] = None,
            product_tier: Optional[pulumi.Input[str]] = None,
            product_unit: Optional[pulumi.Input[int]] = None,
            project_id: Optional[pulumi.Input[str]] = None,
            subscription_id: Optional[pulumi.Input[str]] = None,
            suspended: Optional[pulumi.Input[bool]] = None,
            url: Optional[pulumi.Input[str]] = None,
            username: Optional[pulumi.Input[str]] = None) -> 'Cluster':
        """
        Get an existing Cluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_custom_storage: The allow custom storage flag.
        :param pulumi.Input[bool] allow_suspend: The allow suspend flag.
        :param pulumi.Input[str] backup_schedule: The backup schedule.
        :param pulumi.Input[str] channel: The channel of the cluster. Default is `stable`.
        :param pulumi.Input[str] crate_version: The CrateDB version of the cluster.
        :param pulumi.Input[Union['ClusterDcArgs', 'ClusterDcArgsDict']] dc: The DublinCore of the cluster.
        :param pulumi.Input[bool] deletion_protected: The deletion protected flag.
        :param pulumi.Input[str] external_ip: The external IP address.
        :param pulumi.Input[str] fqdn: The Fully Qualified Domain Name.
        :param pulumi.Input[bool] gc_available: The garbage collection available flag.
        :param pulumi.Input[Union['ClusterHardwareSpecsArgs', 'ClusterHardwareSpecsArgsDict']] hardware_specs: The hardware specs of the cluster.
        :param pulumi.Input[Union['ClusterHealthArgs', 'ClusterHealthArgsDict']] health: The health of the cluster.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ClusterIpWhitelistArgs', 'ClusterIpWhitelistArgsDict']]]] ip_whitelists: The IP whitelist of the cluster.
        :param pulumi.Input[str] name: The name of the cluster.
        :param pulumi.Input[int] num_nodes: The number of nodes in the cluster.
        :param pulumi.Input[str] organization_id: The organization id of the cluster.
        :param pulumi.Input[str] origin: The origin of the cluster.
        :param pulumi.Input[str] password: The password of the cluster.
        :param pulumi.Input[str] product_name: The product name of the cluster.
        :param pulumi.Input[str] product_tier: The product tier of the cluster.
        :param pulumi.Input[int] product_unit: The product unit of the cluster. Default is `0`.
        :param pulumi.Input[str] project_id: The project id of the cluster.
        :param pulumi.Input[str] subscription_id: The subscription id of the cluster.
        :param pulumi.Input[bool] suspended: The suspended flag.
        :param pulumi.Input[str] url: The URL of the cluster.
        :param pulumi.Input[str] username: The username of the cluster.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ClusterState.__new__(_ClusterState)

        __props__.__dict__["allow_custom_storage"] = allow_custom_storage
        __props__.__dict__["allow_suspend"] = allow_suspend
        __props__.__dict__["backup_schedule"] = backup_schedule
        __props__.__dict__["channel"] = channel
        __props__.__dict__["crate_version"] = crate_version
        __props__.__dict__["dc"] = dc
        __props__.__dict__["deletion_protected"] = deletion_protected
        __props__.__dict__["external_ip"] = external_ip
        __props__.__dict__["fqdn"] = fqdn
        __props__.__dict__["gc_available"] = gc_available
        __props__.__dict__["hardware_specs"] = hardware_specs
        __props__.__dict__["health"] = health
        __props__.__dict__["ip_whitelists"] = ip_whitelists
        __props__.__dict__["name"] = name
        __props__.__dict__["num_nodes"] = num_nodes
        __props__.__dict__["organization_id"] = organization_id
        __props__.__dict__["origin"] = origin
        __props__.__dict__["password"] = password
        __props__.__dict__["product_name"] = product_name
        __props__.__dict__["product_tier"] = product_tier
        __props__.__dict__["product_unit"] = product_unit
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["subscription_id"] = subscription_id
        __props__.__dict__["suspended"] = suspended
        __props__.__dict__["url"] = url
        __props__.__dict__["username"] = username
        return Cluster(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowCustomStorage")
    def allow_custom_storage(self) -> pulumi.Output[bool]:
        """
        The allow custom storage flag.
        """
        return pulumi.get(self, "allow_custom_storage")

    @property
    @pulumi.getter(name="allowSuspend")
    def allow_suspend(self) -> pulumi.Output[bool]:
        """
        The allow suspend flag.
        """
        return pulumi.get(self, "allow_suspend")

    @property
    @pulumi.getter(name="backupSchedule")
    def backup_schedule(self) -> pulumi.Output[str]:
        """
        The backup schedule.
        """
        return pulumi.get(self, "backup_schedule")

    @property
    @pulumi.getter
    def channel(self) -> pulumi.Output[str]:
        """
        The channel of the cluster. Default is `stable`.
        """
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter(name="crateVersion")
    def crate_version(self) -> pulumi.Output[str]:
        """
        The CrateDB version of the cluster.
        """
        return pulumi.get(self, "crate_version")

    @property
    @pulumi.getter
    def dc(self) -> pulumi.Output['outputs.ClusterDc']:
        """
        The DublinCore of the cluster.
        """
        return pulumi.get(self, "dc")

    @property
    @pulumi.getter(name="deletionProtected")
    def deletion_protected(self) -> pulumi.Output[bool]:
        """
        The deletion protected flag.
        """
        return pulumi.get(self, "deletion_protected")

    @property
    @pulumi.getter(name="externalIp")
    def external_ip(self) -> pulumi.Output[str]:
        """
        The external IP address.
        """
        return pulumi.get(self, "external_ip")

    @property
    @pulumi.getter
    def fqdn(self) -> pulumi.Output[str]:
        """
        The Fully Qualified Domain Name.
        """
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter(name="gcAvailable")
    def gc_available(self) -> pulumi.Output[bool]:
        """
        The garbage collection available flag.
        """
        return pulumi.get(self, "gc_available")

    @property
    @pulumi.getter(name="hardwareSpecs")
    def hardware_specs(self) -> pulumi.Output['outputs.ClusterHardwareSpecs']:
        """
        The hardware specs of the cluster.
        """
        return pulumi.get(self, "hardware_specs")

    @property
    @pulumi.getter
    def health(self) -> pulumi.Output['outputs.ClusterHealth']:
        """
        The health of the cluster.
        """
        return pulumi.get(self, "health")

    @property
    @pulumi.getter(name="ipWhitelists")
    def ip_whitelists(self) -> pulumi.Output[Sequence['outputs.ClusterIpWhitelist']]:
        """
        The IP whitelist of the cluster.
        """
        return pulumi.get(self, "ip_whitelists")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the cluster.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numNodes")
    def num_nodes(self) -> pulumi.Output[int]:
        """
        The number of nodes in the cluster.
        """
        return pulumi.get(self, "num_nodes")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Output[str]:
        """
        The organization id of the cluster.
        """
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter
    def origin(self) -> pulumi.Output[str]:
        """
        The origin of the cluster.
        """
        return pulumi.get(self, "origin")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[str]:
        """
        The password of the cluster.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> pulumi.Output[str]:
        """
        The product name of the cluster.
        """
        return pulumi.get(self, "product_name")

    @property
    @pulumi.getter(name="productTier")
    def product_tier(self) -> pulumi.Output[str]:
        """
        The product tier of the cluster.
        """
        return pulumi.get(self, "product_tier")

    @property
    @pulumi.getter(name="productUnit")
    def product_unit(self) -> pulumi.Output[int]:
        """
        The product unit of the cluster. Default is `0`.
        """
        return pulumi.get(self, "product_unit")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[str]:
        """
        The project id of the cluster.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> pulumi.Output[str]:
        """
        The subscription id of the cluster.
        """
        return pulumi.get(self, "subscription_id")

    @property
    @pulumi.getter
    def suspended(self) -> pulumi.Output[bool]:
        """
        The suspended flag.
        """
        return pulumi.get(self, "suspended")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        """
        The URL of the cluster.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[str]:
        """
        The username of the cluster.
        """
        return pulumi.get(self, "username")

