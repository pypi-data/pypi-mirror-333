# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'ClusterDc',
    'ClusterHardwareSpecs',
    'ClusterHealth',
    'ClusterIpWhitelist',
    'OrganizationDc',
    'ProjectDc',
    'GetClusterDcResult',
    'GetClusterHardwareSpecsResult',
    'GetClusterHealthResult',
    'GetClusterIpWhitelistResult',
    'GetClusterLastAsyncOperationResult',
    'GetClusterLastAsyncOperationDcResult',
    'GetOrganizationDcResult',
    'GetOrganizationsOrganizationResult',
    'GetOrganizationsOrganizationDcResult',
    'GetProjectDcResult',
]

@pulumi.output_type
class ClusterDc(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 modified: Optional[str] = None):
        """
        :param str created: The created time.
        :param str modified: The modified time.
        """
        if created is not None:
            pulumi.set(__self__, "created", created)
        if modified is not None:
            pulumi.set(__self__, "modified", modified)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        """
        The created time.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def modified(self) -> Optional[str]:
        """
        The modified time.
        """
        return pulumi.get(self, "modified")


@pulumi.output_type
class ClusterHardwareSpecs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cpusPerNode":
            suggest = "cpus_per_node"
        elif key == "diskSizePerNodeBytes":
            suggest = "disk_size_per_node_bytes"
        elif key == "diskType":
            suggest = "disk_type"
        elif key == "disksPerNode":
            suggest = "disks_per_node"
        elif key == "heapSizeBytes":
            suggest = "heap_size_bytes"
        elif key == "memoryPerNodeBytes":
            suggest = "memory_per_node_bytes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterHardwareSpecs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterHardwareSpecs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterHardwareSpecs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cpus_per_node: Optional[int] = None,
                 disk_size_per_node_bytes: Optional[int] = None,
                 disk_type: Optional[str] = None,
                 disks_per_node: Optional[int] = None,
                 heap_size_bytes: Optional[int] = None,
                 memory_per_node_bytes: Optional[int] = None):
        """
        :param int cpus_per_node: The cpus per node.
        :param int disk_size_per_node_bytes: The disk size per node in bytes.
        :param str disk_type: The disk type.
        :param int disks_per_node: The disks per node.
        :param int heap_size_bytes: The heap size in bytes.
        :param int memory_per_node_bytes: The memory per node in bytes.
        """
        if cpus_per_node is not None:
            pulumi.set(__self__, "cpus_per_node", cpus_per_node)
        if disk_size_per_node_bytes is not None:
            pulumi.set(__self__, "disk_size_per_node_bytes", disk_size_per_node_bytes)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if disks_per_node is not None:
            pulumi.set(__self__, "disks_per_node", disks_per_node)
        if heap_size_bytes is not None:
            pulumi.set(__self__, "heap_size_bytes", heap_size_bytes)
        if memory_per_node_bytes is not None:
            pulumi.set(__self__, "memory_per_node_bytes", memory_per_node_bytes)

    @property
    @pulumi.getter(name="cpusPerNode")
    def cpus_per_node(self) -> Optional[int]:
        """
        The cpus per node.
        """
        return pulumi.get(self, "cpus_per_node")

    @property
    @pulumi.getter(name="diskSizePerNodeBytes")
    def disk_size_per_node_bytes(self) -> Optional[int]:
        """
        The disk size per node in bytes.
        """
        return pulumi.get(self, "disk_size_per_node_bytes")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[str]:
        """
        The disk type.
        """
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter(name="disksPerNode")
    def disks_per_node(self) -> Optional[int]:
        """
        The disks per node.
        """
        return pulumi.get(self, "disks_per_node")

    @property
    @pulumi.getter(name="heapSizeBytes")
    def heap_size_bytes(self) -> Optional[int]:
        """
        The heap size in bytes.
        """
        return pulumi.get(self, "heap_size_bytes")

    @property
    @pulumi.getter(name="memoryPerNodeBytes")
    def memory_per_node_bytes(self) -> Optional[int]:
        """
        The memory per node in bytes.
        """
        return pulumi.get(self, "memory_per_node_bytes")


@pulumi.output_type
class ClusterHealth(dict):
    def __init__(__self__, *,
                 status: Optional[str] = None):
        """
        :param str status: The health status of the cluster.
        """
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The health status of the cluster.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ClusterIpWhitelist(dict):
    def __init__(__self__, *,
                 cidr: Optional[str] = None,
                 description: Optional[str] = None):
        """
        :param str cidr: The CIDR.
        :param str description: The description.
        """
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def cidr(self) -> Optional[str]:
        """
        The CIDR.
        """
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description.
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class OrganizationDc(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 modified: Optional[str] = None):
        """
        :param str created: The created time.
        :param str modified: The modified time.
        """
        if created is not None:
            pulumi.set(__self__, "created", created)
        if modified is not None:
            pulumi.set(__self__, "modified", modified)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        """
        The created time.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def modified(self) -> Optional[str]:
        """
        The modified time.
        """
        return pulumi.get(self, "modified")


@pulumi.output_type
class ProjectDc(dict):
    def __init__(__self__, *,
                 created: Optional[str] = None,
                 modified: Optional[str] = None):
        """
        :param str created: The created time.
        :param str modified: The modified time.
        """
        if created is not None:
            pulumi.set(__self__, "created", created)
        if modified is not None:
            pulumi.set(__self__, "modified", modified)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        """
        The created time.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def modified(self) -> Optional[str]:
        """
        The modified time.
        """
        return pulumi.get(self, "modified")


@pulumi.output_type
class GetClusterDcResult(dict):
    def __init__(__self__, *,
                 created: str,
                 modified: str):
        """
        :param str created: The created time.
        :param str modified: The modified time.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "modified", modified)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The created time.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def modified(self) -> str:
        """
        The modified time.
        """
        return pulumi.get(self, "modified")


@pulumi.output_type
class GetClusterHardwareSpecsResult(dict):
    def __init__(__self__, *,
                 cpus_per_node: int,
                 disk_size_per_node_bytes: int,
                 disk_type: str,
                 disks_per_node: int,
                 heap_size_bytes: int,
                 memory_per_node_bytes: int):
        """
        :param int cpus_per_node: The cpus per node.
        :param int disk_size_per_node_bytes: The disk size per node in bytes.
        :param str disk_type: The disk type.
        :param int disks_per_node: The disks per node.
        :param int heap_size_bytes: The heap size in bytes.
        :param int memory_per_node_bytes: The memory per node in bytes.
        """
        pulumi.set(__self__, "cpus_per_node", cpus_per_node)
        pulumi.set(__self__, "disk_size_per_node_bytes", disk_size_per_node_bytes)
        pulumi.set(__self__, "disk_type", disk_type)
        pulumi.set(__self__, "disks_per_node", disks_per_node)
        pulumi.set(__self__, "heap_size_bytes", heap_size_bytes)
        pulumi.set(__self__, "memory_per_node_bytes", memory_per_node_bytes)

    @property
    @pulumi.getter(name="cpusPerNode")
    def cpus_per_node(self) -> int:
        """
        The cpus per node.
        """
        return pulumi.get(self, "cpus_per_node")

    @property
    @pulumi.getter(name="diskSizePerNodeBytes")
    def disk_size_per_node_bytes(self) -> int:
        """
        The disk size per node in bytes.
        """
        return pulumi.get(self, "disk_size_per_node_bytes")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> str:
        """
        The disk type.
        """
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter(name="disksPerNode")
    def disks_per_node(self) -> int:
        """
        The disks per node.
        """
        return pulumi.get(self, "disks_per_node")

    @property
    @pulumi.getter(name="heapSizeBytes")
    def heap_size_bytes(self) -> int:
        """
        The heap size in bytes.
        """
        return pulumi.get(self, "heap_size_bytes")

    @property
    @pulumi.getter(name="memoryPerNodeBytes")
    def memory_per_node_bytes(self) -> int:
        """
        The memory per node in bytes.
        """
        return pulumi.get(self, "memory_per_node_bytes")


@pulumi.output_type
class GetClusterHealthResult(dict):
    def __init__(__self__, *,
                 last_seen: str,
                 running_operation: str,
                 status: str):
        """
        :param str last_seen: The last seen time.
        :param str running_operation: The type of the currently running operation. Returns an empty string if there is no operation in progress.
        :param str status: The health status of the cluster.
        """
        pulumi.set(__self__, "last_seen", last_seen)
        pulumi.set(__self__, "running_operation", running_operation)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="lastSeen")
    def last_seen(self) -> str:
        """
        The last seen time.
        """
        return pulumi.get(self, "last_seen")

    @property
    @pulumi.getter(name="runningOperation")
    def running_operation(self) -> str:
        """
        The type of the currently running operation. Returns an empty string if there is no operation in progress.
        """
        return pulumi.get(self, "running_operation")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The health status of the cluster.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetClusterIpWhitelistResult(dict):
    def __init__(__self__, *,
                 cidr: str,
                 description: str):
        """
        :param str cidr: The CIDR.
        :param str description: The description.
        """
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def cidr(self) -> str:
        """
        The CIDR.
        """
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description.
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class GetClusterLastAsyncOperationResult(dict):
    def __init__(__self__, *,
                 dc: 'outputs.GetClusterLastAsyncOperationDcResult',
                 id: str,
                 status: str,
                 type: str):
        """
        :param 'GetClusterLastAsyncOperationDcArgs' dc: The DublinCore of the cluster.
        :param str id: The id of the last async operation.
        :param str status: The status of the last async operation.
        :param str type: The type of the last async operation.
        """
        pulumi.set(__self__, "dc", dc)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def dc(self) -> 'outputs.GetClusterLastAsyncOperationDcResult':
        """
        The DublinCore of the cluster.
        """
        return pulumi.get(self, "dc")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the last async operation.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the last async operation.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the last async operation.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetClusterLastAsyncOperationDcResult(dict):
    def __init__(__self__, *,
                 created: str,
                 modified: str):
        """
        :param str created: The created time.
        :param str modified: The modified time.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "modified", modified)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The created time.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def modified(self) -> str:
        """
        The modified time.
        """
        return pulumi.get(self, "modified")


@pulumi.output_type
class GetOrganizationDcResult(dict):
    def __init__(__self__, *,
                 created: str,
                 modified: str):
        """
        :param str created: The created time.
        :param str modified: The modified time.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "modified", modified)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The created time.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def modified(self) -> str:
        """
        The modified time.
        """
        return pulumi.get(self, "modified")


@pulumi.output_type
class GetOrganizationsOrganizationResult(dict):
    def __init__(__self__, *,
                 dc: 'outputs.GetOrganizationsOrganizationDcResult',
                 email: str,
                 id: str,
                 name: str,
                 notifications_enabled: bool,
                 plan_type: int,
                 project_count: int,
                 role_fqn: str):
        """
        :param 'GetOrganizationsOrganizationDcArgs' dc: The DublinCore of the organization.
        :param str email: The notification email used in the organization.
        :param str id: The id of the organization.
        :param str name: The name of the organization.
        :param bool notifications_enabled: Whether notifications enabled for the organization.
        :param int plan_type: The support plan type used in the organization.
        :param int project_count: The project count in the organization.
        :param str role_fqn: The role FQN.
        """
        pulumi.set(__self__, "dc", dc)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "notifications_enabled", notifications_enabled)
        pulumi.set(__self__, "plan_type", plan_type)
        pulumi.set(__self__, "project_count", project_count)
        pulumi.set(__self__, "role_fqn", role_fqn)

    @property
    @pulumi.getter
    def dc(self) -> 'outputs.GetOrganizationsOrganizationDcResult':
        """
        The DublinCore of the organization.
        """
        return pulumi.get(self, "dc")

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        The notification email used in the organization.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the organization.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the organization.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="notificationsEnabled")
    def notifications_enabled(self) -> bool:
        """
        Whether notifications enabled for the organization.
        """
        return pulumi.get(self, "notifications_enabled")

    @property
    @pulumi.getter(name="planType")
    def plan_type(self) -> int:
        """
        The support plan type used in the organization.
        """
        return pulumi.get(self, "plan_type")

    @property
    @pulumi.getter(name="projectCount")
    def project_count(self) -> int:
        """
        The project count in the organization.
        """
        return pulumi.get(self, "project_count")

    @property
    @pulumi.getter(name="roleFqn")
    def role_fqn(self) -> str:
        """
        The role FQN.
        """
        return pulumi.get(self, "role_fqn")


@pulumi.output_type
class GetOrganizationsOrganizationDcResult(dict):
    def __init__(__self__, *,
                 created: str,
                 modified: str):
        """
        :param str created: The created time.
        :param str modified: The modified time.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "modified", modified)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The created time.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def modified(self) -> str:
        """
        The modified time.
        """
        return pulumi.get(self, "modified")


@pulumi.output_type
class GetProjectDcResult(dict):
    def __init__(__self__, *,
                 created: str,
                 modified: str):
        """
        :param str created: The created time.
        :param str modified: The modified time.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "modified", modified)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The created time.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def modified(self) -> str:
        """
        The modified time.
        """
        return pulumi.get(self, "modified")


