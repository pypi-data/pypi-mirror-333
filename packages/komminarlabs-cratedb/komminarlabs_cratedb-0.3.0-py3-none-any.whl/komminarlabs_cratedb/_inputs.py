# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'ClusterDcArgs',
    'ClusterDcArgsDict',
    'ClusterHardwareSpecsArgs',
    'ClusterHardwareSpecsArgsDict',
    'ClusterHealthArgs',
    'ClusterHealthArgsDict',
    'ClusterIpWhitelistArgs',
    'ClusterIpWhitelistArgsDict',
    'OrganizationDcArgs',
    'OrganizationDcArgsDict',
    'ProjectDcArgs',
    'ProjectDcArgsDict',
]

MYPY = False

if not MYPY:
    class ClusterDcArgsDict(TypedDict):
        created: NotRequired[pulumi.Input[str]]
        """
        The created time.
        """
        modified: NotRequired[pulumi.Input[str]]
        """
        The modified time.
        """
elif False:
    ClusterDcArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterDcArgs:
    def __init__(__self__, *,
                 created: Optional[pulumi.Input[str]] = None,
                 modified: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] created: The created time.
        :param pulumi.Input[str] modified: The modified time.
        """
        if created is not None:
            pulumi.set(__self__, "created", created)
        if modified is not None:
            pulumi.set(__self__, "modified", modified)

    @property
    @pulumi.getter
    def created(self) -> Optional[pulumi.Input[str]]:
        """
        The created time.
        """
        return pulumi.get(self, "created")

    @created.setter
    def created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created", value)

    @property
    @pulumi.getter
    def modified(self) -> Optional[pulumi.Input[str]]:
        """
        The modified time.
        """
        return pulumi.get(self, "modified")

    @modified.setter
    def modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "modified", value)


if not MYPY:
    class ClusterHardwareSpecsArgsDict(TypedDict):
        cpus_per_node: NotRequired[pulumi.Input[int]]
        """
        The cpus per node.
        """
        disk_size_per_node_bytes: NotRequired[pulumi.Input[int]]
        """
        The disk size per node in bytes.
        """
        disk_type: NotRequired[pulumi.Input[str]]
        """
        The disk type.
        """
        disks_per_node: NotRequired[pulumi.Input[int]]
        """
        The disks per node.
        """
        heap_size_bytes: NotRequired[pulumi.Input[int]]
        """
        The heap size in bytes.
        """
        memory_per_node_bytes: NotRequired[pulumi.Input[int]]
        """
        The memory per node in bytes.
        """
elif False:
    ClusterHardwareSpecsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterHardwareSpecsArgs:
    def __init__(__self__, *,
                 cpus_per_node: Optional[pulumi.Input[int]] = None,
                 disk_size_per_node_bytes: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 disks_per_node: Optional[pulumi.Input[int]] = None,
                 heap_size_bytes: Optional[pulumi.Input[int]] = None,
                 memory_per_node_bytes: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] cpus_per_node: The cpus per node.
        :param pulumi.Input[int] disk_size_per_node_bytes: The disk size per node in bytes.
        :param pulumi.Input[str] disk_type: The disk type.
        :param pulumi.Input[int] disks_per_node: The disks per node.
        :param pulumi.Input[int] heap_size_bytes: The heap size in bytes.
        :param pulumi.Input[int] memory_per_node_bytes: The memory per node in bytes.
        """
        if cpus_per_node is not None:
            pulumi.set(__self__, "cpus_per_node", cpus_per_node)
        if disk_size_per_node_bytes is not None:
            pulumi.set(__self__, "disk_size_per_node_bytes", disk_size_per_node_bytes)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if disks_per_node is not None:
            pulumi.set(__self__, "disks_per_node", disks_per_node)
        if heap_size_bytes is not None:
            pulumi.set(__self__, "heap_size_bytes", heap_size_bytes)
        if memory_per_node_bytes is not None:
            pulumi.set(__self__, "memory_per_node_bytes", memory_per_node_bytes)

    @property
    @pulumi.getter(name="cpusPerNode")
    def cpus_per_node(self) -> Optional[pulumi.Input[int]]:
        """
        The cpus per node.
        """
        return pulumi.get(self, "cpus_per_node")

    @cpus_per_node.setter
    def cpus_per_node(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpus_per_node", value)

    @property
    @pulumi.getter(name="diskSizePerNodeBytes")
    def disk_size_per_node_bytes(self) -> Optional[pulumi.Input[int]]:
        """
        The disk size per node in bytes.
        """
        return pulumi.get(self, "disk_size_per_node_bytes")

    @disk_size_per_node_bytes.setter
    def disk_size_per_node_bytes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size_per_node_bytes", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        The disk type.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter(name="disksPerNode")
    def disks_per_node(self) -> Optional[pulumi.Input[int]]:
        """
        The disks per node.
        """
        return pulumi.get(self, "disks_per_node")

    @disks_per_node.setter
    def disks_per_node(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disks_per_node", value)

    @property
    @pulumi.getter(name="heapSizeBytes")
    def heap_size_bytes(self) -> Optional[pulumi.Input[int]]:
        """
        The heap size in bytes.
        """
        return pulumi.get(self, "heap_size_bytes")

    @heap_size_bytes.setter
    def heap_size_bytes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "heap_size_bytes", value)

    @property
    @pulumi.getter(name="memoryPerNodeBytes")
    def memory_per_node_bytes(self) -> Optional[pulumi.Input[int]]:
        """
        The memory per node in bytes.
        """
        return pulumi.get(self, "memory_per_node_bytes")

    @memory_per_node_bytes.setter
    def memory_per_node_bytes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_per_node_bytes", value)


if not MYPY:
    class ClusterHealthArgsDict(TypedDict):
        status: NotRequired[pulumi.Input[str]]
        """
        The health status of the cluster.
        """
elif False:
    ClusterHealthArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterHealthArgs:
    def __init__(__self__, *,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] status: The health status of the cluster.
        """
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The health status of the cluster.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class ClusterIpWhitelistArgsDict(TypedDict):
        cidr: NotRequired[pulumi.Input[str]]
        """
        The CIDR.
        """
        description: NotRequired[pulumi.Input[str]]
        """
        The description.
        """
elif False:
    ClusterIpWhitelistArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterIpWhitelistArgs:
    def __init__(__self__, *,
                 cidr: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cidr: The CIDR.
        :param pulumi.Input[str] description: The description.
        """
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def cidr(self) -> Optional[pulumi.Input[str]]:
        """
        The CIDR.
        """
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cidr", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class OrganizationDcArgsDict(TypedDict):
        created: NotRequired[pulumi.Input[str]]
        """
        The created time.
        """
        modified: NotRequired[pulumi.Input[str]]
        """
        The modified time.
        """
elif False:
    OrganizationDcArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrganizationDcArgs:
    def __init__(__self__, *,
                 created: Optional[pulumi.Input[str]] = None,
                 modified: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] created: The created time.
        :param pulumi.Input[str] modified: The modified time.
        """
        if created is not None:
            pulumi.set(__self__, "created", created)
        if modified is not None:
            pulumi.set(__self__, "modified", modified)

    @property
    @pulumi.getter
    def created(self) -> Optional[pulumi.Input[str]]:
        """
        The created time.
        """
        return pulumi.get(self, "created")

    @created.setter
    def created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created", value)

    @property
    @pulumi.getter
    def modified(self) -> Optional[pulumi.Input[str]]:
        """
        The modified time.
        """
        return pulumi.get(self, "modified")

    @modified.setter
    def modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "modified", value)


if not MYPY:
    class ProjectDcArgsDict(TypedDict):
        created: NotRequired[pulumi.Input[str]]
        """
        The created time.
        """
        modified: NotRequired[pulumi.Input[str]]
        """
        The modified time.
        """
elif False:
    ProjectDcArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectDcArgs:
    def __init__(__self__, *,
                 created: Optional[pulumi.Input[str]] = None,
                 modified: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] created: The created time.
        :param pulumi.Input[str] modified: The modified time.
        """
        if created is not None:
            pulumi.set(__self__, "created", created)
        if modified is not None:
            pulumi.set(__self__, "modified", modified)

    @property
    @pulumi.getter
    def created(self) -> Optional[pulumi.Input[str]]:
        """
        The created time.
        """
        return pulumi.get(self, "created")

    @created.setter
    def created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created", value)

    @property
    @pulumi.getter
    def modified(self) -> Optional[pulumi.Input[str]]:
        """
        The modified time.
        """
        return pulumi.get(self, "modified")

    @modified.setter
    def modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "modified", value)


