[env]
PROJECT_NAME = "strawchemy"
_.python.venv = { path = ".venv" }
_.file = ".env.json"

[tools]
ruff = "latest"
uv = "latest"
jq = "latest"
pre-commit = "latest"
actionlint = "latest"

[vars]
local_pytest_options = "--cov-report=term-missing:skip-covered -n=2 -vv"
cleanable_paths = '''{{
[
  ".nox",
  ".pytest_cache",
  ".ruff_cache",
  ".hypothesis",
  "build/",
  "dist/",
  ".eggs/",
  ".coverage",
  "coverage.xml",
  "coverage.json",
  "junit*.xml",
  "htmlcov/",
  "tests/.pytest_cache",
  "tests/**/.pytest_cache",
  ".mypy_cache",
  ".unasyncd_cache/",
  ".auto_pytabs_cache",
  "node_module",
] | join(sep=" ")
}}'''

# Dependencies

[tasks._install]
description = "Install dependencies"
hide = true
run = "uv sync --all-extras --dev"

[tasks.install]
description = "Install dependencies and pre-commit hooks"
alias = "i"
depends = ["install:pre-commit", "_install"]

[tasks."install:pre-commit"]
description = "Install pre-commit hooks"
run = "pre-commit install --install-hooks 2>&1"

[tasks."install:test"]
description = "Install test dependencies only"
run = "uv sync --only-group test"

# Test

[tasks.test]
description = "Run tests"
depends = "_install"
alias = "tu"
usage = 'arg "<test>" default=""'
run = 'uv run pytest {{vars.local_pytest_options}} {{arg(name="test", var=true, default="")}}'

[tasks."test:unit"]
description = "Run unit tests"
depends = "_install"
alias = "tu"
usage = 'arg "<test>" default=""'
run = 'uv run pytest -m "not integration" {{vars.local_pytest_options}} {{arg(name="test", var=true, default="")}}'

[tasks."test:integration"]
description = "Run integration tests"
depends = "_install"
alias = "ti"
usage = 'arg "<test>" default=""'
run = 'uv run pytest -m integration {{vars.local_pytest_options}} {{arg(name="test", var=true, default="")}}'

[tasks."test:unit-all"]
description = "Run unit tests on all supported python versions"
depends = "_install"
alias = "tua"
usage = 'arg "<test>" default=""'
run = 'uv run nox -r -t unit -- {{vars.local_pytest_options}} {{arg(name="test", var=true, default="")}}'

[tasks."test:integration-all"]
description = "Run integration tests on all supported python versions"
depends = "_install"
alias = "tia"
usage = 'arg "<test>" default=""'
run = 'uv run nox -r -t integration -- {{vars.local_pytest_options}} {{arg(name="test", var=true, default="")}}'

[tasks."test:update-snapshot"]
description = "Run snapshot-based tests and update snapshots"
depends = "_install"
run = 'uv run pytest -m snapshot --snapshot-update'


# CI

[tasks."ci:test"]
description = "Run tests in CI"
depends = "install:test"
usage = 'arg "<session>"'
run = "uv run nox -r -t tests -s '{{arg(name='session')}}' -- -n=2 --junit-xml=./junit.xml -o junit_family=legacy"

[tasks."ci:lint"]
description = "Lint CI yaml files"
run = "actionlint -shellcheck ''"

[tasks."ci:test-matrix"]
description = "Output test matrix for CI"
depends = "install:test"
run = '''
    nox --json -t tests -l |
    jq 'map(
        {
        session,
        tags,
        python,
        name,
        job_name: "\( .name ) on \( .python )\( if .call_spec != {} then " (\(.call_spec | to_entries | map("\(.key)=\(.value)") | join(", ")))" else "" end )"
        }
    )'
'''

# Linting

[tasks."ruff:check"]
description = "Check ruff formatting"
run = "ruff format --check"

[tasks."ruff:fix"]
description = "Fix ruff errors"
run = "ruff check --fix --unsafe-fixes"

[tasks."ruff:format"]
description = "Format code"
run = "ruff format"

[tasks.pyright]
description = "Run pyright"
depends = "_install"
run = "uv run pyright"
env = { PYRIGHT_PYTHON_PYLANCE_VERSION = "latest-release" }

[tasks.vulture]
description = "Run vulture"
depends = "_install"
run = "uv run vulture"

[tasks.lint]
description = "Lint the code"
alias = "l"
depends = ["vulture", "pyright", "ruff:check"]

[tasks."lint:pre-commit"]
description = "Lint the code in pre-commit hook"
depends = ["vulture", "pyright"]

[tasks.pre-commit]
description = "Run pre-commit checks"
depends = "install:pre-commit"
run = "pre-commit run --color=always --all-files"

# Tools

[tasks.auto-bump]
description = "Auto bump the version"
confirm = "Are you sure you want to auto bump the version?"
depends = "_install"
run = "uv run bump-my-version bump --new-version $(uv run git cliff --unreleased --bumped-version)"

[tasks.clean]
description = "Clean working directory"
alias = "c"
confirm = 'Are you sure you want to clean the working directory? This will remove test caches, build artifacts, and other temporary files.'
run = [
  "rm -rf {{vars.cleanable_paths}} >/dev/null 2>&1",
  "find . -name '*.egg-info' -exec rm -rf {} + >/dev/null 2>&1",
  "find . -type f -name '*.egg' -exec rm -f {} + >/dev/null 2>&1",
  "find . -name '*.pyc' -exec rm -f {} + >/dev/null 2>&1",
  "find . -name '*.pyo' -exec rm -f {} + >/dev/null 2>&1",
  "find . -name '*~' -exec rm -f {} + >/dev/null 2>&1",
  "find . -name '__pycache__' -exec rm -rf {} + >/dev/null 2>&1",
  "find . -name '.ipynb_checkpoints' -exec rm -rf {} + >/dev/null 2>&1",
]

[tasks."render:usage"]
description = "Generate tasks documentation"
run = ["mise generate task-docs > tasks.md"]
