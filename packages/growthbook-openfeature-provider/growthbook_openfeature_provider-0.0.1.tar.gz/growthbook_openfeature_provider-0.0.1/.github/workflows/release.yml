name: Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Type of version bump'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      release_notes:
        description: 'Release notes'
        required: false
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write  # For PyPI trusted publishing

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for changelog generation

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine setuptools wheel
          pip install python-semantic-release

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Bump version
        id: bump_version
        run: |
          # Get current version from pyproject.toml
          CURRENT_VERSION=$(grep -oP 'version = "\K[^"]+' pyproject.toml)
          echo "Current version: $CURRENT_VERSION"
          
          # Split version into components
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          # Bump version based on input
          if [ "${{ github.event.inputs.version_bump }}" == "major" ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ "${{ github.event.inputs.version_bump }}" == "minor" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Update version in pyproject.toml
          sed -i "s/version = \"$CURRENT_VERSION\"/version = \"$NEW_VERSION\"/" pyproject.toml
          
          # Commit the version change
          git add pyproject.toml
          git commit -m "Bump version to $NEW_VERSION"

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"* %s (%h)" --no-merges)
          else
            CHANGELOG=$(git log $LAST_TAG..HEAD --pretty=format:"* %s (%h)" --no-merges)
          fi
          
          # If custom release notes are provided, use them
          if [ -n "${{ github.event.inputs.release_notes }}" ]; then
            RELEASE_NOTES="${{ github.event.inputs.release_notes }}"
          else
            RELEASE_NOTES="## What's Changed\n\n$CHANGELOG"
          fi
          
          # Save release notes to a file
          echo -e "$RELEASE_NOTES" > release_notes.md
          
          # Escape newlines for GitHub Actions output
          RELEASE_NOTES="${RELEASE_NOTES//'%'/'%25'}"
          RELEASE_NOTES="${RELEASE_NOTES//$'\n'/'%0A'}"
          RELEASE_NOTES="${RELEASE_NOTES//$'\r'/'%0D'}"
          echo "release_notes=$RELEASE_NOTES" >> $GITHUB_OUTPUT

      - name: Create tag
        run: |
          git tag v${{ steps.bump_version.outputs.new_version }}
          git push origin v${{ steps.bump_version.outputs.new_version }}
          git push origin main

      - name: Build package
        run: |
          python -m build

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.bump_version.outputs.new_version }}
          name: Release v${{ steps.bump_version.outputs.new_version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: |
            dist/*.whl
            dist/*.tar.gz

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          # Uncomment the following line for testing on TestPyPI first
          # repository-url: https://test.pypi.org/legacy/ 