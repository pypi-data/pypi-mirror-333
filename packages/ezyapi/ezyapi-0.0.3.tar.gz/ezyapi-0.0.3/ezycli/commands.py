#!/usr/bin/env python3
import argparse
import os
import sys
import subprocess
import json
import py_compile
import shutil

CLI_VERSION = "0.1.0"

def new_project(project_name):
    project_path = os.path.join(os.getcwd(), project_name)
    if os.path.exists(project_path):
        print(f"오류: '{project_name}' 프로젝트가 이미 존재합니다.", file=sys.stderr)
        sys.exit(1)

    os.makedirs(project_path)
    os.makedirs(os.path.join(project_path, "src"))
    os.makedirs(os.path.join(project_path, "test"))
    os.makedirs(os.path.join(project_path, "src", "entities"))
    os.makedirs(os.path.join(project_path, "src", "services"))

    with open(os.path.join(project_path, ".gitignore"), "w", encoding="utf-8") as f:
        f.write(
""".venv
__pycache__/
*.pyc
.env
""")

    cli_config = {
        "collection": "@ezy/python",
        "version": CLI_VERSION,
        "project": project_name
    }
    with open(os.path.join(project_path, "ezy-cli.json"), "w", encoding="utf-8") as f:
        json.dump(cli_config, f, indent=2)

    with open(os.path.join(project_path, "pyproject.toml"), "w", encoding="utf-8") as f:
        f.write(
f"""[project]
name = "{project_name}"
version = "0.1.0"
description = "Ezy API 프로젝트"
authors = [{{ name="Your Name"}}]
dependencies = []

[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"
""")

    with open(os.path.join(project_path, "requirements.txt"), "w", encoding="utf-8") as f:
        f.write("""# 의존성 패키지
ezy-api
fastapi>=0.68.0
uvicorn>=0.15.0
pydantic>=1.8.0
inflect>=5.3.0
pytest>=6.2.5
flake8>=3.9.0
""")

    main_py_path = os.path.join(project_path, "src", "main.py")
    with open(main_py_path, "w", encoding="utf-8") as f:
        f.write(
f"""from ezyapi import EzyAPI
from .services.example_service import ExampleService
from .entities.example_entity import ExampleEntity

def bootstrap():
    api = EzyAPI(
        title="{project_name} API",
        description="Generated by Ezy CLI",
        db_config=None
    )
    
    api.add_service(ExampleService)
    
    print("서버가 시작됩니다...")
    api.run(host="0.0.0.0", port=8000, reload=True)

if __name__ == '__main__':
    bootstrap()
""")

    with open(os.path.join(project_path, "src", "entities", "__init__.py"), "w", encoding="utf-8") as f:
        f.write("")
        
    with open(os.path.join(project_path, "src", "entities", "example_entity.py"), "w", encoding="utf-8") as f:
        f.write(
"""from ezyapi.database import EzyEntityBase
from pydantic import BaseModel

class ExampleEntity(EzyEntityBase):
    def __init__(self):
        self.id = None
        self.name = ""
        self.description = ""
        self.created_at = ""
        
class ExampleDto(BaseModel):
    name: str
    description: str
""")

    with open(os.path.join(project_path, "src", "services", "__init__.py"), "w", encoding="utf-8") as f:
        f.write("")
        
    with open(os.path.join(project_path, "src", "services", "example_service.py"), "w", encoding="utf-8") as f:
        f.write(
"""from ezyapi import EzyService
from typing import List, Optional
from datetime import datetime
from ..entities.example_entity import ExampleEntity, ExampleDto

class ExampleService(EzyService):
    async def get_all(self) -> List[ExampleEntity]:
        if self.repository:
            return await self.repository.find_all()
        return []
        
    async def get_by_id(self, id: int) -> Optional[ExampleEntity]:
        if self.repository:
            return await self.repository.find_by_id(id)
        return None
        
    async def create(self, data: ExampleDto) -> ExampleEntity:
        entity = ExampleEntity()
        entity.name = data.name
        entity.description = data.description
        entity.created_at = datetime.now().isoformat()
        
        if self.repository:
            return await self.repository.save(entity)
        return entity
        
    async def update_by_id(self, id: int, data: ExampleDto) -> Optional[ExampleEntity]:
        if not self.repository:
            return None
            
        entity = await self.repository.find_by_id(id)
        if not entity:
            return None
            
        entity.name = data.name
        entity.description = data.description
        
        return await self.repository.save(entity)
        
    async def delete_by_id(self, id: int) -> bool:
        if self.repository:
            return await self.repository.delete(id)
        return False
""")

    with open(os.path.join(project_path, "test", "example_test.py"), "w", encoding="utf-8") as f:
        f.write(
"""def test_example():
    assert 1 + 1 == 2
""")

    print(f"새 Ezy API 프로젝트 '{project_name}'이(가) 생성되었습니다: {project_path}")
    print(f"프로젝트 디렉토리로 이동 후 다음 명령어를 실행하세요:")
    print(f"cd {project_name} && python -m venv .venv && .venv\\Scripts\\activate && pip install -r requirements.txt")
    print(f"서버 실행: ezy serve")

def generate_component(component_type, name):
    valid_types = ["service", "entity"]
    if component_type not in valid_types:
        print(f"오류: 지원하지 않는 타입입니다: {component_type} (service, entity 중 선택)")
        sys.exit(1)

    src_dir = os.path.join(os.getcwd(), "src")
    if not os.path.exists(src_dir):
        print("src 폴더가 존재하지 않습니다. 프로젝트 루트에서 실행해주세요.", file=sys.stderr)
        sys.exit(1)

    if component_type == "service":
        services_dir = os.path.join(src_dir, "services")
        if not os.path.exists(services_dir):
            os.makedirs(services_dir)
            with open(os.path.join(services_dir, "__init__.py"), "w", encoding="utf-8") as f:
                f.write("")
                
        file_name = f"{name.lower()}_service.py"
        file_path = os.path.join(services_dir, file_name)
        if os.path.exists(file_path):
            print(f"오류: 이미 동일한 파일이 존재합니다: {file_path}")
            sys.exit(1)
            
        with open(file_path, "w", encoding="utf-8") as f:
            f.write(
f"""from ezyapi import EzyService
from typing import List, Optional
from ..entities.{name.lower()}_entity import {name.capitalize()}Entity, {name.capitalize()}Dto

class {name.capitalize()}Service(EzyService):
    async def get_all(self) -> List[{name.capitalize()}Entity]:
        \"\"\"모든 {name} 항목 조회\"\"\"
        if self.repository:
            return await self.repository.find_all()
        return []
        
    async def get_by_id(self, id: int) -> Optional[{name.capitalize()}Entity]:
        \"\"\"ID로 {name} 항목 조회\"\"\"
        if self.repository:
            return await self.repository.find_by_id(id)
        return None
        
    async def create(self, data: {name.capitalize()}Dto) -> {name.capitalize()}Entity:
        \"\"\"새 {name} 항목 생성\"\"\"
        entity = {name.capitalize()}Entity()
        for key, value in data.dict().items():
            setattr(entity, key, value)
        
        if self.repository:
            return await self.repository.save(entity)
        return entity
        
    async def update_by_id(self, id: int, data: {name.capitalize()}Dto) -> Optional[{name.capitalize()}Entity]:
        \"\"\"ID로 {name} 항목 업데이트\"\"\"
        if not self.repository:
            return None
            
        entity = await self.repository.find_by_id(id)
        if not entity:
            return None
            
        for key, value in data.dict().items():
            setattr(entity, key, value)
        
        return await self.repository.save(entity)
        
    async def delete_by_id(self, id: int) -> bool:
        \"\"\"ID로 {name} 항목 삭제\"\"\"
        if self.repository:
            return await self.repository.delete(id)
        return False
""")

    elif component_type == "entity":
        entities_dir = os.path.join(src_dir, "entities")
        if not os.path.exists(entities_dir):
            os.makedirs(entities_dir)
            with open(os.path.join(entities_dir, "__init__.py"), "w", encoding="utf-8") as f:
                f.write("")
                
        file_name = f"{name.lower()}_entity.py"
        file_path = os.path.join(entities_dir, file_name)
        if os.path.exists(file_path):
            print(f"오류: 이미 동일한 파일이 존재합니다: {file_path}")
            sys.exit(1)
            
        with open(file_path, "w", encoding="utf-8") as f:
            f.write(
f"""from ezyapi.database import EzyEntityBase
from pydantic import BaseModel
from datetime import datetime

class {name.capitalize()}Entity(EzyEntityBase):
    def __init__(self):
        self.id = None
        self.name = ""
        self.description = ""
        self.created_at = datetime.now().isoformat()
        
class {name.capitalize()}Dto(BaseModel):
    name: str
    description: str
""")

    print(f"{component_type.capitalize()} '{name}'이(가) 생성되었습니다: {file_path}")
    
    if component_type == "service":
        main_py = os.path.join(src_dir, "main.py")
        if os.path.exists(main_py):
            print(f"메인 파일({main_py})에 새로운 서비스를 등록해야 합니다.")
            print(f"다음 코드를 추가하세요:")
            print(f"from .services.{name.lower()}_service import {name.capitalize()}Service")
            print(f"api.add_service({name.capitalize()}Service)")

def build_project():
    src_dir = os.path.join(os.getcwd(), "src")
    if not os.path.exists(src_dir):
        print("src 폴더가 존재하지 않습니다. 프로젝트 루트에서 실행해주세요.", file=sys.stderr)
        sys.exit(1)
    errors = []
    for root, _, files in os.walk(src_dir):
        for file in files:
            if file.endswith(".py"):
                path = os.path.join(root, file)
                try:
                    py_compile.compile(path, doraise=True)
                except py_compile.PyCompileError as e:
                    errors.append(f"구문 오류: {path}\n  {e.msg}")
    if errors:
        print("빌드 실패:")
        for err in errors:
            print(err)
        sys.exit(1)
    print("빌드가 성공적으로 완료되었습니다.")

def serve_project():
    main_py = os.path.join(os.getcwd(), "src", "main.py")
    if not os.path.exists(main_py):
        print("main.py가 존재하지 않습니다.", file=sys.stderr)
        sys.exit(1)
    print("서버를 시작합니다... (Ctrl+C로 중지)")
    try:
        subprocess.run([sys.executable, main_py])
    except KeyboardInterrupt:
        print("\n서버가 중지되었습니다.")

def test_project():
    test_dir = os.path.join(os.getcwd(), "test")
    if not os.path.exists(test_dir):
        print("test 폴더가 존재하지 않습니다.", file=sys.stderr)
        sys.exit(1)
    try:
        subprocess.run(["pytest", test_dir], check=True)
    except FileNotFoundError:
        print("pytest가 설치되어 있지 않습니다. 'pip install pytest'로 설치하세요.", file=sys.stderr)
        sys.exit(1)
    except subprocess.CalledProcessError:
        print("테스트 중 오류가 발생했습니다.", file=sys.stderr)
        sys.exit(1)

def lint_project():
    try:
        subprocess.run(["flake8", "."], check=True)
        print("코드 린팅이 완료되었습니다.")
    except FileNotFoundError:
        print("flake8이 설치되어 있지 않습니다. 'pip install flake8'로 설치하세요.", file=sys.stderr)
        sys.exit(1)
    except subprocess.CalledProcessError:
        print("코드 린팅 중 문제가 발견되었습니다.", file=sys.stderr)
        sys.exit(1)

def info_project():
    print(f"Ezy CLI Version: {CLI_VERSION}")
    print(f"Python Version: {sys.version}")
    print(f"Platform: {sys.platform}")
    print(f"Current Directory: {os.getcwd()}")

def update_cli():
    print(f"Ezy CLI({CLI_VERSION})가 최신 상태입니다.")

def main():
    parser = argparse.ArgumentParser(prog="ezy", description="Ezy CLI - Ezy API 프로젝트 관리 도구")
    subparsers = parser.add_subparsers(dest="command")

    new_parser = subparsers.add_parser("new", help="새 Ezy API 프로젝트 생성")
    new_parser.add_argument("project_name", help="프로젝트 이름")
    new_parser.set_defaults(func=lambda args: new_project(args.project_name))

    generate_parser = subparsers.add_parser("generate", aliases=["g"], help="컴포넌트 생성 (service, entity)")
    gen_subparsers = generate_parser.add_subparsers(dest="component_type", required=True)

    serv_parser = gen_subparsers.add_parser("service", help="서비스 생성")
    serv_parser.add_argument("name", help="서비스 이름")
    serv_parser.set_defaults(func=lambda args: generate_component("service", args.name))

    entity_parser = gen_subparsers.add_parser("entity", help="엔티티 생성")
    entity_parser.add_argument("name", help="엔티티 이름")
    entity_parser.set_defaults(func=lambda args: generate_component("entity", args.name))

    build_parser = subparsers.add_parser("build", help="프로젝트 빌드 (구문 체크)")
    build_parser.set_defaults(func=lambda args: build_project())

    serve_parser = subparsers.add_parser("serve", help="개발 서버 실행")
    serve_parser.set_defaults(func=lambda args: serve_project())

    test_parser = subparsers.add_parser("test", help="테스트 실행")
    test_parser.set_defaults(func=lambda args: test_project())

    lint_parser = subparsers.add_parser("lint", help="코드 린팅 실행")
    lint_parser.set_defaults(func=lambda args: lint_project())

    info_parser = subparsers.add_parser("info", help="CLI 및 시스템 정보 출력")
    info_parser.set_defaults(func=lambda args: info_project())

    update_parser = subparsers.add_parser("update", help="CLI 업데이트(모의)")
    update_parser.set_defaults(func=lambda args: update_cli())

    args = parser.parse_args()
    if not args.command:
        parser.print_help()
        sys.exit(1)
    args.func(args)

if __name__ == "__main__":
    main()
