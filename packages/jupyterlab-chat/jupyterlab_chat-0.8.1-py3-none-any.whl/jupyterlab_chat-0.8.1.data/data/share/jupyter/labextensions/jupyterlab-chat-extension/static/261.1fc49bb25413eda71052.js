"use strict";(self.webpackChunkjupyterlab_chat_extension=self.webpackChunkjupyterlab_chat_extension||[]).push([[261],{9261:(e,t,a)=>{a.r(t),a.d(t,{default:()=>R});var n=a(521),o=a(5749),i=a(9922),r=a(4738),c=a(2209),d=a(5310),s=a(4830),l=a(2036),h=a(123),m=a(1324),u=a(5593),g=a(9625),p=a(1655),C=a(7262),y=a(6656);const f={id:"jupyterlab-chat-extension:chatCommandRegistry",description:"The chat command registry used by the jupyterlab-chat-extension.",autoStart:!0,provides:o.IChatCommandRegistry,activate:e=>new o.ChatCommandRegistry};class v{constructor(){this.id="jupyter-chat:emoji-commands",this._slash_commands=[{name:":heart:",replaceWith:"❤ ",providerId:this.id,description:"Emoji",icon:"❤"},{name:":smile:",replaceWith:"🙂 ",providerId:this.id,description:"Emoji",icon:"🙂"},{name:":thinking:",replaceWith:"🤔 ",providerId:this.id,description:"Emoji",icon:"🤔"},{name:":cool:",replaceWith:"😎 ",providerId:this.id,description:"Emoji",icon:"😎"}],this._regex=/^:\w*:?/}async getChatCommands(e){var t,a;const n=null===(a=null===(t=e.currentWord)||void 0===t?void 0:t.match(this._regex))||void 0===a?void 0:a[0];return n?this._slash_commands.filter((e=>e.name.startsWith(n))):[]}async handleChatCommand(e,t){}}const I={id:"jupyterlab-chat-extension:emojiCommandsPlugin",description:"Plugin which adds emoji commands to the chat.",autoStart:!0,requires:[o.IChatCommandRegistry],activate:(e,t)=>{t.addProvider(new v)}},w="Chat",b="jupyterlab-chat-extension:factory",T={id:"jupyterlab-chat-extension:attachmentOpener",description:"The attachment opener registry.",autoStart:!0,provides:o.IAttachmentOpenerRegistry,activate:e=>{const t=new o.AttachmentOpenerRegistry;return t.set("file",(t=>{e.commands.execute("docmanager:open",{path:t.value})})),t}},x={id:b,description:"Document factories for chat.",autoStart:!0,requires:[m.IRenderMimeRegistry],optional:[y.IActiveCellManagerToken,o.IAttachmentOpenerRegistry,o.IChatCommandRegistry,i.ICollaborativeDrive,s.IDefaultFileBrowser,r.ILayoutRestorer,y.ISelectionWatcherToken,u.ISettingRegistry,c.IThemeManager,c.IToolbarWidgetRegistry,g.ITranslator],provides:y.IChatFactory,activate:(e,t,a,n,i,r,d,s,l,h,m,u,p)=>{const f=null!=p?p:g.nullTranslator;let v;const I=new y.WidgetConfig({});function T(e){const t=I.config.defaultDirectory,a=e.get("defaultDirectory").composite;r&&t&&t!==a&&r.get(t).then((e=>{0===e.content.length&&r.delete(t).catch((e=>{}))})).catch((()=>{}));let n=Promise.resolve(null);r&&a&&t!==a&&(n=r.get(a,{content:!1}).catch((async()=>r.newUntitled({type:"directory"}).then((async e=>r.rename(e.path,a).catch((t=>{throw r.delete(e.path),new Error(t)})))).catch((e=>{throw new Error(e)}))))),n.then((()=>{I.config={sendWithShiftEnter:e.get("sendWithShiftEnter").composite,stackMessages:e.get("stackMessages").composite,unreadNotifications:e.get("unreadNotifications").composite,enableCodeToolbar:e.get("enableCodeToolbar").composite,sendTypingNotification:e.get("sendTypingNotification").composite,defaultDirectory:a}}))}h&&(u&&(v=(0,c.createToolbarFactory)(u,h,w,b,f)),Promise.all([e.restored,h.load(b)]).then((([,e])=>{T(e),e.changed.connect(T)})).catch((e=>{console.error(`Something went wrong when reading the settings.\n${e}`)})));const x=new c.WidgetTracker({namespace:"chat"});if(e.docRegistry.addFileType(y.chatFileType),r){const e=()=>y.YChat.create();r.sharedModelFactory.registerDocumentFactory("chat",e)}e.serviceManager.ready.then((()=>{const t=e.serviceManager.user.identity,n=new y.LabChatModelFactory({user:t,widgetConfig:I,commands:e.commands,activeCellManager:a,selectionWatcher:l});e.docRegistry.addModelFactory(n)})).catch((e=>console.error("The jupyterlab chat model factory is not initialized",e)));const D=new y.ChatWidgetFactory({name:w,label:"Chat",modelName:"chat",fileTypes:["chat"],defaultFor:["chat"],themeManager:m,rmRegistry:t,toolbarFactory:v,translator:f,documentManager:null==d?void 0:d.model.manager,chatCommandRegistry:i,attachmentOpenerRegistry:n});if(D.widgetCreated.connect(((t,a)=>{a.context.pathChanged.connect((()=>{x.save(a)})),x.add(a),a.model.unreadChanged.connect((()=>e.commands.notifyCommandChanged(y.CommandIDs.markAsRead)))})),e.docRegistry.addWidgetFactory(D),s){const t=new C.PromiseDelegate,a=()=>{e.commands.hasCommand(y.CommandIDs.openChat)&&(t.resolve(),e.commands.commandChanged.disconnect(a))};e.commands.commandChanged.connect(a),s.restore(x,{command:y.CommandIDs.openChat,args:e=>{var t;return{filepath:null!==(t=e.model.name)&&void 0!==t?t:"",inSidePanel:e instanceof o.ChatWidget}},name:e=>e.model.name,when:t.promise})}return{widgetConfig:I,tracker:x}}},D={id:"jupyterlab-chat-extension:commands",description:"The commands to create or open a chat.",autoStart:!0,requires:[i.ICollaborativeDrive,y.IChatFactory],optional:[y.IActiveCellManagerToken,y.IChatPanel,c.ICommandPalette,l.ILauncher,y.ISelectionWatcherToken],activate:(e,t,a,i,r,s,l,h)=>{const{commands:m}=e,{tracker:u,widgetConfig:g}=a;m.addCommand(y.CommandIDs.createChat,{label:e=>e.isPalette?"Create a new chat":"Chat",caption:"Create a chat",icon:e=>e.isPalette?void 0:o.chatIcon,execute:async e=>{var a,n;const o=null!==(a=e.inSidePanel)&&void 0!==a&&a;let i=null!==(n=e.name)&&void 0!==n?n:null,r="";if(i||(i=(await c.InputDialog.getText({label:"Name",placeholder:"untitled",title:"Create a new chat"})).value),null===i)return;i&&(r=i.endsWith(y.chatFileType.extensions[0])?i:`${i}${y.chatFileType.extensions[0]}`,r=d.PathExt.join(g.config.defaultDirectory||"",r));let s=!0;if(r?await t.get(r,{content:!1}).catch((()=>{s=!1})):s=!1,!s){let e=await t.newUntitled({type:"file",ext:y.chatFileType.extensions[0]});if(r&&(e=await t.rename(e.path,r)),!e)return(0,c.showErrorMessage)("Error creating a chat","An error occurred while creating the chat"),"";r=e.path}if(m.hasCommand(y.CommandIDs.openChat))return m.execute(y.CommandIDs.openChat,{filepath:r,inSidePanel:o});m.execute("docmanager:open",{path:`RTC:${r}`,factory:w})}}),s&&s.addItem({category:"Chat",command:y.CommandIDs.createChat,args:{isPalette:!0}}),l&&l.add({command:y.CommandIDs.createChat,category:"Other"}),m.addCommand(y.CommandIDs.markAsRead,{caption:"Mark chat as read",icon:o.readIcon,isEnabled:()=>null!==u.currentWidget&&u.currentWidget===e.shell.currentWidget&&u.currentWidget.model.unreadMessages.length>0,execute:async t=>{const a=e.shell.currentWidget;a&&a instanceof y.LabChatPanel&&Array.from(e.shell.widgets("main")).includes(a)?a.model.unreadMessages=[]:console.error(`The command '${y.CommandIDs.markAsRead}' should be executed from the toolbar button only`)}}),u.currentChanged.connect((()=>{m.notifyCommandChanged(y.CommandIDs.markAsRead)})),e.serviceManager.ready.then((()=>{const o=e.serviceManager.user.identity;m.addCommand(y.CommandIDs.openChat,{label:"Open a chat",execute:async d=>{var s,l,u,p;const C=null!==(s=d.inSidePanel)&&void 0!==s&&s;let f=null!==(l=d.filepath)&&void 0!==l?l:null;if(null===f&&(f=(await c.InputDialog.getText({label:"File path",placeholder:"/path/to/the/chat/file",title:"Path of the chat"})).value),!f)return;let v=!0;if(await t.get(f,{content:!1}).catch((()=>{v=!1})),v)if(C&&r){if(e.shell instanceof n.NotebookShell){const t=e.shell;(null===(p=null===(u=t.leftHandler)||void 0===u?void 0:u.currentWidget)||void 0===p?void 0:p.id)===r.id&&t.leftHandler.isVisible||t.activateById(r.id)}else e.shell.activateById(r.id);if(r.openIfExists(f))return;const c=await t.get(f),d=t.sharedModelFactory.createNew({path:c.path,format:c.format,contentType:y.chatFileType.contentType,collaborative:!0}),s=new y.LabChatModel({user:o,sharedModel:d,widgetConfig:g,commands:m,activeCellManager:i,selectionWatcher:h});s.name=c.path;const l=r.addChat(s);a.tracker.add(l)}else m.execute("docmanager:open",{path:`RTC:${f}`,factory:w});else(0,c.showErrorMessage)("Error opening chat",`'${f}' is not a valid path`)}}),s&&s.addItem({category:"Chat",command:y.CommandIDs.openChat})})).catch((e=>console.error("The command to open a chat is not initialized\n",e))),m.addCommand(y.CommandIDs.focusInput,{caption:"Focus the input of the current chat widget",isEnabled:()=>null!==u.currentWidget,execute:()=>{const t=u.currentWidget;t&&(t instanceof o.ChatWidget&&r?(e.shell.activateById(r.id),r.openIfExists(t.model.name)):e.shell.activateById(t.id),t.model.input.focus())}})}},M={id:"jupyterlab-chat-extension:chat-panel",description:"The chat panel widget.",autoStart:!0,provides:y.IChatPanel,requires:[y.IChatFactory,i.ICollaborativeDrive,m.IRenderMimeRegistry],optional:[o.IAttachmentOpenerRegistry,o.IChatCommandRegistry,s.IDefaultFileBrowser,r.ILayoutRestorer,c.IThemeManager],activate:(e,t,a,n,i,r,c,d,s)=>{const{commands:l}=e,h=t.widgetConfig.config.defaultDirectory||"",m=new y.ChatPanel({commands:l,drive:a,rmRegistry:n,themeManager:s,defaultDirectory:h,documentManager:null==c?void 0:c.model.manager,chatCommandRegistry:r,attachmentOpenerRegistry:i});m.id="JupyterlabChat:sidepanel",m.title.icon=o.chatIcon,m.title.caption="Jupyter Chat",t.widgetConfig.configChanged.connect(((e,t)=>{void 0!==t.defaultDirectory&&(m.defaultDirectory=t.defaultDirectory)})),e.shell.add(m,"left",{rank:2e3}),d&&d.add(m,"jupyter-chat");const u=["create","delete","rename"];return e.serviceManager.events.stream.connect(((e,t)=>{if("https://events.jupyter.org/jupyter_server/contents_service/v1"===t.schema_id){const e=t.action;u.includes(e)&&t.path.endsWith(y.chatFileType.extensions[0])&&m.updateChatList()}})),l.addCommand(y.CommandIDs.moveToSide,{label:"Move the chat to the side panel",caption:"Move the chat to the side panel",icon:p.launchIcon,isEnabled:()=>l.hasCommand(y.CommandIDs.openChat),execute:async()=>{const t=e.shell.currentWidget;if(!(t&&t instanceof y.LabChatPanel&&Array.from(e.shell.widgets("main")).includes(t)))return void console.error(`The command '${y.CommandIDs.moveToSide}' should be executed from the toolbar button only`);const a=t.context.path.split(":").pop();l.execute(y.CommandIDs.openChat,{filepath:a,inSidePanel:!0}),t.dispose()}}),m}},R=[{id:"jupyterlab-chat-extension:activeCellManager",description:"The active cell manager plugin.",autoStart:!0,requires:[h.INotebookTracker],provides:y.IActiveCellManagerToken,activate:(e,t)=>new o.ActiveCellManager({tracker:t,shell:e.shell})},T,D,M,x,{id:"jupyterlab-chat-extension:selectionWatcher",description:"The selection watcher plugin.",autoStart:!0,requires:[],provides:y.ISelectionWatcherToken,activate:e=>new o.SelectionWatcher({shell:e.shell})},f,I]}}]);