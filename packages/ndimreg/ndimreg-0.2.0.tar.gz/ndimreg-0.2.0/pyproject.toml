[project]
name = "ndimreg"
description = "N-dimensional image registrations"
authors = [{ name = "jnk22", email = "jannik.schaefer@inbox-online.de" }]
readme = "README.md"
license = "MIT"
keywords = ["image", "registration", "3d", "2d", "fft", "ppft"]
requires-python = ">=3.10,<4"
dynamic = ["version"]
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "Intended Audience :: Science/Research",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Natural Language :: English",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering",
  "Topic :: Scientific/Engineering :: Image Processing",
  "Topic :: Scientific/Engineering :: Visualization",
]

# TODO: Pin dependencies to a minimum version.
dependencies = [
  "loguru",
  "napari",
  "numpy",
  "scipy<2", # imreg_dft uses deprecated functions which are to be removed in SciPy 2.
  "scikit-image",
  "pytransform3d>=3.8.0", # 'pytransform3d.rotations.norm_euler'
  "imreg-dft",
  "tqdm",
  "matplotlib",
  "pyqt6",
  "array-api-compat>=1.9",
  "polars>=1.11.0",
  "mpire>=2.10.2",
  "tzlocal>=5.2",
  "cyclopts>=3.2",
  "cachetools>=5.5.0",
  "py-cpuinfo>=9.0.0",
  "typing-extensions>=4.12.2",
  "ppft-py>=0.1.0",
]

[project.optional-dependencies]
cuda12 = [
  "cupy-cuda12x>=13.3.0",
  "cucim-cu12>=24.10.0",
]
cuda11 = [
  "cupy-cuda11x>=13.3.0",
  "cucim-cu11>=24.10.0",
]
mkl = [
  "mkl-fft>=1.3.11",
  "mkl-service>=2.4.2",
]
pyfftw = [
  "pyfftw>=0.15.0",
]

# Experimental support for AMD.
# CuPy 13.x does not work: https://github.com/cupy/cupy/pull/8335
# We require CuPy <13 or >13 (>13.3 might work again, but needs to be verified).
# As cucim >23.10.0 only exists as 'cucim-cuxx' for NVIDIA CUDA devices, we have
# to depend on the latest non-CUDA version for now.
# Otherwise, it is also possible to use 'cucim-24.x.x', but the dependency
# 'cupy-cudaxxx' has to be removed manually afterwards. (When doing so, ensure
# that the remaining installed 'cupy' is not still the CUDA version due to caching etc.).
# TODO: Find a way to use more recent version of cucim without depending on cucim-cuxx.
# TODO: Alternatively, also allow CuPy >=14 (or >13.3 if that also works).
rocm-5-0 = [
  "cupy-rocm-5-0<13",
  "cucim>=23.10.0",
]
rocm-4-3 = [
  "cupy-rocm-4-3<13",
  "cucim>=23.10.0",
]

[project.scripts]
ndimreg = "ndimreg.main:app"

[project.urls]
Homepage = "https://github.com/jnk22/ndimreg"
Repository = "https://github.com/jnk22/ndimreg"
Documentation = "https://ndimreg.readthedocs.io"

[tool.uv]
managed = true
default-groups = ["dev", "test"]

# TODO: Pin dependencies to a minimum or exact version.
[dependency-groups]
dev = [
  "numpy>=1.23.0,<3",
  "scipy>=1.8.0",
  "pre-commit>=2.20.0",
  "deptry>=0.22.0",
]
test = [
  "pytest>=7.2.0",
  "pytest-cov>=4.0.0",
  "pytest-xdist>=3.6.1",
  "tox-uv>=1.11.3",
]
lint = [
  "mypy>=0.991",
  "pyright>=1.1.394",
  "ruff>=0.9.2",
  "deptry>=0.22.0",
  "vulture>=2.0.0",
  "pyroma>=4.2",
  "numpydoc>=1.8.0",
  "import-linter",
]

[build-system]
requires = ["hatchling", "uv-dynamic-versioning"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "uv-dynamic-versioning"

[tool.uv-dynamic-versioning]
vcs = "git"
style = "pep440"
metadata = false

[tool.mypy]
python_version = "3.10"
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true
show_error_codes = true

[tool.pyright]
reportMissingImports = true
reportMissingTypeStubs = true
pythonVersion = "3.10"

[tool.deptry]
extend_exclude = ["examples"]

[tool.vulture]
paths = ["src", "tests"]
min_confidence = 90
make_whitelist = true
sort_by_size = true

[tool.ruff]
target-version = "py310"

[tool.ruff.format]
docstring-code-format = true
skip-magic-trailing-comma = true

[tool.ruff.lint]
select = ["ALL"]
ignore = ["COM812", "FIX002", "TD002", "TD003"]

[tool.ruff.lint.isort]
split-on-trailing-comma = false

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["D104", "F401"]
"tests/*.py" = ["S101"]
"src/ndimreg/cli/*.py" = ["T201"]
"examples/*.py" = ["D100", "ERA001", "INP001", "T201"]

[tool.pytest.ini_options]
testpaths = ["tests"]
markers = ["regression"]
addopts = "--cov-config=pyproject.toml --doctest-modules --strict-markers"

[tool.coverage.report]
exclude_lines = ["if (typing\\.)?TYPE_CHECKING:"]

[tool.coverage.run]
branch = true
source = ["ndimreg"]

[tool.tox]
skipsdist = true
env_list = ["3.10", "3.11", "3.12"]

[tool.tox.env_run_base]
passenv = ["PYTHON_VERSION"]
allowlist_externals = ["uv"]
commands = [
  [
    "uv",
    "run",
    "--no-dev",
    "--group",
    "test",
    "--python",
    "{envpython}",
    "pytest",
    "--doctest-modules",
  ],
]

[tool.importlinter]
root_package = "ndimreg"
include_external_packages = true
exclude_type_checking_imports = true

[[tool.importlinter.contracts]]
name = "image cannot be dependent on registration and fusion module"
type = "forbidden"
source_modules = "ndimreg.image"
forbidden_modules = ["ndimreg.registration", "ndimreg.pipeline", "ndimreg.processor", "ndimreg.fusion"]

[[tool.importlinter.contracts]]
name = "registration and fusion must be independent from each other"
type = "independence"
modules = ["ndimreg.registration", "ndimreg.fusion"]

[[tool.importlinter.contracts]]
name = "registration cannot be dependent on image wrapper"
type = "forbidden"
source_modules = "ndimreg.registration"
forbidden_modules = ["ndimreg.image"]

[[tool.importlinter.contracts]]
name = "fusion cannot be dependent on image wrapper"
type = "forbidden"
source_modules = "ndimreg.fusion"
forbidden_modules = ["ndimreg.image"]
