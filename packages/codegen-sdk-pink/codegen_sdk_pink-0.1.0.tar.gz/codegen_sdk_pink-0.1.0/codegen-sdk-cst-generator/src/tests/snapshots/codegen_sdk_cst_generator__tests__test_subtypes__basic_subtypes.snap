---
source: codegen-sdk-cst-generator/src/tests/test_subtypes.rs
expression: "crate::test_util::snapshot_string(&output)"
---
use std::sync::Arc;
use tree_sitter;
use codegen_sdk_common::*;
use subenum::subenum;
use std::backtrace::Backtrace;
use bytes::Bytes;
use ambassador::Delegate;
use derive_more::Debug;
use ambassador::delegate_to_methods;
use codegen_sdk_cst::CSTLanguage;
use crate::cst::tree::ParseContext;
use std::path::PathBuf;
#[subenum(Expression)]
#[derive(Debug, Eq, PartialEq, Clone, Hash, salsa::Update, Delegate, Ord, PartialOrd)]
#[delegate(CSTNode<'db1>)]
pub enum NodeTypes<'db1> {
    #[subenum(Expression)]
    BinaryExpression(BinaryExpression<'db1>),
    #[subenum(Expression)]
    UnaryExpression(UnaryExpression<'db1>),
}
impl<'db3> From<BinaryExpression<'db3>> for NodeTypes<'db3> {
    fn from(node: BinaryExpression<'db3>) -> Self {
        Self::BinaryExpression(node)
    }
}
impl<'db3> From<UnaryExpression<'db3>> for NodeTypes<'db3> {
    fn from(node: UnaryExpression<'db3>) -> Self {
        Self::UnaryExpression(node)
    }
}
impl<'db4> FromNode<'db4, NodeTypes<'db4>> for Expression<'db4> {
    fn from_node(
        context: &mut ParseContext<'db4, NodeTypes<'db4>>,
        node: tree_sitter::Node,
    ) -> Result<(Self, Vec<indextree::NodeId>), ParseError> {
        match node.kind_id() {
            0u16 => {
                let (node, ids) = UnaryExpression::from_node(context, node)?;
                Ok((Self::UnaryExpression(node), ids))
            }
            _ => {
                Err(ParseError::UnexpectedNode {
                    node_type: node.kind().to_string(),
                    backtrace: Backtrace::capture(),
                })
            }
        }
    }
}
#[subenum(ExpressionRef)]
#[derive(Debug, Eq, PartialEq, Hash, Clone, Ord, PartialOrd)]
pub enum NodeTypesRef<'db1> {
    #[subenum(ExpressionRef)]
    BinaryExpression(&'db1 BinaryExpression<'db1>),
    #[subenum(ExpressionRef)]
    UnaryExpression(&'db1 UnaryExpression<'db1>),
}
impl<'db3> From<&'db3 BinaryExpression<'db3>> for NodeTypesRef<'db3> {
    fn from(node: &'db3 BinaryExpression<'db3>) -> Self {
        Self::BinaryExpression(node)
    }
}
impl<'db3> From<&'db3 UnaryExpression<'db3>> for NodeTypesRef<'db3> {
    fn from(node: &'db3 UnaryExpression<'db3>) -> Self {
        Self::UnaryExpression(node)
    }
}
impl<'db3> NodeTypes<'db3> {
    pub fn as_ref(&'db3 self) -> NodeTypesRef<'db3> {
        match self {
            Self::BinaryExpression(data) => NodeTypesRef::BinaryExpression(data),
            Self::UnaryExpression(data) => NodeTypesRef::UnaryExpression(data),
        }
    }
}
#[delegate_to_methods]
#[delegate(CSTNode<'db3>, target_ref = "deref")]
impl<'db3> NodeTypesRef<'db3> {
    fn deref<'db2>(&'db2 self) -> &'db2 dyn CSTNode<'db3> {
        match self {
            Self::BinaryExpression(data) => *data,
            Self::UnaryExpression(data) => *data,
        }
    }
}
impl<'db3> From<&'db3 NodeTypes<'db3>> for NodeTypesRef<'db3> {
    fn from(node: &'db3 NodeTypes<'db3>) -> Self {
        node.as_ref().into()
    }
}
impl<'db3> From<NodeTypesRef<'db3>> for NodeTypes<'db3> {
    fn from(node: NodeTypesRef<'db3>) -> Self {
        match node {
            NodeTypesRef::BinaryExpression(data) => {
                Self::BinaryExpression((*data).clone())
            }
            NodeTypesRef::UnaryExpression(data) => Self::UnaryExpression((*data).clone()),
        }
    }
}
impl<'db3> From<&'db3 NodeTypesRef<'db3>> for NodeTypes<'db3> {
    fn from(node: &'db3 NodeTypesRef<'db3>) -> Self {
        match node {
            NodeTypesRef::BinaryExpression(data) => {
                Self::BinaryExpression((*data).clone())
            }
            NodeTypesRef::UnaryExpression(data) => Self::UnaryExpression((*data).clone()),
        }
    }
}
impl<'db3> TryFrom<NodeTypesRef<'db3>> for &'db3 BinaryExpression<'db3> {
    type Error = codegen_sdk_cst::ConversionError;
    fn try_from(node: NodeTypesRef<'db3>) -> Result<Self, Self::Error> {
        if let NodeTypesRef::BinaryExpression(node) = node {
            Ok(node)
        } else {
            Err(codegen_sdk_cst::ConversionError {
                expected: "TODO".to_string(),
                actual: node.kind_name().to_string(),
                backtrace: Backtrace::capture(),
            })
        }
    }
}
impl<'db3> TryFrom<NodeTypesRef<'db3>> for &'db3 UnaryExpression<'db3> {
    type Error = codegen_sdk_cst::ConversionError;
    fn try_from(node: NodeTypesRef<'db3>) -> Result<Self, Self::Error> {
        if let NodeTypesRef::UnaryExpression(node) = node {
            Ok(node)
        } else {
            Err(codegen_sdk_cst::ConversionError {
                expected: "TODO".to_string(),
                actual: node.kind_name().to_string(),
                backtrace: Backtrace::capture(),
            })
        }
    }
}
impl<'db3> Expression<'db3> {
    pub fn as_ref(&'db3 self) -> ExpressionRef<'db3> {
        match self {
            Self::BinaryExpression(data) => ExpressionRef::BinaryExpression(data),
            Self::UnaryExpression(data) => ExpressionRef::UnaryExpression(data),
        }
    }
}
#[delegate_to_methods]
#[delegate(CSTNode<'db3>, target_ref = "deref")]
impl<'db3> ExpressionRef<'db3> {
    fn deref<'db2>(&'db2 self) -> &'db2 dyn CSTNode<'db3> {
        match self {
            Self::BinaryExpression(data) => *data,
            Self::UnaryExpression(data) => *data,
        }
    }
}
impl<'db3> From<&'db3 Expression<'db3>> for NodeTypesRef<'db3> {
    fn from(node: &'db3 Expression<'db3>) -> Self {
        node.as_ref().into()
    }
}
impl<'db3> From<ExpressionRef<'db3>> for Expression<'db3> {
    fn from(node: ExpressionRef<'db3>) -> Self {
        match node {
            ExpressionRef::BinaryExpression(data) => {
                Self::BinaryExpression((*data).clone())
            }
            ExpressionRef::UnaryExpression(data) => {
                Self::UnaryExpression((*data).clone())
            }
        }
    }
}
impl<'db3> From<&'db3 ExpressionRef<'db3>> for Expression<'db3> {
    fn from(node: &'db3 ExpressionRef<'db3>) -> Self {
        match node {
            ExpressionRef::BinaryExpression(data) => {
                Self::BinaryExpression((*data).clone())
            }
            ExpressionRef::UnaryExpression(data) => {
                Self::UnaryExpression((*data).clone())
            }
        }
    }
}
impl<'db3> TryFrom<ExpressionRef<'db3>> for &'db3 BinaryExpression<'db3> {
    type Error = codegen_sdk_cst::ConversionError;
    fn try_from(node: ExpressionRef<'db3>) -> Result<Self, Self::Error> {
        if let ExpressionRef::BinaryExpression(node) = node {
            Ok(node)
        } else {
            Err(codegen_sdk_cst::ConversionError {
                expected: "TODO".to_string(),
                actual: node.kind_name().to_string(),
                backtrace: Backtrace::capture(),
            })
        }
    }
}
impl<'db3> TryFrom<ExpressionRef<'db3>> for &'db3 UnaryExpression<'db3> {
    type Error = codegen_sdk_cst::ConversionError;
    fn try_from(node: ExpressionRef<'db3>) -> Result<Self, Self::Error> {
        if let ExpressionRef::UnaryExpression(node) = node {
            Ok(node)
        } else {
            Err(codegen_sdk_cst::ConversionError {
                expected: "TODO".to_string(),
                actual: node.kind_name().to_string(),
                backtrace: Backtrace::capture(),
            })
        }
    }
}
#[derive(Debug, Eq, PartialEq, Clone, salsa::Update)]
pub struct BinaryExpression<'db> {
    id: CSTNodeId<'db>,
    file_id: FileNodeId,
    start_byte: usize,
    end_byte: usize,
    start_position: Point<'db>,
    end_position: Point<'db>,
    #[debug(ignore)]
    buffer: Arc<Bytes>,
    is_error: bool,
}
impl<'db> FromNode<'db, NodeTypes<'db>> for BinaryExpression<'db> {
    fn from_node(
        context: &mut ParseContext<'db, NodeTypes<'db>>,
        node: tree_sitter::Node,
    ) -> Result<(Self, Vec<indextree::NodeId>), ParseError> {
        let start_position = Point::from(context.db, node.start_position());
        let end_position = Point::from(context.db, node.end_position());
        let id = CSTNodeId::new(context.db, context.file_id, node.id(), context.root);
        let mut ids = Vec::new();
        Ok((
            Self {
                start_byte: node.start_byte(),
                end_byte: node.end_byte(),
                start_position: start_position,
                end_position: end_position,
                buffer: context.buffer.clone(),
                is_error: node.is_error(),
                id,
                file_id: context.file_id.clone(),
            },
            ids,
        ))
    }
}
impl<'db> BinaryExpression<'db> {
    const KIND_NAME: &'static str = "binary_expression";
}
impl<'db> CSTNode<'db> for BinaryExpression<'db> {
    fn kind_name(&self) -> &str {
        &Self::KIND_NAME
    }
    fn start_byte(&self) -> usize {
        self.start_byte
    }
    fn end_byte(&self) -> usize {
        self.end_byte
    }
    fn start_position(&self) -> Point<'db> {
        self.start_position
    }
    fn end_position(&self) -> Point<'db> {
        self.end_position
    }
    fn buffer(&self) -> &Bytes {
        &self.buffer
    }
    fn kind_id(&self) -> u16 {
        0u16
    }
    fn is_error(&self) -> bool {
        self.is_error
    }
    fn is_named(&self) -> bool {
        true
    }
    fn id(&self) -> CSTNodeId<'db> {
        self.id
    }
    fn file_id(&self) -> FileNodeId {
        self.file_id
    }
}
impl<'db1> HasChildren<'db1, NodeTypes<'db1>> for BinaryExpression<'db1> {
    type Child<'db2> = BinaryExpression<'db2> where Self: 'db2;
    fn children<'db2>(
        &'db2 self,
        context: &'db2 Tree<NodeTypes<'db2>>,
    ) -> Vec<Self::Child<'db2>> {
        vec![]
    }
    fn children_by_field_name<'db2>(
        &'db2 self,
        context: &'db2 Tree<NodeTypes<'db2>>,
        field_name: &str,
    ) -> Vec<Self::Child<'db2>> {
        match field_name {
            _ => vec![],
        }
    }
    fn children_by_field_id<'db2>(
        &'db2 self,
        context: &'db2 Tree<NodeTypes<'db2>>,
        field_id: u16,
    ) -> Vec<Self::Child<'db2>> {
        match field_id {
            _ => vec![],
        }
    }
}
impl<'db> std::hash::Hash for BinaryExpression<'db> {
    fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        self.id.hash(state);
    }
}
impl<'db> PartialOrd for BinaryExpression<'db> {
    fn partial_cmp(&self, other: &Self) -> Option<std::cmp::Ordering> {
        Some(self.cmp(other))
    }
}
impl<'db> Ord for BinaryExpression<'db> {
    fn cmp(&self, other: &Self) -> std::cmp::Ordering {
        let res = self.start_byte().cmp(&other.start_byte());
        if res == std::cmp::Ordering::Equal {
            self.end_byte().cmp(&other.end_byte())
        } else {
            res
        }
    }
}
#[derive(Debug, Eq, PartialEq, Clone, salsa::Update)]
pub struct UnaryExpression<'db> {
    id: CSTNodeId<'db>,
    file_id: FileNodeId,
    start_byte: usize,
    end_byte: usize,
    start_position: Point<'db>,
    end_position: Point<'db>,
    #[debug(ignore)]
    buffer: Arc<Bytes>,
    is_error: bool,
}
impl<'db> FromNode<'db, NodeTypes<'db>> for UnaryExpression<'db> {
    fn from_node(
        context: &mut ParseContext<'db, NodeTypes<'db>>,
        node: tree_sitter::Node,
    ) -> Result<(Self, Vec<indextree::NodeId>), ParseError> {
        let start_position = Point::from(context.db, node.start_position());
        let end_position = Point::from(context.db, node.end_position());
        let id = CSTNodeId::new(context.db, context.file_id, node.id(), context.root);
        let mut ids = Vec::new();
        Ok((
            Self {
                start_byte: node.start_byte(),
                end_byte: node.end_byte(),
                start_position: start_position,
                end_position: end_position,
                buffer: context.buffer.clone(),
                is_error: node.is_error(),
                id,
                file_id: context.file_id.clone(),
            },
            ids,
        ))
    }
}
impl<'db> UnaryExpression<'db> {
    const KIND_NAME: &'static str = "unary_expression";
}
impl<'db> CSTNode<'db> for UnaryExpression<'db> {
    fn kind_name(&self) -> &str {
        &Self::KIND_NAME
    }
    fn start_byte(&self) -> usize {
        self.start_byte
    }
    fn end_byte(&self) -> usize {
        self.end_byte
    }
    fn start_position(&self) -> Point<'db> {
        self.start_position
    }
    fn end_position(&self) -> Point<'db> {
        self.end_position
    }
    fn buffer(&self) -> &Bytes {
        &self.buffer
    }
    fn kind_id(&self) -> u16 {
        0u16
    }
    fn is_error(&self) -> bool {
        self.is_error
    }
    fn is_named(&self) -> bool {
        true
    }
    fn id(&self) -> CSTNodeId<'db> {
        self.id
    }
    fn file_id(&self) -> FileNodeId {
        self.file_id
    }
}
impl<'db1> HasChildren<'db1, NodeTypes<'db1>> for UnaryExpression<'db1> {
    type Child<'db2> = UnaryExpression<'db2> where Self: 'db2;
    fn children<'db2>(
        &'db2 self,
        context: &'db2 Tree<NodeTypes<'db2>>,
    ) -> Vec<Self::Child<'db2>> {
        vec![]
    }
    fn children_by_field_name<'db2>(
        &'db2 self,
        context: &'db2 Tree<NodeTypes<'db2>>,
        field_name: &str,
    ) -> Vec<Self::Child<'db2>> {
        match field_name {
            _ => vec![],
        }
    }
    fn children_by_field_id<'db2>(
        &'db2 self,
        context: &'db2 Tree<NodeTypes<'db2>>,
        field_id: u16,
    ) -> Vec<Self::Child<'db2>> {
        match field_id {
            _ => vec![],
        }
    }
}
impl<'db> std::hash::Hash for UnaryExpression<'db> {
    fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        self.id.hash(state);
    }
}
impl<'db> PartialOrd for UnaryExpression<'db> {
    fn partial_cmp(&self, other: &Self) -> Option<std::cmp::Ordering> {
        Some(self.cmp(other))
    }
}
impl<'db> Ord for UnaryExpression<'db> {
    fn cmp(&self, other: &Self) -> std::cmp::Ordering {
        let res = self.start_byte().cmp(&other.start_byte());
        if res == std::cmp::Ordering::Equal {
            self.end_byte().cmp(&other.end_byte())
        } else {
            res
        }
    }
}
impl<'db> TreeNode for NodeTypes<'db> {}
#[salsa::tracked]
pub struct Parsed<'db> {
    #[id]
    id: FileNodeId,
    #[tracked]
    #[return_ref]
    #[no_clone]
    #[no_eq]
    pub tree: Arc<Tree<NodeTypes<'db>>>,
    pub program: indextree::NodeId,
}
pub fn parse_program_raw<'db>(
    db: &'db dyn salsa::Database,
    input: codegen_sdk_cst::File,
) -> Option<Parsed<'db>> {
    let buffer = Bytes::from(input.content(db).as_bytes().to_vec());
    let tree = codegen_sdk_common::language::language::Language
        .parse_tree_sitter(&input.content(db));
    match tree {
        Ok(tree) => {
            if tree.root_node().has_error() {
                ParseError::SyntaxError.report(db);
                None
            } else {
                let mut context = ParseContext::new(
                    db,
                    input.path(db),
                    input.root(db),
                    buffer,
                );
                let root_id = Program::orphaned(&mut context, tree.root_node())
                    .map_or_else(
                        |e| {
                            e.report(db);
                            None
                        },
                        |program| { Some(program) },
                    );
                if let Some(program) = root_id {
                    Some(
                        Parsed::new(db, context.file_id, Arc::new(context.tree), program),
                    )
                } else {
                    None
                }
            }
        }
        Err(e) => {
            e.report(db);
            None
        }
    }
}
#[salsa::tracked(return_ref)]
pub fn parse_program(
    db: &dyn salsa::Database,
    input: codegen_sdk_cst::File,
) -> Parsed<'_> {
    let raw = parse_program_raw(db, input);
    if let Some(parsed) = raw {
        parsed
    } else {
        panic!("Failed to parse program");
    }
}
pub struct Language;
impl CSTLanguage for Language {
    type Types<'db> = NodeTypes<'db>;
    type Program<'db> = Program<'db>;
    fn language() -> &'static codegen_sdk_common::language::Language {
        &codegen_sdk_common::language::language::Language
    }
    fn parse<'db>(
        db: &'db dyn salsa::Database,
        content: std::string::String,
    ) -> Option<
        (&'db Self::Program<'db>, &'db Tree<Self::Types<'db>>, indextree::NodeId),
    > {
        let input = codegen_sdk_cst::File::new(
            db,
            std::path::PathBuf::new(),
            content,
            std::path::PathBuf::new(),
        );
        let parsed = parse_program(db, input);
        let program_id = parsed.program(db);
        let tree = parsed.tree(db);
        let program = tree.get(&program_id).unwrap().as_ref();
        Some((program.try_into().unwrap(), tree, program_id))
    }
}
