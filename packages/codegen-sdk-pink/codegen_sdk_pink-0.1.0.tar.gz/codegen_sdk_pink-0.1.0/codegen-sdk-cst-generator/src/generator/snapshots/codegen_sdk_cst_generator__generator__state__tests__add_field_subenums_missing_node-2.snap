---
source: codegen-sdk-cst-generator/src/generator/state.rs
expression: snapshot_tokens(&struct_tokens)
---
#[derive(Debug, Eq, PartialEq, Clone, salsa::Update)]
pub struct AnonymousNodeA<'db> {
    id: CSTNodeId<'db>,
    file_id: FileNodeId,
    start_byte: usize,
    end_byte: usize,
    start_position: Point<'db>,
    end_position: Point<'db>,
    #[debug(ignore)]
    buffer: Arc<Bytes>,
    is_error: bool,
}
impl<'db> FromNode<'db, NodeTypes<'db>> for AnonymousNodeA<'db> {
    fn from_node(
        context: &mut ParseContext<'db, NodeTypes<'db>>,
        node: tree_sitter::Node,
    ) -> Result<(Self, Vec<indextree::NodeId>), ParseError> {
        let start_position = Point::from(context.db, node.start_position());
        let end_position = Point::from(context.db, node.end_position());
        let id = CSTNodeId::new(context.db, context.file_id, node.id(), context.root);
        let mut ids = Vec::new();
        Ok((
            Self {
                start_byte: node.start_byte(),
                end_byte: node.end_byte(),
                start_position: start_position,
                end_position: end_position,
                buffer: context.buffer.clone(),
                is_error: node.is_error(),
                id,
                file_id: context.file_id.clone(),
            },
            ids,
        ))
    }
}
impl<'db> AnonymousNodeA<'db> {
    const KIND_NAME: &'static str = "node_a";
}
impl<'db> CSTNode<'db> for AnonymousNodeA<'db> {
    fn kind_name(&self) -> &str {
        &Self::KIND_NAME
    }
    fn start_byte(&self) -> usize {
        self.start_byte
    }
    fn end_byte(&self) -> usize {
        self.end_byte
    }
    fn start_position(&self) -> Point<'db> {
        self.start_position
    }
    fn end_position(&self) -> Point<'db> {
        self.end_position
    }
    fn buffer(&self) -> &Bytes {
        &self.buffer
    }
    fn kind_id(&self) -> u16 {
        0u16
    }
    fn is_error(&self) -> bool {
        self.is_error
    }
    fn is_named(&self) -> bool {
        false
    }
    fn id(&self) -> CSTNodeId<'db> {
        self.id
    }
    fn file_id(&self) -> FileNodeId {
        self.file_id
    }
}
impl<'db1> HasChildren<'db1, NodeTypes<'db1>> for AnonymousNodeA<'db1> {
    type Child<'db2> = AnonymousNodeA<'db2> where Self: 'db2;
    fn children<'db2>(
        &'db2 self,
        context: &'db2 Tree<NodeTypes<'db2>>,
    ) -> Vec<Self::Child<'db2>> {
        vec![]
    }
    fn children_by_field_name<'db2>(
        &'db2 self,
        context: &'db2 Tree<NodeTypes<'db2>>,
        field_name: &str,
    ) -> Vec<Self::Child<'db2>> {
        match field_name {
            _ => vec![],
        }
    }
    fn children_by_field_id<'db2>(
        &'db2 self,
        context: &'db2 Tree<NodeTypes<'db2>>,
        field_id: u16,
    ) -> Vec<Self::Child<'db2>> {
        match field_id {
            _ => vec![],
        }
    }
}
impl<'db> std::hash::Hash for AnonymousNodeA<'db> {
    fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        self.id.hash(state);
    }
}
impl<'db> PartialOrd for AnonymousNodeA<'db> {
    fn partial_cmp(&self, other: &Self) -> Option<std::cmp::Ordering> {
        Some(self.cmp(other))
    }
}
impl<'db> Ord for AnonymousNodeA<'db> {
    fn cmp(&self, other: &Self) -> std::cmp::Ordering {
        let res = self.start_byte().cmp(&other.start_byte());
        if res == std::cmp::Ordering::Equal {
            self.end_byte().cmp(&other.end_byte())
        } else {
            res
        }
    }
}
#[derive(Debug, Eq, PartialEq, Clone, salsa::Update)]
pub struct NodeB<'db> {
    id: CSTNodeId<'db>,
    file_id: FileNodeId,
    start_byte: usize,
    end_byte: usize,
    start_position: Point<'db>,
    end_position: Point<'db>,
    #[debug(ignore)]
    buffer: Arc<Bytes>,
    is_error: bool,
}
impl<'db> FromNode<'db, NodeTypes<'db>> for NodeB<'db> {
    fn from_node(
        context: &mut ParseContext<'db, NodeTypes<'db>>,
        node: tree_sitter::Node,
    ) -> Result<(Self, Vec<indextree::NodeId>), ParseError> {
        let start_position = Point::from(context.db, node.start_position());
        let end_position = Point::from(context.db, node.end_position());
        let id = CSTNodeId::new(context.db, context.file_id, node.id(), context.root);
        let mut ids = Vec::new();
        Ok((
            Self {
                start_byte: node.start_byte(),
                end_byte: node.end_byte(),
                start_position: start_position,
                end_position: end_position,
                buffer: context.buffer.clone(),
                is_error: node.is_error(),
                id,
                file_id: context.file_id.clone(),
            },
            ids,
        ))
    }
}
impl<'db> NodeB<'db> {
    const KIND_NAME: &'static str = "node_b";
}
impl<'db> CSTNode<'db> for NodeB<'db> {
    fn kind_name(&self) -> &str {
        &Self::KIND_NAME
    }
    fn start_byte(&self) -> usize {
        self.start_byte
    }
    fn end_byte(&self) -> usize {
        self.end_byte
    }
    fn start_position(&self) -> Point<'db> {
        self.start_position
    }
    fn end_position(&self) -> Point<'db> {
        self.end_position
    }
    fn buffer(&self) -> &Bytes {
        &self.buffer
    }
    fn kind_id(&self) -> u16 {
        0u16
    }
    fn is_error(&self) -> bool {
        self.is_error
    }
    fn is_named(&self) -> bool {
        true
    }
    fn id(&self) -> CSTNodeId<'db> {
        self.id
    }
    fn file_id(&self) -> FileNodeId {
        self.file_id
    }
}
impl<'db1> HasChildren<'db1, NodeTypes<'db1>> for NodeB<'db1> {
    type Child<'db2> = NodeB<'db2> where Self: 'db2;
    fn children<'db2>(
        &'db2 self,
        context: &'db2 Tree<NodeTypes<'db2>>,
    ) -> Vec<Self::Child<'db2>> {
        vec![]
    }
    fn children_by_field_name<'db2>(
        &'db2 self,
        context: &'db2 Tree<NodeTypes<'db2>>,
        field_name: &str,
    ) -> Vec<Self::Child<'db2>> {
        match field_name {
            _ => vec![],
        }
    }
    fn children_by_field_id<'db2>(
        &'db2 self,
        context: &'db2 Tree<NodeTypes<'db2>>,
        field_id: u16,
    ) -> Vec<Self::Child<'db2>> {
        match field_id {
            _ => vec![],
        }
    }
}
impl<'db> std::hash::Hash for NodeB<'db> {
    fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        self.id.hash(state);
    }
}
impl<'db> PartialOrd for NodeB<'db> {
    fn partial_cmp(&self, other: &Self) -> Option<std::cmp::Ordering> {
        Some(self.cmp(other))
    }
}
impl<'db> Ord for NodeB<'db> {
    fn cmp(&self, other: &Self) -> std::cmp::Ordering {
        let res = self.start_byte().cmp(&other.start_byte());
        if res == std::cmp::Ordering::Equal {
            self.end_byte().cmp(&other.end_byte())
        } else {
            res
        }
    }
}
#[derive(Debug, Eq, PartialEq, Clone, salsa::Update)]
pub struct NodeC<'db> {
    id: CSTNodeId<'db>,
    file_id: FileNodeId,
    start_byte: usize,
    end_byte: usize,
    start_position: Point<'db>,
    end_position: Point<'db>,
    #[debug(ignore)]
    buffer: Arc<Bytes>,
    is_error: bool,
    pub field: Vec<indextree::NodeId>,
}
impl<'db> FromNode<'db, NodeTypes<'db>> for NodeC<'db> {
    fn from_node(
        context: &mut ParseContext<'db, NodeTypes<'db>>,
        node: tree_sitter::Node,
    ) -> Result<(Self, Vec<indextree::NodeId>), ParseError> {
        let start_position = Point::from(context.db, node.start_position());
        let end_position = Point::from(context.db, node.end_position());
        let id = CSTNodeId::new(context.db, context.file_id, node.id(), context.root);
        let mut ids = Vec::new();
        let field = get_multiple_children_by_field_name::<
            NodeTypes<'db>,
            NodeCField<'db>,
        >(context, &node, "field")?;
        for child in field.iter().cloned() {
            ids.push(child);
        }
        Ok((
            Self {
                start_byte: node.start_byte(),
                end_byte: node.end_byte(),
                start_position: start_position,
                end_position: end_position,
                buffer: context.buffer.clone(),
                is_error: node.is_error(),
                id,
                file_id: context.file_id.clone(),
                field,
            },
            ids,
        ))
    }
}
impl<'db> NodeC<'db> {
    const KIND_NAME: &'static str = "node_c";
    pub fn field(&self, tree: &'db Tree<NodeTypes<'db>>) -> Vec<NodeCFieldRef<'db>> {
        self.field
            .iter()
            .map(|id| tree.get(id).unwrap().as_ref().try_into().unwrap())
            .collect()
    }
}
impl<'db> CSTNode<'db> for NodeC<'db> {
    fn kind_name(&self) -> &str {
        &Self::KIND_NAME
    }
    fn start_byte(&self) -> usize {
        self.start_byte
    }
    fn end_byte(&self) -> usize {
        self.end_byte
    }
    fn start_position(&self) -> Point<'db> {
        self.start_position
    }
    fn end_position(&self) -> Point<'db> {
        self.end_position
    }
    fn buffer(&self) -> &Bytes {
        &self.buffer
    }
    fn kind_id(&self) -> u16 {
        0u16
    }
    fn is_error(&self) -> bool {
        self.is_error
    }
    fn is_named(&self) -> bool {
        true
    }
    fn id(&self) -> CSTNodeId<'db> {
        self.id
    }
    fn file_id(&self) -> FileNodeId {
        self.file_id
    }
}
impl<'db1> HasChildren<'db1, NodeTypes<'db1>> for NodeC<'db1> {
    type Child<'db2> = NodeCChildrenRef<'db2> where Self: 'db2;
    fn children<'db2>(
        &'db2 self,
        context: &'db2 Tree<NodeTypes<'db2>>,
    ) -> Vec<Self::Child<'db2>> {
        let mut children: Vec<Self::Child<'db2>> = vec![];
        children
            .extend(
                self
                    .field
                    .iter()
                    .map(|child| {
                        context.get(child).unwrap().as_ref().try_into().unwrap()
                    }),
            );
        children.sort_by_key(|c| c.start_byte());
        children
    }
    fn children_by_field_name<'db2>(
        &'db2 self,
        context: &'db2 Tree<NodeTypes<'db2>>,
        field_name: &str,
    ) -> Vec<Self::Child<'db2>> {
        match field_name {
            "field" => {
                self.field
                    .iter()
                    .map(|child| {
                        context.get(child).unwrap().as_ref().try_into().unwrap()
                    })
                    .collect()
            }
            _ => vec![],
        }
    }
    fn children_by_field_id<'db2>(
        &'db2 self,
        context: &'db2 Tree<NodeTypes<'db2>>,
        field_id: u16,
    ) -> Vec<Self::Child<'db2>> {
        match field_id {
            1u16 => {
                self.field
                    .iter()
                    .map(|child| {
                        context.get(child).unwrap().as_ref().try_into().unwrap()
                    })
                    .collect()
            }
            _ => vec![],
        }
    }
}
impl<'db> std::hash::Hash for NodeC<'db> {
    fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        self.id.hash(state);
    }
}
impl<'db> PartialOrd for NodeC<'db> {
    fn partial_cmp(&self, other: &Self) -> Option<std::cmp::Ordering> {
        Some(self.cmp(other))
    }
}
impl<'db> Ord for NodeC<'db> {
    fn cmp(&self, other: &Self) -> std::cmp::Ordering {
        let res = self.start_byte().cmp(&other.start_byte());
        if res == std::cmp::Ordering::Equal {
            self.end_byte().cmp(&other.end_byte())
        } else {
            res
        }
    }
}
