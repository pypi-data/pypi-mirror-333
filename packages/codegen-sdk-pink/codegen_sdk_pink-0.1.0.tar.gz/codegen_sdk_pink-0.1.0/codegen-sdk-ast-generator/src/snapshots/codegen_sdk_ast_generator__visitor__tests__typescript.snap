---
source: codegen-sdk-ast-generator/src/visitor.rs
expression: "codegen_sdk_common::generator::format_code_string(&visitor.to_string()).unwrap()"
---
#[salsa::tracked]
pub struct Class<'db> {
    #[id]
    _fully_qualified_name: codegen_sdk_resolution::FullyQualifiedName,
    #[id]
    pub node_id: codegen_sdk_common::CSTNodeTreeId,
    ///@name from query: "(abstract_class_declaration\n  name: (type_identifier) @name) @definition.class"
    #[tracked]
    #[return_ref]
    pub _name: codegen_sdk_common::CSTNodeTreeId,
}
impl<'db> Class<'db> {
    pub fn node(
        &self,
        db: &'db dyn codegen_sdk_resolution::Db,
    ) -> &'db crate::cst::AbstractClassDeclaration<'db> {
        let file = self.file(db);
        let tree = file.tree(db);
        tree.get(self.node_id(db).id(db)).unwrap().as_ref().try_into().unwrap()
    }
    pub fn name(
        &self,
        db: &'db dyn codegen_sdk_resolution::Db,
    ) -> &'db crate::cst::TypeIdentifier<'db> {
        ///@name from query: "(abstract_class_declaration\n  name: (type_identifier) @name) @definition.class"
        let id = self._name(db).id(db);
        let file = self.file(db);
        let node = file.tree(db).get(&id).unwrap();
        node.as_ref().try_into().unwrap()
    }
}
impl<'db> codegen_sdk_resolution::HasFile<'db> for Class<'db> {
    type File<'db1> = TypescriptFile<'db1>;
    fn file(&self, db: &'db dyn codegen_sdk_resolution::Db) -> &'db Self::File<'db> {
        let file = self._fully_qualified_name(db).file(db);
        parse(db, file)
    }
    fn root_path(&self, db: &'db dyn codegen_sdk_resolution::Db) -> &PathBuf {
        self.node_id(db).root(db).path(db)
    }
}
impl<'db> codegen_sdk_resolution::HasId<'db> for Class<'db> {
    fn fully_qualified_name(
        &self,
        db: &'db dyn salsa::Database,
    ) -> codegen_sdk_resolution::FullyQualifiedName {
        self._fully_qualified_name(db)
    }
}
#[salsa::tracked]
pub struct Function<'db> {
    #[id]
    _fully_qualified_name: codegen_sdk_resolution::FullyQualifiedName,
    #[id]
    pub node_id: codegen_sdk_common::CSTNodeTreeId,
    ///@name from query: "(function_signature\n  name: (identifier) @name) @definition.function"
    #[tracked]
    #[return_ref]
    pub _name: codegen_sdk_common::CSTNodeTreeId,
}
impl<'db> Function<'db> {
    pub fn node(
        &self,
        db: &'db dyn codegen_sdk_resolution::Db,
    ) -> &'db crate::cst::FunctionSignature<'db> {
        let file = self.file(db);
        let tree = file.tree(db);
        tree.get(self.node_id(db).id(db)).unwrap().as_ref().try_into().unwrap()
    }
    pub fn name(
        &self,
        db: &'db dyn codegen_sdk_resolution::Db,
    ) -> &'db crate::cst::Identifier<'db> {
        ///@name from query: "(function_signature\n  name: (identifier) @name) @definition.function"
        let id = self._name(db).id(db);
        let file = self.file(db);
        let node = file.tree(db).get(&id).unwrap();
        node.as_ref().try_into().unwrap()
    }
}
impl<'db> codegen_sdk_resolution::HasFile<'db> for Function<'db> {
    type File<'db1> = TypescriptFile<'db1>;
    fn file(&self, db: &'db dyn codegen_sdk_resolution::Db) -> &'db Self::File<'db> {
        let file = self._fully_qualified_name(db).file(db);
        parse(db, file)
    }
    fn root_path(&self, db: &'db dyn codegen_sdk_resolution::Db) -> &PathBuf {
        self.node_id(db).root(db).path(db)
    }
}
impl<'db> codegen_sdk_resolution::HasId<'db> for Function<'db> {
    fn fully_qualified_name(
        &self,
        db: &'db dyn salsa::Database,
    ) -> codegen_sdk_resolution::FullyQualifiedName {
        self._fully_qualified_name(db)
    }
}
#[salsa::tracked]
pub struct Interface<'db> {
    #[id]
    _fully_qualified_name: codegen_sdk_resolution::FullyQualifiedName,
    #[id]
    pub node_id: codegen_sdk_common::CSTNodeTreeId,
    ///@name from query: "(interface_declaration\n  name: (type_identifier) @name) @definition.interface"
    #[tracked]
    #[return_ref]
    pub _name: codegen_sdk_common::CSTNodeTreeId,
}
impl<'db> Interface<'db> {
    pub fn node(
        &self,
        db: &'db dyn codegen_sdk_resolution::Db,
    ) -> &'db crate::cst::InterfaceDeclaration<'db> {
        let file = self.file(db);
        let tree = file.tree(db);
        tree.get(self.node_id(db).id(db)).unwrap().as_ref().try_into().unwrap()
    }
    pub fn name(
        &self,
        db: &'db dyn codegen_sdk_resolution::Db,
    ) -> &'db crate::cst::TypeIdentifier<'db> {
        ///@name from query: "(interface_declaration\n  name: (type_identifier) @name) @definition.interface"
        let id = self._name(db).id(db);
        let file = self.file(db);
        let node = file.tree(db).get(&id).unwrap();
        node.as_ref().try_into().unwrap()
    }
}
impl<'db> codegen_sdk_resolution::HasFile<'db> for Interface<'db> {
    type File<'db1> = TypescriptFile<'db1>;
    fn file(&self, db: &'db dyn codegen_sdk_resolution::Db) -> &'db Self::File<'db> {
        let file = self._fully_qualified_name(db).file(db);
        parse(db, file)
    }
    fn root_path(&self, db: &'db dyn codegen_sdk_resolution::Db) -> &PathBuf {
        self.node_id(db).root(db).path(db)
    }
}
impl<'db> codegen_sdk_resolution::HasId<'db> for Interface<'db> {
    fn fully_qualified_name(
        &self,
        db: &'db dyn salsa::Database,
    ) -> codegen_sdk_resolution::FullyQualifiedName {
        self._fully_qualified_name(db)
    }
}
#[salsa::tracked]
pub struct Method<'db> {
    #[id]
    _fully_qualified_name: codegen_sdk_resolution::FullyQualifiedName,
    #[id]
    pub node_id: codegen_sdk_common::CSTNodeTreeId,
    ///@name from query: "(abstract_method_signature\n  name: (property_identifier) @name) @definition.method"
    #[tracked]
    #[return_ref]
    pub _name: codegen_sdk_common::CSTNodeTreeId,
}
impl<'db> Method<'db> {
    pub fn node(
        &self,
        db: &'db dyn codegen_sdk_resolution::Db,
    ) -> &'db crate::cst::AbstractMethodSignature<'db> {
        let file = self.file(db);
        let tree = file.tree(db);
        tree.get(self.node_id(db).id(db)).unwrap().as_ref().try_into().unwrap()
    }
    pub fn name(
        &self,
        db: &'db dyn codegen_sdk_resolution::Db,
    ) -> &'db crate::cst::PropertyIdentifier<'db> {
        ///@name from query: "(abstract_method_signature\n  name: (property_identifier) @name) @definition.method"
        let id = self._name(db).id(db);
        let file = self.file(db);
        let node = file.tree(db).get(&id).unwrap();
        node.as_ref().try_into().unwrap()
    }
}
impl<'db> codegen_sdk_resolution::HasFile<'db> for Method<'db> {
    type File<'db1> = TypescriptFile<'db1>;
    fn file(&self, db: &'db dyn codegen_sdk_resolution::Db) -> &'db Self::File<'db> {
        let file = self._fully_qualified_name(db).file(db);
        parse(db, file)
    }
    fn root_path(&self, db: &'db dyn codegen_sdk_resolution::Db) -> &PathBuf {
        self.node_id(db).root(db).path(db)
    }
}
impl<'db> codegen_sdk_resolution::HasId<'db> for Method<'db> {
    fn fully_qualified_name(
        &self,
        db: &'db dyn salsa::Database,
    ) -> codegen_sdk_resolution::FullyQualifiedName {
        self._fully_qualified_name(db)
    }
}
#[salsa::tracked]
pub struct Module<'db> {
    #[id]
    _fully_qualified_name: codegen_sdk_resolution::FullyQualifiedName,
    #[id]
    pub node_id: codegen_sdk_common::CSTNodeTreeId,
    ///@name from query: "(module\n  name: (identifier) @name) @definition.module"
    #[tracked]
    #[return_ref]
    pub _name: codegen_sdk_common::CSTNodeTreeId,
}
impl<'db> Module<'db> {
    pub fn node(
        &self,
        db: &'db dyn codegen_sdk_resolution::Db,
    ) -> &'db crate::cst::Module<'db> {
        let file = self.file(db);
        let tree = file.tree(db);
        tree.get(self.node_id(db).id(db)).unwrap().as_ref().try_into().unwrap()
    }
    pub fn name(
        &self,
        db: &'db dyn codegen_sdk_resolution::Db,
    ) -> &'db crate::cst::Identifier<'db> {
        ///@name from query: "(module\n  name: (identifier) @name) @definition.module"
        let id = self._name(db).id(db);
        let file = self.file(db);
        let node = file.tree(db).get(&id).unwrap();
        node.as_ref().try_into().unwrap()
    }
}
impl<'db> codegen_sdk_resolution::HasFile<'db> for Module<'db> {
    type File<'db1> = TypescriptFile<'db1>;
    fn file(&self, db: &'db dyn codegen_sdk_resolution::Db) -> &'db Self::File<'db> {
        let file = self._fully_qualified_name(db).file(db);
        parse(db, file)
    }
    fn root_path(&self, db: &'db dyn codegen_sdk_resolution::Db) -> &PathBuf {
        self.node_id(db).root(db).path(db)
    }
}
impl<'db> codegen_sdk_resolution::HasId<'db> for Module<'db> {
    fn fully_qualified_name(
        &self,
        db: &'db dyn salsa::Database,
    ) -> codegen_sdk_resolution::FullyQualifiedName {
        self._fully_qualified_name(db)
    }
}
#[derive(Debug, Clone, PartialEq, Eq, Hash, salsa::Update)]
pub enum Symbol<'db> {
    Class(Class<'db>),
    Function(Function<'db>),
    Interface(Interface<'db>),
    Method(Method<'db>),
    Module(Module<'db>),
}
impl<'db> codegen_sdk_resolution::HasFile<'db> for Symbol<'db> {
    type File<'db1> = TypescriptFile<'db1>;
    fn file(&self, db: &'db dyn codegen_sdk_resolution::Db) -> &'db Self::File<'db> {
        match self {
            Self::Class(symbol) => symbol.file(db),
            Self::Function(symbol) => symbol.file(db),
            Self::Interface(symbol) => symbol.file(db),
            Self::Method(symbol) => symbol.file(db),
            Self::Module(symbol) => symbol.file(db),
        }
    }
    fn root_path(&self, db: &'db dyn codegen_sdk_resolution::Db) -> &PathBuf {
        match self {
            Self::Class(symbol) => symbol.root_path(db),
            Self::Function(symbol) => symbol.root_path(db),
            Self::Interface(symbol) => symbol.root_path(db),
            Self::Method(symbol) => symbol.root_path(db),
            Self::Module(symbol) => symbol.root_path(db),
        }
    }
}
impl<'db> codegen_sdk_resolution::HasId<'db> for Symbol<'db> {
    fn fully_qualified_name(
        &self,
        db: &'db dyn salsa::Database,
    ) -> codegen_sdk_resolution::FullyQualifiedName {
        match self {
            Self::Class(symbol) => symbol.fully_qualified_name(db),
            Self::Function(symbol) => symbol.fully_qualified_name(db),
            Self::Interface(symbol) => symbol.fully_qualified_name(db),
            Self::Method(symbol) => symbol.fully_qualified_name(db),
            Self::Module(symbol) => symbol.fully_qualified_name(db),
        }
    }
}
#[salsa::tracked]
pub struct Definitions<'db> {
    #[return_ref]
    pub classes: BTreeMap<String, Vec<Class<'db>>>,
    #[return_ref]
    pub functions: BTreeMap<String, Vec<Function<'db>>>,
    #[return_ref]
    pub interfaces: BTreeMap<String, Vec<Interface<'db>>>,
    #[return_ref]
    pub methods: BTreeMap<String, Vec<Method<'db>>>,
    #[return_ref]
    pub modules: BTreeMap<String, Vec<Module<'db>>>,
}
impl<'db> Definitions<'db> {
    pub fn visit(
        db: &'db dyn salsa::Database,
        root: &'db crate::cst::Parsed<'db>,
    ) -> Self {
        let mut classes: BTreeMap<String, Vec<Class<'db>>> = BTreeMap::new();
        let mut functions: BTreeMap<String, Vec<Function<'db>>> = BTreeMap::new();
        let mut interfaces: BTreeMap<String, Vec<Interface<'db>>> = BTreeMap::new();
        let mut methods: BTreeMap<String, Vec<Method<'db>>> = BTreeMap::new();
        let mut modules: BTreeMap<String, Vec<Module<'db>>> = BTreeMap::new();
        let tree = root.tree(db);
        for (node, id) in tree.descendants(&root.program(db)) {
            match node {
                crate::cst::NodeTypes::AbstractClassDeclaration(node) => {
                    ///Code for query: (abstract_class_declaration   name: (type_identifier) @name) @definition.class
                    ///Code for field: name: (type_identifier) @name
                    let name_id = node.name;
                    let name = node.name(tree);
                    let name = tree.get(&name_id).unwrap().source();
                    let fully_qualified_name = codegen_sdk_resolution::FullyQualifiedName::new(
                        db,
                        node.file_id(),
                        name.clone(),
                    );
                    let tree_id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                        db,
                        &node.id(),
                        id,
                    );
                    let symbol = Class::new(
                        db,
                        fully_qualified_name,
                        tree_id,
                        codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &tree.get(&name_id).unwrap().id(),
                            name_id.clone(),
                        ),
                    );
                    classes.entry(name).or_default().push(symbol);
                }
                crate::cst::NodeTypes::AbstractMethodSignature(node) => {
                    ///Code for query: (abstract_method_signature   name: (property_identifier) @name) @definition.method
                    ///Code for field: name: (property_identifier) @name
                    let name_id = node.name;
                    let name = node.name(tree);
                    if let crate::cst::AbstractMethodSignatureNameRef::PropertyIdentifier(
                        name,
                    ) = name {
                        let name = tree.get(&name_id).unwrap().source();
                        let fully_qualified_name = codegen_sdk_resolution::FullyQualifiedName::new(
                            db,
                            node.file_id(),
                            name.clone(),
                        );
                        let tree_id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &node.id(),
                            id,
                        );
                        let symbol = Method::new(
                            db,
                            fully_qualified_name,
                            tree_id,
                            codegen_sdk_common::CSTNodeTreeId::from_node_id(
                                db,
                                &tree.get(&name_id).unwrap().id(),
                                name_id.clone(),
                            ),
                        );
                        methods.entry(name).or_default().push(symbol);
                    }
                }
                crate::cst::NodeTypes::FunctionSignature(node) => {
                    ///Code for query: (function_signature   name: (identifier) @name) @definition.function
                    ///Code for field: name: (identifier) @name
                    let name_id = node.name;
                    let name = node.name(tree);
                    let name = tree.get(&name_id).unwrap().source();
                    let fully_qualified_name = codegen_sdk_resolution::FullyQualifiedName::new(
                        db,
                        node.file_id(),
                        name.clone(),
                    );
                    let tree_id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                        db,
                        &node.id(),
                        id,
                    );
                    let symbol = Function::new(
                        db,
                        fully_qualified_name,
                        tree_id,
                        codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &tree.get(&name_id).unwrap().id(),
                            name_id.clone(),
                        ),
                    );
                    functions.entry(name).or_default().push(symbol);
                }
                crate::cst::NodeTypes::InterfaceDeclaration(node) => {
                    ///Code for query: (interface_declaration   name: (type_identifier) @name) @definition.interface
                    ///Code for field: name: (type_identifier) @name
                    let name_id = node.name;
                    let name = node.name(tree);
                    let name = tree.get(&name_id).unwrap().source();
                    let fully_qualified_name = codegen_sdk_resolution::FullyQualifiedName::new(
                        db,
                        node.file_id(),
                        name.clone(),
                    );
                    let tree_id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                        db,
                        &node.id(),
                        id,
                    );
                    let symbol = Interface::new(
                        db,
                        fully_qualified_name,
                        tree_id,
                        codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &tree.get(&name_id).unwrap().id(),
                            name_id.clone(),
                        ),
                    );
                    interfaces.entry(name).or_default().push(symbol);
                }
                crate::cst::NodeTypes::Module(node) => {
                    ///Code for query: (module   name: (identifier) @name) @definition.module
                    ///Code for field: name: (identifier) @name
                    let name_id = node.name;
                    let name = node.name(tree);
                    if let crate::cst::ModuleNameRef::Identifier(name) = name {
                        let name = tree.get(&name_id).unwrap().source();
                        let fully_qualified_name = codegen_sdk_resolution::FullyQualifiedName::new(
                            db,
                            node.file_id(),
                            name.clone(),
                        );
                        let tree_id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &node.id(),
                            id,
                        );
                        let symbol = Module::new(
                            db,
                            fully_qualified_name,
                            tree_id,
                            codegen_sdk_common::CSTNodeTreeId::from_node_id(
                                db,
                                &tree.get(&name_id).unwrap().id(),
                                name_id.clone(),
                            ),
                        );
                        modules.entry(name).or_default().push(symbol);
                    }
                }
                _ => {}
            }
        }
        Self::new(db, classes, functions, interfaces, methods, modules)
    }
    pub fn default(db: &'db dyn salsa::Database) -> Self {
        let mut classes: BTreeMap<String, Vec<Class<'db>>> = BTreeMap::new();
        let mut functions: BTreeMap<String, Vec<Function<'db>>> = BTreeMap::new();
        let mut interfaces: BTreeMap<String, Vec<Interface<'db>>> = BTreeMap::new();
        let mut methods: BTreeMap<String, Vec<Method<'db>>> = BTreeMap::new();
        let mut modules: BTreeMap<String, Vec<Module<'db>>> = BTreeMap::new();
        Self::new(db, classes, functions, interfaces, methods, modules)
    }
}
