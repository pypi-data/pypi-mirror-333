---
source: codegen-sdk-ast-generator/src/visitor.rs
expression: "codegen_sdk_common::generator::format_code_string(&visitor.to_string()).unwrap()"
---
#[derive(Visitor, Visit, Debug, Clone, Eq, PartialEq, salsa::Update, Hash, Default)]
#[visit(drive(&crate::cst::AbstractClassDeclarationChildren<'db>))]
#[visit(drive(&crate::cst::AbstractMethodSignatureChildren<'db>))]
#[visit(drive(&crate::cst::AbstractMethodSignatureName<'db>))]
#[visit(drive(&crate::cst::AbstractMethodSignatureReturnType<'db>))]
#[visit(drive(&crate::cst::AccessibilityModifier<'db>))]
#[visit(drive(&crate::cst::AddingTypeAnnotation<'db>))]
#[visit(drive(&crate::cst::AddingTypeAnnotationChildren<'db>))]
#[visit(drive(&crate::cst::AmbientDeclaration<'db>))]
#[visit(drive(&crate::cst::AmbientDeclarationChildren<'db>))]
#[visit(drive(&crate::cst::AnonymousAbstract<'db>))]
#[visit(drive(&crate::cst::AnonymousAccessor<'db>))]
#[visit(drive(&crate::cst::AnonymousAmpersand<'db>))]
#[visit(drive(&crate::cst::AnonymousAmpersandAmpersand<'db>))]
#[visit(drive(&crate::cst::AnonymousAmpersandAmpersandEquals<'db>))]
#[visit(drive(&crate::cst::AnonymousAmpersandEquals<'db>))]
#[visit(drive(&crate::cst::AnonymousAny<'db>))]
#[visit(drive(&crate::cst::AnonymousAs<'db>))]
#[visit(drive(&crate::cst::AnonymousAssert<'db>))]
#[visit(drive(&crate::cst::AnonymousAsserts<'db>))]
#[visit(drive(&crate::cst::AnonymousAsterisk<'db>))]
#[visit(drive(&crate::cst::AnonymousAsteriskAsterisk<'db>))]
#[visit(drive(&crate::cst::AnonymousAsteriskAsteriskEquals<'db>))]
#[visit(drive(&crate::cst::AnonymousAsteriskEquals<'db>))]
#[visit(drive(&crate::cst::AnonymousAsync<'db>))]
#[visit(drive(&crate::cst::AnonymousAt<'db>))]
#[visit(drive(&crate::cst::AnonymousAwait<'db>))]
#[visit(drive(&crate::cst::AnonymousBacktick<'db>))]
#[visit(drive(&crate::cst::AnonymousBang<'db>))]
#[visit(drive(&crate::cst::AnonymousBangEquals<'db>))]
#[visit(drive(&crate::cst::AnonymousBangEqualsEquals<'db>))]
#[visit(drive(&crate::cst::AnonymousBoolean<'db>))]
#[visit(drive(&crate::cst::AnonymousBreak<'db>))]
#[visit(drive(&crate::cst::AnonymousCaret<'db>))]
#[visit(drive(&crate::cst::AnonymousCaretEquals<'db>))]
#[visit(drive(&crate::cst::AnonymousCase<'db>))]
#[visit(drive(&crate::cst::AnonymousCatch<'db>))]
#[visit(drive(&crate::cst::AnonymousClass<'db>))]
#[visit(drive(&crate::cst::AnonymousCloseBrace<'db>))]
#[visit(drive(&crate::cst::AnonymousCloseBracket<'db>))]
#[visit(drive(&crate::cst::AnonymousCloseParen<'db>))]
#[visit(drive(&crate::cst::AnonymousColon<'db>))]
#[visit(drive(&crate::cst::AnonymousComma<'db>))]
#[visit(drive(&crate::cst::AnonymousConst<'db>))]
#[visit(drive(&crate::cst::AnonymousContinue<'db>))]
#[visit(drive(&crate::cst::AnonymousDebugger<'db>))]
#[visit(drive(&crate::cst::AnonymousDeclare<'db>))]
#[visit(drive(&crate::cst::AnonymousDefault<'db>))]
#[visit(drive(&crate::cst::AnonymousDelete<'db>))]
#[visit(drive(&crate::cst::AnonymousDo<'db>))]
#[visit(drive(&crate::cst::AnonymousDollarOpenBrace<'db>))]
#[visit(drive(&crate::cst::AnonymousDot<'db>))]
#[visit(drive(&crate::cst::AnonymousDotDotDot<'db>))]
#[visit(drive(&crate::cst::AnonymousDoubleQuote<'db>))]
#[visit(drive(&crate::cst::AnonymousElse<'db>))]
#[visit(drive(&crate::cst::AnonymousEnum<'db>))]
#[visit(drive(&crate::cst::AnonymousEquals<'db>))]
#[visit(drive(&crate::cst::AnonymousEqualsEquals<'db>))]
#[visit(drive(&crate::cst::AnonymousEqualsEqualsEquals<'db>))]
#[visit(drive(&crate::cst::AnonymousEqualsGreaterThan<'db>))]
#[visit(drive(&crate::cst::AnonymousExport<'db>))]
#[visit(drive(&crate::cst::AnonymousExtends<'db>))]
#[visit(drive(&crate::cst::AnonymousFinally<'db>))]
#[visit(drive(&crate::cst::AnonymousFor<'db>))]
#[visit(drive(&crate::cst::AnonymousFrom<'db>))]
#[visit(drive(&crate::cst::AnonymousFunction<'db>))]
#[visit(drive(&crate::cst::AnonymousGet<'db>))]
#[visit(drive(&crate::cst::AnonymousGlobal<'db>))]
#[visit(drive(&crate::cst::AnonymousGreaterThan<'db>))]
#[visit(drive(&crate::cst::AnonymousGreaterThanEquals<'db>))]
#[visit(drive(&crate::cst::AnonymousGreaterThanGreaterThan<'db>))]
#[visit(drive(&crate::cst::AnonymousGreaterThanGreaterThanEquals<'db>))]
#[visit(drive(&crate::cst::AnonymousGreaterThanGreaterThanGreaterThan<'db>))]
#[visit(drive(&crate::cst::AnonymousGreaterThanGreaterThanGreaterThanEquals<'db>))]
#[visit(drive(&crate::cst::AnonymousIf<'db>))]
#[visit(drive(&crate::cst::AnonymousImplements<'db>))]
#[visit(drive(&crate::cst::AnonymousImport<'db>))]
#[visit(drive(&crate::cst::AnonymousIn<'db>))]
#[visit(drive(&crate::cst::AnonymousInfer<'db>))]
#[visit(drive(&crate::cst::AnonymousInstanceof<'db>))]
#[visit(drive(&crate::cst::AnonymousInterface<'db>))]
#[visit(drive(&crate::cst::AnonymousIs<'db>))]
#[visit(drive(&crate::cst::AnonymousKeyof<'db>))]
#[visit(drive(&crate::cst::AnonymousLessThan<'db>))]
#[visit(drive(&crate::cst::AnonymousLessThanEquals<'db>))]
#[visit(drive(&crate::cst::AnonymousLessThanLessThan<'db>))]
#[visit(drive(&crate::cst::AnonymousLessThanLessThanEquals<'db>))]
#[visit(drive(&crate::cst::AnonymousLet<'db>))]
#[visit(drive(&crate::cst::AnonymousMeta<'db>))]
#[visit(drive(&crate::cst::AnonymousMinus<'db>))]
#[visit(drive(&crate::cst::AnonymousMinusEquals<'db>))]
#[visit(drive(&crate::cst::AnonymousMinusMinus<'db>))]
#[visit(drive(&crate::cst::AnonymousMinusQuestionMarkColon<'db>))]
#[visit(drive(&crate::cst::AnonymousModule<'db>))]
#[visit(drive(&crate::cst::AnonymousNamespace<'db>))]
#[visit(drive(&crate::cst::AnonymousNever<'db>))]
#[visit(drive(&crate::cst::AnonymousNew<'db>))]
#[visit(drive(&crate::cst::AnonymousNumber<'db>))]
#[visit(drive(&crate::cst::AnonymousObject<'db>))]
#[visit(drive(&crate::cst::AnonymousOf<'db>))]
#[visit(drive(&crate::cst::AnonymousOpenBrace<'db>))]
#[visit(drive(&crate::cst::AnonymousOpenBracePipe<'db>))]
#[visit(drive(&crate::cst::AnonymousOpenBracket<'db>))]
#[visit(drive(&crate::cst::AnonymousOpenParen<'db>))]
#[visit(drive(&crate::cst::AnonymousOverride<'db>))]
#[visit(drive(&crate::cst::AnonymousPercent<'db>))]
#[visit(drive(&crate::cst::AnonymousPercentEquals<'db>))]
#[visit(drive(&crate::cst::AnonymousPipe<'db>))]
#[visit(drive(&crate::cst::AnonymousPipeCloseBrace<'db>))]
#[visit(drive(&crate::cst::AnonymousPipeEquals<'db>))]
#[visit(drive(&crate::cst::AnonymousPipePipe<'db>))]
#[visit(drive(&crate::cst::AnonymousPipePipeEquals<'db>))]
#[visit(drive(&crate::cst::AnonymousPlus<'db>))]
#[visit(drive(&crate::cst::AnonymousPlusEquals<'db>))]
#[visit(drive(&crate::cst::AnonymousPlusPlus<'db>))]
#[visit(drive(&crate::cst::AnonymousPlusQuestionMarkColon<'db>))]
#[visit(drive(&crate::cst::AnonymousPrivate<'db>))]
#[visit(drive(&crate::cst::AnonymousProtected<'db>))]
#[visit(drive(&crate::cst::AnonymousPublic<'db>))]
#[visit(drive(&crate::cst::AnonymousQuestionMark<'db>))]
#[visit(drive(&crate::cst::AnonymousQuestionMarkColon<'db>))]
#[visit(drive(&crate::cst::AnonymousQuestionMarkDot<'db>))]
#[visit(drive(&crate::cst::AnonymousQuestionMarkQuestionMark<'db>))]
#[visit(drive(&crate::cst::AnonymousQuestionMarkQuestionMarkEquals<'db>))]
#[visit(drive(&crate::cst::AnonymousReadonly<'db>))]
#[visit(drive(&crate::cst::AnonymousRequire<'db>))]
#[visit(drive(&crate::cst::AnonymousReturn<'db>))]
#[visit(drive(&crate::cst::AnonymousSatisfies<'db>))]
#[visit(drive(&crate::cst::AnonymousSemicolon<'db>))]
#[visit(drive(&crate::cst::AnonymousSet<'db>))]
#[visit(drive(&crate::cst::AnonymousSingleQuote<'db>))]
#[visit(drive(&crate::cst::AnonymousSlash<'db>))]
#[visit(drive(&crate::cst::AnonymousSlashEquals<'db>))]
#[visit(drive(&crate::cst::AnonymousStatic<'db>))]
#[visit(drive(&crate::cst::AnonymousString<'db>))]
#[visit(drive(&crate::cst::AnonymousSwitch<'db>))]
#[visit(drive(&crate::cst::AnonymousSymbol<'db>))]
#[visit(drive(&crate::cst::AnonymousTarget<'db>))]
#[visit(drive(&crate::cst::AnonymousThrow<'db>))]
#[visit(drive(&crate::cst::AnonymousTilde<'db>))]
#[visit(drive(&crate::cst::AnonymousTry<'db>))]
#[visit(drive(&crate::cst::AnonymousType<'db>))]
#[visit(drive(&crate::cst::AnonymousTypeof<'db>))]
#[visit(drive(&crate::cst::AnonymousUniqueSymbol<'db>))]
#[visit(drive(&crate::cst::AnonymousUnknown<'db>))]
#[visit(drive(&crate::cst::AnonymousUsing<'db>))]
#[visit(drive(&crate::cst::AnonymousVar<'db>))]
#[visit(drive(&crate::cst::AnonymousVoid<'db>))]
#[visit(drive(&crate::cst::AnonymousWhile<'db>))]
#[visit(drive(&crate::cst::AnonymousWith<'db>))]
#[visit(drive(&crate::cst::AnonymousYield<'db>))]
#[visit(drive(&crate::cst::Arguments<'db>))]
#[visit(drive(&crate::cst::ArgumentsChildren<'db>))]
#[visit(drive(&crate::cst::Array<'db>))]
#[visit(drive(&crate::cst::ArrayChildren<'db>))]
#[visit(drive(&crate::cst::ArrayPattern<'db>))]
#[visit(drive(&crate::cst::ArrayPatternChildren<'db>))]
#[visit(drive(&crate::cst::ArrayType<'db>))]
#[visit(drive(&crate::cst::ArrayTypeChildren<'db>))]
#[visit(drive(&crate::cst::ArrowFunction<'db>))]
#[visit(drive(&crate::cst::ArrowFunctionBody<'db>))]
#[visit(drive(&crate::cst::ArrowFunctionChildren<'db>))]
#[visit(drive(&crate::cst::ArrowFunctionReturnType<'db>))]
#[visit(drive(&crate::cst::AsExpression<'db>))]
#[visit(drive(&crate::cst::AsExpressionChildren<'db>))]
#[visit(drive(&crate::cst::Asserts<'db>))]
#[visit(drive(&crate::cst::AssertsAnnotation<'db>))]
#[visit(drive(&crate::cst::AssertsAnnotationChildren<'db>))]
#[visit(drive(&crate::cst::AssertsChildren<'db>))]
#[visit(drive(&crate::cst::AssignmentExpression<'db>))]
#[visit(drive(&crate::cst::AssignmentExpressionChildren<'db>))]
#[visit(drive(&crate::cst::AssignmentExpressionLeft<'db>))]
#[visit(drive(&crate::cst::AssignmentPattern<'db>))]
#[visit(drive(&crate::cst::AssignmentPatternChildren<'db>))]
#[visit(drive(&crate::cst::AugmentedAssignmentExpression<'db>))]
#[visit(drive(&crate::cst::AugmentedAssignmentExpressionChildren<'db>))]
#[visit(drive(&crate::cst::AugmentedAssignmentExpressionLeft<'db>))]
#[visit(drive(&crate::cst::AugmentedAssignmentExpressionOperator<'db>))]
#[visit(drive(&crate::cst::AwaitExpression<'db>))]
#[visit(drive(&crate::cst::AwaitExpressionChildren<'db>))]
#[visit(drive(&crate::cst::BinaryExpression<'db>))]
#[visit(drive(&crate::cst::BinaryExpressionChildren<'db>))]
#[visit(drive(&crate::cst::BinaryExpressionLeft<'db>))]
#[visit(drive(&crate::cst::BinaryExpressionOperator<'db>))]
#[visit(drive(&crate::cst::BreakStatement<'db>))]
#[visit(drive(&crate::cst::BreakStatementChildren<'db>))]
#[visit(drive(&crate::cst::CallExpression<'db>))]
#[visit(drive(&crate::cst::CallExpressionArguments<'db>))]
#[visit(drive(&crate::cst::CallExpressionChildren<'db>))]
#[visit(drive(&crate::cst::CallExpressionFunction<'db>))]
#[visit(drive(&crate::cst::CallSignature<'db>))]
#[visit(drive(&crate::cst::CallSignatureChildren<'db>))]
#[visit(drive(&crate::cst::CallSignatureReturnType<'db>))]
#[visit(drive(&crate::cst::CatchClause<'db>))]
#[visit(drive(&crate::cst::CatchClauseChildren<'db>))]
#[visit(drive(&crate::cst::CatchClauseParameter<'db>))]
#[visit(drive(&crate::cst::Class<'db>))]
#[visit(drive(&crate::cst::ClassBody<'db>))]
#[visit(drive(&crate::cst::ClassBodyChildren<'db>))]
#[visit(drive(&crate::cst::ClassChildren<'db>))]
#[visit(drive(&crate::cst::ClassDeclaration<'db>))]
#[visit(drive(&crate::cst::ClassDeclarationChildren<'db>))]
#[visit(drive(&crate::cst::ClassHeritage<'db>))]
#[visit(drive(&crate::cst::ClassHeritageChildren<'db>))]
#[visit(drive(&crate::cst::ClassStaticBlock<'db>))]
#[visit(drive(&crate::cst::ClassStaticBlockChildren<'db>))]
#[visit(drive(&crate::cst::Comment<'db>))]
#[visit(drive(&crate::cst::ComputedPropertyName<'db>))]
#[visit(drive(&crate::cst::ComputedPropertyNameChildren<'db>))]
#[visit(drive(&crate::cst::ConditionalType<'db>))]
#[visit(drive(&crate::cst::ConditionalTypeChildren<'db>))]
#[visit(drive(&crate::cst::Constraint<'db>))]
#[visit(drive(&crate::cst::ConstraintChildren<'db>))]
#[visit(drive(&crate::cst::ConstructSignature<'db>))]
#[visit(drive(&crate::cst::ConstructSignatureChildren<'db>))]
#[visit(drive(&crate::cst::ConstructorType<'db>))]
#[visit(drive(&crate::cst::ConstructorTypeChildren<'db>))]
#[visit(drive(&crate::cst::ContinueStatement<'db>))]
#[visit(drive(&crate::cst::ContinueStatementChildren<'db>))]
#[visit(drive(&crate::cst::DebuggerStatement<'db>))]
#[visit(drive(&crate::cst::Declaration<'db>))]
#[visit(drive(&crate::cst::Decorator<'db>))]
#[visit(drive(&crate::cst::DecoratorChildren<'db>))]
#[visit(drive(&crate::cst::DefaultType<'db>))]
#[visit(drive(&crate::cst::DefaultTypeChildren<'db>))]
#[visit(drive(&crate::cst::DoStatement<'db>))]
#[visit(drive(&crate::cst::DoStatementChildren<'db>))]
#[visit(drive(&crate::cst::ElseClause<'db>))]
#[visit(drive(&crate::cst::ElseClauseChildren<'db>))]
#[visit(drive(&crate::cst::EmptyStatement<'db>))]
#[visit(drive(&crate::cst::EnumAssignment<'db>))]
#[visit(drive(&crate::cst::EnumAssignmentChildren<'db>))]
#[visit(drive(&crate::cst::EnumAssignmentName<'db>))]
#[visit(drive(&crate::cst::EnumBody<'db>))]
#[visit(drive(&crate::cst::EnumBodyChildren<'db>))]
#[visit(drive(&crate::cst::EnumBodyName<'db>))]
#[visit(drive(&crate::cst::EnumDeclaration<'db>))]
#[visit(drive(&crate::cst::EnumDeclarationChildren<'db>))]
#[visit(drive(&crate::cst::EscapeSequence<'db>))]
#[visit(drive(&crate::cst::ExistentialType<'db>))]
#[visit(drive(&crate::cst::ExportClause<'db>))]
#[visit(drive(&crate::cst::ExportClauseChildren<'db>))]
#[visit(drive(&crate::cst::ExportSpecifier<'db>))]
#[visit(drive(&crate::cst::ExportSpecifierAlias<'db>))]
#[visit(drive(&crate::cst::ExportSpecifierChildren<'db>))]
#[visit(drive(&crate::cst::ExportSpecifierName<'db>))]
#[visit(drive(&crate::cst::ExportStatement<'db>))]
#[visit(drive(&crate::cst::ExportStatementChildren<'db>))]
#[visit(drive(&crate::cst::Expression<'db>))]
#[visit(drive(&crate::cst::ExpressionStatement<'db>))]
#[visit(drive(&crate::cst::ExpressionStatementChildren<'db>))]
#[visit(drive(&crate::cst::ExtendsClause<'db>))]
#[visit(drive(&crate::cst::ExtendsClauseChildren<'db>))]
#[visit(drive(&crate::cst::ExtendsTypeClause<'db>))]
#[visit(drive(&crate::cst::ExtendsTypeClauseChildren<'db>))]
#[visit(drive(&crate::cst::ExtendsTypeClauseType<'db>))]
#[visit(drive(&crate::cst::False<'db>))]
#[visit(drive(&crate::cst::FinallyClause<'db>))]
#[visit(drive(&crate::cst::FinallyClauseChildren<'db>))]
#[visit(drive(&crate::cst::FlowMaybeType<'db>))]
#[visit(drive(&crate::cst::FlowMaybeTypeChildren<'db>))]
#[visit(drive(&crate::cst::ForInStatement<'db>))]
#[visit(drive(&crate::cst::ForInStatementChildren<'db>))]
#[visit(drive(&crate::cst::ForInStatementKind<'db>))]
#[visit(drive(&crate::cst::ForInStatementLeft<'db>))]
#[visit(drive(&crate::cst::ForInStatementOperator<'db>))]
#[visit(drive(&crate::cst::ForInStatementRight<'db>))]
#[visit(drive(&crate::cst::ForStatement<'db>))]
#[visit(drive(&crate::cst::ForStatementChildren<'db>))]
#[visit(drive(&crate::cst::ForStatementCondition<'db>))]
#[visit(drive(&crate::cst::ForStatementIncrement<'db>))]
#[visit(drive(&crate::cst::ForStatementInitializer<'db>))]
#[visit(drive(&crate::cst::FormalParameters<'db>))]
#[visit(drive(&crate::cst::FormalParametersChildren<'db>))]
#[visit(drive(&crate::cst::FunctionDeclaration<'db>))]
#[visit(drive(&crate::cst::FunctionDeclarationChildren<'db>))]
#[visit(drive(&crate::cst::FunctionDeclarationReturnType<'db>))]
#[visit(drive(&crate::cst::FunctionExpression<'db>))]
#[visit(drive(&crate::cst::FunctionExpressionChildren<'db>))]
#[visit(drive(&crate::cst::FunctionExpressionReturnType<'db>))]
#[visit(drive(&crate::cst::FunctionSignatureChildren<'db>))]
#[visit(drive(&crate::cst::FunctionSignatureReturnType<'db>))]
#[visit(drive(&crate::cst::FunctionType<'db>))]
#[visit(drive(&crate::cst::FunctionTypeChildren<'db>))]
#[visit(drive(&crate::cst::FunctionTypeReturnType<'db>))]
#[visit(drive(&crate::cst::GeneratorFunction<'db>))]
#[visit(drive(&crate::cst::GeneratorFunctionChildren<'db>))]
#[visit(drive(&crate::cst::GeneratorFunctionDeclaration<'db>))]
#[visit(drive(&crate::cst::GeneratorFunctionDeclarationChildren<'db>))]
#[visit(drive(&crate::cst::GeneratorFunctionDeclarationReturnType<'db>))]
#[visit(drive(&crate::cst::GeneratorFunctionReturnType<'db>))]
#[visit(drive(&crate::cst::GenericType<'db>))]
#[visit(drive(&crate::cst::GenericTypeChildren<'db>))]
#[visit(drive(&crate::cst::GenericTypeName<'db>))]
#[visit(drive(&crate::cst::HashBangLine<'db>))]
#[visit(drive(&crate::cst::HtmlComment<'db>))]
#[visit(drive(&crate::cst::Identifier<'db>))]
#[visit(drive(&crate::cst::IfStatement<'db>))]
#[visit(drive(&crate::cst::IfStatementChildren<'db>))]
#[visit(drive(&crate::cst::ImplementsClause<'db>))]
#[visit(drive(&crate::cst::ImplementsClauseChildren<'db>))]
#[visit(drive(&crate::cst::Import<'db>))]
#[visit(drive(&crate::cst::ImportAlias<'db>))]
#[visit(drive(&crate::cst::ImportAliasChildren<'db>))]
#[visit(drive(&crate::cst::ImportAttribute<'db>))]
#[visit(drive(&crate::cst::ImportAttributeChildren<'db>))]
#[visit(drive(&crate::cst::ImportClause<'db>))]
#[visit(drive(&crate::cst::ImportClauseChildren<'db>))]
#[visit(drive(&crate::cst::ImportRequireClause<'db>))]
#[visit(drive(&crate::cst::ImportRequireClauseChildren<'db>))]
#[visit(drive(&crate::cst::ImportSpecifier<'db>))]
#[visit(drive(&crate::cst::ImportSpecifierChildren<'db>))]
#[visit(drive(&crate::cst::ImportSpecifierName<'db>))]
#[visit(drive(&crate::cst::ImportStatement<'db>))]
#[visit(drive(&crate::cst::ImportStatementChildren<'db>))]
#[visit(drive(&crate::cst::IndexSignature<'db>))]
#[visit(drive(&crate::cst::IndexSignatureChildren<'db>))]
#[visit(drive(&crate::cst::IndexSignatureSign<'db>))]
#[visit(drive(&crate::cst::IndexSignatureType<'db>))]
#[visit(drive(&crate::cst::IndexTypeQuery<'db>))]
#[visit(drive(&crate::cst::IndexTypeQueryChildren<'db>))]
#[visit(drive(&crate::cst::InferType<'db>))]
#[visit(drive(&crate::cst::InferTypeChildren<'db>))]
#[visit(drive(&crate::cst::InstantiationExpression<'db>))]
#[visit(drive(&crate::cst::InstantiationExpressionChildren<'db>))]
#[visit(drive(&crate::cst::InstantiationExpressionFunction<'db>))]
#[visit(drive(&crate::cst::InterfaceBody<'db>))]
#[visit(drive(&crate::cst::InterfaceBodyChildren<'db>))]
#[visit(drive(&crate::cst::InterfaceDeclarationChildren<'db>))]
#[visit(drive(&crate::cst::InternalModule<'db>))]
#[visit(drive(&crate::cst::InternalModuleChildren<'db>))]
#[visit(drive(&crate::cst::InternalModuleName<'db>))]
#[visit(drive(&crate::cst::IntersectionType<'db>))]
#[visit(drive(&crate::cst::IntersectionTypeChildren<'db>))]
#[visit(drive(&crate::cst::LabeledStatement<'db>))]
#[visit(drive(&crate::cst::LabeledStatementChildren<'db>))]
#[visit(drive(&crate::cst::LexicalDeclaration<'db>))]
#[visit(drive(&crate::cst::LexicalDeclarationChildren<'db>))]
#[visit(drive(&crate::cst::LexicalDeclarationKind<'db>))]
#[visit(drive(&crate::cst::LiteralType<'db>))]
#[visit(drive(&crate::cst::LiteralTypeChildren<'db>))]
#[visit(drive(&crate::cst::LookupType<'db>))]
#[visit(drive(&crate::cst::LookupTypeChildren<'db>))]
#[visit(drive(&crate::cst::MappedTypeClause<'db>))]
#[visit(drive(&crate::cst::MappedTypeClauseChildren<'db>))]
#[visit(drive(&crate::cst::MemberExpression<'db>))]
#[visit(drive(&crate::cst::MemberExpressionChildren<'db>))]
#[visit(drive(&crate::cst::MemberExpressionObject<'db>))]
#[visit(drive(&crate::cst::MemberExpressionProperty<'db>))]
#[visit(drive(&crate::cst::MetaProperty<'db>))]
#[visit(drive(&crate::cst::MethodDefinition<'db>))]
#[visit(drive(&crate::cst::MethodDefinitionChildren<'db>))]
#[visit(drive(&crate::cst::MethodDefinitionName<'db>))]
#[visit(drive(&crate::cst::MethodDefinitionReturnType<'db>))]
#[visit(drive(&crate::cst::MethodSignature<'db>))]
#[visit(drive(&crate::cst::MethodSignatureChildren<'db>))]
#[visit(drive(&crate::cst::MethodSignatureName<'db>))]
#[visit(drive(&crate::cst::MethodSignatureReturnType<'db>))]
#[visit(drive(&crate::cst::ModuleChildren<'db>))]
#[visit(drive(&crate::cst::ModuleName<'db>))]
#[visit(drive(&crate::cst::NamedImports<'db>))]
#[visit(drive(&crate::cst::NamedImportsChildren<'db>))]
#[visit(drive(&crate::cst::NamespaceExport<'db>))]
#[visit(drive(&crate::cst::NamespaceExportChildren<'db>))]
#[visit(drive(&crate::cst::NamespaceImport<'db>))]
#[visit(drive(&crate::cst::NamespaceImportChildren<'db>))]
#[visit(drive(&crate::cst::NestedIdentifier<'db>))]
#[visit(drive(&crate::cst::NestedIdentifierChildren<'db>))]
#[visit(drive(&crate::cst::NestedIdentifierObject<'db>))]
#[visit(drive(&crate::cst::NestedTypeIdentifier<'db>))]
#[visit(drive(&crate::cst::NestedTypeIdentifierChildren<'db>))]
#[visit(drive(&crate::cst::NestedTypeIdentifierModule<'db>))]
#[visit(drive(&crate::cst::NewExpression<'db>))]
#[visit(drive(&crate::cst::NewExpressionChildren<'db>))]
#[visit(drive(&crate::cst::NonNullExpression<'db>))]
#[visit(drive(&crate::cst::NonNullExpressionChildren<'db>))]
#[visit(drive(&crate::cst::Null<'db>))]
#[visit(drive(&crate::cst::Number<'db>))]
#[visit(drive(&crate::cst::Object<'db>))]
#[visit(drive(&crate::cst::ObjectAssignmentPattern<'db>))]
#[visit(drive(&crate::cst::ObjectAssignmentPatternChildren<'db>))]
#[visit(drive(&crate::cst::ObjectAssignmentPatternLeft<'db>))]
#[visit(drive(&crate::cst::ObjectChildren<'db>))]
#[visit(drive(&crate::cst::ObjectPattern<'db>))]
#[visit(drive(&crate::cst::ObjectPatternChildren<'db>))]
#[visit(drive(&crate::cst::ObjectType<'db>))]
#[visit(drive(&crate::cst::ObjectTypeChildren<'db>))]
#[visit(drive(&crate::cst::OmittingTypeAnnotation<'db>))]
#[visit(drive(&crate::cst::OmittingTypeAnnotationChildren<'db>))]
#[visit(drive(&crate::cst::OptingTypeAnnotation<'db>))]
#[visit(drive(&crate::cst::OptingTypeAnnotationChildren<'db>))]
#[visit(drive(&crate::cst::OptionalChain<'db>))]
#[visit(drive(&crate::cst::OptionalParameter<'db>))]
#[visit(drive(&crate::cst::OptionalParameterChildren<'db>))]
#[visit(drive(&crate::cst::OptionalParameterPattern<'db>))]
#[visit(drive(&crate::cst::OptionalType<'db>))]
#[visit(drive(&crate::cst::OptionalTypeChildren<'db>))]
#[visit(drive(&crate::cst::OverrideModifier<'db>))]
#[visit(drive(&crate::cst::Pair<'db>))]
#[visit(drive(&crate::cst::PairChildren<'db>))]
#[visit(drive(&crate::cst::PairKey<'db>))]
#[visit(drive(&crate::cst::PairPattern<'db>))]
#[visit(drive(&crate::cst::PairPatternChildren<'db>))]
#[visit(drive(&crate::cst::PairPatternKey<'db>))]
#[visit(drive(&crate::cst::PairPatternValue<'db>))]
#[visit(drive(&crate::cst::ParenthesizedExpression<'db>))]
#[visit(drive(&crate::cst::ParenthesizedExpressionChildren<'db>))]
#[visit(drive(&crate::cst::ParenthesizedType<'db>))]
#[visit(drive(&crate::cst::ParenthesizedTypeChildren<'db>))]
#[visit(drive(&crate::cst::Pattern<'db>))]
#[visit(drive(&crate::cst::PredefinedType<'db>))]
#[visit(drive(&crate::cst::PrimaryExpression<'db>))]
#[visit(drive(&crate::cst::PrimaryType<'db>))]
#[visit(drive(&crate::cst::PrivatePropertyIdentifier<'db>))]
#[visit(drive(&crate::cst::Program<'db>))]
#[visit(drive(&crate::cst::ProgramChildren<'db>))]
#[visit(drive(&crate::cst::PropertyIdentifier<'db>))]
#[visit(drive(&crate::cst::PropertySignature<'db>))]
#[visit(drive(&crate::cst::PropertySignatureChildren<'db>))]
#[visit(drive(&crate::cst::PropertySignatureName<'db>))]
#[visit(drive(&crate::cst::PublicFieldDefinition<'db>))]
#[visit(drive(&crate::cst::PublicFieldDefinitionChildren<'db>))]
#[visit(drive(&crate::cst::PublicFieldDefinitionName<'db>))]
#[visit(drive(&crate::cst::ReadonlyType<'db>))]
#[visit(drive(&crate::cst::ReadonlyTypeChildren<'db>))]
#[visit(drive(&crate::cst::Regex<'db>))]
#[visit(drive(&crate::cst::RegexChildren<'db>))]
#[visit(drive(&crate::cst::RegexFlags<'db>))]
#[visit(drive(&crate::cst::RegexPattern<'db>))]
#[visit(drive(&crate::cst::RequiredParameter<'db>))]
#[visit(drive(&crate::cst::RequiredParameterChildren<'db>))]
#[visit(drive(&crate::cst::RequiredParameterName<'db>))]
#[visit(drive(&crate::cst::RequiredParameterPattern<'db>))]
#[visit(drive(&crate::cst::RestPattern<'db>))]
#[visit(drive(&crate::cst::RestPatternChildren<'db>))]
#[visit(drive(&crate::cst::RestType<'db>))]
#[visit(drive(&crate::cst::RestTypeChildren<'db>))]
#[visit(drive(&crate::cst::ReturnStatement<'db>))]
#[visit(drive(&crate::cst::ReturnStatementChildren<'db>))]
#[visit(drive(&crate::cst::SatisfiesExpression<'db>))]
#[visit(drive(&crate::cst::SatisfiesExpressionChildren<'db>))]
#[visit(drive(&crate::cst::SequenceExpression<'db>))]
#[visit(drive(&crate::cst::SequenceExpressionChildren<'db>))]
#[visit(drive(&crate::cst::ShorthandPropertyIdentifier<'db>))]
#[visit(drive(&crate::cst::ShorthandPropertyIdentifierPattern<'db>))]
#[visit(drive(&crate::cst::SpreadElement<'db>))]
#[visit(drive(&crate::cst::SpreadElementChildren<'db>))]
#[visit(drive(&crate::cst::Statement<'db>))]
#[visit(drive(&crate::cst::StatementBlock<'db>))]
#[visit(drive(&crate::cst::StatementBlockChildren<'db>))]
#[visit(drive(&crate::cst::StatementIdentifier<'db>))]
#[visit(drive(&crate::cst::String<'db>))]
#[visit(drive(&crate::cst::StringChildren<'db>))]
#[visit(drive(&crate::cst::StringFragment<'db>))]
#[visit(drive(&crate::cst::SubscriptExpression<'db>))]
#[visit(drive(&crate::cst::SubscriptExpressionChildren<'db>))]
#[visit(drive(&crate::cst::SubscriptExpressionIndex<'db>))]
#[visit(drive(&crate::cst::Super<'db>))]
#[visit(drive(&crate::cst::SwitchBody<'db>))]
#[visit(drive(&crate::cst::SwitchBodyChildren<'db>))]
#[visit(drive(&crate::cst::SwitchCase<'db>))]
#[visit(drive(&crate::cst::SwitchCaseChildren<'db>))]
#[visit(drive(&crate::cst::SwitchCaseValue<'db>))]
#[visit(drive(&crate::cst::SwitchDefault<'db>))]
#[visit(drive(&crate::cst::SwitchDefaultChildren<'db>))]
#[visit(drive(&crate::cst::SwitchStatement<'db>))]
#[visit(drive(&crate::cst::SwitchStatementChildren<'db>))]
#[visit(drive(&crate::cst::TemplateLiteralType<'db>))]
#[visit(drive(&crate::cst::TemplateLiteralTypeChildren<'db>))]
#[visit(drive(&crate::cst::TemplateString<'db>))]
#[visit(drive(&crate::cst::TemplateStringChildren<'db>))]
#[visit(drive(&crate::cst::TemplateSubstitution<'db>))]
#[visit(drive(&crate::cst::TemplateSubstitutionChildren<'db>))]
#[visit(drive(&crate::cst::TemplateType<'db>))]
#[visit(drive(&crate::cst::TemplateTypeChildren<'db>))]
#[visit(drive(&crate::cst::TernaryExpression<'db>))]
#[visit(drive(&crate::cst::TernaryExpressionChildren<'db>))]
#[visit(drive(&crate::cst::This<'db>))]
#[visit(drive(&crate::cst::ThisType<'db>))]
#[visit(drive(&crate::cst::ThrowStatement<'db>))]
#[visit(drive(&crate::cst::ThrowStatementChildren<'db>))]
#[visit(drive(&crate::cst::True<'db>))]
#[visit(drive(&crate::cst::TryStatement<'db>))]
#[visit(drive(&crate::cst::TryStatementChildren<'db>))]
#[visit(drive(&crate::cst::TupleType<'db>))]
#[visit(drive(&crate::cst::TupleTypeChildren<'db>))]
#[visit(drive(&crate::cst::Type<'db>))]
#[visit(drive(&crate::cst::TypeAliasDeclaration<'db>))]
#[visit(drive(&crate::cst::TypeAliasDeclarationChildren<'db>))]
#[visit(drive(&crate::cst::TypeAnnotation<'db>))]
#[visit(drive(&crate::cst::TypeAnnotationChildren<'db>))]
#[visit(drive(&crate::cst::TypeArguments<'db>))]
#[visit(drive(&crate::cst::TypeArgumentsChildren<'db>))]
#[visit(drive(&crate::cst::TypeAssertion<'db>))]
#[visit(drive(&crate::cst::TypeAssertionChildren<'db>))]
#[visit(drive(&crate::cst::TypeIdentifier<'db>))]
#[visit(drive(&crate::cst::TypeParameter<'db>))]
#[visit(drive(&crate::cst::TypeParameterChildren<'db>))]
#[visit(drive(&crate::cst::TypeParameters<'db>))]
#[visit(drive(&crate::cst::TypeParametersChildren<'db>))]
#[visit(drive(&crate::cst::TypePredicate<'db>))]
#[visit(drive(&crate::cst::TypePredicateAnnotation<'db>))]
#[visit(drive(&crate::cst::TypePredicateAnnotationChildren<'db>))]
#[visit(drive(&crate::cst::TypePredicateChildren<'db>))]
#[visit(drive(&crate::cst::TypePredicateName<'db>))]
#[visit(drive(&crate::cst::TypeQuery<'db>))]
#[visit(drive(&crate::cst::TypeQueryChildren<'db>))]
#[visit(drive(&crate::cst::UnaryExpression<'db>))]
#[visit(drive(&crate::cst::UnaryExpressionArgument<'db>))]
#[visit(drive(&crate::cst::UnaryExpressionChildren<'db>))]
#[visit(drive(&crate::cst::UnaryExpressionOperator<'db>))]
#[visit(drive(&crate::cst::Undefined<'db>))]
#[visit(drive(&crate::cst::UnionType<'db>))]
#[visit(drive(&crate::cst::UnionTypeChildren<'db>))]
#[visit(drive(&crate::cst::UpdateExpression<'db>))]
#[visit(drive(&crate::cst::UpdateExpressionChildren<'db>))]
#[visit(drive(&crate::cst::UpdateExpressionOperator<'db>))]
#[visit(drive(&crate::cst::VariableDeclaration<'db>))]
#[visit(drive(&crate::cst::VariableDeclarationChildren<'db>))]
#[visit(drive(&crate::cst::VariableDeclarator<'db>))]
#[visit(drive(&crate::cst::VariableDeclaratorChildren<'db>))]
#[visit(drive(&crate::cst::VariableDeclaratorName<'db>))]
#[visit(drive(&crate::cst::WhileStatement<'db>))]
#[visit(drive(&crate::cst::WhileStatementChildren<'db>))]
#[visit(drive(&crate::cst::WithStatement<'db>))]
#[visit(drive(&crate::cst::WithStatementChildren<'db>))]
#[visit(drive(&crate::cst::YieldExpression<'db>))]
#[visit(drive(&crate::cst::YieldExpressionChildren<'db>))]
#[visit(drive(&crate::cst::AbstractClassDeclaration<'db>))]
#[visit(drive(&crate::cst::AbstractMethodSignature<'db>))]
#[visit(drive(&crate::cst::FunctionSignature<'db>))]
#[visit(drive(&crate::cst::InterfaceDeclaration<'db>))]
#[visit(drive(&crate::cst::Module<'db>))]
#[visit(drive(crate::cst::AbstractClassDeclarationChildren<'db>))]
#[visit(drive(crate::cst::AbstractMethodSignatureChildren<'db>))]
#[visit(drive(crate::cst::AbstractMethodSignatureName<'db>))]
#[visit(drive(crate::cst::AbstractMethodSignatureReturnType<'db>))]
#[visit(drive(crate::cst::AccessibilityModifier<'db>))]
#[visit(drive(crate::cst::AddingTypeAnnotation<'db>))]
#[visit(drive(crate::cst::AddingTypeAnnotationChildren<'db>))]
#[visit(drive(crate::cst::AmbientDeclaration<'db>))]
#[visit(drive(crate::cst::AmbientDeclarationChildren<'db>))]
#[visit(drive(crate::cst::AnonymousAbstract<'db>))]
#[visit(drive(crate::cst::AnonymousAccessor<'db>))]
#[visit(drive(crate::cst::AnonymousAmpersand<'db>))]
#[visit(drive(crate::cst::AnonymousAmpersandAmpersand<'db>))]
#[visit(drive(crate::cst::AnonymousAmpersandAmpersandEquals<'db>))]
#[visit(drive(crate::cst::AnonymousAmpersandEquals<'db>))]
#[visit(drive(crate::cst::AnonymousAny<'db>))]
#[visit(drive(crate::cst::AnonymousAs<'db>))]
#[visit(drive(crate::cst::AnonymousAssert<'db>))]
#[visit(drive(crate::cst::AnonymousAsserts<'db>))]
#[visit(drive(crate::cst::AnonymousAsterisk<'db>))]
#[visit(drive(crate::cst::AnonymousAsteriskAsterisk<'db>))]
#[visit(drive(crate::cst::AnonymousAsteriskAsteriskEquals<'db>))]
#[visit(drive(crate::cst::AnonymousAsteriskEquals<'db>))]
#[visit(drive(crate::cst::AnonymousAsync<'db>))]
#[visit(drive(crate::cst::AnonymousAt<'db>))]
#[visit(drive(crate::cst::AnonymousAwait<'db>))]
#[visit(drive(crate::cst::AnonymousBacktick<'db>))]
#[visit(drive(crate::cst::AnonymousBang<'db>))]
#[visit(drive(crate::cst::AnonymousBangEquals<'db>))]
#[visit(drive(crate::cst::AnonymousBangEqualsEquals<'db>))]
#[visit(drive(crate::cst::AnonymousBoolean<'db>))]
#[visit(drive(crate::cst::AnonymousBreak<'db>))]
#[visit(drive(crate::cst::AnonymousCaret<'db>))]
#[visit(drive(crate::cst::AnonymousCaretEquals<'db>))]
#[visit(drive(crate::cst::AnonymousCase<'db>))]
#[visit(drive(crate::cst::AnonymousCatch<'db>))]
#[visit(drive(crate::cst::AnonymousClass<'db>))]
#[visit(drive(crate::cst::AnonymousCloseBrace<'db>))]
#[visit(drive(crate::cst::AnonymousCloseBracket<'db>))]
#[visit(drive(crate::cst::AnonymousCloseParen<'db>))]
#[visit(drive(crate::cst::AnonymousColon<'db>))]
#[visit(drive(crate::cst::AnonymousComma<'db>))]
#[visit(drive(crate::cst::AnonymousConst<'db>))]
#[visit(drive(crate::cst::AnonymousContinue<'db>))]
#[visit(drive(crate::cst::AnonymousDebugger<'db>))]
#[visit(drive(crate::cst::AnonymousDeclare<'db>))]
#[visit(drive(crate::cst::AnonymousDefault<'db>))]
#[visit(drive(crate::cst::AnonymousDelete<'db>))]
#[visit(drive(crate::cst::AnonymousDo<'db>))]
#[visit(drive(crate::cst::AnonymousDollarOpenBrace<'db>))]
#[visit(drive(crate::cst::AnonymousDot<'db>))]
#[visit(drive(crate::cst::AnonymousDotDotDot<'db>))]
#[visit(drive(crate::cst::AnonymousDoubleQuote<'db>))]
#[visit(drive(crate::cst::AnonymousElse<'db>))]
#[visit(drive(crate::cst::AnonymousEnum<'db>))]
#[visit(drive(crate::cst::AnonymousEquals<'db>))]
#[visit(drive(crate::cst::AnonymousEqualsEquals<'db>))]
#[visit(drive(crate::cst::AnonymousEqualsEqualsEquals<'db>))]
#[visit(drive(crate::cst::AnonymousEqualsGreaterThan<'db>))]
#[visit(drive(crate::cst::AnonymousExport<'db>))]
#[visit(drive(crate::cst::AnonymousExtends<'db>))]
#[visit(drive(crate::cst::AnonymousFinally<'db>))]
#[visit(drive(crate::cst::AnonymousFor<'db>))]
#[visit(drive(crate::cst::AnonymousFrom<'db>))]
#[visit(drive(crate::cst::AnonymousFunction<'db>))]
#[visit(drive(crate::cst::AnonymousGet<'db>))]
#[visit(drive(crate::cst::AnonymousGlobal<'db>))]
#[visit(drive(crate::cst::AnonymousGreaterThan<'db>))]
#[visit(drive(crate::cst::AnonymousGreaterThanEquals<'db>))]
#[visit(drive(crate::cst::AnonymousGreaterThanGreaterThan<'db>))]
#[visit(drive(crate::cst::AnonymousGreaterThanGreaterThanEquals<'db>))]
#[visit(drive(crate::cst::AnonymousGreaterThanGreaterThanGreaterThan<'db>))]
#[visit(drive(crate::cst::AnonymousGreaterThanGreaterThanGreaterThanEquals<'db>))]
#[visit(drive(crate::cst::AnonymousIf<'db>))]
#[visit(drive(crate::cst::AnonymousImplements<'db>))]
#[visit(drive(crate::cst::AnonymousImport<'db>))]
#[visit(drive(crate::cst::AnonymousIn<'db>))]
#[visit(drive(crate::cst::AnonymousInfer<'db>))]
#[visit(drive(crate::cst::AnonymousInstanceof<'db>))]
#[visit(drive(crate::cst::AnonymousInterface<'db>))]
#[visit(drive(crate::cst::AnonymousIs<'db>))]
#[visit(drive(crate::cst::AnonymousKeyof<'db>))]
#[visit(drive(crate::cst::AnonymousLessThan<'db>))]
#[visit(drive(crate::cst::AnonymousLessThanEquals<'db>))]
#[visit(drive(crate::cst::AnonymousLessThanLessThan<'db>))]
#[visit(drive(crate::cst::AnonymousLessThanLessThanEquals<'db>))]
#[visit(drive(crate::cst::AnonymousLet<'db>))]
#[visit(drive(crate::cst::AnonymousMeta<'db>))]
#[visit(drive(crate::cst::AnonymousMinus<'db>))]
#[visit(drive(crate::cst::AnonymousMinusEquals<'db>))]
#[visit(drive(crate::cst::AnonymousMinusMinus<'db>))]
#[visit(drive(crate::cst::AnonymousMinusQuestionMarkColon<'db>))]
#[visit(drive(crate::cst::AnonymousModule<'db>))]
#[visit(drive(crate::cst::AnonymousNamespace<'db>))]
#[visit(drive(crate::cst::AnonymousNever<'db>))]
#[visit(drive(crate::cst::AnonymousNew<'db>))]
#[visit(drive(crate::cst::AnonymousNumber<'db>))]
#[visit(drive(crate::cst::AnonymousObject<'db>))]
#[visit(drive(crate::cst::AnonymousOf<'db>))]
#[visit(drive(crate::cst::AnonymousOpenBrace<'db>))]
#[visit(drive(crate::cst::AnonymousOpenBracePipe<'db>))]
#[visit(drive(crate::cst::AnonymousOpenBracket<'db>))]
#[visit(drive(crate::cst::AnonymousOpenParen<'db>))]
#[visit(drive(crate::cst::AnonymousOverride<'db>))]
#[visit(drive(crate::cst::AnonymousPercent<'db>))]
#[visit(drive(crate::cst::AnonymousPercentEquals<'db>))]
#[visit(drive(crate::cst::AnonymousPipe<'db>))]
#[visit(drive(crate::cst::AnonymousPipeCloseBrace<'db>))]
#[visit(drive(crate::cst::AnonymousPipeEquals<'db>))]
#[visit(drive(crate::cst::AnonymousPipePipe<'db>))]
#[visit(drive(crate::cst::AnonymousPipePipeEquals<'db>))]
#[visit(drive(crate::cst::AnonymousPlus<'db>))]
#[visit(drive(crate::cst::AnonymousPlusEquals<'db>))]
#[visit(drive(crate::cst::AnonymousPlusPlus<'db>))]
#[visit(drive(crate::cst::AnonymousPlusQuestionMarkColon<'db>))]
#[visit(drive(crate::cst::AnonymousPrivate<'db>))]
#[visit(drive(crate::cst::AnonymousProtected<'db>))]
#[visit(drive(crate::cst::AnonymousPublic<'db>))]
#[visit(drive(crate::cst::AnonymousQuestionMark<'db>))]
#[visit(drive(crate::cst::AnonymousQuestionMarkColon<'db>))]
#[visit(drive(crate::cst::AnonymousQuestionMarkDot<'db>))]
#[visit(drive(crate::cst::AnonymousQuestionMarkQuestionMark<'db>))]
#[visit(drive(crate::cst::AnonymousQuestionMarkQuestionMarkEquals<'db>))]
#[visit(drive(crate::cst::AnonymousReadonly<'db>))]
#[visit(drive(crate::cst::AnonymousRequire<'db>))]
#[visit(drive(crate::cst::AnonymousReturn<'db>))]
#[visit(drive(crate::cst::AnonymousSatisfies<'db>))]
#[visit(drive(crate::cst::AnonymousSemicolon<'db>))]
#[visit(drive(crate::cst::AnonymousSet<'db>))]
#[visit(drive(crate::cst::AnonymousSingleQuote<'db>))]
#[visit(drive(crate::cst::AnonymousSlash<'db>))]
#[visit(drive(crate::cst::AnonymousSlashEquals<'db>))]
#[visit(drive(crate::cst::AnonymousStatic<'db>))]
#[visit(drive(crate::cst::AnonymousString<'db>))]
#[visit(drive(crate::cst::AnonymousSwitch<'db>))]
#[visit(drive(crate::cst::AnonymousSymbol<'db>))]
#[visit(drive(crate::cst::AnonymousTarget<'db>))]
#[visit(drive(crate::cst::AnonymousThrow<'db>))]
#[visit(drive(crate::cst::AnonymousTilde<'db>))]
#[visit(drive(crate::cst::AnonymousTry<'db>))]
#[visit(drive(crate::cst::AnonymousType<'db>))]
#[visit(drive(crate::cst::AnonymousTypeof<'db>))]
#[visit(drive(crate::cst::AnonymousUniqueSymbol<'db>))]
#[visit(drive(crate::cst::AnonymousUnknown<'db>))]
#[visit(drive(crate::cst::AnonymousUsing<'db>))]
#[visit(drive(crate::cst::AnonymousVar<'db>))]
#[visit(drive(crate::cst::AnonymousVoid<'db>))]
#[visit(drive(crate::cst::AnonymousWhile<'db>))]
#[visit(drive(crate::cst::AnonymousWith<'db>))]
#[visit(drive(crate::cst::AnonymousYield<'db>))]
#[visit(drive(crate::cst::Arguments<'db>))]
#[visit(drive(crate::cst::ArgumentsChildren<'db>))]
#[visit(drive(crate::cst::Array<'db>))]
#[visit(drive(crate::cst::ArrayChildren<'db>))]
#[visit(drive(crate::cst::ArrayPattern<'db>))]
#[visit(drive(crate::cst::ArrayPatternChildren<'db>))]
#[visit(drive(crate::cst::ArrayType<'db>))]
#[visit(drive(crate::cst::ArrayTypeChildren<'db>))]
#[visit(drive(crate::cst::ArrowFunction<'db>))]
#[visit(drive(crate::cst::ArrowFunctionBody<'db>))]
#[visit(drive(crate::cst::ArrowFunctionChildren<'db>))]
#[visit(drive(crate::cst::ArrowFunctionReturnType<'db>))]
#[visit(drive(crate::cst::AsExpression<'db>))]
#[visit(drive(crate::cst::AsExpressionChildren<'db>))]
#[visit(drive(crate::cst::Asserts<'db>))]
#[visit(drive(crate::cst::AssertsAnnotation<'db>))]
#[visit(drive(crate::cst::AssertsAnnotationChildren<'db>))]
#[visit(drive(crate::cst::AssertsChildren<'db>))]
#[visit(drive(crate::cst::AssignmentExpression<'db>))]
#[visit(drive(crate::cst::AssignmentExpressionChildren<'db>))]
#[visit(drive(crate::cst::AssignmentExpressionLeft<'db>))]
#[visit(drive(crate::cst::AssignmentPattern<'db>))]
#[visit(drive(crate::cst::AssignmentPatternChildren<'db>))]
#[visit(drive(crate::cst::AugmentedAssignmentExpression<'db>))]
#[visit(drive(crate::cst::AugmentedAssignmentExpressionChildren<'db>))]
#[visit(drive(crate::cst::AugmentedAssignmentExpressionLeft<'db>))]
#[visit(drive(crate::cst::AugmentedAssignmentExpressionOperator<'db>))]
#[visit(drive(crate::cst::AwaitExpression<'db>))]
#[visit(drive(crate::cst::AwaitExpressionChildren<'db>))]
#[visit(drive(crate::cst::BinaryExpression<'db>))]
#[visit(drive(crate::cst::BinaryExpressionChildren<'db>))]
#[visit(drive(crate::cst::BinaryExpressionLeft<'db>))]
#[visit(drive(crate::cst::BinaryExpressionOperator<'db>))]
#[visit(drive(crate::cst::BreakStatement<'db>))]
#[visit(drive(crate::cst::BreakStatementChildren<'db>))]
#[visit(drive(crate::cst::CallExpression<'db>))]
#[visit(drive(crate::cst::CallExpressionArguments<'db>))]
#[visit(drive(crate::cst::CallExpressionChildren<'db>))]
#[visit(drive(crate::cst::CallExpressionFunction<'db>))]
#[visit(drive(crate::cst::CallSignature<'db>))]
#[visit(drive(crate::cst::CallSignatureChildren<'db>))]
#[visit(drive(crate::cst::CallSignatureReturnType<'db>))]
#[visit(drive(crate::cst::CatchClause<'db>))]
#[visit(drive(crate::cst::CatchClauseChildren<'db>))]
#[visit(drive(crate::cst::CatchClauseParameter<'db>))]
#[visit(drive(crate::cst::Class<'db>))]
#[visit(drive(crate::cst::ClassBody<'db>))]
#[visit(drive(crate::cst::ClassBodyChildren<'db>))]
#[visit(drive(crate::cst::ClassChildren<'db>))]
#[visit(drive(crate::cst::ClassDeclaration<'db>))]
#[visit(drive(crate::cst::ClassDeclarationChildren<'db>))]
#[visit(drive(crate::cst::ClassHeritage<'db>))]
#[visit(drive(crate::cst::ClassHeritageChildren<'db>))]
#[visit(drive(crate::cst::ClassStaticBlock<'db>))]
#[visit(drive(crate::cst::ClassStaticBlockChildren<'db>))]
#[visit(drive(crate::cst::Comment<'db>))]
#[visit(drive(crate::cst::ComputedPropertyName<'db>))]
#[visit(drive(crate::cst::ComputedPropertyNameChildren<'db>))]
#[visit(drive(crate::cst::ConditionalType<'db>))]
#[visit(drive(crate::cst::ConditionalTypeChildren<'db>))]
#[visit(drive(crate::cst::Constraint<'db>))]
#[visit(drive(crate::cst::ConstraintChildren<'db>))]
#[visit(drive(crate::cst::ConstructSignature<'db>))]
#[visit(drive(crate::cst::ConstructSignatureChildren<'db>))]
#[visit(drive(crate::cst::ConstructorType<'db>))]
#[visit(drive(crate::cst::ConstructorTypeChildren<'db>))]
#[visit(drive(crate::cst::ContinueStatement<'db>))]
#[visit(drive(crate::cst::ContinueStatementChildren<'db>))]
#[visit(drive(crate::cst::DebuggerStatement<'db>))]
#[visit(drive(crate::cst::Declaration<'db>))]
#[visit(drive(crate::cst::Decorator<'db>))]
#[visit(drive(crate::cst::DecoratorChildren<'db>))]
#[visit(drive(crate::cst::DefaultType<'db>))]
#[visit(drive(crate::cst::DefaultTypeChildren<'db>))]
#[visit(drive(crate::cst::DoStatement<'db>))]
#[visit(drive(crate::cst::DoStatementChildren<'db>))]
#[visit(drive(crate::cst::ElseClause<'db>))]
#[visit(drive(crate::cst::ElseClauseChildren<'db>))]
#[visit(drive(crate::cst::EmptyStatement<'db>))]
#[visit(drive(crate::cst::EnumAssignment<'db>))]
#[visit(drive(crate::cst::EnumAssignmentChildren<'db>))]
#[visit(drive(crate::cst::EnumAssignmentName<'db>))]
#[visit(drive(crate::cst::EnumBody<'db>))]
#[visit(drive(crate::cst::EnumBodyChildren<'db>))]
#[visit(drive(crate::cst::EnumBodyName<'db>))]
#[visit(drive(crate::cst::EnumDeclaration<'db>))]
#[visit(drive(crate::cst::EnumDeclarationChildren<'db>))]
#[visit(drive(crate::cst::EscapeSequence<'db>))]
#[visit(drive(crate::cst::ExistentialType<'db>))]
#[visit(drive(crate::cst::ExportClause<'db>))]
#[visit(drive(crate::cst::ExportClauseChildren<'db>))]
#[visit(drive(crate::cst::ExportSpecifier<'db>))]
#[visit(drive(crate::cst::ExportSpecifierAlias<'db>))]
#[visit(drive(crate::cst::ExportSpecifierChildren<'db>))]
#[visit(drive(crate::cst::ExportSpecifierName<'db>))]
#[visit(drive(crate::cst::ExportStatement<'db>))]
#[visit(drive(crate::cst::ExportStatementChildren<'db>))]
#[visit(drive(crate::cst::Expression<'db>))]
#[visit(drive(crate::cst::ExpressionStatement<'db>))]
#[visit(drive(crate::cst::ExpressionStatementChildren<'db>))]
#[visit(drive(crate::cst::ExtendsClause<'db>))]
#[visit(drive(crate::cst::ExtendsClauseChildren<'db>))]
#[visit(drive(crate::cst::ExtendsTypeClause<'db>))]
#[visit(drive(crate::cst::ExtendsTypeClauseChildren<'db>))]
#[visit(drive(crate::cst::ExtendsTypeClauseType<'db>))]
#[visit(drive(crate::cst::False<'db>))]
#[visit(drive(crate::cst::FinallyClause<'db>))]
#[visit(drive(crate::cst::FinallyClauseChildren<'db>))]
#[visit(drive(crate::cst::FlowMaybeType<'db>))]
#[visit(drive(crate::cst::FlowMaybeTypeChildren<'db>))]
#[visit(drive(crate::cst::ForInStatement<'db>))]
#[visit(drive(crate::cst::ForInStatementChildren<'db>))]
#[visit(drive(crate::cst::ForInStatementKind<'db>))]
#[visit(drive(crate::cst::ForInStatementLeft<'db>))]
#[visit(drive(crate::cst::ForInStatementOperator<'db>))]
#[visit(drive(crate::cst::ForInStatementRight<'db>))]
#[visit(drive(crate::cst::ForStatement<'db>))]
#[visit(drive(crate::cst::ForStatementChildren<'db>))]
#[visit(drive(crate::cst::ForStatementCondition<'db>))]
#[visit(drive(crate::cst::ForStatementIncrement<'db>))]
#[visit(drive(crate::cst::ForStatementInitializer<'db>))]
#[visit(drive(crate::cst::FormalParameters<'db>))]
#[visit(drive(crate::cst::FormalParametersChildren<'db>))]
#[visit(drive(crate::cst::FunctionDeclaration<'db>))]
#[visit(drive(crate::cst::FunctionDeclarationChildren<'db>))]
#[visit(drive(crate::cst::FunctionDeclarationReturnType<'db>))]
#[visit(drive(crate::cst::FunctionExpression<'db>))]
#[visit(drive(crate::cst::FunctionExpressionChildren<'db>))]
#[visit(drive(crate::cst::FunctionExpressionReturnType<'db>))]
#[visit(drive(crate::cst::FunctionSignatureChildren<'db>))]
#[visit(drive(crate::cst::FunctionSignatureReturnType<'db>))]
#[visit(drive(crate::cst::FunctionType<'db>))]
#[visit(drive(crate::cst::FunctionTypeChildren<'db>))]
#[visit(drive(crate::cst::FunctionTypeReturnType<'db>))]
#[visit(drive(crate::cst::GeneratorFunction<'db>))]
#[visit(drive(crate::cst::GeneratorFunctionChildren<'db>))]
#[visit(drive(crate::cst::GeneratorFunctionDeclaration<'db>))]
#[visit(drive(crate::cst::GeneratorFunctionDeclarationChildren<'db>))]
#[visit(drive(crate::cst::GeneratorFunctionDeclarationReturnType<'db>))]
#[visit(drive(crate::cst::GeneratorFunctionReturnType<'db>))]
#[visit(drive(crate::cst::GenericType<'db>))]
#[visit(drive(crate::cst::GenericTypeChildren<'db>))]
#[visit(drive(crate::cst::GenericTypeName<'db>))]
#[visit(drive(crate::cst::HashBangLine<'db>))]
#[visit(drive(crate::cst::HtmlComment<'db>))]
#[visit(drive(crate::cst::Identifier<'db>))]
#[visit(drive(crate::cst::IfStatement<'db>))]
#[visit(drive(crate::cst::IfStatementChildren<'db>))]
#[visit(drive(crate::cst::ImplementsClause<'db>))]
#[visit(drive(crate::cst::ImplementsClauseChildren<'db>))]
#[visit(drive(crate::cst::Import<'db>))]
#[visit(drive(crate::cst::ImportAlias<'db>))]
#[visit(drive(crate::cst::ImportAliasChildren<'db>))]
#[visit(drive(crate::cst::ImportAttribute<'db>))]
#[visit(drive(crate::cst::ImportAttributeChildren<'db>))]
#[visit(drive(crate::cst::ImportClause<'db>))]
#[visit(drive(crate::cst::ImportClauseChildren<'db>))]
#[visit(drive(crate::cst::ImportRequireClause<'db>))]
#[visit(drive(crate::cst::ImportRequireClauseChildren<'db>))]
#[visit(drive(crate::cst::ImportSpecifier<'db>))]
#[visit(drive(crate::cst::ImportSpecifierChildren<'db>))]
#[visit(drive(crate::cst::ImportSpecifierName<'db>))]
#[visit(drive(crate::cst::ImportStatement<'db>))]
#[visit(drive(crate::cst::ImportStatementChildren<'db>))]
#[visit(drive(crate::cst::IndexSignature<'db>))]
#[visit(drive(crate::cst::IndexSignatureChildren<'db>))]
#[visit(drive(crate::cst::IndexSignatureSign<'db>))]
#[visit(drive(crate::cst::IndexSignatureType<'db>))]
#[visit(drive(crate::cst::IndexTypeQuery<'db>))]
#[visit(drive(crate::cst::IndexTypeQueryChildren<'db>))]
#[visit(drive(crate::cst::InferType<'db>))]
#[visit(drive(crate::cst::InferTypeChildren<'db>))]
#[visit(drive(crate::cst::InstantiationExpression<'db>))]
#[visit(drive(crate::cst::InstantiationExpressionChildren<'db>))]
#[visit(drive(crate::cst::InstantiationExpressionFunction<'db>))]
#[visit(drive(crate::cst::InterfaceBody<'db>))]
#[visit(drive(crate::cst::InterfaceBodyChildren<'db>))]
#[visit(drive(crate::cst::InterfaceDeclarationChildren<'db>))]
#[visit(drive(crate::cst::InternalModule<'db>))]
#[visit(drive(crate::cst::InternalModuleChildren<'db>))]
#[visit(drive(crate::cst::InternalModuleName<'db>))]
#[visit(drive(crate::cst::IntersectionType<'db>))]
#[visit(drive(crate::cst::IntersectionTypeChildren<'db>))]
#[visit(drive(crate::cst::LabeledStatement<'db>))]
#[visit(drive(crate::cst::LabeledStatementChildren<'db>))]
#[visit(drive(crate::cst::LexicalDeclaration<'db>))]
#[visit(drive(crate::cst::LexicalDeclarationChildren<'db>))]
#[visit(drive(crate::cst::LexicalDeclarationKind<'db>))]
#[visit(drive(crate::cst::LiteralType<'db>))]
#[visit(drive(crate::cst::LiteralTypeChildren<'db>))]
#[visit(drive(crate::cst::LookupType<'db>))]
#[visit(drive(crate::cst::LookupTypeChildren<'db>))]
#[visit(drive(crate::cst::MappedTypeClause<'db>))]
#[visit(drive(crate::cst::MappedTypeClauseChildren<'db>))]
#[visit(drive(crate::cst::MemberExpression<'db>))]
#[visit(drive(crate::cst::MemberExpressionChildren<'db>))]
#[visit(drive(crate::cst::MemberExpressionObject<'db>))]
#[visit(drive(crate::cst::MemberExpressionProperty<'db>))]
#[visit(drive(crate::cst::MetaProperty<'db>))]
#[visit(drive(crate::cst::MethodDefinition<'db>))]
#[visit(drive(crate::cst::MethodDefinitionChildren<'db>))]
#[visit(drive(crate::cst::MethodDefinitionName<'db>))]
#[visit(drive(crate::cst::MethodDefinitionReturnType<'db>))]
#[visit(drive(crate::cst::MethodSignature<'db>))]
#[visit(drive(crate::cst::MethodSignatureChildren<'db>))]
#[visit(drive(crate::cst::MethodSignatureName<'db>))]
#[visit(drive(crate::cst::MethodSignatureReturnType<'db>))]
#[visit(drive(crate::cst::ModuleChildren<'db>))]
#[visit(drive(crate::cst::ModuleName<'db>))]
#[visit(drive(crate::cst::NamedImports<'db>))]
#[visit(drive(crate::cst::NamedImportsChildren<'db>))]
#[visit(drive(crate::cst::NamespaceExport<'db>))]
#[visit(drive(crate::cst::NamespaceExportChildren<'db>))]
#[visit(drive(crate::cst::NamespaceImport<'db>))]
#[visit(drive(crate::cst::NamespaceImportChildren<'db>))]
#[visit(drive(crate::cst::NestedIdentifier<'db>))]
#[visit(drive(crate::cst::NestedIdentifierChildren<'db>))]
#[visit(drive(crate::cst::NestedIdentifierObject<'db>))]
#[visit(drive(crate::cst::NestedTypeIdentifier<'db>))]
#[visit(drive(crate::cst::NestedTypeIdentifierChildren<'db>))]
#[visit(drive(crate::cst::NestedTypeIdentifierModule<'db>))]
#[visit(drive(crate::cst::NewExpression<'db>))]
#[visit(drive(crate::cst::NewExpressionChildren<'db>))]
#[visit(drive(crate::cst::NonNullExpression<'db>))]
#[visit(drive(crate::cst::NonNullExpressionChildren<'db>))]
#[visit(drive(crate::cst::Null<'db>))]
#[visit(drive(crate::cst::Number<'db>))]
#[visit(drive(crate::cst::Object<'db>))]
#[visit(drive(crate::cst::ObjectAssignmentPattern<'db>))]
#[visit(drive(crate::cst::ObjectAssignmentPatternChildren<'db>))]
#[visit(drive(crate::cst::ObjectAssignmentPatternLeft<'db>))]
#[visit(drive(crate::cst::ObjectChildren<'db>))]
#[visit(drive(crate::cst::ObjectPattern<'db>))]
#[visit(drive(crate::cst::ObjectPatternChildren<'db>))]
#[visit(drive(crate::cst::ObjectType<'db>))]
#[visit(drive(crate::cst::ObjectTypeChildren<'db>))]
#[visit(drive(crate::cst::OmittingTypeAnnotation<'db>))]
#[visit(drive(crate::cst::OmittingTypeAnnotationChildren<'db>))]
#[visit(drive(crate::cst::OptingTypeAnnotation<'db>))]
#[visit(drive(crate::cst::OptingTypeAnnotationChildren<'db>))]
#[visit(drive(crate::cst::OptionalChain<'db>))]
#[visit(drive(crate::cst::OptionalParameter<'db>))]
#[visit(drive(crate::cst::OptionalParameterChildren<'db>))]
#[visit(drive(crate::cst::OptionalParameterPattern<'db>))]
#[visit(drive(crate::cst::OptionalType<'db>))]
#[visit(drive(crate::cst::OptionalTypeChildren<'db>))]
#[visit(drive(crate::cst::OverrideModifier<'db>))]
#[visit(drive(crate::cst::Pair<'db>))]
#[visit(drive(crate::cst::PairChildren<'db>))]
#[visit(drive(crate::cst::PairKey<'db>))]
#[visit(drive(crate::cst::PairPattern<'db>))]
#[visit(drive(crate::cst::PairPatternChildren<'db>))]
#[visit(drive(crate::cst::PairPatternKey<'db>))]
#[visit(drive(crate::cst::PairPatternValue<'db>))]
#[visit(drive(crate::cst::ParenthesizedExpression<'db>))]
#[visit(drive(crate::cst::ParenthesizedExpressionChildren<'db>))]
#[visit(drive(crate::cst::ParenthesizedType<'db>))]
#[visit(drive(crate::cst::ParenthesizedTypeChildren<'db>))]
#[visit(drive(crate::cst::Pattern<'db>))]
#[visit(drive(crate::cst::PredefinedType<'db>))]
#[visit(drive(crate::cst::PrimaryExpression<'db>))]
#[visit(drive(crate::cst::PrimaryType<'db>))]
#[visit(drive(crate::cst::PrivatePropertyIdentifier<'db>))]
#[visit(drive(crate::cst::Program<'db>))]
#[visit(drive(crate::cst::ProgramChildren<'db>))]
#[visit(drive(crate::cst::PropertyIdentifier<'db>))]
#[visit(drive(crate::cst::PropertySignature<'db>))]
#[visit(drive(crate::cst::PropertySignatureChildren<'db>))]
#[visit(drive(crate::cst::PropertySignatureName<'db>))]
#[visit(drive(crate::cst::PublicFieldDefinition<'db>))]
#[visit(drive(crate::cst::PublicFieldDefinitionChildren<'db>))]
#[visit(drive(crate::cst::PublicFieldDefinitionName<'db>))]
#[visit(drive(crate::cst::ReadonlyType<'db>))]
#[visit(drive(crate::cst::ReadonlyTypeChildren<'db>))]
#[visit(drive(crate::cst::Regex<'db>))]
#[visit(drive(crate::cst::RegexChildren<'db>))]
#[visit(drive(crate::cst::RegexFlags<'db>))]
#[visit(drive(crate::cst::RegexPattern<'db>))]
#[visit(drive(crate::cst::RequiredParameter<'db>))]
#[visit(drive(crate::cst::RequiredParameterChildren<'db>))]
#[visit(drive(crate::cst::RequiredParameterName<'db>))]
#[visit(drive(crate::cst::RequiredParameterPattern<'db>))]
#[visit(drive(crate::cst::RestPattern<'db>))]
#[visit(drive(crate::cst::RestPatternChildren<'db>))]
#[visit(drive(crate::cst::RestType<'db>))]
#[visit(drive(crate::cst::RestTypeChildren<'db>))]
#[visit(drive(crate::cst::ReturnStatement<'db>))]
#[visit(drive(crate::cst::ReturnStatementChildren<'db>))]
#[visit(drive(crate::cst::SatisfiesExpression<'db>))]
#[visit(drive(crate::cst::SatisfiesExpressionChildren<'db>))]
#[visit(drive(crate::cst::SequenceExpression<'db>))]
#[visit(drive(crate::cst::SequenceExpressionChildren<'db>))]
#[visit(drive(crate::cst::ShorthandPropertyIdentifier<'db>))]
#[visit(drive(crate::cst::ShorthandPropertyIdentifierPattern<'db>))]
#[visit(drive(crate::cst::SpreadElement<'db>))]
#[visit(drive(crate::cst::SpreadElementChildren<'db>))]
#[visit(drive(crate::cst::Statement<'db>))]
#[visit(drive(crate::cst::StatementBlock<'db>))]
#[visit(drive(crate::cst::StatementBlockChildren<'db>))]
#[visit(drive(crate::cst::StatementIdentifier<'db>))]
#[visit(drive(crate::cst::String<'db>))]
#[visit(drive(crate::cst::StringChildren<'db>))]
#[visit(drive(crate::cst::StringFragment<'db>))]
#[visit(drive(crate::cst::SubscriptExpression<'db>))]
#[visit(drive(crate::cst::SubscriptExpressionChildren<'db>))]
#[visit(drive(crate::cst::SubscriptExpressionIndex<'db>))]
#[visit(drive(crate::cst::Super<'db>))]
#[visit(drive(crate::cst::SwitchBody<'db>))]
#[visit(drive(crate::cst::SwitchBodyChildren<'db>))]
#[visit(drive(crate::cst::SwitchCase<'db>))]
#[visit(drive(crate::cst::SwitchCaseChildren<'db>))]
#[visit(drive(crate::cst::SwitchCaseValue<'db>))]
#[visit(drive(crate::cst::SwitchDefault<'db>))]
#[visit(drive(crate::cst::SwitchDefaultChildren<'db>))]
#[visit(drive(crate::cst::SwitchStatement<'db>))]
#[visit(drive(crate::cst::SwitchStatementChildren<'db>))]
#[visit(drive(crate::cst::TemplateLiteralType<'db>))]
#[visit(drive(crate::cst::TemplateLiteralTypeChildren<'db>))]
#[visit(drive(crate::cst::TemplateString<'db>))]
#[visit(drive(crate::cst::TemplateStringChildren<'db>))]
#[visit(drive(crate::cst::TemplateSubstitution<'db>))]
#[visit(drive(crate::cst::TemplateSubstitutionChildren<'db>))]
#[visit(drive(crate::cst::TemplateType<'db>))]
#[visit(drive(crate::cst::TemplateTypeChildren<'db>))]
#[visit(drive(crate::cst::TernaryExpression<'db>))]
#[visit(drive(crate::cst::TernaryExpressionChildren<'db>))]
#[visit(drive(crate::cst::This<'db>))]
#[visit(drive(crate::cst::ThisType<'db>))]
#[visit(drive(crate::cst::ThrowStatement<'db>))]
#[visit(drive(crate::cst::ThrowStatementChildren<'db>))]
#[visit(drive(crate::cst::True<'db>))]
#[visit(drive(crate::cst::TryStatement<'db>))]
#[visit(drive(crate::cst::TryStatementChildren<'db>))]
#[visit(drive(crate::cst::TupleType<'db>))]
#[visit(drive(crate::cst::TupleTypeChildren<'db>))]
#[visit(drive(crate::cst::Type<'db>))]
#[visit(drive(crate::cst::TypeAliasDeclaration<'db>))]
#[visit(drive(crate::cst::TypeAliasDeclarationChildren<'db>))]
#[visit(drive(crate::cst::TypeAnnotation<'db>))]
#[visit(drive(crate::cst::TypeAnnotationChildren<'db>))]
#[visit(drive(crate::cst::TypeArguments<'db>))]
#[visit(drive(crate::cst::TypeArgumentsChildren<'db>))]
#[visit(drive(crate::cst::TypeAssertion<'db>))]
#[visit(drive(crate::cst::TypeAssertionChildren<'db>))]
#[visit(drive(crate::cst::TypeIdentifier<'db>))]
#[visit(drive(crate::cst::TypeParameter<'db>))]
#[visit(drive(crate::cst::TypeParameterChildren<'db>))]
#[visit(drive(crate::cst::TypeParameters<'db>))]
#[visit(drive(crate::cst::TypeParametersChildren<'db>))]
#[visit(drive(crate::cst::TypePredicate<'db>))]
#[visit(drive(crate::cst::TypePredicateAnnotation<'db>))]
#[visit(drive(crate::cst::TypePredicateAnnotationChildren<'db>))]
#[visit(drive(crate::cst::TypePredicateChildren<'db>))]
#[visit(drive(crate::cst::TypePredicateName<'db>))]
#[visit(drive(crate::cst::TypeQuery<'db>))]
#[visit(drive(crate::cst::TypeQueryChildren<'db>))]
#[visit(drive(crate::cst::UnaryExpression<'db>))]
#[visit(drive(crate::cst::UnaryExpressionArgument<'db>))]
#[visit(drive(crate::cst::UnaryExpressionChildren<'db>))]
#[visit(drive(crate::cst::UnaryExpressionOperator<'db>))]
#[visit(drive(crate::cst::Undefined<'db>))]
#[visit(drive(crate::cst::UnionType<'db>))]
#[visit(drive(crate::cst::UnionTypeChildren<'db>))]
#[visit(drive(crate::cst::UpdateExpression<'db>))]
#[visit(drive(crate::cst::UpdateExpressionChildren<'db>))]
#[visit(drive(crate::cst::UpdateExpressionOperator<'db>))]
#[visit(drive(crate::cst::VariableDeclaration<'db>))]
#[visit(drive(crate::cst::VariableDeclarationChildren<'db>))]
#[visit(drive(crate::cst::VariableDeclarator<'db>))]
#[visit(drive(crate::cst::VariableDeclaratorChildren<'db>))]
#[visit(drive(crate::cst::VariableDeclaratorName<'db>))]
#[visit(drive(crate::cst::WhileStatement<'db>))]
#[visit(drive(crate::cst::WhileStatementChildren<'db>))]
#[visit(drive(crate::cst::WithStatement<'db>))]
#[visit(drive(crate::cst::WithStatementChildren<'db>))]
#[visit(drive(crate::cst::YieldExpression<'db>))]
#[visit(drive(crate::cst::YieldExpressionChildren<'db>))]
#[visit(drive(for<T>Box<T>))]
#[visit(drive(for<T>Vec<T>))]
#[visit(drive(for<T>Option<T>))]
#[visit(
    enter(AbstractClassDeclaration:crate::cst::AbstractClassDeclaration<'db>),
    enter(AbstractMethodSignature:crate::cst::AbstractMethodSignature<'db>),
    enter(FunctionSignature:crate::cst::FunctionSignature<'db>),
    enter(InterfaceDeclaration:crate::cst::InterfaceDeclaration<'db>),
    enter(Module:crate::cst::Module<'db>)
)]
pub struct Definitions<'db> {
    pub classes: Vec<crate::cst::AbstractClassDeclaration<'db>>,
    pub functions: Vec<crate::cst::FunctionSignature<'db>>,
    pub interfaces: Vec<crate::cst::InterfaceDeclaration<'db>>,
    pub methods: Vec<crate::cst::AbstractMethodSignature<'db>>,
    pub modules: Vec<crate::cst::Module<'db>>,
    phantom: std::marker::PhantomData<&'db ()>,
}
impl<'db> Definitions<'db> {
    fn enter_AbstractClassDeclaration(
        &mut self,
        node: &crate::cst::AbstractClassDeclaration<'db>,
    ) {
        ///Code for query: (abstract_class_declaration   name: (type_identifier) @name) @definition.class
        let name = &*node.name;
        self.classes.push(node.clone());
    }
    fn enter_AbstractMethodSignature(
        &mut self,
        node: &crate::cst::AbstractMethodSignature<'db>,
    ) {
        ///Code for query: (abstract_method_signature   name: (property_identifier) @name) @definition.method
        let name = &*node.name;
        self.methods.push(node.clone());
    }
    fn enter_FunctionSignature(&mut self, node: &crate::cst::FunctionSignature<'db>) {
        ///Code for query: (function_signature   name: (identifier) @name) @definition.function
        let name = &*node.name;
        self.functions.push(node.clone());
    }
    fn enter_InterfaceDeclaration(
        &mut self,
        node: &crate::cst::InterfaceDeclaration<'db>,
    ) {
        ///Code for query: (interface_declaration   name: (type_identifier) @name) @definition.interface
        let name = &*node.name;
        self.interfaces.push(node.clone());
    }
    fn enter_Module(&mut self, node: &crate::cst::Module<'db>) {
        ///Code for query: (module   name: (identifier) @name) @definition.module
        let name = &*node.name;
        self.modules.push(node.clone());
    }
}
