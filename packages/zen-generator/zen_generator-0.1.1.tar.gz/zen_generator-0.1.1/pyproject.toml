[project]
name = "zen-generator"
version = "0.1.1"
description = "A bidirectional Python code generator that converts between AsyncAPI 3.0 specifications and Python code (pure Python or FastAPI implementations)."
authors = [{ name = "Carlo Bertini [WaYdotNET]", email = "waydotnet@gmail.com" }]
readme = "README.md"
requires-python = ">=3.10"

dependencies = [
    "black>=25.1.0",
    "pyyaml>=6.0.2",

    "typer>=0.15.2",
    "yamllint>=1.35.1",
]

[dependency-groups]
dev = [
    "coverage>=7.6.12",
    "mypy>=1.15.0",
    "ruff>=0.9.9",
    "pytest>=8.3.5",
    "types-pyyaml>=6.0.12.20241230",
    "pytest-cov>=6.0.0",
]

[project.scripts]
zen-generator = "zen_generator.cli"

[tool.ruff]
line-length = 120
target-version = "py312"

[tool.ruff.lint]
exclude = [
    ".venv",
    "__pycache__",
    "tests/**",
]
ignore = [
    "B018", # Found useless expression. Either assign it to a variable or remove it.
    "B026", # Star-arg unpacking after a keyword argument is strongly discouraged
    "B904", # Within an except clause, raise exceptions with raise ... from err or raise ... from None to
    # distinguish them from errors in exception handling.
    "B905", # zip() without an explicit strict= parameter set. strict=True causes the resulting iterator
    # to raise a ValueError if the arguments are exhausted at differing lengths.
    "E722", # Do not use bare except, specify exception instead
]
# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = [
    "I", # isort
    "F", # pyflakes
]
unfixable = []

select = [
    "B", # flake8-bugbear
    "C9", # mccabe
    "E", # pycodestyle
    "F", # pyflakes
    "I", # isort
    "Q", # flake8-quotes
    "W", # pycodestyle
]

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
testpaths = ["tests"]
