from typing import List, Union, overload, Dict, Optional


class Node:
    def __init__(self, ident: str, instrument_list: List[str], values: List[float]) -> None: ...
    def set_value(self, new_value: List[float]) -> None: ...
    def set_instrument_list(self, instrument_list: List[str]) -> None: ...
    def reset(self) -> None: ...
    def eval(self) -> List[float]: ...
    
    @overload
    def __add__(self, other: Union[Node, float, int]) -> Node: ...
    
    @overload
    def __radd__(self, other: Union[Node, float, int]) -> Node: ...
    
    @overload 
    def __sub__(self, other: Union[Node, float, int]) -> Node: ...
    
    @overload
    def __mul__(self, other: Union[Node, float, int]) -> Node: ...
    
    @overload
    def __rmul__(self, other: Union[Node, float, int]) -> Node: ...
    
    @overload
    def __truediv__(self, other: Union[Node, float, int]) -> Node: ...
    
    @overload
    def __rtruediv__(self, other: Union[Node, float, int]) -> Node: ...
    
    @overload
    def __lt__(self, other: Union[Node, float, int]) -> Node: ...
    
    @overload
    def __le__(self, other: Union[Node, float, int]) -> Node: ...
    
    @overload
    def __gt__(self, other: Union[Node, float, int]) -> Node: ...
    
    @overload
    def __ge__(self, other: Union[Node, float, int]) -> Node: ...
    
    @overload
    def __eq__(self, other: Union[Node, float, int]) -> Node: ...
    
    @overload
    def __ne__(self, other: Union[Node, float, int]) -> Node: ...
    
    @overload
    def __and__(self, other: Node) -> Node: ...
    
    @overload
    def __or__(self, other: Node) -> Node: ...
    
    def log(self) -> Node: ...
    def log1p(self) -> Node: ...
    def abs(self) -> Node: ...
    def sign(self) -> Node: ...
    def pow(self, n: int) -> Node: ...
    def csdemean(self) -> Node: ...
    def csstd(self) -> Node: ...
    def replace(self, to_replace: float, value: float) -> Node: ...
    def fillna(self, y: Union[Node, float]) -> Node: ...
    def filter(self, cond: Node, other: Optional[Node] = None) -> Node: ...
    def clip(self, lower: Union[Node, float], upper: Union[Node, float]) -> Node: ...
    def ffill(self) -> Node: ...
    def cumsum(self) -> Node: ...
    def cumprod(self) -> Node: ...
    def rolling_sum(self, window: int, min_periods: int = 1, calc_freq: int = 1) -> Node: ...
    def rolling_mean(self, window: int, min_periods: int = 1, calc_freq: int = 1) -> Node: ...
    def rolling_max(self, window: int, min_periods: int = 1) -> Node: ...
    def rolling_min(self, window: int, min_periods: int = 1) -> Node: ...
    def rolling_argmax(self, window: int, min_periods: int = 1) -> Node: ...
    def rolling_argmin(self, window: int, min_periods: int = 1) -> Node: ...
    def rolling_skew(self, window: int, min_periods: int = 1) -> Node: ...
    def rolling_kurt(self, window: int, min_periods: int = 1) -> Node: ...
    def rolling_rank(self, window: int, min_periods: int = 1) -> Node: ...
    def rolling_std(self, window: int, min_periods: int = 2, ddof: int = 1, calc_freq: int = 1) -> Node: ...
    def rolling_var(self, window: int, min_periods: int = 1, ddof: int = 1) -> Node: ...
    def rolling_corr(self, other: Node, window: int, min_periods: int = 1, ddof: int = 1) -> Node: ...
    def rolling_cov(self, other: Node, window: int, min_periods: int = 1, ddof: int = 1) -> Node: ...
    def expanding_max(self, reset_freq: int) -> Node: ...
    def expanding_min(self, reset_freq: int) -> Node: ...
    def shift(self, periods: int) -> Node: ...
    def rolling_ols(self, other: Node, window: int, min_periods: int) -> Node: ...
    def rolling_residual(self, other: Node, window: int, min_periods: int) -> Node: ...


class Ferrari:
    factor_nodes: Dict[str, Node]
    max_factor_lookback_count: int
    factor_lookback_count: Dict[str, int]
    
    def __init__(self, factor_nodes: Dict[str, Node], n_threads: int) -> None: ...
    
    def update_factor_list(self, current_lookback: int, data_chunk_size: int) -> None: ...
    
    def compute(self) -> Dict[str, List[float]]: ...
    
    def get_factor_lookback_count(self) -> Dict[str, int]: ...
    
    def get_factor_list(self) -> List[str]: ...
    
    def restore(self, cache_dir: str) -> None: ...
    
    def cache(self, cache_dir: str) -> None: ...


def rolling_rank(x: Node, window: int, min_periods: int = 4) -> Node: ...
def log(x: Node) -> Node: ...
def log1p(x: Node) -> Node: ...
def abs(x: Node) -> Node: ...
def sign(x: Node) -> Node: ...
def pow(x: Node, n: int) -> Node: ...
def csdemean(x: Node) -> Node: ...
def csstd(x: Node) -> Node: ...
def replace(x: Node, to_replace: float, value: float) -> Node: ...
def fillna(x: Node, y: Union[Node, float]) -> Node: ...
def filter(x: Node, cond: Node, other: Node) -> Node: ...
def clip(x: Node, lower: Union[Node, float], upper: Union[Node, float]) -> Node: ...
def ffill(x: Node) -> Node: ...
def cumsum(x: Node) -> Node: ...
def cumprod(x: Node) -> Node: ...
def rolling_sum(x: Node, window: int, min_periods: int = 1, calc_freq: int = 1) -> Node: ...
def rolling_mean(x: Node, window: int, min_periods: int = 1, calc_freq: int = 1) -> Node: ...
def rolling_max(x: Node, window: int, min_periods: int = 1) -> Node: ...
def rolling_min(x: Node, window: int, min_periods: int = 1) -> Node: ...
def rolling_argmax(x: Node, window: int, min_periods: int = 1) -> Node: ...
def rolling_argmin(x: Node, window: int, min_periods: int = 1) -> Node: ...
def rolling_skew(x: Node, window: int, min_periods: int = 1) -> Node: ...
def rolling_kurt(x: Node, window: int, min_periods: int = 1) -> Node: ...
def rolling_rank(x: Node, window: int, min_periods: int = 4) -> Node: ...
def rolling_std(x: Node, window: int, min_periods: int = 2, ddof: int = 1, calc_freq: int = 1) -> Node: ...
def rolling_var(x: Node, window: int, min_periods: int = 4, ddof: int = 1) -> Node: ...
def rolling_corr(x: Node, other: Node, window: int, min_periods: int = 4, ddof: int = 1) -> Node: ...
def rolling_cov(x: Node, other: Node, window: int, min_periods: int = 4, ddof: int = 1) -> Node: ...
def expanding_max(x: Node, reset_freq: int = 48) -> Node: ...
def expanding_min(x: Node, reset_freq: int = 48) -> Node: ...
def shift(x: Node, periods: int) -> Node: ...
def rolling_ols(x: Node, other: Node, window: int, min_periods: int = 4) -> Node: ...
def rolling_residual(x: Node, other: Node, window: int, min_periods: int = 4) -> Node: ...
