from typing import Any, TypeVar

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..types import UNSET, Unset

from typing import Union


T = TypeVar("T", bound="SummariseTextNewResponse")


@_attrs_define
class SummariseTextNewResponse:
    """
    Attributes:
        summary (Union[Unset, str]): The summary generated by the AI for the provided input text Example: The text
            explains that if the variable `requestBody['instruction']` is an empty string, null, or undefined, then the
            condition `if(requestBody['instruction'])` will be false. In JavaScript, these values are considered falsy,
            meaning that they are evaluated as false in boolean expressions. Therefore, if the `requestBody['instruction']`
            is any of these falsy values, the code block within the if statement will not be executed..
        detect_input_language (Union[Unset, bool]): Detect the language input and either return the summary in the same
            language or a different language
    """

    summary: Union[Unset, str] = UNSET
    detect_input_language: Union[Unset, bool] = UNSET
    additional_properties: dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> dict[str, Any]:
        summary = self.summary

        detect_input_language = self.detect_input_language

        field_dict: dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update({})
        if summary is not UNSET:
            field_dict["summary"] = summary
        if detect_input_language is not UNSET:
            field_dict["detectInputLanguage"] = detect_input_language

        return field_dict

    @classmethod
    def from_dict(cls: type[T], src_dict: dict[str, Any]) -> T:
        d = src_dict.copy()
        summary = d.pop("summary", UNSET)

        detect_input_language = d.pop("detectInputLanguage", UNSET)

        summarise_text_new_response = cls(
            summary=summary,
            detect_input_language=detect_input_language,
        )

        summarise_text_new_response.additional_properties = d
        return summarise_text_new_response

    @property
    def additional_keys(self) -> list[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
