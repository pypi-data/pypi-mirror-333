from collections.abc import Callable


def get_ref_for_elbv2_target_group(
    *, resource_name: str, resource: dict, account_id: str, region: str
) -> str:
    return f"arn:aws:elasticloadbalancing:${region}:${account_id}:targetgroup/${resource_name}/1234"


def get_ref_for_param_store(
    *, resource_name: str, resource: dict, account_id: str, region: str
) -> str:
    return resource["Properties"].get("Name", f"autogenerated-{resource_name}")


class ResourceRefRegistry:

    def __init__(self):
        self.registry = {}
        self.register_resource_ref(
            "AWS::ElasticLoadBalancingV2::TargetGroup", get_ref_for_elbv2_target_group
        )
        self.register_resource_ref("AWS::SSM::Parameter", get_ref_for_param_store)

    def register_resource_ref(self, resource_type: str, func: Callable) -> None:
        self.registry[resource_type] = func

    def evaluate_ref(
        self, *, resource_name: str, resource: dict, account_id: str, region: str
    ) -> str:
        resource_type = resource["Type"]
        if resource_type in self.registry:
            return self.registry[resource_type](
                resource_name=resource_name,
                resource=resource,
                account_id=account_id,
                region=region,
            )
        return resource_name
