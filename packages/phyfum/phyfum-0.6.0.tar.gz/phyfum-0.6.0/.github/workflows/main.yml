name: PHYFUM CI/CD Pipeline

on:
  push:
    tags:
      - 'v*'  # Run workflow on version tags (v1.0.0, etc)
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:  # Allow manual trigger
    inputs:
      run_publish:
        description: 'Publish to PyPI and Docker Hub'
        required: true
        default: false
        type: boolean

permissions:
  id-token: write
  contents: read

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    container:
      image: pbousquets/phyfum_base:latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip 
        pip install hatch
    - name: Test package
      run: hatch run test
  build-and-publish:
    name: Build & Publish
    needs: test  # Only run if tests pass
    runs-on: ubuntu-latest
    # Only run on tag or when manually requested with run_publish=true
    if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.run_publish == 'true')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install hatch build
    
    - name: Build package
      run: hatch build
    
    - name: Get version from tag or file
      id: get_version
      run: |
        # Try to get version from tag if available
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION=$(python3 -c "exec(open('src/phyfum/__about__.py').read()); print(__version__)")
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          pbousquets/phyfum:latest
          pbousquets/phyfum:${{ steps.get_version.outputs.VERSION }}
        cache-from: type=registry,ref=pbousquets/phyfum:buildcache
        cache-to: type=registry,ref=pbousquets/phyfum:buildcache,mode=max