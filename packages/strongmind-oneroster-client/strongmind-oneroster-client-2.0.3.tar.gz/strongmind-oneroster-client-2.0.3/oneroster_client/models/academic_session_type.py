# coding: utf-8

"""
    OneRoster OpenAPI (JSON) Definition

    The OneRoster service binding is available in WSDL/XSD and REST/JSON. The model is based upon the IMS PSM modelling approach.  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: platform@strongmind.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from oneroster_client.models.base_type import BaseType  # noqa: F401,E501

class AcademicSessionType(BaseType):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'start_date': 'date',
        'end_date': 'date',
        'type': 'str',
        'parent': 'GUIDRefType',
        'children': 'list[GUIDRefType]',
        'school_year': 'str'
    }
    if hasattr(BaseType, "swagger_types"):
        swagger_types.update(BaseType.swagger_types)

    attribute_map = {
        'title': 'title',
        'start_date': 'startDate',
        'end_date': 'endDate',
        'type': 'type',
        'parent': 'parent',
        'children': 'children',
        'school_year': 'schoolYear'
    }
    if hasattr(BaseType, "attribute_map"):
        attribute_map.update(BaseType.attribute_map)

    def __init__(self, title=None, start_date=None, end_date=None, type=None, parent=None, children=None, school_year=None, *args, **kwargs):  # noqa: E501
        """AcademicSessionType - a model defined in Swagger"""  # noqa: E501
        self._title = None
        self._start_date = None
        self._end_date = None
        self._type = None
        self._parent = None
        self._children = None
        self._school_year = None
        self.discriminator = None
        self.title = title
        self.start_date = start_date
        self.end_date = end_date
        self.type = type
        if parent is not None:
            self.parent = parent
        if children is not None:
            self.children = children
        self.school_year = school_year
        BaseType.__init__(self, *args, **kwargs)

    @property
    def title(self):
        """Gets the title of this AcademicSessionType.  # noqa: E501

        Model Primitive Datatype = NormalizedString  # noqa: E501

        :return: The title of this AcademicSessionType.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AcademicSessionType.

        Model Primitive Datatype = NormalizedString  # noqa: E501

        :param title: The title of this AcademicSessionType.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def start_date(self):
        """Gets the start_date of this AcademicSessionType.  # noqa: E501

        Model Primitive Datatype = Date  # noqa: E501

        :return: The start_date of this AcademicSessionType.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this AcademicSessionType.

        Model Primitive Datatype = Date  # noqa: E501

        :param start_date: The start_date of this AcademicSessionType.  # noqa: E501
        :type: date
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this AcademicSessionType.  # noqa: E501

        Model Primitive Datatype = Date  # noqa: E501

        :return: The end_date of this AcademicSessionType.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this AcademicSessionType.

        Model Primitive Datatype = Date  # noqa: E501

        :param end_date: The end_date of this AcademicSessionType.  # noqa: E501
        :type: date
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")  # noqa: E501

        self._end_date = end_date

    @property
    def type(self):
        """Gets the type of this AcademicSessionType.  # noqa: E501


        :return: The type of this AcademicSessionType.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AcademicSessionType.


        :param type: The type of this AcademicSessionType.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["gradingPeriod", "semester", "schoolYear", "term"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def parent(self):
        """Gets the parent of this AcademicSessionType.  # noqa: E501


        :return: The parent of this AcademicSessionType.  # noqa: E501
        :rtype: GUIDRefType
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this AcademicSessionType.


        :param parent: The parent of this AcademicSessionType.  # noqa: E501
        :type: GUIDRefType
        """

        self._parent = parent

    @property
    def children(self):
        """Gets the children of this AcademicSessionType.  # noqa: E501


        :return: The children of this AcademicSessionType.  # noqa: E501
        :rtype: list[GUIDRefType]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this AcademicSessionType.


        :param children: The children of this AcademicSessionType.  # noqa: E501
        :type: list[GUIDRefType]
        """

        self._children = children

    @property
    def school_year(self):
        """Gets the school_year of this AcademicSessionType.  # noqa: E501

        Model Primitive Datatype = NormalizedString  # noqa: E501

        :return: The school_year of this AcademicSessionType.  # noqa: E501
        :rtype: str
        """
        return self._school_year

    @school_year.setter
    def school_year(self, school_year):
        """Sets the school_year of this AcademicSessionType.

        Model Primitive Datatype = NormalizedString  # noqa: E501

        :param school_year: The school_year of this AcademicSessionType.  # noqa: E501
        :type: str
        """
        if school_year is None:
            raise ValueError("Invalid value for `school_year`, must not be `None`")  # noqa: E501

        self._school_year = school_year

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AcademicSessionType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AcademicSessionType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
