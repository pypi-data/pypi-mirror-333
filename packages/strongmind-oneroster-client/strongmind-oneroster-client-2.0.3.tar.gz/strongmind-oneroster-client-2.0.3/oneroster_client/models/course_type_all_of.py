# coding: utf-8

"""
    OneRoster OpenAPI (JSON) Definition

    The OneRoster service binding is available in WSDL/XSD and REST/JSON. The model is based upon the IMS PSM modelling approach.  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: platform@strongmind.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CourseTypeAllOf(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'school_year': 'GUIDRefType',
        'course_code': 'str',
        'grades': 'list[str]',
        'subjects': 'list[str]',
        'org': 'GUIDRefType',
        'subject_codes': 'list[str]',
        'resources': 'list[GUIDRefType]'
    }

    attribute_map = {
        'title': 'title',
        'school_year': 'schoolYear',
        'course_code': 'courseCode',
        'grades': 'grades',
        'subjects': 'subjects',
        'org': 'org',
        'subject_codes': 'subjectCodes',
        'resources': 'resources'
    }

    def __init__(self, title=None, school_year=None, course_code=None, grades=None, subjects=None, org=None, subject_codes=None, resources=None):  # noqa: E501
        """CourseTypeAllOf - a model defined in Swagger"""  # noqa: E501
        self._title = None
        self._school_year = None
        self._course_code = None
        self._grades = None
        self._subjects = None
        self._org = None
        self._subject_codes = None
        self._resources = None
        self.discriminator = None
        self.title = title
        if school_year is not None:
            self.school_year = school_year
        self.course_code = course_code
        if grades is not None:
            self.grades = grades
        if subjects is not None:
            self.subjects = subjects
        if org is not None:
            self.org = org
        if subject_codes is not None:
            self.subject_codes = subject_codes
        if resources is not None:
            self.resources = resources

    @property
    def title(self):
        """Gets the title of this CourseTypeAllOf.  # noqa: E501

        Model Primitive Datatype = NormalizedString  # noqa: E501

        :return: The title of this CourseTypeAllOf.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CourseTypeAllOf.

        Model Primitive Datatype = NormalizedString  # noqa: E501

        :param title: The title of this CourseTypeAllOf.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def school_year(self):
        """Gets the school_year of this CourseTypeAllOf.  # noqa: E501


        :return: The school_year of this CourseTypeAllOf.  # noqa: E501
        :rtype: GUIDRefType
        """
        return self._school_year

    @school_year.setter
    def school_year(self, school_year):
        """Sets the school_year of this CourseTypeAllOf.


        :param school_year: The school_year of this CourseTypeAllOf.  # noqa: E501
        :type: GUIDRefType
        """

        self._school_year = school_year

    @property
    def course_code(self):
        """Gets the course_code of this CourseTypeAllOf.  # noqa: E501

        Model Primitive Datatype = NormalizedString  # noqa: E501

        :return: The course_code of this CourseTypeAllOf.  # noqa: E501
        :rtype: str
        """
        return self._course_code

    @course_code.setter
    def course_code(self, course_code):
        """Sets the course_code of this CourseTypeAllOf.

        Model Primitive Datatype = NormalizedString  # noqa: E501

        :param course_code: The course_code of this CourseTypeAllOf.  # noqa: E501
        :type: str
        """

        self._course_code = course_code

    @property
    def grades(self):
        """Gets the grades of this CourseTypeAllOf.  # noqa: E501

        Model Primitive Datatype = NormalizedString  # noqa: E501

        :return: The grades of this CourseTypeAllOf.  # noqa: E501
        :rtype: list[str]
        """
        return self._grades

    @grades.setter
    def grades(self, grades):
        """Sets the grades of this CourseTypeAllOf.

        Model Primitive Datatype = NormalizedString  # noqa: E501

        :param grades: The grades of this CourseTypeAllOf.  # noqa: E501
        :type: list[str]
        """

        self._grades = grades

    @property
    def subjects(self):
        """Gets the subjects of this CourseTypeAllOf.  # noqa: E501

        Model Primitive Datatype = NormalizedString  # noqa: E501

        :return: The subjects of this CourseTypeAllOf.  # noqa: E501
        :rtype: list[str]
        """
        return self._subjects

    @subjects.setter
    def subjects(self, subjects):
        """Sets the subjects of this CourseTypeAllOf.

        Model Primitive Datatype = NormalizedString  # noqa: E501

        :param subjects: The subjects of this CourseTypeAllOf.  # noqa: E501
        :type: list[str]
        """

        self._subjects = subjects

    @property
    def org(self):
        """Gets the org of this CourseTypeAllOf.  # noqa: E501


        :return: The org of this CourseTypeAllOf.  # noqa: E501
        :rtype: GUIDRefType
        """
        return self._org

    @org.setter
    def org(self, org):
        """Sets the org of this CourseTypeAllOf.


        :param org: The org of this CourseTypeAllOf.  # noqa: E501
        :type: GUIDRefType
        """

        self._org = org

    @property
    def subject_codes(self):
        """Gets the subject_codes of this CourseTypeAllOf.  # noqa: E501

        Model Primitive Datatype = NormalizedString  # noqa: E501

        :return: The subject_codes of this CourseTypeAllOf.  # noqa: E501
        :rtype: list[str]
        """
        return self._subject_codes

    @subject_codes.setter
    def subject_codes(self, subject_codes):
        """Sets the subject_codes of this CourseTypeAllOf.

        Model Primitive Datatype = NormalizedString  # noqa: E501

        :param subject_codes: The subject_codes of this CourseTypeAllOf.  # noqa: E501
        :type: list[str]
        """

        self._subject_codes = subject_codes

    @property
    def resources(self):
        """Gets the resources of this CourseTypeAllOf.  # noqa: E501


        :return: The resources of this CourseTypeAllOf.  # noqa: E501
        :rtype: list[GUIDRefType]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this CourseTypeAllOf.


        :param resources: The resources of this CourseTypeAllOf.  # noqa: E501
        :type: list[GUIDRefType]
        """

        self._resources = resources

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CourseTypeAllOf, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CourseTypeAllOf):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
