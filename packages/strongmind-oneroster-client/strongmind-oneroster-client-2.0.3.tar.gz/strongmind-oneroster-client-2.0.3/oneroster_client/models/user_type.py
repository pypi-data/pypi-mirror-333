# coding: utf-8

"""
    OneRoster OpenAPI (JSON) Definition

    The OneRoster service binding is available in WSDL/XSD and REST/JSON. The model is based upon the IMS PSM modelling approach.  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: platform@strongmind.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from oneroster_client.models.base_type import BaseType  # noqa: F401,E501

class UserType(BaseType):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'username': 'str',
        'user_ids': 'list[UserIdType]',
        'enabled_user': 'bool',
        'given_name': 'str',
        'family_name': 'str',
        'middle_name': 'str',
        'role': 'str',
        'identifier': 'str',
        'email': 'str',
        'sms': 'str',
        'phone': 'str',
        'agents': 'list[GUIDRefType]',
        'orgs': 'list[GUIDRefType]',
        'grades': 'list[str]',
        'password': 'str'
    }
    if hasattr(BaseType, "swagger_types"):
        swagger_types.update(BaseType.swagger_types)

    attribute_map = {
        'username': 'username',
        'user_ids': 'userIds',
        'enabled_user': 'enabledUser',
        'given_name': 'givenName',
        'family_name': 'familyName',
        'middle_name': 'middleName',
        'role': 'role',
        'identifier': 'identifier',
        'email': 'email',
        'sms': 'sms',
        'phone': 'phone',
        'agents': 'agents',
        'orgs': 'orgs',
        'grades': 'grades',
        'password': 'password'
    }
    if hasattr(BaseType, "attribute_map"):
        attribute_map.update(BaseType.attribute_map)

    def __init__(self, username=None, user_ids=None, enabled_user=None, given_name=None, family_name=None, middle_name=None, role=None, identifier=None, email=None, sms=None, phone=None, agents=None, orgs=None, grades=None, password=None, *args, **kwargs):  # noqa: E501
        """UserType - a model defined in Swagger"""  # noqa: E501
        self._username = None
        self._user_ids = None
        self._enabled_user = None
        self._given_name = None
        self._family_name = None
        self._middle_name = None
        self._role = None
        self._identifier = None
        self._email = None
        self._sms = None
        self._phone = None
        self._agents = None
        self._orgs = None
        self._grades = None
        self._password = None
        self.discriminator = None
        self.username = username
        if user_ids is not None:
            self.user_ids = user_ids
        if enabled_user is not None:
            self.enabled_user = enabled_user
        self.given_name = given_name
        self.family_name = family_name
        if middle_name is not None:
            self.middle_name = middle_name
        self.role = role
        if identifier is not None:
            self.identifier = identifier
        if email is not None:
            self.email = email
        if sms is not None:
            self.sms = sms
        if phone is not None:
            self.phone = phone
        if agents is not None:
            self.agents = agents
        self.orgs = orgs
        if grades is not None:
            self.grades = grades
        if password is not None:
            self.password = password
        BaseType.__init__(self, *args, **kwargs)

    @property
    def username(self):
        """Gets the username of this UserType.  # noqa: E501

        Model Primitive Datatype = NormalizedString  # noqa: E501

        :return: The username of this UserType.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UserType.

        Model Primitive Datatype = NormalizedString  # noqa: E501

        :param username: The username of this UserType.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def user_ids(self):
        """Gets the user_ids of this UserType.  # noqa: E501


        :return: The user_ids of this UserType.  # noqa: E501
        :rtype: list[UserIdType]
        """
        return self._user_ids

    @user_ids.setter
    def user_ids(self, user_ids):
        """Sets the user_ids of this UserType.


        :param user_ids: The user_ids of this UserType.  # noqa: E501
        :type: list[UserIdType]
        """

        self._user_ids = user_ids

    @property
    def enabled_user(self):
        """Gets the enabled_user of this UserType.  # noqa: E501

        Model Primitive Datatype = Boolean  # noqa: E501

        :return: The enabled_user of this UserType.  # noqa: E501
        :rtype: bool
        """
        return self._enabled_user

    @enabled_user.setter
    def enabled_user(self, enabled_user):
        """Sets the enabled_user of this UserType.

        Model Primitive Datatype = Boolean  # noqa: E501

        :param enabled_user: The enabled_user of this UserType.  # noqa: E501
        :type: bool
        """

        self._enabled_user = enabled_user

    @property
    def given_name(self):
        """Gets the given_name of this UserType.  # noqa: E501

        Model Primitive Datatype = NormalizedString  # noqa: E501

        :return: The given_name of this UserType.  # noqa: E501
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this UserType.

        Model Primitive Datatype = NormalizedString  # noqa: E501

        :param given_name: The given_name of this UserType.  # noqa: E501
        :type: str
        """
        if given_name is None:
            raise ValueError("Invalid value for `given_name`, must not be `None`")  # noqa: E501

        self._given_name = given_name

    @property
    def family_name(self):
        """Gets the family_name of this UserType.  # noqa: E501

        Model Primitive Datatype = NormalizedString  # noqa: E501

        :return: The family_name of this UserType.  # noqa: E501
        :rtype: str
        """
        return self._family_name

    @family_name.setter
    def family_name(self, family_name):
        """Sets the family_name of this UserType.

        Model Primitive Datatype = NormalizedString  # noqa: E501

        :param family_name: The family_name of this UserType.  # noqa: E501
        :type: str
        """
        if family_name is None:
            raise ValueError("Invalid value for `family_name`, must not be `None`")  # noqa: E501

        self._family_name = family_name

    @property
    def middle_name(self):
        """Gets the middle_name of this UserType.  # noqa: E501

        Model Primitive Datatype = NormalizedString  # noqa: E501

        :return: The middle_name of this UserType.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this UserType.

        Model Primitive Datatype = NormalizedString  # noqa: E501

        :param middle_name: The middle_name of this UserType.  # noqa: E501
        :type: str
        """

        self._middle_name = middle_name

    @property
    def role(self):
        """Gets the role of this UserType.  # noqa: E501


        :return: The role of this UserType.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this UserType.


        :param role: The role of this UserType.  # noqa: E501
        :type: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")  # noqa: E501
        allowed_values = ["administrator", "aide", "guardian", "parent", "proctor", "relative", "student", "teacher"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"  # noqa: E501
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def identifier(self):
        """Gets the identifier of this UserType.  # noqa: E501

        ...tbd (Class description)...  # noqa: E501

        :return: The identifier of this UserType.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this UserType.

        ...tbd (Class description)...  # noqa: E501

        :param identifier: The identifier of this UserType.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def email(self):
        """Gets the email of this UserType.  # noqa: E501

        Model Primitive Datatype = NormalizedString  # noqa: E501

        :return: The email of this UserType.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserType.

        Model Primitive Datatype = NormalizedString  # noqa: E501

        :param email: The email of this UserType.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def sms(self):
        """Gets the sms of this UserType.  # noqa: E501

        Model Primitive Datatype = NormalizedString  # noqa: E501

        :return: The sms of this UserType.  # noqa: E501
        :rtype: str
        """
        return self._sms

    @sms.setter
    def sms(self, sms):
        """Sets the sms of this UserType.

        Model Primitive Datatype = NormalizedString  # noqa: E501

        :param sms: The sms of this UserType.  # noqa: E501
        :type: str
        """

        self._sms = sms

    @property
    def phone(self):
        """Gets the phone of this UserType.  # noqa: E501

        Model Primitive Datatype = NormalizedString  # noqa: E501

        :return: The phone of this UserType.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this UserType.

        Model Primitive Datatype = NormalizedString  # noqa: E501

        :param phone: The phone of this UserType.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def agents(self):
        """Gets the agents of this UserType.  # noqa: E501


        :return: The agents of this UserType.  # noqa: E501
        :rtype: list[GUIDRefType]
        """
        return self._agents

    @agents.setter
    def agents(self, agents):
        """Sets the agents of this UserType.


        :param agents: The agents of this UserType.  # noqa: E501
        :type: list[GUIDRefType]
        """

        self._agents = agents

    @property
    def orgs(self):
        """Gets the orgs of this UserType.  # noqa: E501


        :return: The orgs of this UserType.  # noqa: E501
        :rtype: list[GUIDRefType]
        """
        return self._orgs

    @orgs.setter
    def orgs(self, orgs):
        """Sets the orgs of this UserType.


        :param orgs: The orgs of this UserType.  # noqa: E501
        :type: list[GUIDRefType]
        """
        if orgs is None:
            raise ValueError("Invalid value for `orgs`, must not be `None`")  # noqa: E501

        self._orgs = orgs

    @property
    def grades(self):
        """Gets the grades of this UserType.  # noqa: E501

        Model Primitive Datatype = NormalizedString  # noqa: E501

        :return: The grades of this UserType.  # noqa: E501
        :rtype: list[str]
        """
        return self._grades

    @grades.setter
    def grades(self, grades):
        """Sets the grades of this UserType.

        Model Primitive Datatype = NormalizedString  # noqa: E501

        :param grades: The grades of this UserType.  # noqa: E501
        :type: list[str]
        """

        self._grades = grades

    @property
    def password(self):
        """Gets the password of this UserType.  # noqa: E501

        Model Primitive Datatype = String  # noqa: E501

        :return: The password of this UserType.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UserType.

        Model Primitive Datatype = String  # noqa: E501

        :param password: The password of this UserType.  # noqa: E501
        :type: str
        """

        self._password = password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
