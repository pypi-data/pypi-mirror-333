# coding: utf-8

"""
    OneRoster OpenAPI (JSON) Definition

    The OneRoster service binding is available in WSDL/XSD and REST/JSON. The model is based upon the IMS PSM modelling approach.  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: platform@strongmind.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResourceTypeAllOf(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'role': 'str',
        'importance': 'str',
        'vendor_resource_id': 'str',
        'vendor_id': 'str',
        'application_id': 'str'
    }

    attribute_map = {
        'title': 'title',
        'role': 'role',
        'importance': 'importance',
        'vendor_resource_id': 'vendorResourceId',
        'vendor_id': 'vendorId',
        'application_id': 'applicationId'
    }

    def __init__(self, title=None, role=None, importance=None, vendor_resource_id=None, vendor_id=None, application_id=None):  # noqa: E501
        """ResourceTypeAllOf - a model defined in Swagger"""  # noqa: E501
        self._title = None
        self._role = None
        self._importance = None
        self._vendor_resource_id = None
        self._vendor_id = None
        self._application_id = None
        self.discriminator = None
        if title is not None:
            self.title = title
        if role is not None:
            self.role = role
        if importance is not None:
            self.importance = importance
        self.vendor_resource_id = vendor_resource_id
        if vendor_id is not None:
            self.vendor_id = vendor_id
        if application_id is not None:
            self.application_id = application_id

    @property
    def title(self):
        """Gets the title of this ResourceTypeAllOf.  # noqa: E501

        Model Primitive Datatype = NormalizedString  # noqa: E501

        :return: The title of this ResourceTypeAllOf.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ResourceTypeAllOf.

        Model Primitive Datatype = NormalizedString  # noqa: E501

        :param title: The title of this ResourceTypeAllOf.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def role(self):
        """Gets the role of this ResourceTypeAllOf.  # noqa: E501


        :return: The role of this ResourceTypeAllOf.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this ResourceTypeAllOf.


        :param role: The role of this ResourceTypeAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = ["administrator", "aide", "guardian", "parent", "proctor", "relative", "student", "teacher"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"  # noqa: E501
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def importance(self):
        """Gets the importance of this ResourceTypeAllOf.  # noqa: E501


        :return: The importance of this ResourceTypeAllOf.  # noqa: E501
        :rtype: str
        """
        return self._importance

    @importance.setter
    def importance(self, importance):
        """Sets the importance of this ResourceTypeAllOf.


        :param importance: The importance of this ResourceTypeAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = ["primary", "secondary"]  # noqa: E501
        if importance not in allowed_values:
            raise ValueError(
                "Invalid value for `importance` ({0}), must be one of {1}"  # noqa: E501
                .format(importance, allowed_values)
            )

        self._importance = importance

    @property
    def vendor_resource_id(self):
        """Gets the vendor_resource_id of this ResourceTypeAllOf.  # noqa: E501

        ...tbd (Class description)...  # noqa: E501

        :return: The vendor_resource_id of this ResourceTypeAllOf.  # noqa: E501
        :rtype: str
        """
        return self._vendor_resource_id

    @vendor_resource_id.setter
    def vendor_resource_id(self, vendor_resource_id):
        """Sets the vendor_resource_id of this ResourceTypeAllOf.

        ...tbd (Class description)...  # noqa: E501

        :param vendor_resource_id: The vendor_resource_id of this ResourceTypeAllOf.  # noqa: E501
        :type: str
        """
        if vendor_resource_id is None:
            raise ValueError("Invalid value for `vendor_resource_id`, must not be `None`")  # noqa: E501

        self._vendor_resource_id = vendor_resource_id

    @property
    def vendor_id(self):
        """Gets the vendor_id of this ResourceTypeAllOf.  # noqa: E501

        ...tbd (Class description)...  # noqa: E501

        :return: The vendor_id of this ResourceTypeAllOf.  # noqa: E501
        :rtype: str
        """
        return self._vendor_id

    @vendor_id.setter
    def vendor_id(self, vendor_id):
        """Sets the vendor_id of this ResourceTypeAllOf.

        ...tbd (Class description)...  # noqa: E501

        :param vendor_id: The vendor_id of this ResourceTypeAllOf.  # noqa: E501
        :type: str
        """

        self._vendor_id = vendor_id

    @property
    def application_id(self):
        """Gets the application_id of this ResourceTypeAllOf.  # noqa: E501

        ...tbd (Class description)...  # noqa: E501

        :return: The application_id of this ResourceTypeAllOf.  # noqa: E501
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this ResourceTypeAllOf.

        ...tbd (Class description)...  # noqa: E501

        :param application_id: The application_id of this ResourceTypeAllOf.  # noqa: E501
        :type: str
        """

        self._application_id = application_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResourceTypeAllOf, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceTypeAllOf):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
