# coding: utf-8

"""
    OneRoster OpenAPI (JSON) Definition

    The OneRoster service binding is available in WSDL/XSD and REST/JSON. The model is based upon the IMS PSM modelling approach.  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: platform@strongmind.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ImsxStatusInfoType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'imsx_code_major': 'str',
        'imsx_severity': 'str',
        'imsx_message_ref_identifier': 'str',
        'imsx_operation_ref_identifier': 'list[str]',
        'imsx_description': 'str',
        'imsx_code_minor': 'ImsxCodeMinorType'
    }

    attribute_map = {
        'imsx_code_major': 'imsx_codeMajor',
        'imsx_severity': 'imsx_severity',
        'imsx_message_ref_identifier': 'imsx_messageRefIdentifier',
        'imsx_operation_ref_identifier': 'imsx_operationRefIdentifier',
        'imsx_description': 'imsx_description',
        'imsx_code_minor': 'imsx_CodeMinor'
    }

    def __init__(self, imsx_code_major=None, imsx_severity=None, imsx_message_ref_identifier=None, imsx_operation_ref_identifier=None, imsx_description=None, imsx_code_minor=None):  # noqa: E501
        """ImsxStatusInfoType - a model defined in Swagger"""  # noqa: E501
        self._imsx_code_major = None
        self._imsx_severity = None
        self._imsx_message_ref_identifier = None
        self._imsx_operation_ref_identifier = None
        self._imsx_description = None
        self._imsx_code_minor = None
        self.discriminator = None
        self.imsx_code_major = imsx_code_major
        self.imsx_severity = imsx_severity
        self.imsx_message_ref_identifier = imsx_message_ref_identifier
        if imsx_operation_ref_identifier is not None:
            self.imsx_operation_ref_identifier = imsx_operation_ref_identifier
        if imsx_description is not None:
            self.imsx_description = imsx_description
        if imsx_code_minor is not None:
            self.imsx_code_minor = imsx_code_minor

    @property
    def imsx_code_major(self):
        """Gets the imsx_code_major of this ImsxStatusInfoType.  # noqa: E501


        :return: The imsx_code_major of this ImsxStatusInfoType.  # noqa: E501
        :rtype: str
        """
        return self._imsx_code_major

    @imsx_code_major.setter
    def imsx_code_major(self, imsx_code_major):
        """Sets the imsx_code_major of this ImsxStatusInfoType.


        :param imsx_code_major: The imsx_code_major of this ImsxStatusInfoType.  # noqa: E501
        :type: str
        """
        if imsx_code_major is None:
            raise ValueError("Invalid value for `imsx_code_major`, must not be `None`")  # noqa: E501
        allowed_values = ["success", "processing", "failure", "unsupported"]  # noqa: E501
        if imsx_code_major not in allowed_values:
            raise ValueError(
                "Invalid value for `imsx_code_major` ({0}), must be one of {1}"  # noqa: E501
                .format(imsx_code_major, allowed_values)
            )

        self._imsx_code_major = imsx_code_major

    @property
    def imsx_severity(self):
        """Gets the imsx_severity of this ImsxStatusInfoType.  # noqa: E501


        :return: The imsx_severity of this ImsxStatusInfoType.  # noqa: E501
        :rtype: str
        """
        return self._imsx_severity

    @imsx_severity.setter
    def imsx_severity(self, imsx_severity):
        """Sets the imsx_severity of this ImsxStatusInfoType.


        :param imsx_severity: The imsx_severity of this ImsxStatusInfoType.  # noqa: E501
        :type: str
        """
        if imsx_severity is None:
            raise ValueError("Invalid value for `imsx_severity`, must not be `None`")  # noqa: E501
        allowed_values = ["status", "warning", "error"]  # noqa: E501
        if imsx_severity not in allowed_values:
            raise ValueError(
                "Invalid value for `imsx_severity` ({0}), must be one of {1}"  # noqa: E501
                .format(imsx_severity, allowed_values)
            )

        self._imsx_severity = imsx_severity

    @property
    def imsx_message_ref_identifier(self):
        """Gets the imsx_message_ref_identifier of this ImsxStatusInfoType.  # noqa: E501

        Model Primitive Datatype = NormalizedString  # noqa: E501

        :return: The imsx_message_ref_identifier of this ImsxStatusInfoType.  # noqa: E501
        :rtype: str
        """
        return self._imsx_message_ref_identifier

    @imsx_message_ref_identifier.setter
    def imsx_message_ref_identifier(self, imsx_message_ref_identifier):
        """Sets the imsx_message_ref_identifier of this ImsxStatusInfoType.

        Model Primitive Datatype = NormalizedString  # noqa: E501

        :param imsx_message_ref_identifier: The imsx_message_ref_identifier of this ImsxStatusInfoType.  # noqa: E501
        :type: str
        """
        if imsx_message_ref_identifier is None:
            raise ValueError("Invalid value for `imsx_message_ref_identifier`, must not be `None`")  # noqa: E501

        self._imsx_message_ref_identifier = imsx_message_ref_identifier

    @property
    def imsx_operation_ref_identifier(self):
        """Gets the imsx_operation_ref_identifier of this ImsxStatusInfoType.  # noqa: E501

        Model Primitive Datatype = NormalizedString  # noqa: E501

        :return: The imsx_operation_ref_identifier of this ImsxStatusInfoType.  # noqa: E501
        :rtype: list[str]
        """
        return self._imsx_operation_ref_identifier

    @imsx_operation_ref_identifier.setter
    def imsx_operation_ref_identifier(self, imsx_operation_ref_identifier):
        """Sets the imsx_operation_ref_identifier of this ImsxStatusInfoType.

        Model Primitive Datatype = NormalizedString  # noqa: E501

        :param imsx_operation_ref_identifier: The imsx_operation_ref_identifier of this ImsxStatusInfoType.  # noqa: E501
        :type: list[str]
        """

        self._imsx_operation_ref_identifier = imsx_operation_ref_identifier

    @property
    def imsx_description(self):
        """Gets the imsx_description of this ImsxStatusInfoType.  # noqa: E501

        Model Primitive Datatype = String  # noqa: E501

        :return: The imsx_description of this ImsxStatusInfoType.  # noqa: E501
        :rtype: str
        """
        return self._imsx_description

    @imsx_description.setter
    def imsx_description(self, imsx_description):
        """Sets the imsx_description of this ImsxStatusInfoType.

        Model Primitive Datatype = String  # noqa: E501

        :param imsx_description: The imsx_description of this ImsxStatusInfoType.  # noqa: E501
        :type: str
        """

        self._imsx_description = imsx_description

    @property
    def imsx_code_minor(self):
        """Gets the imsx_code_minor of this ImsxStatusInfoType.  # noqa: E501


        :return: The imsx_code_minor of this ImsxStatusInfoType.  # noqa: E501
        :rtype: ImsxCodeMinorType
        """
        return self._imsx_code_minor

    @imsx_code_minor.setter
    def imsx_code_minor(self, imsx_code_minor):
        """Sets the imsx_code_minor of this ImsxStatusInfoType.


        :param imsx_code_minor: The imsx_code_minor of this ImsxStatusInfoType.  # noqa: E501
        :type: ImsxCodeMinorType
        """

        self._imsx_code_minor = imsx_code_minor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImsxStatusInfoType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImsxStatusInfoType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
