# coding: utf-8

"""
    OneRoster OpenAPI (JSON) Definition

    The OneRoster service binding is available in WSDL/XSD and REST/JSON. The model is based upon the IMS PSM modelling approach.  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: platform@strongmind.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sourced_id': 'str',
        'status': 'str',
        'date_last_modified': 'datetime',
        'metadata': 'object'
    }

    attribute_map = {
        'sourced_id': 'sourcedId',
        'status': 'status',
        'date_last_modified': 'dateLastModified',
        'metadata': 'metadata'
    }

    def __init__(self, sourced_id=None, status=None, date_last_modified=None, metadata=None):  # noqa: E501
        """BaseType - a model defined in Swagger"""  # noqa: E501
        self._sourced_id = None
        self._status = None
        self._date_last_modified = None
        self._metadata = None
        self.discriminator = None
        self.sourced_id = sourced_id
        self.status = status
        self.date_last_modified = date_last_modified
        if metadata is not None:
            self.metadata = metadata

    @property
    def sourced_id(self):
        """Gets the sourced_id of this BaseType.  # noqa: E501

        ...tbd (Class description)...  # noqa: E501

        :return: The sourced_id of this BaseType.  # noqa: E501
        :rtype: str
        """
        return self._sourced_id

    @sourced_id.setter
    def sourced_id(self, sourced_id):
        """Sets the sourced_id of this BaseType.

        ...tbd (Class description)...  # noqa: E501

        :param sourced_id: The sourced_id of this BaseType.  # noqa: E501
        :type: str
        """
        if sourced_id is None:
            raise ValueError("Invalid value for `sourced_id`, must not be `None`")  # noqa: E501

        self._sourced_id = sourced_id

    @property
    def status(self):
        """Gets the status of this BaseType.  # noqa: E501


        :return: The status of this BaseType.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BaseType.


        :param status: The status of this BaseType.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["active", "tobedeleted"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def date_last_modified(self):
        """Gets the date_last_modified of this BaseType.  # noqa: E501

        Model Primitive Datatype = DateTime  # noqa: E501

        :return: The date_last_modified of this BaseType.  # noqa: E501
        :rtype: datetime
        """
        return self._date_last_modified

    @date_last_modified.setter
    def date_last_modified(self, date_last_modified):
        """Sets the date_last_modified of this BaseType.

        Model Primitive Datatype = DateTime  # noqa: E501

        :param date_last_modified: The date_last_modified of this BaseType.  # noqa: E501
        :type: datetime
        """
        if date_last_modified is None:
            raise ValueError("Invalid value for `date_last_modified`, must not be `None`")  # noqa: E501

        self._date_last_modified = date_last_modified

    @property
    def metadata(self):
        """Gets the metadata of this BaseType.  # noqa: E501

        ...tbd (Class description)...  # noqa: E501

        :return: The metadata of this BaseType.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this BaseType.

        ...tbd (Class description)...  # noqa: E501

        :param metadata: The metadata of this BaseType.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
