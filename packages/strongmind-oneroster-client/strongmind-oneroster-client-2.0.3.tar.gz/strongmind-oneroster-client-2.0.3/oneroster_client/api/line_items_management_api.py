# coding: utf-8

"""
    OneRoster OpenAPI (JSON) Definition

    The OneRoster service binding is available in WSDL/XSD and REST/JSON. The model is based upon the IMS PSM modelling approach.  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: lmattson@imsglobal.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from oneroster_client.api_client import ApiClient


class LineItemsManagementApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_line_item(self, sourced_id, **kwargs):  # noqa: E501
        """The REST delete request message for the deleteLineItem() API call.  # noqa: E501

        ...not supplied...  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_line_item(sourced_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sourced_id: ...tbd... (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_line_item_with_http_info(sourced_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_line_item_with_http_info(sourced_id, **kwargs)  # noqa: E501
            return data

    def delete_line_item_with_http_info(self, sourced_id, **kwargs):  # noqa: E501
        """The REST delete request message for the deleteLineItem() API call.  # noqa: E501

        ...not supplied...  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_line_item_with_http_info(sourced_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sourced_id: ...tbd... (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sourced_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_line_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sourced_id' is set
        if ('sourced_id' not in params or
                params['sourced_id'] is None):
            raise ValueError("Missing the required parameter `sourced_id` when calling `delete_line_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sourced_id' in params:
            path_params['sourcedId'] = params['sourced_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/lineItems/{sourcedId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_line_item(self, sourced_id, **kwargs):  # noqa: E501
        """The REST read request message for the getLineItem() API call.  # noqa: E501

        ...not supplied...  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_line_item(sourced_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sourced_id: ...tbd... (required)
        :return: SingleLineItemType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_line_item_with_http_info(sourced_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_line_item_with_http_info(sourced_id, **kwargs)  # noqa: E501
            return data

    def get_line_item_with_http_info(self, sourced_id, **kwargs):  # noqa: E501
        """The REST read request message for the getLineItem() API call.  # noqa: E501

        ...not supplied...  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_line_item_with_http_info(sourced_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sourced_id: ...tbd... (required)
        :return: SingleLineItemType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sourced_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_line_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sourced_id' is set
        if ('sourced_id' not in params or
                params['sourced_id'] is None):
            raise ValueError("Missing the required parameter `sourced_id` when calling `get_line_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sourced_id' in params:
            path_params['sourcedId'] = params['sourced_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/lineItems/{sourcedId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleLineItemType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_line_items(self, **kwargs):  # noqa: E501
        """The REST read request message for the getLineItems() API call.  # noqa: E501

        ...not supplied...  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_line_items(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: To define the download segmentation value i.e. the maximum number of records to be contained in the response.
        :param int offset: The number of the first record to be supplied in the segmented response message.
        :param str continuation_token: Allows the client to resume retrieving results from where the previous page left off
        :param str sort: Identifies the sort criteria to be used for the records in the response message. Use with the orderBy parameter.
        :param str order_by: The form of ordering for response to the sorted request i.e. ascending (asc) or descending (desc).
        :param str filter: The filtering rules to be applied when identifying the records to be supplied in the response message.
        :param list[str] fields: To identify the range of fields that should be supplied in the response message.
        :return: LineItemsType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_line_items_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_line_items_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_line_items_with_http_info(self, **kwargs):  # noqa: E501
        """The REST read request message for the getLineItems() API call.  # noqa: E501

        ...not supplied...  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_line_items_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: To define the download segmentation value i.e. the maximum number of records to be contained in the response.
        :param int offset: The number of the first record to be supplied in the segmented response message.
        :param str continuation_token: Allows the client to resume retrieving results from where the previous page left off
        :param str sort: Identifies the sort criteria to be used for the records in the response message. Use with the orderBy parameter.
        :param str order_by: The form of ordering for response to the sorted request i.e. ascending (asc) or descending (desc).
        :param str filter: The filtering rules to be applied when identifying the records to be supplied in the response message.
        :param list[str] fields: To identify the range of fields that should be supplied in the response message.
        :return: LineItemsType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset', 'continuation_token', 'sort', 'order_by', 'filter', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_line_items" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'continuation_token' in params:
            query_params.append(('continuationToken', params['continuation_token']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/lineItems', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LineItemsType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_line_items_for_class(self, class_sourced_id, **kwargs):  # noqa: E501
        """The REST read request message for the getLineItemsForClass() API call.  # noqa: E501

        ...not supplied...  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_line_items_for_class(class_sourced_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str class_sourced_id: ...tbd... (required)
        :param int limit: To define the download segmentation value i.e. the maximum number of records to be contained in the response.
        :param int offset: The number of the first record to be supplied in the segmented response message.
        :param str continuation_token: Allows the client to resume retrieving results from where the previous page left off
        :param str sort: Identifies the sort criteria to be used for the records in the response message. Use with the orderBy parameter.
        :param str order_by: The form of ordering for response to the sorted request i.e. ascending (asc) or descending (desc).
        :param str filter: The filtering rules to be applied when identifying the records to be supplied in the response message.
        :param list[str] fields: To identify the range of fields that should be supplied in the response message.
        :return: LineItemsType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_line_items_for_class_with_http_info(class_sourced_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_line_items_for_class_with_http_info(class_sourced_id, **kwargs)  # noqa: E501
            return data

    def get_line_items_for_class_with_http_info(self, class_sourced_id, **kwargs):  # noqa: E501
        """The REST read request message for the getLineItemsForClass() API call.  # noqa: E501

        ...not supplied...  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_line_items_for_class_with_http_info(class_sourced_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str class_sourced_id: ...tbd... (required)
        :param int limit: To define the download segmentation value i.e. the maximum number of records to be contained in the response.
        :param int offset: The number of the first record to be supplied in the segmented response message.
        :param str continuation_token: Allows the client to resume retrieving results from where the previous page left off
        :param str sort: Identifies the sort criteria to be used for the records in the response message. Use with the orderBy parameter.
        :param str order_by: The form of ordering for response to the sorted request i.e. ascending (asc) or descending (desc).
        :param str filter: The filtering rules to be applied when identifying the records to be supplied in the response message.
        :param list[str] fields: To identify the range of fields that should be supplied in the response message.
        :return: LineItemsType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['class_sourced_id', 'limit', 'offset', 'continuation_token', 'sort', 'order_by', 'filter', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_line_items_for_class" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'class_sourced_id' is set
        if ('class_sourced_id' not in params or
                params['class_sourced_id'] is None):
            raise ValueError("Missing the required parameter `class_sourced_id` when calling `get_line_items_for_class`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'class_sourced_id' in params:
            path_params['classSourcedId'] = params['class_sourced_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'continuation_token' in params:
            query_params.append(('continuationToken', params['continuation_token']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/classes/{classSourcedId}/lineitems', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LineItemsType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_line_item(self, body, sourced_id, **kwargs):  # noqa: E501
        """The REST create request message for the putLineItem() API call.  # noqa: E501

        ...not supplied...  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_line_item(body, sourced_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SingleLineItemType body: ...tbd... (required)
        :param str sourced_id: ...tbd... (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_line_item_with_http_info(body, sourced_id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_line_item_with_http_info(body, sourced_id, **kwargs)  # noqa: E501
            return data

    def put_line_item_with_http_info(self, body, sourced_id, **kwargs):  # noqa: E501
        """The REST create request message for the putLineItem() API call.  # noqa: E501

        ...not supplied...  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_line_item_with_http_info(body, sourced_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SingleLineItemType body: ...tbd... (required)
        :param str sourced_id: ...tbd... (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'sourced_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_line_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_line_item`")  # noqa: E501
        # verify the required parameter 'sourced_id' is set
        if ('sourced_id' not in params or
                params['sourced_id'] is None):
            raise ValueError("Missing the required parameter `sourced_id` when calling `put_line_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sourced_id' in params:
            path_params['sourcedId'] = params['sourced_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/lineItems/{sourcedId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
