# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _RoboticsSwig
else:
    import _RoboticsSwig

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SHARED_PTR_DISOWN = _RoboticsSwig.SHARED_PTR_DISOWN

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RoboticsSwig.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _RoboticsSwig.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _RoboticsSwig.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _RoboticsSwig.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _RoboticsSwig.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _RoboticsSwig.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _RoboticsSwig.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _RoboticsSwig.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _RoboticsSwig.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _RoboticsSwig.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _RoboticsSwig.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _RoboticsSwig.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _RoboticsSwig.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _RoboticsSwig.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _RoboticsSwig.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _RoboticsSwig.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _RoboticsSwig.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _RoboticsSwig:
_RoboticsSwig.SwigPyIterator_swigregister(SwigPyIterator)

import openplx.Core
import openplx.DriveTrain
import openplx.Math
import openplx.Physics
import openplx.Physics1D
import openplx.Physics3D
import openplx.Simulation
class Robotics_EndEffectors_ConstantVacuumSystem_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_EndEffectors_ConstantVacuumSystem_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_EndEffectors_ConstantVacuumSystem_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_EndEffectors_ConstantVacuumSystem_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_EndEffectors_ConstantVacuumSystem_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_EndEffectors_ConstantVacuumSystem_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_EndEffectors_ConstantVacuumSystem_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_EndEffectors_ConstantVacuumSystem_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::size_type"""
        return _RoboticsSwig.Robotics_EndEffectors_ConstantVacuumSystem_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_EndEffectors_ConstantVacuumSystem_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::difference_type j) -> Robotics_EndEffectors_ConstantVacuumSystem_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::difference_type

        """
        return _RoboticsSwig.Robotics_EndEffectors_ConstantVacuumSystem_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_EndEffectors_ConstantVacuumSystem_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::difference_type

        __setslice__(Robotics_EndEffectors_ConstantVacuumSystem_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::difference_type j, Robotics_EndEffectors_ConstantVacuumSystem_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem >,std::allocator< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > > > const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_ConstantVacuumSystem_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_EndEffectors_ConstantVacuumSystem_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::difference_type

        """
        return _RoboticsSwig.Robotics_EndEffectors_ConstantVacuumSystem_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_EndEffectors_ConstantVacuumSystem_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::difference_type

        __delitem__(Robotics_EndEffectors_ConstantVacuumSystem_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_EndEffectors_ConstantVacuumSystem_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_EndEffectors_ConstantVacuumSystem_Vector self, PySliceObject * slice) -> Robotics_EndEffectors_ConstantVacuumSystem_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_EndEffectors_ConstantVacuumSystem_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::difference_type

        """
        return _RoboticsSwig.Robotics_EndEffectors_ConstantVacuumSystem_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_EndEffectors_ConstantVacuumSystem_Vector self, PySliceObject * slice, Robotics_EndEffectors_ConstantVacuumSystem_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem >,std::allocator< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > > > const &

        __setitem__(Robotics_EndEffectors_ConstantVacuumSystem_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_EndEffectors_ConstantVacuumSystem_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::value_type const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_ConstantVacuumSystem_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_EndEffectors_ConstantVacuumSystem_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::value_type"""
        return _RoboticsSwig.Robotics_EndEffectors_ConstantVacuumSystem_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_EndEffectors_ConstantVacuumSystem_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::value_type const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_ConstantVacuumSystem_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_EndEffectors_ConstantVacuumSystem_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_EndEffectors_ConstantVacuumSystem_Vector_empty(self)

    def size(self):
        r"""size(Robotics_EndEffectors_ConstantVacuumSystem_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::size_type"""
        return _RoboticsSwig.Robotics_EndEffectors_ConstantVacuumSystem_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_EndEffectors_ConstantVacuumSystem_Vector self, Robotics_EndEffectors_ConstantVacuumSystem_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > > &

        """
        return _RoboticsSwig.Robotics_EndEffectors_ConstantVacuumSystem_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_EndEffectors_ConstantVacuumSystem_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::iterator"""
        return _RoboticsSwig.Robotics_EndEffectors_ConstantVacuumSystem_Vector_begin(self)

    def end(self):
        r"""end(Robotics_EndEffectors_ConstantVacuumSystem_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::iterator"""
        return _RoboticsSwig.Robotics_EndEffectors_ConstantVacuumSystem_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_EndEffectors_ConstantVacuumSystem_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_EndEffectors_ConstantVacuumSystem_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_EndEffectors_ConstantVacuumSystem_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_EndEffectors_ConstantVacuumSystem_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_EndEffectors_ConstantVacuumSystem_Vector self)"""
        return _RoboticsSwig.Robotics_EndEffectors_ConstantVacuumSystem_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_EndEffectors_ConstantVacuumSystem_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::allocator_type"""
        return _RoboticsSwig.Robotics_EndEffectors_ConstantVacuumSystem_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_EndEffectors_ConstantVacuumSystem_Vector self)"""
        return _RoboticsSwig.Robotics_EndEffectors_ConstantVacuumSystem_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_EndEffectors_ConstantVacuumSystem_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::iterator

        erase(Robotics_EndEffectors_ConstantVacuumSystem_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::iterator first, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::iterator last) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::iterator
        last: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::iterator

        """
        return _RoboticsSwig.Robotics_EndEffectors_ConstantVacuumSystem_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_EndEffectors_ConstantVacuumSystem_Vector self) -> Robotics_EndEffectors_ConstantVacuumSystem_Vector
        __init__(Robotics_EndEffectors_ConstantVacuumSystem_Vector self, Robotics_EndEffectors_ConstantVacuumSystem_Vector other) -> Robotics_EndEffectors_ConstantVacuumSystem_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > > const &

        __init__(Robotics_EndEffectors_ConstantVacuumSystem_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::size_type size) -> Robotics_EndEffectors_ConstantVacuumSystem_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::size_type

        __init__(Robotics_EndEffectors_ConstantVacuumSystem_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::size_type size, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::value_type const & value) -> Robotics_EndEffectors_ConstantVacuumSystem_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::size_type
        value: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::value_type const &

        """
        _RoboticsSwig.Robotics_EndEffectors_ConstantVacuumSystem_Vector_swiginit(self, _RoboticsSwig.new_Robotics_EndEffectors_ConstantVacuumSystem_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_EndEffectors_ConstantVacuumSystem_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::value_type const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_ConstantVacuumSystem_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_EndEffectors_ConstantVacuumSystem_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::value_type const &"""
        return _RoboticsSwig.Robotics_EndEffectors_ConstantVacuumSystem_Vector_front(self)

    def back(self):
        r"""back(Robotics_EndEffectors_ConstantVacuumSystem_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::value_type const &"""
        return _RoboticsSwig.Robotics_EndEffectors_ConstantVacuumSystem_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_EndEffectors_ConstantVacuumSystem_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::value_type const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_ConstantVacuumSystem_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_EndEffectors_ConstantVacuumSystem_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::size_type

        resize(Robotics_EndEffectors_ConstantVacuumSystem_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::size_type new_size, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::value_type const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_ConstantVacuumSystem_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_EndEffectors_ConstantVacuumSystem_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::iterator
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::value_type const &

        insert(Robotics_EndEffectors_ConstantVacuumSystem_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::iterator
        n: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::value_type const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_ConstantVacuumSystem_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_EndEffectors_ConstantVacuumSystem_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::size_type

        """
        return _RoboticsSwig.Robotics_EndEffectors_ConstantVacuumSystem_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_EndEffectors_ConstantVacuumSystem_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::ConstantVacuumSystem > >::size_type"""
        return _RoboticsSwig.Robotics_EndEffectors_ConstantVacuumSystem_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_EndEffectors_ConstantVacuumSystem_Vector

# Register Robotics_EndEffectors_ConstantVacuumSystem_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_EndEffectors_ConstantVacuumSystem_Vector_swigregister(Robotics_EndEffectors_ConstantVacuumSystem_Vector)

class Robotics_EndEffectors_SixDofSuctionCup_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_EndEffectors_SixDofSuctionCup_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_EndEffectors_SixDofSuctionCup_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_EndEffectors_SixDofSuctionCup_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_EndEffectors_SixDofSuctionCup_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::size_type"""
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_EndEffectors_SixDofSuctionCup_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::difference_type j) -> Robotics_EndEffectors_SixDofSuctionCup_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::difference_type

        """
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_EndEffectors_SixDofSuctionCup_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::difference_type

        __setslice__(Robotics_EndEffectors_SixDofSuctionCup_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::difference_type j, Robotics_EndEffectors_SixDofSuctionCup_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup >,std::allocator< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > > > const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_EndEffectors_SixDofSuctionCup_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::difference_type

        """
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_EndEffectors_SixDofSuctionCup_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::difference_type

        __delitem__(Robotics_EndEffectors_SixDofSuctionCup_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_EndEffectors_SixDofSuctionCup_Vector self, PySliceObject * slice) -> Robotics_EndEffectors_SixDofSuctionCup_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_EndEffectors_SixDofSuctionCup_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::difference_type

        """
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_EndEffectors_SixDofSuctionCup_Vector self, PySliceObject * slice, Robotics_EndEffectors_SixDofSuctionCup_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup >,std::allocator< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > > > const &

        __setitem__(Robotics_EndEffectors_SixDofSuctionCup_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_EndEffectors_SixDofSuctionCup_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::value_type const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_EndEffectors_SixDofSuctionCup_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::value_type"""
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_EndEffectors_SixDofSuctionCup_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::value_type const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_EndEffectors_SixDofSuctionCup_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_Vector_empty(self)

    def size(self):
        r"""size(Robotics_EndEffectors_SixDofSuctionCup_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::size_type"""
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_EndEffectors_SixDofSuctionCup_Vector self, Robotics_EndEffectors_SixDofSuctionCup_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > > &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_EndEffectors_SixDofSuctionCup_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::iterator"""
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_Vector_begin(self)

    def end(self):
        r"""end(Robotics_EndEffectors_SixDofSuctionCup_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::iterator"""
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_EndEffectors_SixDofSuctionCup_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_EndEffectors_SixDofSuctionCup_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_EndEffectors_SixDofSuctionCup_Vector self)"""
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_EndEffectors_SixDofSuctionCup_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::allocator_type"""
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_EndEffectors_SixDofSuctionCup_Vector self)"""
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_EndEffectors_SixDofSuctionCup_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::iterator

        erase(Robotics_EndEffectors_SixDofSuctionCup_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::iterator first, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::iterator last) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::iterator
        last: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::iterator

        """
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_EndEffectors_SixDofSuctionCup_Vector self) -> Robotics_EndEffectors_SixDofSuctionCup_Vector
        __init__(Robotics_EndEffectors_SixDofSuctionCup_Vector self, Robotics_EndEffectors_SixDofSuctionCup_Vector other) -> Robotics_EndEffectors_SixDofSuctionCup_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > > const &

        __init__(Robotics_EndEffectors_SixDofSuctionCup_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::size_type size) -> Robotics_EndEffectors_SixDofSuctionCup_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::size_type

        __init__(Robotics_EndEffectors_SixDofSuctionCup_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::size_type size, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::value_type const & value) -> Robotics_EndEffectors_SixDofSuctionCup_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::size_type
        value: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::value_type const &

        """
        _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_Vector_swiginit(self, _RoboticsSwig.new_Robotics_EndEffectors_SixDofSuctionCup_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_EndEffectors_SixDofSuctionCup_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::value_type const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_EndEffectors_SixDofSuctionCup_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::value_type const &"""
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_Vector_front(self)

    def back(self):
        r"""back(Robotics_EndEffectors_SixDofSuctionCup_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::value_type const &"""
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_EndEffectors_SixDofSuctionCup_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::value_type const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_EndEffectors_SixDofSuctionCup_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::size_type

        resize(Robotics_EndEffectors_SixDofSuctionCup_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::size_type new_size, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::value_type const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_EndEffectors_SixDofSuctionCup_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::iterator
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::value_type const &

        insert(Robotics_EndEffectors_SixDofSuctionCup_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::iterator
        n: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::value_type const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_EndEffectors_SixDofSuctionCup_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::size_type

        """
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_EndEffectors_SixDofSuctionCup_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCup > >::size_type"""
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_EndEffectors_SixDofSuctionCup_Vector

# Register Robotics_EndEffectors_SixDofSuctionCup_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_Vector_swigregister(Robotics_EndEffectors_SixDofSuctionCup_Vector)

class Robotics_EndEffectors_SixDofSuctionCupJoint_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_EndEffectors_SixDofSuctionCupJoint_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCupJoint_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_EndEffectors_SixDofSuctionCupJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCupJoint_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_EndEffectors_SixDofSuctionCupJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCupJoint_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_EndEffectors_SixDofSuctionCupJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::size_type"""
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCupJoint_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_EndEffectors_SixDofSuctionCupJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::difference_type j) -> Robotics_EndEffectors_SixDofSuctionCupJoint_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCupJoint_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_EndEffectors_SixDofSuctionCupJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::difference_type

        __setslice__(Robotics_EndEffectors_SixDofSuctionCupJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::difference_type j, Robotics_EndEffectors_SixDofSuctionCupJoint_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint >,std::allocator< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > > > const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCupJoint_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_EndEffectors_SixDofSuctionCupJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCupJoint_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_EndEffectors_SixDofSuctionCupJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::difference_type

        __delitem__(Robotics_EndEffectors_SixDofSuctionCupJoint_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCupJoint_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_EndEffectors_SixDofSuctionCupJoint_Vector self, PySliceObject * slice) -> Robotics_EndEffectors_SixDofSuctionCupJoint_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_EndEffectors_SixDofSuctionCupJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCupJoint_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_EndEffectors_SixDofSuctionCupJoint_Vector self, PySliceObject * slice, Robotics_EndEffectors_SixDofSuctionCupJoint_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint >,std::allocator< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > > > const &

        __setitem__(Robotics_EndEffectors_SixDofSuctionCupJoint_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_EndEffectors_SixDofSuctionCupJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCupJoint_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_EndEffectors_SixDofSuctionCupJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::value_type"""
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCupJoint_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_EndEffectors_SixDofSuctionCupJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCupJoint_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_EndEffectors_SixDofSuctionCupJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCupJoint_Vector_empty(self)

    def size(self):
        r"""size(Robotics_EndEffectors_SixDofSuctionCupJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::size_type"""
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCupJoint_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_EndEffectors_SixDofSuctionCupJoint_Vector self, Robotics_EndEffectors_SixDofSuctionCupJoint_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > > &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCupJoint_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_EndEffectors_SixDofSuctionCupJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::iterator"""
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCupJoint_Vector_begin(self)

    def end(self):
        r"""end(Robotics_EndEffectors_SixDofSuctionCupJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::iterator"""
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCupJoint_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_EndEffectors_SixDofSuctionCupJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCupJoint_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_EndEffectors_SixDofSuctionCupJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCupJoint_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_EndEffectors_SixDofSuctionCupJoint_Vector self)"""
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCupJoint_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_EndEffectors_SixDofSuctionCupJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::allocator_type"""
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCupJoint_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_EndEffectors_SixDofSuctionCupJoint_Vector self)"""
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCupJoint_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_EndEffectors_SixDofSuctionCupJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::iterator

        erase(Robotics_EndEffectors_SixDofSuctionCupJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::iterator first, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::iterator last) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::iterator
        last: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::iterator

        """
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCupJoint_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_EndEffectors_SixDofSuctionCupJoint_Vector self) -> Robotics_EndEffectors_SixDofSuctionCupJoint_Vector
        __init__(Robotics_EndEffectors_SixDofSuctionCupJoint_Vector self, Robotics_EndEffectors_SixDofSuctionCupJoint_Vector other) -> Robotics_EndEffectors_SixDofSuctionCupJoint_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > > const &

        __init__(Robotics_EndEffectors_SixDofSuctionCupJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::size_type size) -> Robotics_EndEffectors_SixDofSuctionCupJoint_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::size_type

        __init__(Robotics_EndEffectors_SixDofSuctionCupJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::size_type size, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::value_type const & value) -> Robotics_EndEffectors_SixDofSuctionCupJoint_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::size_type
        value: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::value_type const &

        """
        _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCupJoint_Vector_swiginit(self, _RoboticsSwig.new_Robotics_EndEffectors_SixDofSuctionCupJoint_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_EndEffectors_SixDofSuctionCupJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCupJoint_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_EndEffectors_SixDofSuctionCupJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::value_type const &"""
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCupJoint_Vector_front(self)

    def back(self):
        r"""back(Robotics_EndEffectors_SixDofSuctionCupJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::value_type const &"""
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCupJoint_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_EndEffectors_SixDofSuctionCupJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCupJoint_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_EndEffectors_SixDofSuctionCupJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::size_type

        resize(Robotics_EndEffectors_SixDofSuctionCupJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::size_type new_size, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCupJoint_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_EndEffectors_SixDofSuctionCupJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::iterator
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::value_type const &

        insert(Robotics_EndEffectors_SixDofSuctionCupJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::iterator
        n: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCupJoint_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_EndEffectors_SixDofSuctionCupJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::size_type

        """
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCupJoint_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_EndEffectors_SixDofSuctionCupJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint > >::size_type"""
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCupJoint_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_EndEffectors_SixDofSuctionCupJoint_Vector

# Register Robotics_EndEffectors_SixDofSuctionCupJoint_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCupJoint_Vector_swigregister(Robotics_EndEffectors_SixDofSuctionCupJoint_Vector)

class Robotics_EndEffectors_SuctionCup_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_EndEffectors_SuctionCup_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_EndEffectors_SuctionCup_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_EndEffectors_SuctionCup_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_EndEffectors_SuctionCup_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::size_type"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_EndEffectors_SuctionCup_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::difference_type j) -> Robotics_EndEffectors_SuctionCup_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::difference_type

        """
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_EndEffectors_SuctionCup_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::difference_type

        __setslice__(Robotics_EndEffectors_SuctionCup_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::difference_type j, Robotics_EndEffectors_SuctionCup_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup >,std::allocator< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > > > const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_EndEffectors_SuctionCup_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::difference_type

        """
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_EndEffectors_SuctionCup_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::difference_type

        __delitem__(Robotics_EndEffectors_SuctionCup_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_EndEffectors_SuctionCup_Vector self, PySliceObject * slice) -> Robotics_EndEffectors_SuctionCup_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_EndEffectors_SuctionCup_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::difference_type

        """
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_EndEffectors_SuctionCup_Vector self, PySliceObject * slice, Robotics_EndEffectors_SuctionCup_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup >,std::allocator< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > > > const &

        __setitem__(Robotics_EndEffectors_SuctionCup_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_EndEffectors_SuctionCup_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::value_type const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_EndEffectors_SuctionCup_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::value_type"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_EndEffectors_SuctionCup_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::value_type const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_EndEffectors_SuctionCup_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_Vector_empty(self)

    def size(self):
        r"""size(Robotics_EndEffectors_SuctionCup_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::size_type"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_EndEffectors_SuctionCup_Vector self, Robotics_EndEffectors_SuctionCup_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > > &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_EndEffectors_SuctionCup_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::iterator"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_Vector_begin(self)

    def end(self):
        r"""end(Robotics_EndEffectors_SuctionCup_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::iterator"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_EndEffectors_SuctionCup_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_EndEffectors_SuctionCup_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_EndEffectors_SuctionCup_Vector self)"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_EndEffectors_SuctionCup_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::allocator_type"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_EndEffectors_SuctionCup_Vector self)"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_EndEffectors_SuctionCup_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::iterator

        erase(Robotics_EndEffectors_SuctionCup_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::iterator first, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::iterator last) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::iterator
        last: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::iterator

        """
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_EndEffectors_SuctionCup_Vector self) -> Robotics_EndEffectors_SuctionCup_Vector
        __init__(Robotics_EndEffectors_SuctionCup_Vector self, Robotics_EndEffectors_SuctionCup_Vector other) -> Robotics_EndEffectors_SuctionCup_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > > const &

        __init__(Robotics_EndEffectors_SuctionCup_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::size_type size) -> Robotics_EndEffectors_SuctionCup_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::size_type

        __init__(Robotics_EndEffectors_SuctionCup_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::size_type size, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::value_type const & value) -> Robotics_EndEffectors_SuctionCup_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::size_type
        value: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::value_type const &

        """
        _RoboticsSwig.Robotics_EndEffectors_SuctionCup_Vector_swiginit(self, _RoboticsSwig.new_Robotics_EndEffectors_SuctionCup_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_EndEffectors_SuctionCup_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::value_type const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_EndEffectors_SuctionCup_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::value_type const &"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_Vector_front(self)

    def back(self):
        r"""back(Robotics_EndEffectors_SuctionCup_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::value_type const &"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_EndEffectors_SuctionCup_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::value_type const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_EndEffectors_SuctionCup_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::size_type

        resize(Robotics_EndEffectors_SuctionCup_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::size_type new_size, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::value_type const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_EndEffectors_SuctionCup_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::iterator
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::value_type const &

        insert(Robotics_EndEffectors_SuctionCup_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::iterator
        n: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::value_type const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_EndEffectors_SuctionCup_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::size_type

        """
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_EndEffectors_SuctionCup_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCup > >::size_type"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_EndEffectors_SuctionCup_Vector

# Register Robotics_EndEffectors_SuctionCup_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_EndEffectors_SuctionCup_Vector_swigregister(Robotics_EndEffectors_SuctionCup_Vector)

class Robotics_EndEffectors_SuctionCupElastoDynamics_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_EndEffectors_SuctionCupElastoDynamics_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_EndEffectors_SuctionCupElastoDynamics_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_EndEffectors_SuctionCupElastoDynamics_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_EndEffectors_SuctionCupElastoDynamics_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::size_type"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_EndEffectors_SuctionCupElastoDynamics_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::difference_type j) -> Robotics_EndEffectors_SuctionCupElastoDynamics_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::difference_type

        """
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_EndEffectors_SuctionCupElastoDynamics_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::difference_type

        __setslice__(Robotics_EndEffectors_SuctionCupElastoDynamics_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::difference_type j, Robotics_EndEffectors_SuctionCupElastoDynamics_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics >,std::allocator< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > > > const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_EndEffectors_SuctionCupElastoDynamics_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::difference_type

        """
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_EndEffectors_SuctionCupElastoDynamics_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::difference_type

        __delitem__(Robotics_EndEffectors_SuctionCupElastoDynamics_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_EndEffectors_SuctionCupElastoDynamics_Vector self, PySliceObject * slice) -> Robotics_EndEffectors_SuctionCupElastoDynamics_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_EndEffectors_SuctionCupElastoDynamics_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::difference_type

        """
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_EndEffectors_SuctionCupElastoDynamics_Vector self, PySliceObject * slice, Robotics_EndEffectors_SuctionCupElastoDynamics_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics >,std::allocator< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > > > const &

        __setitem__(Robotics_EndEffectors_SuctionCupElastoDynamics_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_EndEffectors_SuctionCupElastoDynamics_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::value_type const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_EndEffectors_SuctionCupElastoDynamics_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::value_type"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_EndEffectors_SuctionCupElastoDynamics_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::value_type const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_EndEffectors_SuctionCupElastoDynamics_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_Vector_empty(self)

    def size(self):
        r"""size(Robotics_EndEffectors_SuctionCupElastoDynamics_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::size_type"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_EndEffectors_SuctionCupElastoDynamics_Vector self, Robotics_EndEffectors_SuctionCupElastoDynamics_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > > &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_EndEffectors_SuctionCupElastoDynamics_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::iterator"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_Vector_begin(self)

    def end(self):
        r"""end(Robotics_EndEffectors_SuctionCupElastoDynamics_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::iterator"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_EndEffectors_SuctionCupElastoDynamics_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_EndEffectors_SuctionCupElastoDynamics_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_EndEffectors_SuctionCupElastoDynamics_Vector self)"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_EndEffectors_SuctionCupElastoDynamics_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::allocator_type"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_EndEffectors_SuctionCupElastoDynamics_Vector self)"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_EndEffectors_SuctionCupElastoDynamics_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::iterator

        erase(Robotics_EndEffectors_SuctionCupElastoDynamics_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::iterator first, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::iterator last) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::iterator
        last: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::iterator

        """
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_EndEffectors_SuctionCupElastoDynamics_Vector self) -> Robotics_EndEffectors_SuctionCupElastoDynamics_Vector
        __init__(Robotics_EndEffectors_SuctionCupElastoDynamics_Vector self, Robotics_EndEffectors_SuctionCupElastoDynamics_Vector other) -> Robotics_EndEffectors_SuctionCupElastoDynamics_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > > const &

        __init__(Robotics_EndEffectors_SuctionCupElastoDynamics_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::size_type size) -> Robotics_EndEffectors_SuctionCupElastoDynamics_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::size_type

        __init__(Robotics_EndEffectors_SuctionCupElastoDynamics_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::size_type size, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::value_type const & value) -> Robotics_EndEffectors_SuctionCupElastoDynamics_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::size_type
        value: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::value_type const &

        """
        _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_Vector_swiginit(self, _RoboticsSwig.new_Robotics_EndEffectors_SuctionCupElastoDynamics_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_EndEffectors_SuctionCupElastoDynamics_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::value_type const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_EndEffectors_SuctionCupElastoDynamics_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::value_type const &"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_Vector_front(self)

    def back(self):
        r"""back(Robotics_EndEffectors_SuctionCupElastoDynamics_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::value_type const &"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_EndEffectors_SuctionCupElastoDynamics_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::value_type const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_EndEffectors_SuctionCupElastoDynamics_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::size_type

        resize(Robotics_EndEffectors_SuctionCupElastoDynamics_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::size_type new_size, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::value_type const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_EndEffectors_SuctionCupElastoDynamics_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::iterator
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::value_type const &

        insert(Robotics_EndEffectors_SuctionCupElastoDynamics_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::iterator
        n: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::value_type const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_EndEffectors_SuctionCupElastoDynamics_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::size_type

        """
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_EndEffectors_SuctionCupElastoDynamics_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics > >::size_type"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_EndEffectors_SuctionCupElastoDynamics_Vector

# Register Robotics_EndEffectors_SuctionCupElastoDynamics_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_Vector_swigregister(Robotics_EndEffectors_SuctionCupElastoDynamics_Vector)

class Robotics_EndEffectors_VacuumGripper_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_EndEffectors_VacuumGripper_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_EndEffectors_VacuumGripper_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_EndEffectors_VacuumGripper_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_EndEffectors_VacuumGripper_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_EndEffectors_VacuumGripper_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_EndEffectors_VacuumGripper_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_EndEffectors_VacuumGripper_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::size_type"""
        return _RoboticsSwig.Robotics_EndEffectors_VacuumGripper_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_EndEffectors_VacuumGripper_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::difference_type j) -> Robotics_EndEffectors_VacuumGripper_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::difference_type

        """
        return _RoboticsSwig.Robotics_EndEffectors_VacuumGripper_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_EndEffectors_VacuumGripper_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::difference_type

        __setslice__(Robotics_EndEffectors_VacuumGripper_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::difference_type j, Robotics_EndEffectors_VacuumGripper_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper >,std::allocator< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > > > const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_VacuumGripper_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_EndEffectors_VacuumGripper_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::difference_type

        """
        return _RoboticsSwig.Robotics_EndEffectors_VacuumGripper_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_EndEffectors_VacuumGripper_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::difference_type

        __delitem__(Robotics_EndEffectors_VacuumGripper_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_EndEffectors_VacuumGripper_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_EndEffectors_VacuumGripper_Vector self, PySliceObject * slice) -> Robotics_EndEffectors_VacuumGripper_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_EndEffectors_VacuumGripper_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::difference_type

        """
        return _RoboticsSwig.Robotics_EndEffectors_VacuumGripper_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_EndEffectors_VacuumGripper_Vector self, PySliceObject * slice, Robotics_EndEffectors_VacuumGripper_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper >,std::allocator< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > > > const &

        __setitem__(Robotics_EndEffectors_VacuumGripper_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_EndEffectors_VacuumGripper_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::value_type const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_VacuumGripper_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_EndEffectors_VacuumGripper_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::value_type"""
        return _RoboticsSwig.Robotics_EndEffectors_VacuumGripper_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_EndEffectors_VacuumGripper_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::value_type const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_VacuumGripper_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_EndEffectors_VacuumGripper_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_EndEffectors_VacuumGripper_Vector_empty(self)

    def size(self):
        r"""size(Robotics_EndEffectors_VacuumGripper_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::size_type"""
        return _RoboticsSwig.Robotics_EndEffectors_VacuumGripper_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_EndEffectors_VacuumGripper_Vector self, Robotics_EndEffectors_VacuumGripper_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > > &

        """
        return _RoboticsSwig.Robotics_EndEffectors_VacuumGripper_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_EndEffectors_VacuumGripper_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::iterator"""
        return _RoboticsSwig.Robotics_EndEffectors_VacuumGripper_Vector_begin(self)

    def end(self):
        r"""end(Robotics_EndEffectors_VacuumGripper_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::iterator"""
        return _RoboticsSwig.Robotics_EndEffectors_VacuumGripper_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_EndEffectors_VacuumGripper_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_EndEffectors_VacuumGripper_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_EndEffectors_VacuumGripper_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_EndEffectors_VacuumGripper_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_EndEffectors_VacuumGripper_Vector self)"""
        return _RoboticsSwig.Robotics_EndEffectors_VacuumGripper_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_EndEffectors_VacuumGripper_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::allocator_type"""
        return _RoboticsSwig.Robotics_EndEffectors_VacuumGripper_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_EndEffectors_VacuumGripper_Vector self)"""
        return _RoboticsSwig.Robotics_EndEffectors_VacuumGripper_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_EndEffectors_VacuumGripper_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::iterator

        erase(Robotics_EndEffectors_VacuumGripper_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::iterator first, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::iterator last) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::iterator
        last: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::iterator

        """
        return _RoboticsSwig.Robotics_EndEffectors_VacuumGripper_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_EndEffectors_VacuumGripper_Vector self) -> Robotics_EndEffectors_VacuumGripper_Vector
        __init__(Robotics_EndEffectors_VacuumGripper_Vector self, Robotics_EndEffectors_VacuumGripper_Vector other) -> Robotics_EndEffectors_VacuumGripper_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > > const &

        __init__(Robotics_EndEffectors_VacuumGripper_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::size_type size) -> Robotics_EndEffectors_VacuumGripper_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::size_type

        __init__(Robotics_EndEffectors_VacuumGripper_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::size_type size, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::value_type const & value) -> Robotics_EndEffectors_VacuumGripper_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::size_type
        value: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::value_type const &

        """
        _RoboticsSwig.Robotics_EndEffectors_VacuumGripper_Vector_swiginit(self, _RoboticsSwig.new_Robotics_EndEffectors_VacuumGripper_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_EndEffectors_VacuumGripper_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::value_type const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_VacuumGripper_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_EndEffectors_VacuumGripper_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::value_type const &"""
        return _RoboticsSwig.Robotics_EndEffectors_VacuumGripper_Vector_front(self)

    def back(self):
        r"""back(Robotics_EndEffectors_VacuumGripper_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::value_type const &"""
        return _RoboticsSwig.Robotics_EndEffectors_VacuumGripper_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_EndEffectors_VacuumGripper_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::value_type const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_VacuumGripper_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_EndEffectors_VacuumGripper_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::size_type

        resize(Robotics_EndEffectors_VacuumGripper_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::size_type new_size, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::value_type const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_VacuumGripper_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_EndEffectors_VacuumGripper_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::iterator
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::value_type const &

        insert(Robotics_EndEffectors_VacuumGripper_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::iterator
        n: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::value_type const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_VacuumGripper_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_EndEffectors_VacuumGripper_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::size_type

        """
        return _RoboticsSwig.Robotics_EndEffectors_VacuumGripper_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_EndEffectors_VacuumGripper_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumGripper > >::size_type"""
        return _RoboticsSwig.Robotics_EndEffectors_VacuumGripper_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_EndEffectors_VacuumGripper_Vector

# Register Robotics_EndEffectors_VacuumGripper_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_EndEffectors_VacuumGripper_Vector_swigregister(Robotics_EndEffectors_VacuumGripper_Vector)

class Robotics_EndEffectors_VacuumSystem_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_EndEffectors_VacuumSystem_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_EndEffectors_VacuumSystem_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_EndEffectors_VacuumSystem_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_EndEffectors_VacuumSystem_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_EndEffectors_VacuumSystem_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_EndEffectors_VacuumSystem_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_EndEffectors_VacuumSystem_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::size_type"""
        return _RoboticsSwig.Robotics_EndEffectors_VacuumSystem_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_EndEffectors_VacuumSystem_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::difference_type j) -> Robotics_EndEffectors_VacuumSystem_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::difference_type

        """
        return _RoboticsSwig.Robotics_EndEffectors_VacuumSystem_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_EndEffectors_VacuumSystem_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::difference_type

        __setslice__(Robotics_EndEffectors_VacuumSystem_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::difference_type j, Robotics_EndEffectors_VacuumSystem_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem >,std::allocator< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > > > const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_VacuumSystem_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_EndEffectors_VacuumSystem_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::difference_type

        """
        return _RoboticsSwig.Robotics_EndEffectors_VacuumSystem_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_EndEffectors_VacuumSystem_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::difference_type

        __delitem__(Robotics_EndEffectors_VacuumSystem_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_EndEffectors_VacuumSystem_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_EndEffectors_VacuumSystem_Vector self, PySliceObject * slice) -> Robotics_EndEffectors_VacuumSystem_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_EndEffectors_VacuumSystem_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::difference_type

        """
        return _RoboticsSwig.Robotics_EndEffectors_VacuumSystem_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_EndEffectors_VacuumSystem_Vector self, PySliceObject * slice, Robotics_EndEffectors_VacuumSystem_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem >,std::allocator< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > > > const &

        __setitem__(Robotics_EndEffectors_VacuumSystem_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_EndEffectors_VacuumSystem_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::value_type const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_VacuumSystem_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_EndEffectors_VacuumSystem_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::value_type"""
        return _RoboticsSwig.Robotics_EndEffectors_VacuumSystem_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_EndEffectors_VacuumSystem_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::value_type const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_VacuumSystem_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_EndEffectors_VacuumSystem_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_EndEffectors_VacuumSystem_Vector_empty(self)

    def size(self):
        r"""size(Robotics_EndEffectors_VacuumSystem_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::size_type"""
        return _RoboticsSwig.Robotics_EndEffectors_VacuumSystem_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_EndEffectors_VacuumSystem_Vector self, Robotics_EndEffectors_VacuumSystem_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > > &

        """
        return _RoboticsSwig.Robotics_EndEffectors_VacuumSystem_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_EndEffectors_VacuumSystem_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::iterator"""
        return _RoboticsSwig.Robotics_EndEffectors_VacuumSystem_Vector_begin(self)

    def end(self):
        r"""end(Robotics_EndEffectors_VacuumSystem_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::iterator"""
        return _RoboticsSwig.Robotics_EndEffectors_VacuumSystem_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_EndEffectors_VacuumSystem_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_EndEffectors_VacuumSystem_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_EndEffectors_VacuumSystem_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_EndEffectors_VacuumSystem_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_EndEffectors_VacuumSystem_Vector self)"""
        return _RoboticsSwig.Robotics_EndEffectors_VacuumSystem_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_EndEffectors_VacuumSystem_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::allocator_type"""
        return _RoboticsSwig.Robotics_EndEffectors_VacuumSystem_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_EndEffectors_VacuumSystem_Vector self)"""
        return _RoboticsSwig.Robotics_EndEffectors_VacuumSystem_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_EndEffectors_VacuumSystem_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::iterator

        erase(Robotics_EndEffectors_VacuumSystem_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::iterator first, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::iterator last) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::iterator
        last: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::iterator

        """
        return _RoboticsSwig.Robotics_EndEffectors_VacuumSystem_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_EndEffectors_VacuumSystem_Vector self) -> Robotics_EndEffectors_VacuumSystem_Vector
        __init__(Robotics_EndEffectors_VacuumSystem_Vector self, Robotics_EndEffectors_VacuumSystem_Vector other) -> Robotics_EndEffectors_VacuumSystem_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > > const &

        __init__(Robotics_EndEffectors_VacuumSystem_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::size_type size) -> Robotics_EndEffectors_VacuumSystem_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::size_type

        __init__(Robotics_EndEffectors_VacuumSystem_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::size_type size, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::value_type const & value) -> Robotics_EndEffectors_VacuumSystem_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::size_type
        value: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::value_type const &

        """
        _RoboticsSwig.Robotics_EndEffectors_VacuumSystem_Vector_swiginit(self, _RoboticsSwig.new_Robotics_EndEffectors_VacuumSystem_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_EndEffectors_VacuumSystem_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::value_type const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_VacuumSystem_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_EndEffectors_VacuumSystem_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::value_type const &"""
        return _RoboticsSwig.Robotics_EndEffectors_VacuumSystem_Vector_front(self)

    def back(self):
        r"""back(Robotics_EndEffectors_VacuumSystem_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::value_type const &"""
        return _RoboticsSwig.Robotics_EndEffectors_VacuumSystem_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_EndEffectors_VacuumSystem_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::value_type const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_VacuumSystem_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_EndEffectors_VacuumSystem_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::size_type

        resize(Robotics_EndEffectors_VacuumSystem_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::size_type new_size, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::value_type const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_VacuumSystem_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_EndEffectors_VacuumSystem_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::iterator
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::value_type const &

        insert(Robotics_EndEffectors_VacuumSystem_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::iterator
        n: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::value_type const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_VacuumSystem_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_EndEffectors_VacuumSystem_Vector self, std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::size_type

        """
        return _RoboticsSwig.Robotics_EndEffectors_VacuumSystem_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_EndEffectors_VacuumSystem_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem > >::size_type"""
        return _RoboticsSwig.Robotics_EndEffectors_VacuumSystem_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_EndEffectors_VacuumSystem_Vector

# Register Robotics_EndEffectors_VacuumSystem_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_EndEffectors_VacuumSystem_Vector_swigregister(Robotics_EndEffectors_VacuumSystem_Vector)

class Robotics_Joints_ActuatedJoint_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Joints_ActuatedJoint_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Joints_ActuatedJoint_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Joints_ActuatedJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_ActuatedJoint_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Joints_ActuatedJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_ActuatedJoint_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Joints_ActuatedJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_ActuatedJoint_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Joints_ActuatedJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::difference_type j) -> Robotics_Joints_ActuatedJoint_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_ActuatedJoint_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Joints_ActuatedJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::difference_type

        __setslice__(Robotics_Joints_ActuatedJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::difference_type j, Robotics_Joints_ActuatedJoint_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint >,std::allocator< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > > > const &

        """
        return _RoboticsSwig.Robotics_Joints_ActuatedJoint_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Joints_ActuatedJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_ActuatedJoint_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Joints_ActuatedJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::difference_type

        __delitem__(Robotics_Joints_ActuatedJoint_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Joints_ActuatedJoint_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Joints_ActuatedJoint_Vector self, PySliceObject * slice) -> Robotics_Joints_ActuatedJoint_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Joints_ActuatedJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_ActuatedJoint_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Joints_ActuatedJoint_Vector self, PySliceObject * slice, Robotics_Joints_ActuatedJoint_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint >,std::allocator< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > > > const &

        __setitem__(Robotics_Joints_ActuatedJoint_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Joints_ActuatedJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_ActuatedJoint_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Joints_ActuatedJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::value_type"""
        return _RoboticsSwig.Robotics_Joints_ActuatedJoint_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Joints_ActuatedJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_ActuatedJoint_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Joints_ActuatedJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_ActuatedJoint_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Joints_ActuatedJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_ActuatedJoint_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Joints_ActuatedJoint_Vector self, Robotics_Joints_ActuatedJoint_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > > &

        """
        return _RoboticsSwig.Robotics_Joints_ActuatedJoint_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Joints_ActuatedJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_ActuatedJoint_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Joints_ActuatedJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_ActuatedJoint_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Joints_ActuatedJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_ActuatedJoint_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Joints_ActuatedJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_ActuatedJoint_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Joints_ActuatedJoint_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_ActuatedJoint_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Joints_ActuatedJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::allocator_type"""
        return _RoboticsSwig.Robotics_Joints_ActuatedJoint_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Joints_ActuatedJoint_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_ActuatedJoint_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Joints_ActuatedJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::iterator

        erase(Robotics_Joints_ActuatedJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::iterator first, std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::iterator last) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::iterator
        last: std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::iterator

        """
        return _RoboticsSwig.Robotics_Joints_ActuatedJoint_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Joints_ActuatedJoint_Vector self) -> Robotics_Joints_ActuatedJoint_Vector
        __init__(Robotics_Joints_ActuatedJoint_Vector self, Robotics_Joints_ActuatedJoint_Vector other) -> Robotics_Joints_ActuatedJoint_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > > const &

        __init__(Robotics_Joints_ActuatedJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::size_type size) -> Robotics_Joints_ActuatedJoint_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::size_type

        __init__(Robotics_Joints_ActuatedJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::size_type size, std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::value_type const & value) -> Robotics_Joints_ActuatedJoint_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::size_type
        value: std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::value_type const &

        """
        _RoboticsSwig.Robotics_Joints_ActuatedJoint_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Joints_ActuatedJoint_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Joints_ActuatedJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_ActuatedJoint_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Joints_ActuatedJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_ActuatedJoint_Vector_front(self)

    def back(self):
        r"""back(Robotics_Joints_ActuatedJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_ActuatedJoint_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Joints_ActuatedJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_ActuatedJoint_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Joints_ActuatedJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::size_type

        resize(Robotics_Joints_ActuatedJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::size_type new_size, std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_ActuatedJoint_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Joints_ActuatedJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::iterator
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::value_type const &

        insert(Robotics_Joints_ActuatedJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::iterator
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_ActuatedJoint_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Joints_ActuatedJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::size_type

        """
        return _RoboticsSwig.Robotics_Joints_ActuatedJoint_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Joints_ActuatedJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::ActuatedJoint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_ActuatedJoint_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Joints_ActuatedJoint_Vector

# Register Robotics_Joints_ActuatedJoint_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Joints_ActuatedJoint_Vector_swigregister(Robotics_Joints_ActuatedJoint_Vector)

class Robotics_Joints_CoupledJointDriveTrain_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Joints_CoupledJointDriveTrain_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Joints_CoupledJointDriveTrain_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Joints_CoupledJointDriveTrain_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Joints_CoupledJointDriveTrain_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Joints_CoupledJointDriveTrain_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::difference_type j) -> Robotics_Joints_CoupledJointDriveTrain_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Joints_CoupledJointDriveTrain_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::difference_type

        __setslice__(Robotics_Joints_CoupledJointDriveTrain_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::difference_type j, Robotics_Joints_CoupledJointDriveTrain_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain >,std::allocator< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > > > const &

        """
        return _RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Joints_CoupledJointDriveTrain_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Joints_CoupledJointDriveTrain_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::difference_type

        __delitem__(Robotics_Joints_CoupledJointDriveTrain_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Joints_CoupledJointDriveTrain_Vector self, PySliceObject * slice) -> Robotics_Joints_CoupledJointDriveTrain_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Joints_CoupledJointDriveTrain_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Joints_CoupledJointDriveTrain_Vector self, PySliceObject * slice, Robotics_Joints_CoupledJointDriveTrain_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain >,std::allocator< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > > > const &

        __setitem__(Robotics_Joints_CoupledJointDriveTrain_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Joints_CoupledJointDriveTrain_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Joints_CoupledJointDriveTrain_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::value_type"""
        return _RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Joints_CoupledJointDriveTrain_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Joints_CoupledJointDriveTrain_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Joints_CoupledJointDriveTrain_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Joints_CoupledJointDriveTrain_Vector self, Robotics_Joints_CoupledJointDriveTrain_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > > &

        """
        return _RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Joints_CoupledJointDriveTrain_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Joints_CoupledJointDriveTrain_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Joints_CoupledJointDriveTrain_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Joints_CoupledJointDriveTrain_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Joints_CoupledJointDriveTrain_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Joints_CoupledJointDriveTrain_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::allocator_type"""
        return _RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Joints_CoupledJointDriveTrain_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Joints_CoupledJointDriveTrain_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::iterator

        erase(Robotics_Joints_CoupledJointDriveTrain_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::iterator first, std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::iterator last) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::iterator
        last: std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::iterator

        """
        return _RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Joints_CoupledJointDriveTrain_Vector self) -> Robotics_Joints_CoupledJointDriveTrain_Vector
        __init__(Robotics_Joints_CoupledJointDriveTrain_Vector self, Robotics_Joints_CoupledJointDriveTrain_Vector other) -> Robotics_Joints_CoupledJointDriveTrain_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > > const &

        __init__(Robotics_Joints_CoupledJointDriveTrain_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::size_type size) -> Robotics_Joints_CoupledJointDriveTrain_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::size_type

        __init__(Robotics_Joints_CoupledJointDriveTrain_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::size_type size, std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::value_type const & value) -> Robotics_Joints_CoupledJointDriveTrain_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::size_type
        value: std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::value_type const &

        """
        _RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Joints_CoupledJointDriveTrain_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Joints_CoupledJointDriveTrain_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Joints_CoupledJointDriveTrain_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_Vector_front(self)

    def back(self):
        r"""back(Robotics_Joints_CoupledJointDriveTrain_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Joints_CoupledJointDriveTrain_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Joints_CoupledJointDriveTrain_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::size_type

        resize(Robotics_Joints_CoupledJointDriveTrain_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::size_type new_size, std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Joints_CoupledJointDriveTrain_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::iterator
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::value_type const &

        insert(Robotics_Joints_CoupledJointDriveTrain_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::iterator
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Joints_CoupledJointDriveTrain_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::size_type

        """
        return _RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Joints_CoupledJointDriveTrain_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::CoupledJointDriveTrain > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Joints_CoupledJointDriveTrain_Vector

# Register Robotics_Joints_CoupledJointDriveTrain_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_Vector_swigregister(Robotics_Joints_CoupledJointDriveTrain_Vector)

class Robotics_Joints_FixedJoint_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Joints_FixedJoint_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Joints_FixedJoint_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Joints_FixedJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_FixedJoint_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Joints_FixedJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_FixedJoint_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Joints_FixedJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_FixedJoint_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Joints_FixedJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::difference_type j) -> Robotics_Joints_FixedJoint_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_FixedJoint_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Joints_FixedJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::difference_type

        __setslice__(Robotics_Joints_FixedJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::difference_type j, Robotics_Joints_FixedJoint_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint >,std::allocator< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > > > const &

        """
        return _RoboticsSwig.Robotics_Joints_FixedJoint_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Joints_FixedJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_FixedJoint_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Joints_FixedJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::difference_type

        __delitem__(Robotics_Joints_FixedJoint_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Joints_FixedJoint_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Joints_FixedJoint_Vector self, PySliceObject * slice) -> Robotics_Joints_FixedJoint_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Joints_FixedJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_FixedJoint_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Joints_FixedJoint_Vector self, PySliceObject * slice, Robotics_Joints_FixedJoint_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint >,std::allocator< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > > > const &

        __setitem__(Robotics_Joints_FixedJoint_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Joints_FixedJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FixedJoint_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Joints_FixedJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::value_type"""
        return _RoboticsSwig.Robotics_Joints_FixedJoint_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Joints_FixedJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FixedJoint_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Joints_FixedJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_FixedJoint_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Joints_FixedJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_FixedJoint_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Joints_FixedJoint_Vector self, Robotics_Joints_FixedJoint_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > > &

        """
        return _RoboticsSwig.Robotics_Joints_FixedJoint_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Joints_FixedJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_FixedJoint_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Joints_FixedJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_FixedJoint_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Joints_FixedJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_FixedJoint_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Joints_FixedJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_FixedJoint_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Joints_FixedJoint_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_FixedJoint_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Joints_FixedJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::allocator_type"""
        return _RoboticsSwig.Robotics_Joints_FixedJoint_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Joints_FixedJoint_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_FixedJoint_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Joints_FixedJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::iterator

        erase(Robotics_Joints_FixedJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::iterator first, std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::iterator last) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::iterator
        last: std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::iterator

        """
        return _RoboticsSwig.Robotics_Joints_FixedJoint_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Joints_FixedJoint_Vector self) -> Robotics_Joints_FixedJoint_Vector
        __init__(Robotics_Joints_FixedJoint_Vector self, Robotics_Joints_FixedJoint_Vector other) -> Robotics_Joints_FixedJoint_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > > const &

        __init__(Robotics_Joints_FixedJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::size_type size) -> Robotics_Joints_FixedJoint_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::size_type

        __init__(Robotics_Joints_FixedJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::size_type size, std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::value_type const & value) -> Robotics_Joints_FixedJoint_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::size_type
        value: std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::value_type const &

        """
        _RoboticsSwig.Robotics_Joints_FixedJoint_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Joints_FixedJoint_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Joints_FixedJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FixedJoint_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Joints_FixedJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_FixedJoint_Vector_front(self)

    def back(self):
        r"""back(Robotics_Joints_FixedJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_FixedJoint_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Joints_FixedJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FixedJoint_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Joints_FixedJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::size_type

        resize(Robotics_Joints_FixedJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::size_type new_size, std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FixedJoint_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Joints_FixedJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::iterator
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::value_type const &

        insert(Robotics_Joints_FixedJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::iterator
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FixedJoint_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Joints_FixedJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::size_type

        """
        return _RoboticsSwig.Robotics_Joints_FixedJoint_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Joints_FixedJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FixedJoint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_FixedJoint_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Joints_FixedJoint_Vector

# Register Robotics_Joints_FixedJoint_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Joints_FixedJoint_Vector_swigregister(Robotics_Joints_FixedJoint_Vector)

class Robotics_Joints_FlexibleAngularVelocityJoint_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Joints_FlexibleAngularVelocityJoint_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Joints_FlexibleAngularVelocityJoint_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Joints_FlexibleAngularVelocityJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_FlexibleAngularVelocityJoint_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Joints_FlexibleAngularVelocityJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_FlexibleAngularVelocityJoint_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Joints_FlexibleAngularVelocityJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_FlexibleAngularVelocityJoint_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Joints_FlexibleAngularVelocityJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::difference_type j) -> Robotics_Joints_FlexibleAngularVelocityJoint_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleAngularVelocityJoint_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Joints_FlexibleAngularVelocityJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::difference_type

        __setslice__(Robotics_Joints_FlexibleAngularVelocityJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::difference_type j, Robotics_Joints_FlexibleAngularVelocityJoint_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint >,std::allocator< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > > > const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleAngularVelocityJoint_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Joints_FlexibleAngularVelocityJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleAngularVelocityJoint_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Joints_FlexibleAngularVelocityJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::difference_type

        __delitem__(Robotics_Joints_FlexibleAngularVelocityJoint_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleAngularVelocityJoint_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Joints_FlexibleAngularVelocityJoint_Vector self, PySliceObject * slice) -> Robotics_Joints_FlexibleAngularVelocityJoint_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Joints_FlexibleAngularVelocityJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleAngularVelocityJoint_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Joints_FlexibleAngularVelocityJoint_Vector self, PySliceObject * slice, Robotics_Joints_FlexibleAngularVelocityJoint_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint >,std::allocator< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > > > const &

        __setitem__(Robotics_Joints_FlexibleAngularVelocityJoint_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Joints_FlexibleAngularVelocityJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleAngularVelocityJoint_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Joints_FlexibleAngularVelocityJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::value_type"""
        return _RoboticsSwig.Robotics_Joints_FlexibleAngularVelocityJoint_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Joints_FlexibleAngularVelocityJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleAngularVelocityJoint_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Joints_FlexibleAngularVelocityJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_FlexibleAngularVelocityJoint_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Joints_FlexibleAngularVelocityJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_FlexibleAngularVelocityJoint_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Joints_FlexibleAngularVelocityJoint_Vector self, Robotics_Joints_FlexibleAngularVelocityJoint_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > > &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleAngularVelocityJoint_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Joints_FlexibleAngularVelocityJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_FlexibleAngularVelocityJoint_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Joints_FlexibleAngularVelocityJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_FlexibleAngularVelocityJoint_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Joints_FlexibleAngularVelocityJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_FlexibleAngularVelocityJoint_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Joints_FlexibleAngularVelocityJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_FlexibleAngularVelocityJoint_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Joints_FlexibleAngularVelocityJoint_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_FlexibleAngularVelocityJoint_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Joints_FlexibleAngularVelocityJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::allocator_type"""
        return _RoboticsSwig.Robotics_Joints_FlexibleAngularVelocityJoint_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Joints_FlexibleAngularVelocityJoint_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_FlexibleAngularVelocityJoint_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Joints_FlexibleAngularVelocityJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::iterator

        erase(Robotics_Joints_FlexibleAngularVelocityJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::iterator first, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::iterator last) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::iterator
        last: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::iterator

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleAngularVelocityJoint_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Joints_FlexibleAngularVelocityJoint_Vector self) -> Robotics_Joints_FlexibleAngularVelocityJoint_Vector
        __init__(Robotics_Joints_FlexibleAngularVelocityJoint_Vector self, Robotics_Joints_FlexibleAngularVelocityJoint_Vector other) -> Robotics_Joints_FlexibleAngularVelocityJoint_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > > const &

        __init__(Robotics_Joints_FlexibleAngularVelocityJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::size_type size) -> Robotics_Joints_FlexibleAngularVelocityJoint_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::size_type

        __init__(Robotics_Joints_FlexibleAngularVelocityJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::size_type size, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::value_type const & value) -> Robotics_Joints_FlexibleAngularVelocityJoint_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::size_type
        value: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::value_type const &

        """
        _RoboticsSwig.Robotics_Joints_FlexibleAngularVelocityJoint_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Joints_FlexibleAngularVelocityJoint_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Joints_FlexibleAngularVelocityJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleAngularVelocityJoint_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Joints_FlexibleAngularVelocityJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_FlexibleAngularVelocityJoint_Vector_front(self)

    def back(self):
        r"""back(Robotics_Joints_FlexibleAngularVelocityJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_FlexibleAngularVelocityJoint_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Joints_FlexibleAngularVelocityJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleAngularVelocityJoint_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Joints_FlexibleAngularVelocityJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::size_type

        resize(Robotics_Joints_FlexibleAngularVelocityJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::size_type new_size, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleAngularVelocityJoint_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Joints_FlexibleAngularVelocityJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::iterator
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::value_type const &

        insert(Robotics_Joints_FlexibleAngularVelocityJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::iterator
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleAngularVelocityJoint_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Joints_FlexibleAngularVelocityJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::size_type

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleAngularVelocityJoint_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Joints_FlexibleAngularVelocityJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleAngularVelocityJoint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_FlexibleAngularVelocityJoint_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Joints_FlexibleAngularVelocityJoint_Vector

# Register Robotics_Joints_FlexibleAngularVelocityJoint_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Joints_FlexibleAngularVelocityJoint_Vector_swigregister(Robotics_Joints_FlexibleAngularVelocityJoint_Vector)

class Robotics_Joints_FlexibleJointData_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Joints_FlexibleJointData_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointData_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Joints_FlexibleJointData_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointData_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Joints_FlexibleJointData_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointData_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Joints_FlexibleJointData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointData_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Joints_FlexibleJointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::difference_type j) -> Robotics_Joints_FlexibleJointData_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleJointData_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Joints_FlexibleJointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::difference_type

        __setslice__(Robotics_Joints_FlexibleJointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::difference_type j, Robotics_Joints_FlexibleJointData_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData >,std::allocator< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > > > const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleJointData_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Joints_FlexibleJointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleJointData_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Joints_FlexibleJointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::difference_type

        __delitem__(Robotics_Joints_FlexibleJointData_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleJointData_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Joints_FlexibleJointData_Vector self, PySliceObject * slice) -> Robotics_Joints_FlexibleJointData_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Joints_FlexibleJointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleJointData_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Joints_FlexibleJointData_Vector self, PySliceObject * slice, Robotics_Joints_FlexibleJointData_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData >,std::allocator< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > > > const &

        __setitem__(Robotics_Joints_FlexibleJointData_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Joints_FlexibleJointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleJointData_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Joints_FlexibleJointData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::value_type"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointData_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Joints_FlexibleJointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleJointData_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Joints_FlexibleJointData_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointData_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Joints_FlexibleJointData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointData_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Joints_FlexibleJointData_Vector self, Robotics_Joints_FlexibleJointData_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > > &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleJointData_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Joints_FlexibleJointData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointData_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Joints_FlexibleJointData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointData_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Joints_FlexibleJointData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointData_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Joints_FlexibleJointData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointData_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Joints_FlexibleJointData_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointData_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Joints_FlexibleJointData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::allocator_type"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointData_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Joints_FlexibleJointData_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointData_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Joints_FlexibleJointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::iterator

        erase(Robotics_Joints_FlexibleJointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::iterator first, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::iterator last) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::iterator
        last: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::iterator

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleJointData_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Joints_FlexibleJointData_Vector self) -> Robotics_Joints_FlexibleJointData_Vector
        __init__(Robotics_Joints_FlexibleJointData_Vector self, Robotics_Joints_FlexibleJointData_Vector other) -> Robotics_Joints_FlexibleJointData_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > > const &

        __init__(Robotics_Joints_FlexibleJointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::size_type size) -> Robotics_Joints_FlexibleJointData_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::size_type

        __init__(Robotics_Joints_FlexibleJointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::size_type size, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::value_type const & value) -> Robotics_Joints_FlexibleJointData_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::size_type
        value: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::value_type const &

        """
        _RoboticsSwig.Robotics_Joints_FlexibleJointData_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Joints_FlexibleJointData_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Joints_FlexibleJointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleJointData_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Joints_FlexibleJointData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointData_Vector_front(self)

    def back(self):
        r"""back(Robotics_Joints_FlexibleJointData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointData_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Joints_FlexibleJointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleJointData_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Joints_FlexibleJointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::size_type

        resize(Robotics_Joints_FlexibleJointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::size_type new_size, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleJointData_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Joints_FlexibleJointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::iterator
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::value_type const &

        insert(Robotics_Joints_FlexibleJointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::iterator
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleJointData_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Joints_FlexibleJointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::size_type

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleJointData_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Joints_FlexibleJointData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointData > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointData_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Joints_FlexibleJointData_Vector

# Register Robotics_Joints_FlexibleJointData_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Joints_FlexibleJointData_Vector_swigregister(Robotics_Joints_FlexibleJointData_Vector)

class Robotics_Joints_FlexibleJointDriveTrain_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Joints_FlexibleJointDriveTrain_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Joints_FlexibleJointDriveTrain_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Joints_FlexibleJointDriveTrain_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Joints_FlexibleJointDriveTrain_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Joints_FlexibleJointDriveTrain_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::difference_type j) -> Robotics_Joints_FlexibleJointDriveTrain_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Joints_FlexibleJointDriveTrain_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::difference_type

        __setslice__(Robotics_Joints_FlexibleJointDriveTrain_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::difference_type j, Robotics_Joints_FlexibleJointDriveTrain_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain >,std::allocator< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > > > const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Joints_FlexibleJointDriveTrain_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Joints_FlexibleJointDriveTrain_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::difference_type

        __delitem__(Robotics_Joints_FlexibleJointDriveTrain_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Joints_FlexibleJointDriveTrain_Vector self, PySliceObject * slice) -> Robotics_Joints_FlexibleJointDriveTrain_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Joints_FlexibleJointDriveTrain_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Joints_FlexibleJointDriveTrain_Vector self, PySliceObject * slice, Robotics_Joints_FlexibleJointDriveTrain_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain >,std::allocator< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > > > const &

        __setitem__(Robotics_Joints_FlexibleJointDriveTrain_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Joints_FlexibleJointDriveTrain_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Joints_FlexibleJointDriveTrain_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::value_type"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Joints_FlexibleJointDriveTrain_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Joints_FlexibleJointDriveTrain_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Joints_FlexibleJointDriveTrain_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Joints_FlexibleJointDriveTrain_Vector self, Robotics_Joints_FlexibleJointDriveTrain_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > > &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Joints_FlexibleJointDriveTrain_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Joints_FlexibleJointDriveTrain_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Joints_FlexibleJointDriveTrain_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Joints_FlexibleJointDriveTrain_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Joints_FlexibleJointDriveTrain_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Joints_FlexibleJointDriveTrain_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::allocator_type"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Joints_FlexibleJointDriveTrain_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Joints_FlexibleJointDriveTrain_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::iterator

        erase(Robotics_Joints_FlexibleJointDriveTrain_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::iterator first, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::iterator last) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::iterator
        last: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::iterator

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Joints_FlexibleJointDriveTrain_Vector self) -> Robotics_Joints_FlexibleJointDriveTrain_Vector
        __init__(Robotics_Joints_FlexibleJointDriveTrain_Vector self, Robotics_Joints_FlexibleJointDriveTrain_Vector other) -> Robotics_Joints_FlexibleJointDriveTrain_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > > const &

        __init__(Robotics_Joints_FlexibleJointDriveTrain_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::size_type size) -> Robotics_Joints_FlexibleJointDriveTrain_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::size_type

        __init__(Robotics_Joints_FlexibleJointDriveTrain_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::size_type size, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::value_type const & value) -> Robotics_Joints_FlexibleJointDriveTrain_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::size_type
        value: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::value_type const &

        """
        _RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Joints_FlexibleJointDriveTrain_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Joints_FlexibleJointDriveTrain_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Joints_FlexibleJointDriveTrain_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_Vector_front(self)

    def back(self):
        r"""back(Robotics_Joints_FlexibleJointDriveTrain_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Joints_FlexibleJointDriveTrain_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Joints_FlexibleJointDriveTrain_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::size_type

        resize(Robotics_Joints_FlexibleJointDriveTrain_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::size_type new_size, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Joints_FlexibleJointDriveTrain_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::iterator
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::value_type const &

        insert(Robotics_Joints_FlexibleJointDriveTrain_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::iterator
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Joints_FlexibleJointDriveTrain_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::size_type

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Joints_FlexibleJointDriveTrain_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Joints_FlexibleJointDriveTrain_Vector

# Register Robotics_Joints_FlexibleJointDriveTrain_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_Vector_swigregister(Robotics_Joints_FlexibleJointDriveTrain_Vector)

class Robotics_Joints_FlexibleTorqueJoint_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Joints_FlexibleTorqueJoint_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Joints_FlexibleTorqueJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Joints_FlexibleTorqueJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Joints_FlexibleTorqueJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Joints_FlexibleTorqueJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::difference_type j) -> Robotics_Joints_FlexibleTorqueJoint_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Joints_FlexibleTorqueJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::difference_type

        __setslice__(Robotics_Joints_FlexibleTorqueJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::difference_type j, Robotics_Joints_FlexibleTorqueJoint_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint >,std::allocator< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > > > const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Joints_FlexibleTorqueJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Joints_FlexibleTorqueJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::difference_type

        __delitem__(Robotics_Joints_FlexibleTorqueJoint_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Joints_FlexibleTorqueJoint_Vector self, PySliceObject * slice) -> Robotics_Joints_FlexibleTorqueJoint_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Joints_FlexibleTorqueJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Joints_FlexibleTorqueJoint_Vector self, PySliceObject * slice, Robotics_Joints_FlexibleTorqueJoint_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint >,std::allocator< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > > > const &

        __setitem__(Robotics_Joints_FlexibleTorqueJoint_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Joints_FlexibleTorqueJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Joints_FlexibleTorqueJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::value_type"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Joints_FlexibleTorqueJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Joints_FlexibleTorqueJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Joints_FlexibleTorqueJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Joints_FlexibleTorqueJoint_Vector self, Robotics_Joints_FlexibleTorqueJoint_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > > &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Joints_FlexibleTorqueJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Joints_FlexibleTorqueJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Joints_FlexibleTorqueJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Joints_FlexibleTorqueJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Joints_FlexibleTorqueJoint_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Joints_FlexibleTorqueJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::allocator_type"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Joints_FlexibleTorqueJoint_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Joints_FlexibleTorqueJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::iterator

        erase(Robotics_Joints_FlexibleTorqueJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::iterator first, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::iterator last) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::iterator
        last: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::iterator

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Joints_FlexibleTorqueJoint_Vector self) -> Robotics_Joints_FlexibleTorqueJoint_Vector
        __init__(Robotics_Joints_FlexibleTorqueJoint_Vector self, Robotics_Joints_FlexibleTorqueJoint_Vector other) -> Robotics_Joints_FlexibleTorqueJoint_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > > const &

        __init__(Robotics_Joints_FlexibleTorqueJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::size_type size) -> Robotics_Joints_FlexibleTorqueJoint_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::size_type

        __init__(Robotics_Joints_FlexibleTorqueJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::size_type size, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::value_type const & value) -> Robotics_Joints_FlexibleTorqueJoint_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::size_type
        value: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::value_type const &

        """
        _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Joints_FlexibleTorqueJoint_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Joints_FlexibleTorqueJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Joints_FlexibleTorqueJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_front(self)

    def back(self):
        r"""back(Robotics_Joints_FlexibleTorqueJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Joints_FlexibleTorqueJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Joints_FlexibleTorqueJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::size_type

        resize(Robotics_Joints_FlexibleTorqueJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::size_type new_size, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Joints_FlexibleTorqueJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::iterator
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::value_type const &

        insert(Robotics_Joints_FlexibleTorqueJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::iterator
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Joints_FlexibleTorqueJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::size_type

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Joints_FlexibleTorqueJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::FlexibleTorqueJoint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Joints_FlexibleTorqueJoint_Vector

# Register Robotics_Joints_FlexibleTorqueJoint_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_swigregister(Robotics_Joints_FlexibleTorqueJoint_Vector)

class Robotics_Joints_HingeJoint_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Joints_HingeJoint_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Joints_HingeJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Joints_HingeJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Joints_HingeJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Joints_HingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::difference_type j) -> Robotics_Joints_HingeJoint_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Joints_HingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::difference_type

        __setslice__(Robotics_Joints_HingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::difference_type j, Robotics_Joints_HingeJoint_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint >,std::allocator< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > > > const &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Joints_HingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Joints_HingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::difference_type

        __delitem__(Robotics_Joints_HingeJoint_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Joints_HingeJoint_Vector self, PySliceObject * slice) -> Robotics_Joints_HingeJoint_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Joints_HingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Joints_HingeJoint_Vector self, PySliceObject * slice, Robotics_Joints_HingeJoint_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint >,std::allocator< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > > > const &

        __setitem__(Robotics_Joints_HingeJoint_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Joints_HingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Joints_HingeJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::value_type"""
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Joints_HingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Joints_HingeJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Joints_HingeJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Joints_HingeJoint_Vector self, Robotics_Joints_HingeJoint_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > > &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Joints_HingeJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Joints_HingeJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Joints_HingeJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Joints_HingeJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Joints_HingeJoint_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Joints_HingeJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::allocator_type"""
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Joints_HingeJoint_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Joints_HingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::iterator

        erase(Robotics_Joints_HingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::iterator first, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::iterator last) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::iterator
        last: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::iterator

        """
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Joints_HingeJoint_Vector self) -> Robotics_Joints_HingeJoint_Vector
        __init__(Robotics_Joints_HingeJoint_Vector self, Robotics_Joints_HingeJoint_Vector other) -> Robotics_Joints_HingeJoint_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > > const &

        __init__(Robotics_Joints_HingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::size_type size) -> Robotics_Joints_HingeJoint_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::size_type

        __init__(Robotics_Joints_HingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::size_type size, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::value_type const & value) -> Robotics_Joints_HingeJoint_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::size_type
        value: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::value_type const &

        """
        _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Joints_HingeJoint_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Joints_HingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Joints_HingeJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_front(self)

    def back(self):
        r"""back(Robotics_Joints_HingeJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Joints_HingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Joints_HingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::size_type

        resize(Robotics_Joints_HingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::size_type new_size, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Joints_HingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::iterator
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::value_type const &

        insert(Robotics_Joints_HingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::iterator
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Joints_HingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::size_type

        """
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Joints_HingeJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJoint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Joints_HingeJoint_Vector

# Register Robotics_Joints_HingeJoint_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Joints_HingeJoint_Vector_swigregister(Robotics_Joints_HingeJoint_Vector)

class Robotics_Joints_HingeJointData_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Joints_HingeJointData_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Joints_HingeJointData_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Joints_HingeJointData_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Joints_HingeJointData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Joints_HingeJointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::difference_type j) -> Robotics_Joints_HingeJointData_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Joints_HingeJointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::difference_type

        __setslice__(Robotics_Joints_HingeJointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::difference_type j, Robotics_Joints_HingeJointData_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData >,std::allocator< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > > > const &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Joints_HingeJointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Joints_HingeJointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::difference_type

        __delitem__(Robotics_Joints_HingeJointData_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Joints_HingeJointData_Vector self, PySliceObject * slice) -> Robotics_Joints_HingeJointData_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Joints_HingeJointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Joints_HingeJointData_Vector self, PySliceObject * slice, Robotics_Joints_HingeJointData_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData >,std::allocator< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > > > const &

        __setitem__(Robotics_Joints_HingeJointData_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Joints_HingeJointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Joints_HingeJointData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::value_type"""
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Joints_HingeJointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Joints_HingeJointData_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Joints_HingeJointData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Joints_HingeJointData_Vector self, Robotics_Joints_HingeJointData_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > > &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Joints_HingeJointData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Joints_HingeJointData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Joints_HingeJointData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Joints_HingeJointData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Joints_HingeJointData_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Joints_HingeJointData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::allocator_type"""
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Joints_HingeJointData_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Joints_HingeJointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::iterator

        erase(Robotics_Joints_HingeJointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::iterator first, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::iterator last) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::iterator
        last: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::iterator

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Joints_HingeJointData_Vector self) -> Robotics_Joints_HingeJointData_Vector
        __init__(Robotics_Joints_HingeJointData_Vector self, Robotics_Joints_HingeJointData_Vector other) -> Robotics_Joints_HingeJointData_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > > const &

        __init__(Robotics_Joints_HingeJointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::size_type size) -> Robotics_Joints_HingeJointData_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::size_type

        __init__(Robotics_Joints_HingeJointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::size_type size, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::value_type const & value) -> Robotics_Joints_HingeJointData_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::size_type
        value: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::value_type const &

        """
        _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Joints_HingeJointData_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Joints_HingeJointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Joints_HingeJointData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_front(self)

    def back(self):
        r"""back(Robotics_Joints_HingeJointData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Joints_HingeJointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Joints_HingeJointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::size_type

        resize(Robotics_Joints_HingeJointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::size_type new_size, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Joints_HingeJointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::iterator
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::value_type const &

        insert(Robotics_Joints_HingeJointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::iterator
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Joints_HingeJointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::size_type

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Joints_HingeJointData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::HingeJointData > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Joints_HingeJointData_Vector

# Register Robotics_Joints_HingeJointData_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Joints_HingeJointData_Vector_swigregister(Robotics_Joints_HingeJointData_Vector)

class Robotics_Joints_Joint_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Joints_Joint_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Joints_Joint_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Joints_Joint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_Joint_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Joints_Joint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_Joint_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Joints_Joint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_Joint_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Joints_Joint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::difference_type j) -> Robotics_Joints_Joint_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_Joint_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Joints_Joint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::difference_type

        __setslice__(Robotics_Joints_Joint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::difference_type j, Robotics_Joints_Joint_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint >,std::allocator< std::shared_ptr< openplx::Robotics::Joints::Joint > > > const &

        """
        return _RoboticsSwig.Robotics_Joints_Joint_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Joints_Joint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_Joint_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Joints_Joint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::difference_type

        __delitem__(Robotics_Joints_Joint_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Joints_Joint_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Joints_Joint_Vector self, PySliceObject * slice) -> Robotics_Joints_Joint_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Joints_Joint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_Joint_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Joints_Joint_Vector self, PySliceObject * slice, Robotics_Joints_Joint_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint >,std::allocator< std::shared_ptr< openplx::Robotics::Joints::Joint > > > const &

        __setitem__(Robotics_Joints_Joint_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Joints_Joint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_Joint_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Joints_Joint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::value_type"""
        return _RoboticsSwig.Robotics_Joints_Joint_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Joints_Joint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_Joint_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Joints_Joint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_Joint_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Joints_Joint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_Joint_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Joints_Joint_Vector self, Robotics_Joints_Joint_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > > &

        """
        return _RoboticsSwig.Robotics_Joints_Joint_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Joints_Joint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_Joint_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Joints_Joint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_Joint_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Joints_Joint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_Joint_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Joints_Joint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_Joint_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Joints_Joint_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_Joint_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Joints_Joint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::allocator_type"""
        return _RoboticsSwig.Robotics_Joints_Joint_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Joints_Joint_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_Joint_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Joints_Joint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::iterator

        erase(Robotics_Joints_Joint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::iterator first, std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::iterator last) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::iterator
        last: std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::iterator

        """
        return _RoboticsSwig.Robotics_Joints_Joint_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Joints_Joint_Vector self) -> Robotics_Joints_Joint_Vector
        __init__(Robotics_Joints_Joint_Vector self, Robotics_Joints_Joint_Vector other) -> Robotics_Joints_Joint_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > > const &

        __init__(Robotics_Joints_Joint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::size_type size) -> Robotics_Joints_Joint_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::size_type

        __init__(Robotics_Joints_Joint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::size_type size, std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::value_type const & value) -> Robotics_Joints_Joint_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::size_type
        value: std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::value_type const &

        """
        _RoboticsSwig.Robotics_Joints_Joint_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Joints_Joint_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Joints_Joint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_Joint_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Joints_Joint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_Joint_Vector_front(self)

    def back(self):
        r"""back(Robotics_Joints_Joint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_Joint_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Joints_Joint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_Joint_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Joints_Joint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::size_type

        resize(Robotics_Joints_Joint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::size_type new_size, std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_Joint_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Joints_Joint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::iterator
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::value_type const &

        insert(Robotics_Joints_Joint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::iterator
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_Joint_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Joints_Joint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::size_type

        """
        return _RoboticsSwig.Robotics_Joints_Joint_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Joints_Joint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::Joint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_Joint_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Joints_Joint_Vector

# Register Robotics_Joints_Joint_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Joints_Joint_Vector_swigregister(Robotics_Joints_Joint_Vector)

class Robotics_Joints_JointData_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Joints_JointData_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Joints_JointData_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Joints_JointData_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_JointData_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Joints_JointData_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_JointData_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Joints_JointData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_JointData_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Joints_JointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::difference_type j) -> Robotics_Joints_JointData_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_JointData_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Joints_JointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::difference_type

        __setslice__(Robotics_Joints_JointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::difference_type j, Robotics_Joints_JointData_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData >,std::allocator< std::shared_ptr< openplx::Robotics::Joints::JointData > > > const &

        """
        return _RoboticsSwig.Robotics_Joints_JointData_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Joints_JointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_JointData_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Joints_JointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::difference_type

        __delitem__(Robotics_Joints_JointData_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Joints_JointData_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Joints_JointData_Vector self, PySliceObject * slice) -> Robotics_Joints_JointData_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Joints_JointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_JointData_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Joints_JointData_Vector self, PySliceObject * slice, Robotics_Joints_JointData_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData >,std::allocator< std::shared_ptr< openplx::Robotics::Joints::JointData > > > const &

        __setitem__(Robotics_Joints_JointData_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Joints_JointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_JointData_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Joints_JointData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::value_type"""
        return _RoboticsSwig.Robotics_Joints_JointData_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Joints_JointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_JointData_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Joints_JointData_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_JointData_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Joints_JointData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_JointData_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Joints_JointData_Vector self, Robotics_Joints_JointData_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > > &

        """
        return _RoboticsSwig.Robotics_Joints_JointData_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Joints_JointData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_JointData_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Joints_JointData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_JointData_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Joints_JointData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_JointData_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Joints_JointData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_JointData_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Joints_JointData_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_JointData_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Joints_JointData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::allocator_type"""
        return _RoboticsSwig.Robotics_Joints_JointData_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Joints_JointData_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_JointData_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Joints_JointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::iterator

        erase(Robotics_Joints_JointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::iterator first, std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::iterator last) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::iterator
        last: std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::iterator

        """
        return _RoboticsSwig.Robotics_Joints_JointData_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Joints_JointData_Vector self) -> Robotics_Joints_JointData_Vector
        __init__(Robotics_Joints_JointData_Vector self, Robotics_Joints_JointData_Vector other) -> Robotics_Joints_JointData_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > > const &

        __init__(Robotics_Joints_JointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::size_type size) -> Robotics_Joints_JointData_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::size_type

        __init__(Robotics_Joints_JointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::size_type size, std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::value_type const & value) -> Robotics_Joints_JointData_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::size_type
        value: std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::value_type const &

        """
        _RoboticsSwig.Robotics_Joints_JointData_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Joints_JointData_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Joints_JointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_JointData_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Joints_JointData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_JointData_Vector_front(self)

    def back(self):
        r"""back(Robotics_Joints_JointData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_JointData_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Joints_JointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_JointData_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Joints_JointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::size_type

        resize(Robotics_Joints_JointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::size_type new_size, std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_JointData_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Joints_JointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::iterator
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::value_type const &

        insert(Robotics_Joints_JointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::iterator
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_JointData_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Joints_JointData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::size_type

        """
        return _RoboticsSwig.Robotics_Joints_JointData_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Joints_JointData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::JointData > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_JointData_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Joints_JointData_Vector

# Register Robotics_Joints_JointData_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Joints_JointData_Vector_swigregister(Robotics_Joints_JointData_Vector)

class Robotics_Joints_PositionHingeJoint_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Joints_PositionHingeJoint_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Joints_PositionHingeJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Joints_PositionHingeJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Joints_PositionHingeJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Joints_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::difference_type j) -> Robotics_Joints_PositionHingeJoint_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Joints_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::difference_type

        __setslice__(Robotics_Joints_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::difference_type j, Robotics_Joints_PositionHingeJoint_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint >,std::allocator< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > > > const &

        """
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Joints_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Joints_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::difference_type

        __delitem__(Robotics_Joints_PositionHingeJoint_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Joints_PositionHingeJoint_Vector self, PySliceObject * slice) -> Robotics_Joints_PositionHingeJoint_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Joints_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Joints_PositionHingeJoint_Vector self, PySliceObject * slice, Robotics_Joints_PositionHingeJoint_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint >,std::allocator< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > > > const &

        __setitem__(Robotics_Joints_PositionHingeJoint_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Joints_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Joints_PositionHingeJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::value_type"""
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Joints_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Joints_PositionHingeJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Joints_PositionHingeJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Joints_PositionHingeJoint_Vector self, Robotics_Joints_PositionHingeJoint_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > > &

        """
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Joints_PositionHingeJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Joints_PositionHingeJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Joints_PositionHingeJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Joints_PositionHingeJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Joints_PositionHingeJoint_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Joints_PositionHingeJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::allocator_type"""
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Joints_PositionHingeJoint_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Joints_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::iterator

        erase(Robotics_Joints_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::iterator first, std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::iterator last) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::iterator
        last: std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::iterator

        """
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Joints_PositionHingeJoint_Vector self) -> Robotics_Joints_PositionHingeJoint_Vector
        __init__(Robotics_Joints_PositionHingeJoint_Vector self, Robotics_Joints_PositionHingeJoint_Vector other) -> Robotics_Joints_PositionHingeJoint_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > > const &

        __init__(Robotics_Joints_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::size_type size) -> Robotics_Joints_PositionHingeJoint_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::size_type

        __init__(Robotics_Joints_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::size_type size, std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::value_type const & value) -> Robotics_Joints_PositionHingeJoint_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::size_type
        value: std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::value_type const &

        """
        _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Joints_PositionHingeJoint_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Joints_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Joints_PositionHingeJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_front(self)

    def back(self):
        r"""back(Robotics_Joints_PositionHingeJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Joints_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Joints_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::size_type

        resize(Robotics_Joints_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::size_type new_size, std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Joints_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::iterator
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::value_type const &

        insert(Robotics_Joints_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::iterator
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Joints_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::size_type

        """
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Joints_PositionHingeJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::PositionHingeJoint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Joints_PositionHingeJoint_Vector

# Register Robotics_Joints_PositionHingeJoint_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_swigregister(Robotics_Joints_PositionHingeJoint_Vector)

class Robotics_Joints_PrismaticJoint_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Joints_PrismaticJoint_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Joints_PrismaticJoint_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Joints_PrismaticJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_PrismaticJoint_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Joints_PrismaticJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_PrismaticJoint_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Joints_PrismaticJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_PrismaticJoint_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Joints_PrismaticJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::difference_type j) -> Robotics_Joints_PrismaticJoint_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_PrismaticJoint_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Joints_PrismaticJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::difference_type

        __setslice__(Robotics_Joints_PrismaticJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::difference_type j, Robotics_Joints_PrismaticJoint_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint >,std::allocator< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > > > const &

        """
        return _RoboticsSwig.Robotics_Joints_PrismaticJoint_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Joints_PrismaticJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_PrismaticJoint_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Joints_PrismaticJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::difference_type

        __delitem__(Robotics_Joints_PrismaticJoint_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Joints_PrismaticJoint_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Joints_PrismaticJoint_Vector self, PySliceObject * slice) -> Robotics_Joints_PrismaticJoint_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Joints_PrismaticJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_PrismaticJoint_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Joints_PrismaticJoint_Vector self, PySliceObject * slice, Robotics_Joints_PrismaticJoint_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint >,std::allocator< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > > > const &

        __setitem__(Robotics_Joints_PrismaticJoint_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Joints_PrismaticJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_PrismaticJoint_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Joints_PrismaticJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::value_type"""
        return _RoboticsSwig.Robotics_Joints_PrismaticJoint_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Joints_PrismaticJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_PrismaticJoint_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Joints_PrismaticJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_PrismaticJoint_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Joints_PrismaticJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_PrismaticJoint_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Joints_PrismaticJoint_Vector self, Robotics_Joints_PrismaticJoint_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > > &

        """
        return _RoboticsSwig.Robotics_Joints_PrismaticJoint_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Joints_PrismaticJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_PrismaticJoint_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Joints_PrismaticJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_PrismaticJoint_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Joints_PrismaticJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_PrismaticJoint_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Joints_PrismaticJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_PrismaticJoint_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Joints_PrismaticJoint_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_PrismaticJoint_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Joints_PrismaticJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::allocator_type"""
        return _RoboticsSwig.Robotics_Joints_PrismaticJoint_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Joints_PrismaticJoint_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_PrismaticJoint_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Joints_PrismaticJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::iterator

        erase(Robotics_Joints_PrismaticJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::iterator first, std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::iterator last) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::iterator
        last: std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::iterator

        """
        return _RoboticsSwig.Robotics_Joints_PrismaticJoint_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Joints_PrismaticJoint_Vector self) -> Robotics_Joints_PrismaticJoint_Vector
        __init__(Robotics_Joints_PrismaticJoint_Vector self, Robotics_Joints_PrismaticJoint_Vector other) -> Robotics_Joints_PrismaticJoint_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > > const &

        __init__(Robotics_Joints_PrismaticJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::size_type size) -> Robotics_Joints_PrismaticJoint_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::size_type

        __init__(Robotics_Joints_PrismaticJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::size_type size, std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::value_type const & value) -> Robotics_Joints_PrismaticJoint_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::size_type
        value: std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::value_type const &

        """
        _RoboticsSwig.Robotics_Joints_PrismaticJoint_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Joints_PrismaticJoint_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Joints_PrismaticJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_PrismaticJoint_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Joints_PrismaticJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_PrismaticJoint_Vector_front(self)

    def back(self):
        r"""back(Robotics_Joints_PrismaticJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_PrismaticJoint_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Joints_PrismaticJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_PrismaticJoint_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Joints_PrismaticJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::size_type

        resize(Robotics_Joints_PrismaticJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::size_type new_size, std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_PrismaticJoint_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Joints_PrismaticJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::iterator
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::value_type const &

        insert(Robotics_Joints_PrismaticJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::iterator
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_PrismaticJoint_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Joints_PrismaticJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::size_type

        """
        return _RoboticsSwig.Robotics_Joints_PrismaticJoint_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Joints_PrismaticJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::PrismaticJoint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_PrismaticJoint_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Joints_PrismaticJoint_Vector

# Register Robotics_Joints_PrismaticJoint_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Joints_PrismaticJoint_Vector_swigregister(Robotics_Joints_PrismaticJoint_Vector)

class Robotics_Joints_TorqueHingeJoint_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Joints_TorqueHingeJoint_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Joints_TorqueHingeJoint_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Joints_TorqueHingeJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_TorqueHingeJoint_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Joints_TorqueHingeJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_TorqueHingeJoint_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Joints_TorqueHingeJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_TorqueHingeJoint_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Joints_TorqueHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::difference_type j) -> Robotics_Joints_TorqueHingeJoint_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_TorqueHingeJoint_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Joints_TorqueHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::difference_type

        __setslice__(Robotics_Joints_TorqueHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::difference_type j, Robotics_Joints_TorqueHingeJoint_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint >,std::allocator< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > > > const &

        """
        return _RoboticsSwig.Robotics_Joints_TorqueHingeJoint_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Joints_TorqueHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_TorqueHingeJoint_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Joints_TorqueHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::difference_type

        __delitem__(Robotics_Joints_TorqueHingeJoint_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Joints_TorqueHingeJoint_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Joints_TorqueHingeJoint_Vector self, PySliceObject * slice) -> Robotics_Joints_TorqueHingeJoint_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Joints_TorqueHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_TorqueHingeJoint_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Joints_TorqueHingeJoint_Vector self, PySliceObject * slice, Robotics_Joints_TorqueHingeJoint_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint >,std::allocator< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > > > const &

        __setitem__(Robotics_Joints_TorqueHingeJoint_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Joints_TorqueHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_TorqueHingeJoint_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Joints_TorqueHingeJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::value_type"""
        return _RoboticsSwig.Robotics_Joints_TorqueHingeJoint_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Joints_TorqueHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_TorqueHingeJoint_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Joints_TorqueHingeJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_TorqueHingeJoint_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Joints_TorqueHingeJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_TorqueHingeJoint_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Joints_TorqueHingeJoint_Vector self, Robotics_Joints_TorqueHingeJoint_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > > &

        """
        return _RoboticsSwig.Robotics_Joints_TorqueHingeJoint_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Joints_TorqueHingeJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_TorqueHingeJoint_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Joints_TorqueHingeJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_TorqueHingeJoint_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Joints_TorqueHingeJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_TorqueHingeJoint_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Joints_TorqueHingeJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_TorqueHingeJoint_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Joints_TorqueHingeJoint_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_TorqueHingeJoint_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Joints_TorqueHingeJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::allocator_type"""
        return _RoboticsSwig.Robotics_Joints_TorqueHingeJoint_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Joints_TorqueHingeJoint_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_TorqueHingeJoint_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Joints_TorqueHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::iterator

        erase(Robotics_Joints_TorqueHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::iterator first, std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::iterator last) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::iterator
        last: std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::iterator

        """
        return _RoboticsSwig.Robotics_Joints_TorqueHingeJoint_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Joints_TorqueHingeJoint_Vector self) -> Robotics_Joints_TorqueHingeJoint_Vector
        __init__(Robotics_Joints_TorqueHingeJoint_Vector self, Robotics_Joints_TorqueHingeJoint_Vector other) -> Robotics_Joints_TorqueHingeJoint_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > > const &

        __init__(Robotics_Joints_TorqueHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::size_type size) -> Robotics_Joints_TorqueHingeJoint_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::size_type

        __init__(Robotics_Joints_TorqueHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::size_type size, std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::value_type const & value) -> Robotics_Joints_TorqueHingeJoint_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::size_type
        value: std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::value_type const &

        """
        _RoboticsSwig.Robotics_Joints_TorqueHingeJoint_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Joints_TorqueHingeJoint_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Joints_TorqueHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_TorqueHingeJoint_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Joints_TorqueHingeJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_TorqueHingeJoint_Vector_front(self)

    def back(self):
        r"""back(Robotics_Joints_TorqueHingeJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_TorqueHingeJoint_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Joints_TorqueHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_TorqueHingeJoint_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Joints_TorqueHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::size_type

        resize(Robotics_Joints_TorqueHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::size_type new_size, std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_TorqueHingeJoint_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Joints_TorqueHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::iterator
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::value_type const &

        insert(Robotics_Joints_TorqueHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::iterator
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_TorqueHingeJoint_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Joints_TorqueHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::size_type

        """
        return _RoboticsSwig.Robotics_Joints_TorqueHingeJoint_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Joints_TorqueHingeJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::TorqueHingeJoint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_TorqueHingeJoint_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Joints_TorqueHingeJoint_Vector

# Register Robotics_Joints_TorqueHingeJoint_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Joints_TorqueHingeJoint_Vector_swigregister(Robotics_Joints_TorqueHingeJoint_Vector)

class Robotics_Joints_VelocityHingeJoint_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Joints_VelocityHingeJoint_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Joints_VelocityHingeJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Joints_VelocityHingeJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Joints_VelocityHingeJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Joints_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::difference_type j) -> Robotics_Joints_VelocityHingeJoint_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Joints_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::difference_type

        __setslice__(Robotics_Joints_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::difference_type j, Robotics_Joints_VelocityHingeJoint_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint >,std::allocator< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > > > const &

        """
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Joints_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Joints_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::difference_type

        __delitem__(Robotics_Joints_VelocityHingeJoint_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Joints_VelocityHingeJoint_Vector self, PySliceObject * slice) -> Robotics_Joints_VelocityHingeJoint_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Joints_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Joints_VelocityHingeJoint_Vector self, PySliceObject * slice, Robotics_Joints_VelocityHingeJoint_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint >,std::allocator< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > > > const &

        __setitem__(Robotics_Joints_VelocityHingeJoint_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Joints_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Joints_VelocityHingeJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::value_type"""
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Joints_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Joints_VelocityHingeJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Joints_VelocityHingeJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Joints_VelocityHingeJoint_Vector self, Robotics_Joints_VelocityHingeJoint_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > > &

        """
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Joints_VelocityHingeJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Joints_VelocityHingeJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Joints_VelocityHingeJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Joints_VelocityHingeJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Joints_VelocityHingeJoint_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Joints_VelocityHingeJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::allocator_type"""
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Joints_VelocityHingeJoint_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Joints_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::iterator

        erase(Robotics_Joints_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::iterator first, std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::iterator last) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::iterator
        last: std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::iterator

        """
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Joints_VelocityHingeJoint_Vector self) -> Robotics_Joints_VelocityHingeJoint_Vector
        __init__(Robotics_Joints_VelocityHingeJoint_Vector self, Robotics_Joints_VelocityHingeJoint_Vector other) -> Robotics_Joints_VelocityHingeJoint_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > > const &

        __init__(Robotics_Joints_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::size_type size) -> Robotics_Joints_VelocityHingeJoint_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::size_type

        __init__(Robotics_Joints_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::size_type size, std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::value_type const & value) -> Robotics_Joints_VelocityHingeJoint_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::size_type
        value: std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::value_type const &

        """
        _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Joints_VelocityHingeJoint_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Joints_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Joints_VelocityHingeJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_front(self)

    def back(self):
        r"""back(Robotics_Joints_VelocityHingeJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Joints_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Joints_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::size_type

        resize(Robotics_Joints_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::size_type new_size, std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Joints_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::iterator
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::value_type const &

        insert(Robotics_Joints_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::iterator
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Joints_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::size_type

        """
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Joints_VelocityHingeJoint_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Joints::VelocityHingeJoint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Joints_VelocityHingeJoint_Vector

# Register Robotics_Joints_VelocityHingeJoint_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_swigregister(Robotics_Joints_VelocityHingeJoint_Vector)

class Robotics_Links_LinkData_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Links_LinkData_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Links_LinkData_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Links_LinkData_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Links_LinkData_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Links_LinkData_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Links_LinkData_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Links_LinkData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::size_type"""
        return _RoboticsSwig.Robotics_Links_LinkData_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Links_LinkData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::difference_type j) -> Robotics_Links_LinkData_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::difference_type

        """
        return _RoboticsSwig.Robotics_Links_LinkData_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Links_LinkData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::difference_type

        __setslice__(Robotics_Links_LinkData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::difference_type j, Robotics_Links_LinkData_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData >,std::allocator< std::shared_ptr< openplx::Robotics::Links::LinkData > > > const &

        """
        return _RoboticsSwig.Robotics_Links_LinkData_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Links_LinkData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::difference_type

        """
        return _RoboticsSwig.Robotics_Links_LinkData_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Links_LinkData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::difference_type

        __delitem__(Robotics_Links_LinkData_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Links_LinkData_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Links_LinkData_Vector self, PySliceObject * slice) -> Robotics_Links_LinkData_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Links_LinkData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::difference_type

        """
        return _RoboticsSwig.Robotics_Links_LinkData_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Links_LinkData_Vector self, PySliceObject * slice, Robotics_Links_LinkData_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData >,std::allocator< std::shared_ptr< openplx::Robotics::Links::LinkData > > > const &

        __setitem__(Robotics_Links_LinkData_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Links_LinkData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_LinkData_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Links_LinkData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::value_type"""
        return _RoboticsSwig.Robotics_Links_LinkData_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Links_LinkData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_LinkData_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Links_LinkData_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Links_LinkData_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Links_LinkData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::size_type"""
        return _RoboticsSwig.Robotics_Links_LinkData_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Links_LinkData_Vector self, Robotics_Links_LinkData_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > > &

        """
        return _RoboticsSwig.Robotics_Links_LinkData_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Links_LinkData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::iterator"""
        return _RoboticsSwig.Robotics_Links_LinkData_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Links_LinkData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::iterator"""
        return _RoboticsSwig.Robotics_Links_LinkData_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Links_LinkData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Links_LinkData_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Links_LinkData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Links_LinkData_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Links_LinkData_Vector self)"""
        return _RoboticsSwig.Robotics_Links_LinkData_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Links_LinkData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::allocator_type"""
        return _RoboticsSwig.Robotics_Links_LinkData_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Links_LinkData_Vector self)"""
        return _RoboticsSwig.Robotics_Links_LinkData_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Links_LinkData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::iterator

        erase(Robotics_Links_LinkData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::iterator first, std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::iterator last) -> std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::iterator
        last: std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::iterator

        """
        return _RoboticsSwig.Robotics_Links_LinkData_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Links_LinkData_Vector self) -> Robotics_Links_LinkData_Vector
        __init__(Robotics_Links_LinkData_Vector self, Robotics_Links_LinkData_Vector other) -> Robotics_Links_LinkData_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > > const &

        __init__(Robotics_Links_LinkData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::size_type size) -> Robotics_Links_LinkData_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::size_type

        __init__(Robotics_Links_LinkData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::size_type size, std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::value_type const & value) -> Robotics_Links_LinkData_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::size_type
        value: std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::value_type const &

        """
        _RoboticsSwig.Robotics_Links_LinkData_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Links_LinkData_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Links_LinkData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_LinkData_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Links_LinkData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::value_type const &"""
        return _RoboticsSwig.Robotics_Links_LinkData_Vector_front(self)

    def back(self):
        r"""back(Robotics_Links_LinkData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::value_type const &"""
        return _RoboticsSwig.Robotics_Links_LinkData_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Links_LinkData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_LinkData_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Links_LinkData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::size_type

        resize(Robotics_Links_LinkData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::size_type new_size, std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_LinkData_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Links_LinkData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::iterator
        x: std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::value_type const &

        insert(Robotics_Links_LinkData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::iterator
        n: std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_LinkData_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Links_LinkData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::size_type

        """
        return _RoboticsSwig.Robotics_Links_LinkData_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Links_LinkData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Links::LinkData > >::size_type"""
        return _RoboticsSwig.Robotics_Links_LinkData_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Links_LinkData_Vector

# Register Robotics_Links_LinkData_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Links_LinkData_Vector_swigregister(Robotics_Links_LinkData_Vector)

class Robotics_Links_RigidBoxLink_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Links_RigidBoxLink_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Links_RigidBoxLink_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Links_RigidBoxLink_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Links_RigidBoxLink_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::size_type"""
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Links_RigidBoxLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::difference_type j) -> Robotics_Links_RigidBoxLink_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::difference_type

        """
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Links_RigidBoxLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::difference_type

        __setslice__(Robotics_Links_RigidBoxLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::difference_type j, Robotics_Links_RigidBoxLink_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink >,std::allocator< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > > > const &

        """
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Links_RigidBoxLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::difference_type

        """
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Links_RigidBoxLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::difference_type

        __delitem__(Robotics_Links_RigidBoxLink_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Links_RigidBoxLink_Vector self, PySliceObject * slice) -> Robotics_Links_RigidBoxLink_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Links_RigidBoxLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::difference_type

        """
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Links_RigidBoxLink_Vector self, PySliceObject * slice, Robotics_Links_RigidBoxLink_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink >,std::allocator< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > > > const &

        __setitem__(Robotics_Links_RigidBoxLink_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Links_RigidBoxLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Links_RigidBoxLink_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::value_type"""
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Links_RigidBoxLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Links_RigidBoxLink_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Links_RigidBoxLink_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::size_type"""
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Links_RigidBoxLink_Vector self, Robotics_Links_RigidBoxLink_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > > &

        """
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Links_RigidBoxLink_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::iterator"""
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Links_RigidBoxLink_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::iterator"""
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Links_RigidBoxLink_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Links_RigidBoxLink_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Links_RigidBoxLink_Vector self)"""
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Links_RigidBoxLink_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::allocator_type"""
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Links_RigidBoxLink_Vector self)"""
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Links_RigidBoxLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::iterator

        erase(Robotics_Links_RigidBoxLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::iterator first, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::iterator last) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::iterator
        last: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::iterator

        """
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Links_RigidBoxLink_Vector self) -> Robotics_Links_RigidBoxLink_Vector
        __init__(Robotics_Links_RigidBoxLink_Vector self, Robotics_Links_RigidBoxLink_Vector other) -> Robotics_Links_RigidBoxLink_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > > const &

        __init__(Robotics_Links_RigidBoxLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::size_type size) -> Robotics_Links_RigidBoxLink_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::size_type

        __init__(Robotics_Links_RigidBoxLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::size_type size, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::value_type const & value) -> Robotics_Links_RigidBoxLink_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::size_type
        value: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::value_type const &

        """
        _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Links_RigidBoxLink_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Links_RigidBoxLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Links_RigidBoxLink_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::value_type const &"""
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_front(self)

    def back(self):
        r"""back(Robotics_Links_RigidBoxLink_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::value_type const &"""
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Links_RigidBoxLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Links_RigidBoxLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::size_type

        resize(Robotics_Links_RigidBoxLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::size_type new_size, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Links_RigidBoxLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::iterator
        x: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::value_type const &

        insert(Robotics_Links_RigidBoxLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::iterator
        n: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Links_RigidBoxLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::size_type

        """
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Links_RigidBoxLink_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidBoxLink > >::size_type"""
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Links_RigidBoxLink_Vector

# Register Robotics_Links_RigidBoxLink_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_swigregister(Robotics_Links_RigidBoxLink_Vector)

class Robotics_Links_RigidLink_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Links_RigidLink_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Links_RigidLink_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Links_RigidLink_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Links_RigidLink_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::size_type"""
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Links_RigidLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::difference_type j) -> Robotics_Links_RigidLink_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::difference_type

        """
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Links_RigidLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::difference_type

        __setslice__(Robotics_Links_RigidLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::difference_type j, Robotics_Links_RigidLink_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink >,std::allocator< std::shared_ptr< openplx::Robotics::Links::RigidLink > > > const &

        """
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Links_RigidLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::difference_type

        """
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Links_RigidLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::difference_type

        __delitem__(Robotics_Links_RigidLink_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Links_RigidLink_Vector self, PySliceObject * slice) -> Robotics_Links_RigidLink_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Links_RigidLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::difference_type

        """
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Links_RigidLink_Vector self, PySliceObject * slice, Robotics_Links_RigidLink_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink >,std::allocator< std::shared_ptr< openplx::Robotics::Links::RigidLink > > > const &

        __setitem__(Robotics_Links_RigidLink_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Links_RigidLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Links_RigidLink_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::value_type"""
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Links_RigidLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Links_RigidLink_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Links_RigidLink_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::size_type"""
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Links_RigidLink_Vector self, Robotics_Links_RigidLink_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > > &

        """
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Links_RigidLink_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::iterator"""
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Links_RigidLink_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::iterator"""
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Links_RigidLink_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Links_RigidLink_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Links_RigidLink_Vector self)"""
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Links_RigidLink_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::allocator_type"""
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Links_RigidLink_Vector self)"""
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Links_RigidLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::iterator

        erase(Robotics_Links_RigidLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::iterator first, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::iterator last) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::iterator
        last: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::iterator

        """
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Links_RigidLink_Vector self) -> Robotics_Links_RigidLink_Vector
        __init__(Robotics_Links_RigidLink_Vector self, Robotics_Links_RigidLink_Vector other) -> Robotics_Links_RigidLink_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > > const &

        __init__(Robotics_Links_RigidLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::size_type size) -> Robotics_Links_RigidLink_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::size_type

        __init__(Robotics_Links_RigidLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::size_type size, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::value_type const & value) -> Robotics_Links_RigidLink_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::size_type
        value: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::value_type const &

        """
        _RoboticsSwig.Robotics_Links_RigidLink_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Links_RigidLink_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Links_RigidLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Links_RigidLink_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::value_type const &"""
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector_front(self)

    def back(self):
        r"""back(Robotics_Links_RigidLink_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::value_type const &"""
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Links_RigidLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Links_RigidLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::size_type

        resize(Robotics_Links_RigidLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::size_type new_size, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Links_RigidLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::iterator
        x: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::value_type const &

        insert(Robotics_Links_RigidLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::iterator
        n: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Links_RigidLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::size_type

        """
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Links_RigidLink_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidLink > >::size_type"""
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Links_RigidLink_Vector

# Register Robotics_Links_RigidLink_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Links_RigidLink_Vector_swigregister(Robotics_Links_RigidLink_Vector)

class Robotics_Links_RigidTriMeshLink_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Links_RigidTriMeshLink_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Links_RigidTriMeshLink_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Links_RigidTriMeshLink_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Links_RigidTriMeshLink_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Links_RigidTriMeshLink_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Links_RigidTriMeshLink_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Links_RigidTriMeshLink_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::size_type"""
        return _RoboticsSwig.Robotics_Links_RigidTriMeshLink_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Links_RigidTriMeshLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::difference_type j) -> Robotics_Links_RigidTriMeshLink_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::difference_type

        """
        return _RoboticsSwig.Robotics_Links_RigidTriMeshLink_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Links_RigidTriMeshLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::difference_type

        __setslice__(Robotics_Links_RigidTriMeshLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::difference_type j, Robotics_Links_RigidTriMeshLink_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink >,std::allocator< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > > > const &

        """
        return _RoboticsSwig.Robotics_Links_RigidTriMeshLink_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Links_RigidTriMeshLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::difference_type

        """
        return _RoboticsSwig.Robotics_Links_RigidTriMeshLink_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Links_RigidTriMeshLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::difference_type

        __delitem__(Robotics_Links_RigidTriMeshLink_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Links_RigidTriMeshLink_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Links_RigidTriMeshLink_Vector self, PySliceObject * slice) -> Robotics_Links_RigidTriMeshLink_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Links_RigidTriMeshLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::difference_type

        """
        return _RoboticsSwig.Robotics_Links_RigidTriMeshLink_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Links_RigidTriMeshLink_Vector self, PySliceObject * slice, Robotics_Links_RigidTriMeshLink_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink >,std::allocator< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > > > const &

        __setitem__(Robotics_Links_RigidTriMeshLink_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Links_RigidTriMeshLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_RigidTriMeshLink_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Links_RigidTriMeshLink_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::value_type"""
        return _RoboticsSwig.Robotics_Links_RigidTriMeshLink_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Links_RigidTriMeshLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_RigidTriMeshLink_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Links_RigidTriMeshLink_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Links_RigidTriMeshLink_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Links_RigidTriMeshLink_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::size_type"""
        return _RoboticsSwig.Robotics_Links_RigidTriMeshLink_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Links_RigidTriMeshLink_Vector self, Robotics_Links_RigidTriMeshLink_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > > &

        """
        return _RoboticsSwig.Robotics_Links_RigidTriMeshLink_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Links_RigidTriMeshLink_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::iterator"""
        return _RoboticsSwig.Robotics_Links_RigidTriMeshLink_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Links_RigidTriMeshLink_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::iterator"""
        return _RoboticsSwig.Robotics_Links_RigidTriMeshLink_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Links_RigidTriMeshLink_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Links_RigidTriMeshLink_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Links_RigidTriMeshLink_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Links_RigidTriMeshLink_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Links_RigidTriMeshLink_Vector self)"""
        return _RoboticsSwig.Robotics_Links_RigidTriMeshLink_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Links_RigidTriMeshLink_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::allocator_type"""
        return _RoboticsSwig.Robotics_Links_RigidTriMeshLink_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Links_RigidTriMeshLink_Vector self)"""
        return _RoboticsSwig.Robotics_Links_RigidTriMeshLink_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Links_RigidTriMeshLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::iterator

        erase(Robotics_Links_RigidTriMeshLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::iterator first, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::iterator last) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::iterator
        last: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::iterator

        """
        return _RoboticsSwig.Robotics_Links_RigidTriMeshLink_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Links_RigidTriMeshLink_Vector self) -> Robotics_Links_RigidTriMeshLink_Vector
        __init__(Robotics_Links_RigidTriMeshLink_Vector self, Robotics_Links_RigidTriMeshLink_Vector other) -> Robotics_Links_RigidTriMeshLink_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > > const &

        __init__(Robotics_Links_RigidTriMeshLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::size_type size) -> Robotics_Links_RigidTriMeshLink_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::size_type

        __init__(Robotics_Links_RigidTriMeshLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::size_type size, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::value_type const & value) -> Robotics_Links_RigidTriMeshLink_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::size_type
        value: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::value_type const &

        """
        _RoboticsSwig.Robotics_Links_RigidTriMeshLink_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Links_RigidTriMeshLink_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Links_RigidTriMeshLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_RigidTriMeshLink_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Links_RigidTriMeshLink_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::value_type const &"""
        return _RoboticsSwig.Robotics_Links_RigidTriMeshLink_Vector_front(self)

    def back(self):
        r"""back(Robotics_Links_RigidTriMeshLink_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::value_type const &"""
        return _RoboticsSwig.Robotics_Links_RigidTriMeshLink_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Links_RigidTriMeshLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_RigidTriMeshLink_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Links_RigidTriMeshLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::size_type

        resize(Robotics_Links_RigidTriMeshLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::size_type new_size, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_RigidTriMeshLink_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Links_RigidTriMeshLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::iterator
        x: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::value_type const &

        insert(Robotics_Links_RigidTriMeshLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::iterator
        n: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_RigidTriMeshLink_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Links_RigidTriMeshLink_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::size_type

        """
        return _RoboticsSwig.Robotics_Links_RigidTriMeshLink_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Links_RigidTriMeshLink_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Links::RigidTriMeshLink > >::size_type"""
        return _RoboticsSwig.Robotics_Links_RigidTriMeshLink_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Links_RigidTriMeshLink_Vector

# Register Robotics_Links_RigidTriMeshLink_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Links_RigidTriMeshLink_Vector_swigregister(Robotics_Links_RigidTriMeshLink_Vector)

class Robotics_Robots_Robot_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Robots_Robot_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Robots_Robot_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Robots_Robot_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Robots_Robot_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Robots_Robot_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Robots_Robot_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Robots_Robot_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::size_type"""
        return _RoboticsSwig.Robotics_Robots_Robot_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Robots_Robot_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::difference_type j) -> Robotics_Robots_Robot_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::difference_type

        """
        return _RoboticsSwig.Robotics_Robots_Robot_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Robots_Robot_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::difference_type

        __setslice__(Robotics_Robots_Robot_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::difference_type j, Robotics_Robots_Robot_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot >,std::allocator< std::shared_ptr< openplx::Robotics::Robots::Robot > > > const &

        """
        return _RoboticsSwig.Robotics_Robots_Robot_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Robots_Robot_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::difference_type

        """
        return _RoboticsSwig.Robotics_Robots_Robot_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Robots_Robot_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::difference_type

        __delitem__(Robotics_Robots_Robot_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Robots_Robot_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Robots_Robot_Vector self, PySliceObject * slice) -> Robotics_Robots_Robot_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Robots_Robot_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::difference_type

        """
        return _RoboticsSwig.Robotics_Robots_Robot_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Robots_Robot_Vector self, PySliceObject * slice, Robotics_Robots_Robot_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot >,std::allocator< std::shared_ptr< openplx::Robotics::Robots::Robot > > > const &

        __setitem__(Robotics_Robots_Robot_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Robots_Robot_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Robots_Robot_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Robots_Robot_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::value_type"""
        return _RoboticsSwig.Robotics_Robots_Robot_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Robots_Robot_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Robots_Robot_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Robots_Robot_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Robots_Robot_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Robots_Robot_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::size_type"""
        return _RoboticsSwig.Robotics_Robots_Robot_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Robots_Robot_Vector self, Robotics_Robots_Robot_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > > &

        """
        return _RoboticsSwig.Robotics_Robots_Robot_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Robots_Robot_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::iterator"""
        return _RoboticsSwig.Robotics_Robots_Robot_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Robots_Robot_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::iterator"""
        return _RoboticsSwig.Robotics_Robots_Robot_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Robots_Robot_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Robots_Robot_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Robots_Robot_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Robots_Robot_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Robots_Robot_Vector self)"""
        return _RoboticsSwig.Robotics_Robots_Robot_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Robots_Robot_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::allocator_type"""
        return _RoboticsSwig.Robotics_Robots_Robot_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Robots_Robot_Vector self)"""
        return _RoboticsSwig.Robotics_Robots_Robot_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Robots_Robot_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::iterator

        erase(Robotics_Robots_Robot_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::iterator first, std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::iterator last) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::iterator
        last: std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::iterator

        """
        return _RoboticsSwig.Robotics_Robots_Robot_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Robots_Robot_Vector self) -> Robotics_Robots_Robot_Vector
        __init__(Robotics_Robots_Robot_Vector self, Robotics_Robots_Robot_Vector other) -> Robotics_Robots_Robot_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > > const &

        __init__(Robotics_Robots_Robot_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::size_type size) -> Robotics_Robots_Robot_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::size_type

        __init__(Robotics_Robots_Robot_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::size_type size, std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::value_type const & value) -> Robotics_Robots_Robot_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::size_type
        value: std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::value_type const &

        """
        _RoboticsSwig.Robotics_Robots_Robot_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Robots_Robot_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Robots_Robot_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Robots_Robot_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Robots_Robot_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::value_type const &"""
        return _RoboticsSwig.Robotics_Robots_Robot_Vector_front(self)

    def back(self):
        r"""back(Robotics_Robots_Robot_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::value_type const &"""
        return _RoboticsSwig.Robotics_Robots_Robot_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Robots_Robot_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Robots_Robot_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Robots_Robot_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::size_type

        resize(Robotics_Robots_Robot_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::size_type new_size, std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Robots_Robot_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Robots_Robot_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::iterator
        x: std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::value_type const &

        insert(Robotics_Robots_Robot_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::iterator
        n: std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Robots_Robot_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Robots_Robot_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::size_type

        """
        return _RoboticsSwig.Robotics_Robots_Robot_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Robots_Robot_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::Robot > >::size_type"""
        return _RoboticsSwig.Robotics_Robots_Robot_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Robots_Robot_Vector

# Register Robotics_Robots_Robot_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Robots_Robot_Vector_swigregister(Robotics_Robots_Robot_Vector)

class Robotics_Robots_SerialManipulatorData_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Robots_SerialManipulatorData_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Robots_SerialManipulatorData_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Robots_SerialManipulatorData_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Robots_SerialManipulatorData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::size_type"""
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Robots_SerialManipulatorData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::difference_type j) -> Robotics_Robots_SerialManipulatorData_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::difference_type

        """
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Robots_SerialManipulatorData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::difference_type

        __setslice__(Robotics_Robots_SerialManipulatorData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::difference_type j, Robotics_Robots_SerialManipulatorData_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData >,std::allocator< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > > > const &

        """
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Robots_SerialManipulatorData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::difference_type

        """
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Robots_SerialManipulatorData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::difference_type

        __delitem__(Robotics_Robots_SerialManipulatorData_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Robots_SerialManipulatorData_Vector self, PySliceObject * slice) -> Robotics_Robots_SerialManipulatorData_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Robots_SerialManipulatorData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::difference_type

        """
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Robots_SerialManipulatorData_Vector self, PySliceObject * slice, Robotics_Robots_SerialManipulatorData_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData >,std::allocator< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > > > const &

        __setitem__(Robotics_Robots_SerialManipulatorData_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Robots_SerialManipulatorData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Robots_SerialManipulatorData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::value_type"""
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Robots_SerialManipulatorData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Robots_SerialManipulatorData_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Robots_SerialManipulatorData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::size_type"""
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Robots_SerialManipulatorData_Vector self, Robotics_Robots_SerialManipulatorData_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > > &

        """
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Robots_SerialManipulatorData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::iterator"""
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Robots_SerialManipulatorData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::iterator"""
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Robots_SerialManipulatorData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Robots_SerialManipulatorData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Robots_SerialManipulatorData_Vector self)"""
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Robots_SerialManipulatorData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::allocator_type"""
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Robots_SerialManipulatorData_Vector self)"""
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Robots_SerialManipulatorData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::iterator

        erase(Robotics_Robots_SerialManipulatorData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::iterator first, std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::iterator last) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::iterator
        last: std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::iterator

        """
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Robots_SerialManipulatorData_Vector self) -> Robotics_Robots_SerialManipulatorData_Vector
        __init__(Robotics_Robots_SerialManipulatorData_Vector self, Robotics_Robots_SerialManipulatorData_Vector other) -> Robotics_Robots_SerialManipulatorData_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > > const &

        __init__(Robotics_Robots_SerialManipulatorData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::size_type size) -> Robotics_Robots_SerialManipulatorData_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::size_type

        __init__(Robotics_Robots_SerialManipulatorData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::size_type size, std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::value_type const & value) -> Robotics_Robots_SerialManipulatorData_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::size_type
        value: std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::value_type const &

        """
        _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Robots_SerialManipulatorData_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Robots_SerialManipulatorData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Robots_SerialManipulatorData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::value_type const &"""
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_front(self)

    def back(self):
        r"""back(Robotics_Robots_SerialManipulatorData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::value_type const &"""
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Robots_SerialManipulatorData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Robots_SerialManipulatorData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::size_type

        resize(Robotics_Robots_SerialManipulatorData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::size_type new_size, std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Robots_SerialManipulatorData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::iterator
        x: std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::value_type const &

        insert(Robotics_Robots_SerialManipulatorData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::iterator
        n: std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Robots_SerialManipulatorData_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::size_type

        """
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Robots_SerialManipulatorData_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData > >::size_type"""
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Robots_SerialManipulatorData_Vector

# Register Robotics_Robots_SerialManipulatorData_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_swigregister(Robotics_Robots_SerialManipulatorData_Vector)

class Robotics_Robots_SixAxisSerialManipulator_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Robots_SixAxisSerialManipulator_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Robots_SixAxisSerialManipulator_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Robots_SixAxisSerialManipulator_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Robots_SixAxisSerialManipulator_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::size_type"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Robots_SixAxisSerialManipulator_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::difference_type j) -> Robotics_Robots_SixAxisSerialManipulator_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::difference_type

        """
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Robots_SixAxisSerialManipulator_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::difference_type

        __setslice__(Robotics_Robots_SixAxisSerialManipulator_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::difference_type j, Robotics_Robots_SixAxisSerialManipulator_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator >,std::allocator< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > > > const &

        """
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Robots_SixAxisSerialManipulator_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::difference_type

        """
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Robots_SixAxisSerialManipulator_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::difference_type

        __delitem__(Robotics_Robots_SixAxisSerialManipulator_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Robots_SixAxisSerialManipulator_Vector self, PySliceObject * slice) -> Robotics_Robots_SixAxisSerialManipulator_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Robots_SixAxisSerialManipulator_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::difference_type

        """
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Robots_SixAxisSerialManipulator_Vector self, PySliceObject * slice, Robotics_Robots_SixAxisSerialManipulator_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator >,std::allocator< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > > > const &

        __setitem__(Robotics_Robots_SixAxisSerialManipulator_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Robots_SixAxisSerialManipulator_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Robots_SixAxisSerialManipulator_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::value_type"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Robots_SixAxisSerialManipulator_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Robots_SixAxisSerialManipulator_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Robots_SixAxisSerialManipulator_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::size_type"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Robots_SixAxisSerialManipulator_Vector self, Robotics_Robots_SixAxisSerialManipulator_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > > &

        """
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Robots_SixAxisSerialManipulator_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::iterator"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Robots_SixAxisSerialManipulator_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::iterator"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Robots_SixAxisSerialManipulator_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Robots_SixAxisSerialManipulator_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Robots_SixAxisSerialManipulator_Vector self)"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Robots_SixAxisSerialManipulator_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::allocator_type"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Robots_SixAxisSerialManipulator_Vector self)"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Robots_SixAxisSerialManipulator_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::iterator

        erase(Robotics_Robots_SixAxisSerialManipulator_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::iterator first, std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::iterator last) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::iterator
        last: std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::iterator

        """
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Robots_SixAxisSerialManipulator_Vector self) -> Robotics_Robots_SixAxisSerialManipulator_Vector
        __init__(Robotics_Robots_SixAxisSerialManipulator_Vector self, Robotics_Robots_SixAxisSerialManipulator_Vector other) -> Robotics_Robots_SixAxisSerialManipulator_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > > const &

        __init__(Robotics_Robots_SixAxisSerialManipulator_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::size_type size) -> Robotics_Robots_SixAxisSerialManipulator_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::size_type

        __init__(Robotics_Robots_SixAxisSerialManipulator_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::size_type size, std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::value_type const & value) -> Robotics_Robots_SixAxisSerialManipulator_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::size_type
        value: std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::value_type const &

        """
        _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Robots_SixAxisSerialManipulator_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Robots_SixAxisSerialManipulator_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Robots_SixAxisSerialManipulator_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::value_type const &"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_front(self)

    def back(self):
        r"""back(Robotics_Robots_SixAxisSerialManipulator_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::value_type const &"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Robots_SixAxisSerialManipulator_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Robots_SixAxisSerialManipulator_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::size_type

        resize(Robotics_Robots_SixAxisSerialManipulator_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::size_type new_size, std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Robots_SixAxisSerialManipulator_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::iterator
        x: std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::value_type const &

        insert(Robotics_Robots_SixAxisSerialManipulator_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::iterator
        n: std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Robots_SixAxisSerialManipulator_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::size_type

        """
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Robots_SixAxisSerialManipulator_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Robots::SixAxisSerialManipulator > >::size_type"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Robots_SixAxisSerialManipulator_Vector

# Register Robotics_Robots_SixAxisSerialManipulator_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_swigregister(Robotics_Robots_SixAxisSerialManipulator_Vector)

class Robotics_Signals_RobotInput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Signals_RobotInput_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Signals_RobotInput_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Signals_RobotInput_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Signals_RobotInput_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::size_type"""
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Signals_RobotInput_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::difference_type j) -> Robotics_Signals_RobotInput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::difference_type

        """
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Signals_RobotInput_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::difference_type

        __setslice__(Robotics_Signals_RobotInput_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::difference_type j, Robotics_Signals_RobotInput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput >,std::allocator< std::shared_ptr< openplx::Robotics::Signals::RobotInput > > > const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Signals_RobotInput_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::difference_type

        """
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Signals_RobotInput_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::difference_type

        __delitem__(Robotics_Signals_RobotInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Signals_RobotInput_Vector self, PySliceObject * slice) -> Robotics_Signals_RobotInput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Signals_RobotInput_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::difference_type

        """
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Signals_RobotInput_Vector self, PySliceObject * slice, Robotics_Signals_RobotInput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput >,std::allocator< std::shared_ptr< openplx::Robotics::Signals::RobotInput > > > const &

        __setitem__(Robotics_Signals_RobotInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Signals_RobotInput_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Signals_RobotInput_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::value_type"""
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Signals_RobotInput_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Signals_RobotInput_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Signals_RobotInput_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::size_type"""
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Signals_RobotInput_Vector self, Robotics_Signals_RobotInput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > > &

        """
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Signals_RobotInput_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::iterator"""
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Signals_RobotInput_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::iterator"""
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Signals_RobotInput_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Signals_RobotInput_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Signals_RobotInput_Vector self)"""
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Signals_RobotInput_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::allocator_type"""
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Signals_RobotInput_Vector self)"""
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Signals_RobotInput_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::iterator

        erase(Robotics_Signals_RobotInput_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::iterator first, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::iterator last) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::iterator
        last: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::iterator

        """
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Signals_RobotInput_Vector self) -> Robotics_Signals_RobotInput_Vector
        __init__(Robotics_Signals_RobotInput_Vector self, Robotics_Signals_RobotInput_Vector other) -> Robotics_Signals_RobotInput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > > const &

        __init__(Robotics_Signals_RobotInput_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::size_type size) -> Robotics_Signals_RobotInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::size_type

        __init__(Robotics_Signals_RobotInput_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::size_type size, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::value_type const & value) -> Robotics_Signals_RobotInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::size_type
        value: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::value_type const &

        """
        _RoboticsSwig.Robotics_Signals_RobotInput_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Signals_RobotInput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Signals_RobotInput_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Signals_RobotInput_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::value_type const &"""
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector_front(self)

    def back(self):
        r"""back(Robotics_Signals_RobotInput_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::value_type const &"""
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Signals_RobotInput_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Signals_RobotInput_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::size_type

        resize(Robotics_Signals_RobotInput_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::size_type new_size, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Signals_RobotInput_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::iterator
        x: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::value_type const &

        insert(Robotics_Signals_RobotInput_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::iterator
        n: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Signals_RobotInput_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::size_type

        """
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Signals_RobotInput_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInput > >::size_type"""
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Signals_RobotInput_Vector

# Register Robotics_Signals_RobotInput_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Signals_RobotInput_Vector_swigregister(Robotics_Signals_RobotInput_Vector)

class Robotics_Signals_RobotInputSignal_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Signals_RobotInputSignal_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Signals_RobotInputSignal_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Signals_RobotInputSignal_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Signals_RobotInputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::size_type"""
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Signals_RobotInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::difference_type j) -> Robotics_Signals_RobotInputSignal_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::difference_type

        """
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Signals_RobotInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::difference_type

        __setslice__(Robotics_Signals_RobotInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::difference_type j, Robotics_Signals_RobotInputSignal_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal >,std::allocator< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > > > const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Signals_RobotInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::difference_type

        """
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Signals_RobotInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::difference_type

        __delitem__(Robotics_Signals_RobotInputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Signals_RobotInputSignal_Vector self, PySliceObject * slice) -> Robotics_Signals_RobotInputSignal_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Signals_RobotInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::difference_type

        """
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Signals_RobotInputSignal_Vector self, PySliceObject * slice, Robotics_Signals_RobotInputSignal_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal >,std::allocator< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > > > const &

        __setitem__(Robotics_Signals_RobotInputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Signals_RobotInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Signals_RobotInputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::value_type"""
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Signals_RobotInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Signals_RobotInputSignal_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Signals_RobotInputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::size_type"""
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Signals_RobotInputSignal_Vector self, Robotics_Signals_RobotInputSignal_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > > &

        """
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Signals_RobotInputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::iterator"""
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Signals_RobotInputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::iterator"""
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Signals_RobotInputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Signals_RobotInputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Signals_RobotInputSignal_Vector self)"""
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Signals_RobotInputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::allocator_type"""
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Signals_RobotInputSignal_Vector self)"""
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Signals_RobotInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::iterator

        erase(Robotics_Signals_RobotInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::iterator first, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::iterator last) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::iterator
        last: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::iterator

        """
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Signals_RobotInputSignal_Vector self) -> Robotics_Signals_RobotInputSignal_Vector
        __init__(Robotics_Signals_RobotInputSignal_Vector self, Robotics_Signals_RobotInputSignal_Vector other) -> Robotics_Signals_RobotInputSignal_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > > const &

        __init__(Robotics_Signals_RobotInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::size_type size) -> Robotics_Signals_RobotInputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::size_type

        __init__(Robotics_Signals_RobotInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::size_type size, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::value_type const & value) -> Robotics_Signals_RobotInputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::size_type
        value: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::value_type const &

        """
        _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Signals_RobotInputSignal_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Signals_RobotInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Signals_RobotInputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::value_type const &"""
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_front(self)

    def back(self):
        r"""back(Robotics_Signals_RobotInputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::value_type const &"""
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Signals_RobotInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Signals_RobotInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::size_type

        resize(Robotics_Signals_RobotInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::size_type new_size, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Signals_RobotInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::iterator
        x: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::value_type const &

        insert(Robotics_Signals_RobotInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::iterator
        n: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Signals_RobotInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::size_type

        """
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Signals_RobotInputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal > >::size_type"""
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Signals_RobotInputSignal_Vector

# Register Robotics_Signals_RobotInputSignal_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_swigregister(Robotics_Signals_RobotInputSignal_Vector)

class Robotics_Signals_RobotOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Signals_RobotOutput_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Signals_RobotOutput_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Signals_RobotOutput_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Signals_RobotOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::size_type"""
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Signals_RobotOutput_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::difference_type j) -> Robotics_Signals_RobotOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::difference_type

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Signals_RobotOutput_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::difference_type

        __setslice__(Robotics_Signals_RobotOutput_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::difference_type j, Robotics_Signals_RobotOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput >,std::allocator< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > > > const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Signals_RobotOutput_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::difference_type

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Signals_RobotOutput_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::difference_type

        __delitem__(Robotics_Signals_RobotOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Signals_RobotOutput_Vector self, PySliceObject * slice) -> Robotics_Signals_RobotOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Signals_RobotOutput_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::difference_type

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Signals_RobotOutput_Vector self, PySliceObject * slice, Robotics_Signals_RobotOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput >,std::allocator< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > > > const &

        __setitem__(Robotics_Signals_RobotOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Signals_RobotOutput_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Signals_RobotOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::value_type"""
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Signals_RobotOutput_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Signals_RobotOutput_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Signals_RobotOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::size_type"""
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Signals_RobotOutput_Vector self, Robotics_Signals_RobotOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > > &

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Signals_RobotOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::iterator"""
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Signals_RobotOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::iterator"""
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Signals_RobotOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Signals_RobotOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Signals_RobotOutput_Vector self)"""
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Signals_RobotOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::allocator_type"""
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Signals_RobotOutput_Vector self)"""
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Signals_RobotOutput_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::iterator

        erase(Robotics_Signals_RobotOutput_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::iterator first, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::iterator last) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::iterator
        last: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::iterator

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Signals_RobotOutput_Vector self) -> Robotics_Signals_RobotOutput_Vector
        __init__(Robotics_Signals_RobotOutput_Vector self, Robotics_Signals_RobotOutput_Vector other) -> Robotics_Signals_RobotOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > > const &

        __init__(Robotics_Signals_RobotOutput_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::size_type size) -> Robotics_Signals_RobotOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::size_type

        __init__(Robotics_Signals_RobotOutput_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::size_type size, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::value_type const & value) -> Robotics_Signals_RobotOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::size_type
        value: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::value_type const &

        """
        _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Signals_RobotOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Signals_RobotOutput_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Signals_RobotOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::value_type const &"""
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_front(self)

    def back(self):
        r"""back(Robotics_Signals_RobotOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::value_type const &"""
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Signals_RobotOutput_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Signals_RobotOutput_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::size_type

        resize(Robotics_Signals_RobotOutput_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::size_type new_size, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Signals_RobotOutput_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::iterator
        x: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::value_type const &

        insert(Robotics_Signals_RobotOutput_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::iterator
        n: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Signals_RobotOutput_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::size_type

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Signals_RobotOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutput > >::size_type"""
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Signals_RobotOutput_Vector

# Register Robotics_Signals_RobotOutput_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Signals_RobotOutput_Vector_swigregister(Robotics_Signals_RobotOutput_Vector)

class Robotics_Signals_RobotOutputSignal_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Signals_RobotOutputSignal_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Signals_RobotOutputSignal_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Signals_RobotOutputSignal_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Signals_RobotOutputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::size_type"""
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Signals_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::difference_type j) -> Robotics_Signals_RobotOutputSignal_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::difference_type

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Signals_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::difference_type

        __setslice__(Robotics_Signals_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::difference_type j, Robotics_Signals_RobotOutputSignal_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal >,std::allocator< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > > > const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Signals_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::difference_type

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Signals_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::difference_type

        __delitem__(Robotics_Signals_RobotOutputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Signals_RobotOutputSignal_Vector self, PySliceObject * slice) -> Robotics_Signals_RobotOutputSignal_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Signals_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::difference_type

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Signals_RobotOutputSignal_Vector self, PySliceObject * slice, Robotics_Signals_RobotOutputSignal_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal >,std::allocator< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > > > const &

        __setitem__(Robotics_Signals_RobotOutputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Signals_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Signals_RobotOutputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::value_type"""
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Signals_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Signals_RobotOutputSignal_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Signals_RobotOutputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::size_type"""
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Signals_RobotOutputSignal_Vector self, Robotics_Signals_RobotOutputSignal_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > > &

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Signals_RobotOutputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::iterator"""
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Signals_RobotOutputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::iterator"""
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Signals_RobotOutputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Signals_RobotOutputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Signals_RobotOutputSignal_Vector self)"""
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Signals_RobotOutputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::allocator_type"""
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Signals_RobotOutputSignal_Vector self)"""
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Signals_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::iterator

        erase(Robotics_Signals_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::iterator first, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::iterator last) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::iterator
        last: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::iterator

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Signals_RobotOutputSignal_Vector self) -> Robotics_Signals_RobotOutputSignal_Vector
        __init__(Robotics_Signals_RobotOutputSignal_Vector self, Robotics_Signals_RobotOutputSignal_Vector other) -> Robotics_Signals_RobotOutputSignal_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > > const &

        __init__(Robotics_Signals_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::size_type size) -> Robotics_Signals_RobotOutputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::size_type

        __init__(Robotics_Signals_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::size_type size, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::value_type const & value) -> Robotics_Signals_RobotOutputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::size_type
        value: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::value_type const &

        """
        _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Signals_RobotOutputSignal_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Signals_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Signals_RobotOutputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::value_type const &"""
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_front(self)

    def back(self):
        r"""back(Robotics_Signals_RobotOutputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::value_type const &"""
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Signals_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Signals_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::size_type

        resize(Robotics_Signals_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::size_type new_size, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Signals_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::iterator
        x: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::value_type const &

        insert(Robotics_Signals_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::iterator
        n: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Signals_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::size_type

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Signals_RobotOutputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal > >::size_type"""
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Signals_RobotOutputSignal_Vector

# Register Robotics_Signals_RobotOutputSignal_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_swigregister(Robotics_Signals_RobotOutputSignal_Vector)

class Robotics_Signals_Sensor_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Signals_Sensor_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Signals_Sensor_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Signals_Sensor_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Signals_Sensor_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::size_type"""
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Signals_Sensor_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::difference_type j) -> Robotics_Signals_Sensor_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::difference_type

        """
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Signals_Sensor_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::difference_type

        __setslice__(Robotics_Signals_Sensor_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::difference_type j, Robotics_Signals_Sensor_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor >,std::allocator< std::shared_ptr< openplx::Robotics::Signals::Sensor > > > const &

        """
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Signals_Sensor_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::difference_type

        """
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Signals_Sensor_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::difference_type

        __delitem__(Robotics_Signals_Sensor_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Signals_Sensor_Vector self, PySliceObject * slice) -> Robotics_Signals_Sensor_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Signals_Sensor_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::difference_type

        """
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Signals_Sensor_Vector self, PySliceObject * slice, Robotics_Signals_Sensor_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor >,std::allocator< std::shared_ptr< openplx::Robotics::Signals::Sensor > > > const &

        __setitem__(Robotics_Signals_Sensor_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Signals_Sensor_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Signals_Sensor_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::value_type"""
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Signals_Sensor_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Signals_Sensor_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Signals_Sensor_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::size_type"""
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Signals_Sensor_Vector self, Robotics_Signals_Sensor_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > > &

        """
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Signals_Sensor_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::iterator"""
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Signals_Sensor_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::iterator"""
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Signals_Sensor_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Signals_Sensor_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Signals_Sensor_Vector self)"""
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Signals_Sensor_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::allocator_type"""
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Signals_Sensor_Vector self)"""
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Signals_Sensor_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::iterator

        erase(Robotics_Signals_Sensor_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::iterator first, std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::iterator last) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::iterator
        last: std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::iterator

        """
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Signals_Sensor_Vector self) -> Robotics_Signals_Sensor_Vector
        __init__(Robotics_Signals_Sensor_Vector self, Robotics_Signals_Sensor_Vector other) -> Robotics_Signals_Sensor_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > > const &

        __init__(Robotics_Signals_Sensor_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::size_type size) -> Robotics_Signals_Sensor_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::size_type

        __init__(Robotics_Signals_Sensor_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::size_type size, std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::value_type const & value) -> Robotics_Signals_Sensor_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::size_type
        value: std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::value_type const &

        """
        _RoboticsSwig.Robotics_Signals_Sensor_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Signals_Sensor_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Signals_Sensor_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Signals_Sensor_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::value_type const &"""
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector_front(self)

    def back(self):
        r"""back(Robotics_Signals_Sensor_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::value_type const &"""
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Signals_Sensor_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Signals_Sensor_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::size_type

        resize(Robotics_Signals_Sensor_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::size_type new_size, std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Signals_Sensor_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::iterator
        x: std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::value_type const &

        insert(Robotics_Signals_Sensor_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::iterator
        n: std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Signals_Sensor_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::size_type

        """
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Signals_Sensor_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::Sensor > >::size_type"""
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Signals_Sensor_Vector

# Register Robotics_Signals_Sensor_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Signals_Sensor_Vector_swigregister(Robotics_Signals_Sensor_Vector)

class Robotics_Signals_SensorValues_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Signals_SensorValues_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Signals_SensorValues_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Signals_SensorValues_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Signals_SensorValues_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::size_type"""
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Signals_SensorValues_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::difference_type j) -> Robotics_Signals_SensorValues_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::difference_type

        """
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Signals_SensorValues_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::difference_type

        __setslice__(Robotics_Signals_SensorValues_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::difference_type j, Robotics_Signals_SensorValues_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues >,std::allocator< std::shared_ptr< openplx::Robotics::Signals::SensorValues > > > const &

        """
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Signals_SensorValues_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::difference_type

        """
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Signals_SensorValues_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::difference_type

        __delitem__(Robotics_Signals_SensorValues_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Signals_SensorValues_Vector self, PySliceObject * slice) -> Robotics_Signals_SensorValues_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Signals_SensorValues_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::difference_type

        """
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Signals_SensorValues_Vector self, PySliceObject * slice, Robotics_Signals_SensorValues_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues >,std::allocator< std::shared_ptr< openplx::Robotics::Signals::SensorValues > > > const &

        __setitem__(Robotics_Signals_SensorValues_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Signals_SensorValues_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::difference_type i, std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Signals_SensorValues_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::value_type"""
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Signals_SensorValues_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Signals_SensorValues_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Signals_SensorValues_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::size_type"""
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Signals_SensorValues_Vector self, Robotics_Signals_SensorValues_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > > &

        """
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Signals_SensorValues_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::iterator"""
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Signals_SensorValues_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::iterator"""
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Signals_SensorValues_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Signals_SensorValues_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Signals_SensorValues_Vector self)"""
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Signals_SensorValues_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::allocator_type"""
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Signals_SensorValues_Vector self)"""
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Signals_SensorValues_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::iterator

        erase(Robotics_Signals_SensorValues_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::iterator first, std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::iterator last) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::iterator
        last: std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::iterator

        """
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Signals_SensorValues_Vector self) -> Robotics_Signals_SensorValues_Vector
        __init__(Robotics_Signals_SensorValues_Vector self, Robotics_Signals_SensorValues_Vector other) -> Robotics_Signals_SensorValues_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > > const &

        __init__(Robotics_Signals_SensorValues_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::size_type size) -> Robotics_Signals_SensorValues_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::size_type

        __init__(Robotics_Signals_SensorValues_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::size_type size, std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::value_type const & value) -> Robotics_Signals_SensorValues_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::size_type
        value: std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::value_type const &

        """
        _RoboticsSwig.Robotics_Signals_SensorValues_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Signals_SensorValues_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Signals_SensorValues_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Signals_SensorValues_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::value_type const &"""
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector_front(self)

    def back(self):
        r"""back(Robotics_Signals_SensorValues_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::value_type const &"""
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Signals_SensorValues_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Signals_SensorValues_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::size_type

        resize(Robotics_Signals_SensorValues_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::size_type new_size, std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Signals_SensorValues_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::iterator
        x: std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::value_type const &

        insert(Robotics_Signals_SensorValues_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::iterator pos, std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::size_type n, std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::iterator
        n: std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::size_type
        x: std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Signals_SensorValues_Vector self, std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::size_type

        """
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Signals_SensorValues_Vector self) -> std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues > >::size_type"""
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Signals_SensorValues_Vector

# Register Robotics_Signals_SensorValues_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Signals_SensorValues_Vector_swigregister(Robotics_Signals_SensorValues_Vector)

class Robotics_EndEffectors_VacuumSystem(openplx.Core.Object):
    r"""Proxy of C++ openplx::Robotics::EndEffectors::VacuumSystem class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Robotics_EndEffectors_VacuumSystem self) -> Robotics_EndEffectors_VacuumSystem"""
        _RoboticsSwig.Robotics_EndEffectors_VacuumSystem_swiginit(self, _RoboticsSwig.new_Robotics_EndEffectors_VacuumSystem())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Robotics_EndEffectors_VacuumSystem self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _RoboticsSwig.Robotics_EndEffectors_VacuumSystem_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Robotics_EndEffectors_VacuumSystem self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_VacuumSystem_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Robotics_EndEffectors_VacuumSystem self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_VacuumSystem_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Robotics_EndEffectors_VacuumSystem self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _RoboticsSwig.Robotics_EndEffectors_VacuumSystem_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Robotics_EndEffectors_VacuumSystem self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _RoboticsSwig.Robotics_EndEffectors_VacuumSystem_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Robotics_EndEffectors_VacuumSystem self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_VacuumSystem_triggerOnInit(self, context)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_EndEffectors_VacuumSystem

# Register Robotics_EndEffectors_VacuumSystem in _RoboticsSwig:
_RoboticsSwig.Robotics_EndEffectors_VacuumSystem_swigregister(Robotics_EndEffectors_VacuumSystem)

class Robotics_EndEffectors_ConstantVacuumSystem(Robotics_EndEffectors_VacuumSystem):
    r"""Proxy of C++ openplx::Robotics::EndEffectors::ConstantVacuumSystem class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Robotics_EndEffectors_ConstantVacuumSystem self) -> Robotics_EndEffectors_ConstantVacuumSystem"""
        _RoboticsSwig.Robotics_EndEffectors_ConstantVacuumSystem_swiginit(self, _RoboticsSwig.new_Robotics_EndEffectors_ConstantVacuumSystem())

    def vacuum_level(self):
        r"""vacuum_level(Robotics_EndEffectors_ConstantVacuumSystem self) -> double"""
        return _RoboticsSwig.Robotics_EndEffectors_ConstantVacuumSystem_vacuum_level(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Robotics_EndEffectors_ConstantVacuumSystem self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _RoboticsSwig.Robotics_EndEffectors_ConstantVacuumSystem_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Robotics_EndEffectors_ConstantVacuumSystem self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_ConstantVacuumSystem_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Robotics_EndEffectors_ConstantVacuumSystem self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_ConstantVacuumSystem_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Robotics_EndEffectors_ConstantVacuumSystem self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _RoboticsSwig.Robotics_EndEffectors_ConstantVacuumSystem_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Robotics_EndEffectors_ConstantVacuumSystem self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _RoboticsSwig.Robotics_EndEffectors_ConstantVacuumSystem_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Robotics_EndEffectors_ConstantVacuumSystem self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_ConstantVacuumSystem_triggerOnInit(self, context)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_EndEffectors_ConstantVacuumSystem

# Register Robotics_EndEffectors_ConstantVacuumSystem in _RoboticsSwig:
_RoboticsSwig.Robotics_EndEffectors_ConstantVacuumSystem_swigregister(Robotics_EndEffectors_ConstantVacuumSystem)

class Robotics_EndEffectors_SuctionCup(openplx.Physics3D.Physics3D_StructuralComponent):
    r"""Proxy of C++ openplx::Robotics::EndEffectors::SuctionCup class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Robotics_EndEffectors_SuctionCup self) -> Robotics_EndEffectors_SuctionCup"""
        _RoboticsSwig.Robotics_EndEffectors_SuctionCup_swiginit(self, _RoboticsSwig.new_Robotics_EndEffectors_SuctionCup())

    def body(self):
        r"""body(Robotics_EndEffectors_SuctionCup self) -> std::shared_ptr< openplx::Physics3D::Bodies::RigidBody >"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_body(self)

    def lip_radius(self):
        r"""lip_radius(Robotics_EndEffectors_SuctionCup self) -> double"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_lip_radius(self)

    def mounting_radius(self):
        r"""mounting_radius(Robotics_EndEffectors_SuctionCup self) -> double"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_mounting_radius(self)

    def resting_height(self):
        r"""resting_height(Robotics_EndEffectors_SuctionCup self) -> double"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_resting_height(self)

    def collapsed_height(self):
        r"""collapsed_height(Robotics_EndEffectors_SuctionCup self) -> double"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_collapsed_height(self)

    def lip_normal(self):
        r"""lip_normal(Robotics_EndEffectors_SuctionCup self) -> std::shared_ptr< openplx::Math::Vec3 >"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_lip_normal(self)

    def gripper_connector(self):
        r"""gripper_connector(Robotics_EndEffectors_SuctionCup self) -> std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector >"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_gripper_connector(self)

    def resting_mounting_connector(self):
        r"""resting_mounting_connector(Robotics_EndEffectors_SuctionCup self) -> std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector >"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_resting_mounting_connector(self)

    def collapsed_mounting_connector(self):
        r"""collapsed_mounting_connector(Robotics_EndEffectors_SuctionCup self) -> std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector >"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_collapsed_mounting_connector(self)

    def object_connector(self):
        r"""object_connector(Robotics_EndEffectors_SuctionCup self) -> std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector >"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_object_connector(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Robotics_EndEffectors_SuctionCup self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Robotics_EndEffectors_SuctionCup self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Robotics_EndEffectors_SuctionCup self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Robotics_EndEffectors_SuctionCup self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Robotics_EndEffectors_SuctionCup self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Robotics_EndEffectors_SuctionCup self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCup_triggerOnInit(self, context)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_EndEffectors_SuctionCup

# Register Robotics_EndEffectors_SuctionCup in _RoboticsSwig:
_RoboticsSwig.Robotics_EndEffectors_SuctionCup_swigregister(Robotics_EndEffectors_SuctionCup)

class Robotics_EndEffectors_SixDofSuctionCup(Robotics_EndEffectors_SuctionCup):
    r"""Proxy of C++ openplx::Robotics::EndEffectors::SixDofSuctionCup class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Robotics_EndEffectors_SixDofSuctionCup self) -> Robotics_EndEffectors_SixDofSuctionCup"""
        _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_swiginit(self, _RoboticsSwig.new_Robotics_EndEffectors_SixDofSuctionCup())

    def geometry(self):
        r"""geometry(Robotics_EndEffectors_SixDofSuctionCup self) -> std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry >"""
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_geometry(self)

    def local_geometry_axis(self):
        r"""local_geometry_axis(Robotics_EndEffectors_SixDofSuctionCup self) -> std::shared_ptr< openplx::Math::Vec3 >"""
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_local_geometry_axis(self)

    def holder_relative_position(self):
        r"""holder_relative_position(Robotics_EndEffectors_SixDofSuctionCup self) -> std::shared_ptr< openplx::Math::Vec3 >"""
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_holder_relative_position(self)

    def collapsed_elasto_dynamics(self):
        r"""collapsed_elasto_dynamics(Robotics_EndEffectors_SixDofSuctionCup self) -> std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics >"""
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_collapsed_elasto_dynamics(self)

    def resting_elasto_dynamics(self):
        r"""resting_elasto_dynamics(Robotics_EndEffectors_SixDofSuctionCup self) -> std::shared_ptr< openplx::Robotics::EndEffectors::SuctionCupElastoDynamics >"""
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_resting_elasto_dynamics(self)

    def collapsed_joint(self):
        r"""collapsed_joint(Robotics_EndEffectors_SixDofSuctionCup self) -> std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint >"""
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_collapsed_joint(self)

    def resting_joint(self):
        r"""resting_joint(Robotics_EndEffectors_SixDofSuctionCup self) -> std::shared_ptr< openplx::Robotics::EndEffectors::SixDofSuctionCupJoint >"""
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_resting_joint(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Robotics_EndEffectors_SixDofSuctionCup self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Robotics_EndEffectors_SixDofSuctionCup self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Robotics_EndEffectors_SixDofSuctionCup self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Robotics_EndEffectors_SixDofSuctionCup self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Robotics_EndEffectors_SixDofSuctionCup self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Robotics_EndEffectors_SixDofSuctionCup self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_triggerOnInit(self, context)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_EndEffectors_SixDofSuctionCup

# Register Robotics_EndEffectors_SixDofSuctionCup in _RoboticsSwig:
_RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCup_swigregister(Robotics_EndEffectors_SixDofSuctionCup)

class Robotics_EndEffectors_SixDofSuctionCupJoint(openplx.Physics3D.Physics3D_Interactions_Lock):
    r"""Proxy of C++ openplx::Robotics::EndEffectors::SixDofSuctionCupJoint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Robotics_EndEffectors_SixDofSuctionCupJoint self) -> Robotics_EndEffectors_SixDofSuctionCupJoint"""
        _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCupJoint_swiginit(self, _RoboticsSwig.new_Robotics_EndEffectors_SixDofSuctionCupJoint())

    def flexibility(self):
        r"""flexibility(Robotics_EndEffectors_SixDofSuctionCupJoint self) -> std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility >"""
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCupJoint_flexibility(self)

    def dissipation(self):
        r"""dissipation(Robotics_EndEffectors_SixDofSuctionCupJoint self) -> std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping >"""
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCupJoint_dissipation(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Robotics_EndEffectors_SixDofSuctionCupJoint self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCupJoint_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Robotics_EndEffectors_SixDofSuctionCupJoint self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCupJoint_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Robotics_EndEffectors_SixDofSuctionCupJoint self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCupJoint_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Robotics_EndEffectors_SixDofSuctionCupJoint self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCupJoint_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Robotics_EndEffectors_SixDofSuctionCupJoint self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCupJoint_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Robotics_EndEffectors_SixDofSuctionCupJoint self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCupJoint_triggerOnInit(self, context)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_EndEffectors_SixDofSuctionCupJoint

# Register Robotics_EndEffectors_SixDofSuctionCupJoint in _RoboticsSwig:
_RoboticsSwig.Robotics_EndEffectors_SixDofSuctionCupJoint_swigregister(Robotics_EndEffectors_SixDofSuctionCupJoint)

class Robotics_EndEffectors_SuctionCupElastoDynamics(openplx.Core.Object):
    r"""Proxy of C++ openplx::Robotics::EndEffectors::SuctionCupElastoDynamics class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Robotics_EndEffectors_SuctionCupElastoDynamics self) -> Robotics_EndEffectors_SuctionCupElastoDynamics"""
        _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_swiginit(self, _RoboticsSwig.new_Robotics_EndEffectors_SuctionCupElastoDynamics())

    def lip_normal_flexibility(self):
        r"""lip_normal_flexibility(Robotics_EndEffectors_SuctionCupElastoDynamics self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic >"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_lip_normal_flexibility(self)

    def radial_axis_flexibility(self):
        r"""radial_axis_flexibility(Robotics_EndEffectors_SuctionCupElastoDynamics self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic >"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_radial_axis_flexibility(self)

    def around_lip_normal_flexibility(self):
        r"""around_lip_normal_flexibility(Robotics_EndEffectors_SuctionCupElastoDynamics self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic >"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_around_lip_normal_flexibility(self)

    def around_radial_axis_flexibility(self):
        r"""around_radial_axis_flexibility(Robotics_EndEffectors_SuctionCupElastoDynamics self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic >"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_around_radial_axis_flexibility(self)

    def lip_normal_dissipation(self):
        r"""lip_normal_dissipation(Robotics_EndEffectors_SuctionCupElastoDynamics self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping >"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_lip_normal_dissipation(self)

    def radial_axis_dissipation(self):
        r"""radial_axis_dissipation(Robotics_EndEffectors_SuctionCupElastoDynamics self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping >"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_radial_axis_dissipation(self)

    def around_lip_normal_dissipation(self):
        r"""around_lip_normal_dissipation(Robotics_EndEffectors_SuctionCupElastoDynamics self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping >"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_around_lip_normal_dissipation(self)

    def around_radial_axis_dissipation(self):
        r"""around_radial_axis_dissipation(Robotics_EndEffectors_SuctionCupElastoDynamics self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping >"""
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_around_radial_axis_dissipation(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Robotics_EndEffectors_SuctionCupElastoDynamics self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Robotics_EndEffectors_SuctionCupElastoDynamics self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Robotics_EndEffectors_SuctionCupElastoDynamics self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Robotics_EndEffectors_SuctionCupElastoDynamics self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Robotics_EndEffectors_SuctionCupElastoDynamics self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Robotics_EndEffectors_SuctionCupElastoDynamics self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_triggerOnInit(self, context)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_EndEffectors_SuctionCupElastoDynamics

# Register Robotics_EndEffectors_SuctionCupElastoDynamics in _RoboticsSwig:
_RoboticsSwig.Robotics_EndEffectors_SuctionCupElastoDynamics_swigregister(Robotics_EndEffectors_SuctionCupElastoDynamics)

class Robotics_EndEffectors_VacuumGripper(openplx.Core.Object, openplx.Physics.BoolInputTrait, openplx.Physics.BoolOutputTrait):
    r"""Proxy of C++ openplx::Robotics::EndEffectors::VacuumGripper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Robotics_EndEffectors_VacuumGripper self) -> Robotics_EndEffectors_VacuumGripper"""
        _RoboticsSwig.Robotics_EndEffectors_VacuumGripper_swiginit(self, _RoboticsSwig.new_Robotics_EndEffectors_VacuumGripper())

    def activated(self):
        r"""activated(Robotics_EndEffectors_VacuumGripper self) -> bool"""
        return _RoboticsSwig.Robotics_EndEffectors_VacuumGripper_activated(self)

    def suction_cups(self):
        r"""suction_cups(Robotics_EndEffectors_VacuumGripper self) -> Robotics_EndEffectors_SuctionCup_Vector"""
        return _RoboticsSwig.Robotics_EndEffectors_VacuumGripper_suction_cups(self)

    def vacuum_system(self):
        r"""vacuum_system(Robotics_EndEffectors_VacuumGripper self) -> std::shared_ptr< openplx::Robotics::EndEffectors::VacuumSystem >"""
        return _RoboticsSwig.Robotics_EndEffectors_VacuumGripper_vacuum_system(self)

    def activate_input(self):
        r"""activate_input(Robotics_EndEffectors_VacuumGripper self) -> std::shared_ptr< openplx::Physics::Signals::ActivateInput >"""
        return _RoboticsSwig.Robotics_EndEffectors_VacuumGripper_activate_input(self)

    def activated_output(self):
        r"""activated_output(Robotics_EndEffectors_VacuumGripper self) -> std::shared_ptr< openplx::Physics::Signals::ActivatedOutput >"""
        return _RoboticsSwig.Robotics_EndEffectors_VacuumGripper_activated_output(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Robotics_EndEffectors_VacuumGripper self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _RoboticsSwig.Robotics_EndEffectors_VacuumGripper_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Robotics_EndEffectors_VacuumGripper self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_VacuumGripper_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Robotics_EndEffectors_VacuumGripper self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_VacuumGripper_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Robotics_EndEffectors_VacuumGripper self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _RoboticsSwig.Robotics_EndEffectors_VacuumGripper_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Robotics_EndEffectors_VacuumGripper self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _RoboticsSwig.Robotics_EndEffectors_VacuumGripper_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Robotics_EndEffectors_VacuumGripper self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _RoboticsSwig.Robotics_EndEffectors_VacuumGripper_triggerOnInit(self, context)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_EndEffectors_VacuumGripper

# Register Robotics_EndEffectors_VacuumGripper in _RoboticsSwig:
_RoboticsSwig.Robotics_EndEffectors_VacuumGripper_swigregister(Robotics_EndEffectors_VacuumGripper)

class Robotics_Joints_Joint(openplx.Physics3D.Physics3D_System):
    r"""Proxy of C++ openplx::Robotics::Joints::Joint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Robotics_Joints_Joint self) -> Robotics_Joints_Joint"""
        _RoboticsSwig.Robotics_Joints_Joint_swiginit(self, _RoboticsSwig.new_Robotics_Joints_Joint())

    def mate(self):
        r"""mate(Robotics_Joints_Joint self) -> std::shared_ptr< openplx::Physics3D::Interactions::Mate >"""
        return _RoboticsSwig.Robotics_Joints_Joint_mate(self)

    def links(self):
        r"""links(Robotics_Joints_Joint self) -> Robotics_Links_RigidLink_Vector"""
        return _RoboticsSwig.Robotics_Joints_Joint_links(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Robotics_Joints_Joint self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _RoboticsSwig.Robotics_Joints_Joint_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Robotics_Joints_Joint self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Robotics_Joints_Joint_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Robotics_Joints_Joint self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _RoboticsSwig.Robotics_Joints_Joint_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Robotics_Joints_Joint self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _RoboticsSwig.Robotics_Joints_Joint_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Robotics_Joints_Joint self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _RoboticsSwig.Robotics_Joints_Joint_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Robotics_Joints_Joint self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _RoboticsSwig.Robotics_Joints_Joint_triggerOnInit(self, context)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Joints_Joint

# Register Robotics_Joints_Joint in _RoboticsSwig:
_RoboticsSwig.Robotics_Joints_Joint_swigregister(Robotics_Joints_Joint)

class Robotics_Joints_ActuatedJoint(Robotics_Joints_Joint):
    r"""Proxy of C++ openplx::Robotics::Joints::ActuatedJoint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Robotics_Joints_ActuatedJoint self) -> Robotics_Joints_ActuatedJoint"""
        _RoboticsSwig.Robotics_Joints_ActuatedJoint_swiginit(self, _RoboticsSwig.new_Robotics_Joints_ActuatedJoint())

    def actuator(self):
        r"""actuator(Robotics_Joints_ActuatedJoint self) -> std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF >"""
        return _RoboticsSwig.Robotics_Joints_ActuatedJoint_actuator(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Robotics_Joints_ActuatedJoint self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _RoboticsSwig.Robotics_Joints_ActuatedJoint_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Robotics_Joints_ActuatedJoint self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Robotics_Joints_ActuatedJoint_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Robotics_Joints_ActuatedJoint self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _RoboticsSwig.Robotics_Joints_ActuatedJoint_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Robotics_Joints_ActuatedJoint self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _RoboticsSwig.Robotics_Joints_ActuatedJoint_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Robotics_Joints_ActuatedJoint self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _RoboticsSwig.Robotics_Joints_ActuatedJoint_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Robotics_Joints_ActuatedJoint self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _RoboticsSwig.Robotics_Joints_ActuatedJoint_triggerOnInit(self, context)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Joints_ActuatedJoint

# Register Robotics_Joints_ActuatedJoint in _RoboticsSwig:
_RoboticsSwig.Robotics_Joints_ActuatedJoint_swigregister(Robotics_Joints_ActuatedJoint)

class Robotics_Joints_CoupledJointDriveTrain(openplx.Physics3D.Physics3D_System):
    r"""Proxy of C++ openplx::Robotics::Joints::CoupledJointDriveTrain class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Robotics_Joints_CoupledJointDriveTrain self) -> Robotics_Joints_CoupledJointDriveTrain"""
        _RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_swiginit(self, _RoboticsSwig.new_Robotics_Joints_CoupledJointDriveTrain())

    def shaft(self):
        r"""shaft(Robotics_Joints_CoupledJointDriveTrain self) -> std::shared_ptr< openplx::DriveTrain::Shaft >"""
        return _RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_shaft(self)

    def sensor(self):
        r"""sensor(Robotics_Joints_CoupledJointDriveTrain self) -> std::shared_ptr< openplx::Robotics::Signals::Sensor >"""
        return _RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_sensor(self)

    def primary_actuator(self):
        r"""primary_actuator(Robotics_Joints_CoupledJointDriveTrain self) -> std::shared_ptr< openplx::DriveTrain::Actuator >"""
        return _RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_primary_actuator(self)

    def mimic_actuator(self):
        r"""mimic_actuator(Robotics_Joints_CoupledJointDriveTrain self) -> std::shared_ptr< openplx::DriveTrain::Actuator >"""
        return _RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_mimic_actuator(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Robotics_Joints_CoupledJointDriveTrain self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Robotics_Joints_CoupledJointDriveTrain self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Robotics_Joints_CoupledJointDriveTrain self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Robotics_Joints_CoupledJointDriveTrain self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Robotics_Joints_CoupledJointDriveTrain self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Robotics_Joints_CoupledJointDriveTrain self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_triggerOnInit(self, context)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Joints_CoupledJointDriveTrain

# Register Robotics_Joints_CoupledJointDriveTrain in _RoboticsSwig:
_RoboticsSwig.Robotics_Joints_CoupledJointDriveTrain_swigregister(Robotics_Joints_CoupledJointDriveTrain)

class Robotics_Joints_FixedJoint(Robotics_Joints_Joint):
    r"""Proxy of C++ openplx::Robotics::Joints::FixedJoint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Robotics_Joints_FixedJoint self) -> Robotics_Joints_FixedJoint"""
        _RoboticsSwig.Robotics_Joints_FixedJoint_swiginit(self, _RoboticsSwig.new_Robotics_Joints_FixedJoint())

    def mate(self):
        r"""mate(Robotics_Joints_FixedJoint self) -> std::shared_ptr< openplx::Physics3D::Interactions::Lock >"""
        return _RoboticsSwig.Robotics_Joints_FixedJoint_mate(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Robotics_Joints_FixedJoint self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _RoboticsSwig.Robotics_Joints_FixedJoint_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Robotics_Joints_FixedJoint self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Robotics_Joints_FixedJoint_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Robotics_Joints_FixedJoint self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _RoboticsSwig.Robotics_Joints_FixedJoint_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Robotics_Joints_FixedJoint self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _RoboticsSwig.Robotics_Joints_FixedJoint_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Robotics_Joints_FixedJoint self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _RoboticsSwig.Robotics_Joints_FixedJoint_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Robotics_Joints_FixedJoint self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _RoboticsSwig.Robotics_Joints_FixedJoint_triggerOnInit(self, context)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Joints_FixedJoint

# Register Robotics_Joints_FixedJoint in _RoboticsSwig:
_RoboticsSwig.Robotics_Joints_FixedJoint_swigregister(Robotics_Joints_FixedJoint)

class Robotics_Joints_HingeJoint(Robotics_Joints_ActuatedJoint):
    r"""Proxy of C++ openplx::Robotics::Joints::HingeJoint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Robotics_Joints_HingeJoint self) -> Robotics_Joints_HingeJoint"""
        _RoboticsSwig.Robotics_Joints_HingeJoint_swiginit(self, _RoboticsSwig.new_Robotics_Joints_HingeJoint())

    def mate(self):
        r"""mate(Robotics_Joints_HingeJoint self) -> std::shared_ptr< openplx::Physics3D::Interactions::Hinge >"""
        return _RoboticsSwig.Robotics_Joints_HingeJoint_mate(self)

    def range(self):
        r"""range(Robotics_Joints_HingeJoint self) -> std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange >"""
        return _RoboticsSwig.Robotics_Joints_HingeJoint_range(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Robotics_Joints_HingeJoint self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _RoboticsSwig.Robotics_Joints_HingeJoint_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Robotics_Joints_HingeJoint self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJoint_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Robotics_Joints_HingeJoint self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJoint_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Robotics_Joints_HingeJoint self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJoint_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Robotics_Joints_HingeJoint self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJoint_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Robotics_Joints_HingeJoint self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJoint_triggerOnInit(self, context)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Joints_HingeJoint

# Register Robotics_Joints_HingeJoint in _RoboticsSwig:
_RoboticsSwig.Robotics_Joints_HingeJoint_swigregister(Robotics_Joints_HingeJoint)

class FlexibleJointTrait(object):
    r"""Proxy of C++ openplx::Robotics::Joints::FlexibleJointTrait class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RoboticsSwig.delete_FlexibleJointTrait

    def drive_train(self):
        r"""drive_train(FlexibleJointTrait self) -> std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain >"""
        return _RoboticsSwig.FlexibleJointTrait_drive_train(self)

# Register FlexibleJointTrait in _RoboticsSwig:
_RoboticsSwig.FlexibleJointTrait_swigregister(FlexibleJointTrait)

class Robotics_Joints_FlexibleAngularVelocityJoint(Robotics_Joints_HingeJoint, FlexibleJointTrait):
    r"""Proxy of C++ openplx::Robotics::Joints::FlexibleAngularVelocityJoint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Robotics_Joints_FlexibleAngularVelocityJoint self) -> Robotics_Joints_FlexibleAngularVelocityJoint"""
        _RoboticsSwig.Robotics_Joints_FlexibleAngularVelocityJoint_swiginit(self, _RoboticsSwig.new_Robotics_Joints_FlexibleAngularVelocityJoint())

    def drive_train(self):
        r"""drive_train(Robotics_Joints_FlexibleAngularVelocityJoint self) -> std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain >"""
        return _RoboticsSwig.Robotics_Joints_FlexibleAngularVelocityJoint_drive_train(self)

    def actuator(self):
        r"""actuator(Robotics_Joints_FlexibleAngularVelocityJoint self) -> std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor >"""
        return _RoboticsSwig.Robotics_Joints_FlexibleAngularVelocityJoint_actuator(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Robotics_Joints_FlexibleAngularVelocityJoint self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleAngularVelocityJoint_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Robotics_Joints_FlexibleAngularVelocityJoint self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleAngularVelocityJoint_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Robotics_Joints_FlexibleAngularVelocityJoint self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleAngularVelocityJoint_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Robotics_Joints_FlexibleAngularVelocityJoint self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleAngularVelocityJoint_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Robotics_Joints_FlexibleAngularVelocityJoint self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleAngularVelocityJoint_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Robotics_Joints_FlexibleAngularVelocityJoint self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleAngularVelocityJoint_triggerOnInit(self, context)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Joints_FlexibleAngularVelocityJoint

# Register Robotics_Joints_FlexibleAngularVelocityJoint in _RoboticsSwig:
_RoboticsSwig.Robotics_Joints_FlexibleAngularVelocityJoint_swigregister(Robotics_Joints_FlexibleAngularVelocityJoint)

class Robotics_Joints_JointData(openplx.Core.Object):
    r"""Proxy of C++ openplx::Robotics::Joints::JointData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Robotics_Joints_JointData self) -> Robotics_Joints_JointData"""
        _RoboticsSwig.Robotics_Joints_JointData_swiginit(self, _RoboticsSwig.new_Robotics_Joints_JointData())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Robotics_Joints_JointData self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _RoboticsSwig.Robotics_Joints_JointData_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Robotics_Joints_JointData self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Robotics_Joints_JointData_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Robotics_Joints_JointData self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _RoboticsSwig.Robotics_Joints_JointData_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Robotics_Joints_JointData self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _RoboticsSwig.Robotics_Joints_JointData_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Robotics_Joints_JointData self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _RoboticsSwig.Robotics_Joints_JointData_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Robotics_Joints_JointData self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _RoboticsSwig.Robotics_Joints_JointData_triggerOnInit(self, context)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Joints_JointData

# Register Robotics_Joints_JointData in _RoboticsSwig:
_RoboticsSwig.Robotics_Joints_JointData_swigregister(Robotics_Joints_JointData)

class Robotics_Joints_HingeJointData(Robotics_Joints_JointData):
    r"""Proxy of C++ openplx::Robotics::Joints::HingeJointData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Robotics_Joints_HingeJointData self) -> Robotics_Joints_HingeJointData"""
        _RoboticsSwig.Robotics_Joints_HingeJointData_swiginit(self, _RoboticsSwig.new_Robotics_Joints_HingeJointData())

    def stiffness_around_normal(self):
        r"""stiffness_around_normal(Robotics_Joints_HingeJointData self) -> double"""
        return _RoboticsSwig.Robotics_Joints_HingeJointData_stiffness_around_normal(self)

    def stiffness_around_cross(self):
        r"""stiffness_around_cross(Robotics_Joints_HingeJointData self) -> double"""
        return _RoboticsSwig.Robotics_Joints_HingeJointData_stiffness_around_cross(self)

    def stiffness_along_main(self):
        r"""stiffness_along_main(Robotics_Joints_HingeJointData self) -> double"""
        return _RoboticsSwig.Robotics_Joints_HingeJointData_stiffness_along_main(self)

    def stiffness_along_normal(self):
        r"""stiffness_along_normal(Robotics_Joints_HingeJointData self) -> double"""
        return _RoboticsSwig.Robotics_Joints_HingeJointData_stiffness_along_normal(self)

    def stiffness_along_cross(self):
        r"""stiffness_along_cross(Robotics_Joints_HingeJointData self) -> double"""
        return _RoboticsSwig.Robotics_Joints_HingeJointData_stiffness_along_cross(self)

    def damping_around_normal(self):
        r"""damping_around_normal(Robotics_Joints_HingeJointData self) -> double"""
        return _RoboticsSwig.Robotics_Joints_HingeJointData_damping_around_normal(self)

    def damping_around_cross(self):
        r"""damping_around_cross(Robotics_Joints_HingeJointData self) -> double"""
        return _RoboticsSwig.Robotics_Joints_HingeJointData_damping_around_cross(self)

    def damping_along_main(self):
        r"""damping_along_main(Robotics_Joints_HingeJointData self) -> double"""
        return _RoboticsSwig.Robotics_Joints_HingeJointData_damping_along_main(self)

    def damping_along_normal(self):
        r"""damping_along_normal(Robotics_Joints_HingeJointData self) -> double"""
        return _RoboticsSwig.Robotics_Joints_HingeJointData_damping_along_normal(self)

    def damping_along_cross(self):
        r"""damping_along_cross(Robotics_Joints_HingeJointData self) -> double"""
        return _RoboticsSwig.Robotics_Joints_HingeJointData_damping_along_cross(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Robotics_Joints_HingeJointData self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointData_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Robotics_Joints_HingeJointData self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointData_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Robotics_Joints_HingeJointData self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointData_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Robotics_Joints_HingeJointData self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointData_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Robotics_Joints_HingeJointData self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointData_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Robotics_Joints_HingeJointData self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointData_triggerOnInit(self, context)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Joints_HingeJointData

# Register Robotics_Joints_HingeJointData in _RoboticsSwig:
_RoboticsSwig.Robotics_Joints_HingeJointData_swigregister(Robotics_Joints_HingeJointData)

class Robotics_Joints_FlexibleJointData(Robotics_Joints_HingeJointData):
    r"""Proxy of C++ openplx::Robotics::Joints::FlexibleJointData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Robotics_Joints_FlexibleJointData self) -> Robotics_Joints_FlexibleJointData"""
        _RoboticsSwig.Robotics_Joints_FlexibleJointData_swiginit(self, _RoboticsSwig.new_Robotics_Joints_FlexibleJointData())

    def motor_damping(self):
        r"""motor_damping(Robotics_Joints_FlexibleJointData self) -> double"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointData_motor_damping(self)

    def motor_inertia(self):
        r"""motor_inertia(Robotics_Joints_FlexibleJointData self) -> double"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointData_motor_inertia(self)

    def motor_stiffness(self):
        r"""motor_stiffness(Robotics_Joints_FlexibleJointData self) -> double"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointData_motor_stiffness(self)

    def gear_inertia(self):
        r"""gear_inertia(Robotics_Joints_FlexibleJointData self) -> double"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointData_gear_inertia(self)

    def gear_ratio(self):
        r"""gear_ratio(Robotics_Joints_FlexibleJointData self) -> double"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointData_gear_ratio(self)

    def max_motor_torque(self):
        r"""max_motor_torque(Robotics_Joints_FlexibleJointData self) -> double"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointData_max_motor_torque(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Robotics_Joints_FlexibleJointData self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleJointData_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Robotics_Joints_FlexibleJointData self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleJointData_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Robotics_Joints_FlexibleJointData self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleJointData_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Robotics_Joints_FlexibleJointData self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleJointData_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Robotics_Joints_FlexibleJointData self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleJointData_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Robotics_Joints_FlexibleJointData self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleJointData_triggerOnInit(self, context)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Joints_FlexibleJointData

# Register Robotics_Joints_FlexibleJointData in _RoboticsSwig:
_RoboticsSwig.Robotics_Joints_FlexibleJointData_swigregister(Robotics_Joints_FlexibleJointData)

class Robotics_Joints_FlexibleJointDriveTrain(openplx.Physics3D.Physics3D_System):
    r"""Proxy of C++ openplx::Robotics::Joints::FlexibleJointDriveTrain class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Robotics_Joints_FlexibleJointDriveTrain self) -> Robotics_Joints_FlexibleJointDriveTrain"""
        _RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_swiginit(self, _RoboticsSwig.new_Robotics_Joints_FlexibleJointDriveTrain())

    def motor_shaft(self):
        r"""motor_shaft(Robotics_Joints_FlexibleJointDriveTrain self) -> std::shared_ptr< openplx::DriveTrain::Shaft >"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_motor_shaft(self)

    def gear(self):
        r"""gear(Robotics_Joints_FlexibleJointDriveTrain self) -> std::shared_ptr< openplx::DriveTrain::Gear >"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_gear(self)

    def gear_shaft(self):
        r"""gear_shaft(Robotics_Joints_FlexibleJointDriveTrain self) -> std::shared_ptr< openplx::DriveTrain::Shaft >"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_gear_shaft(self)

    def sensor(self):
        r"""sensor(Robotics_Joints_FlexibleJointDriveTrain self) -> std::shared_ptr< openplx::Robotics::Signals::Sensor >"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_sensor(self)

    def hinge_actuator(self):
        r"""hinge_actuator(Robotics_Joints_FlexibleJointDriveTrain self) -> std::shared_ptr< openplx::DriveTrain::HingeActuator >"""
        return _RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_hinge_actuator(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Robotics_Joints_FlexibleJointDriveTrain self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Robotics_Joints_FlexibleJointDriveTrain self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Robotics_Joints_FlexibleJointDriveTrain self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Robotics_Joints_FlexibleJointDriveTrain self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Robotics_Joints_FlexibleJointDriveTrain self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Robotics_Joints_FlexibleJointDriveTrain self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_triggerOnInit(self, context)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Joints_FlexibleJointDriveTrain

# Register Robotics_Joints_FlexibleJointDriveTrain in _RoboticsSwig:
_RoboticsSwig.Robotics_Joints_FlexibleJointDriveTrain_swigregister(Robotics_Joints_FlexibleJointDriveTrain)

class Robotics_Joints_FlexibleTorqueJoint(Robotics_Joints_HingeJoint, FlexibleJointTrait):
    r"""Proxy of C++ openplx::Robotics::Joints::FlexibleTorqueJoint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Robotics_Joints_FlexibleTorqueJoint self) -> Robotics_Joints_FlexibleTorqueJoint"""
        _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_swiginit(self, _RoboticsSwig.new_Robotics_Joints_FlexibleTorqueJoint())

    def drive_train(self):
        r"""drive_train(Robotics_Joints_FlexibleTorqueJoint self) -> std::shared_ptr< openplx::Robotics::Joints::FlexibleJointDriveTrain >"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_drive_train(self)

    def actuator(self):
        r"""actuator(Robotics_Joints_FlexibleTorqueJoint self) -> std::shared_ptr< openplx::DriveTrain::TorqueMotor >"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_actuator(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Robotics_Joints_FlexibleTorqueJoint self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Robotics_Joints_FlexibleTorqueJoint self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Robotics_Joints_FlexibleTorqueJoint self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Robotics_Joints_FlexibleTorqueJoint self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Robotics_Joints_FlexibleTorqueJoint self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Robotics_Joints_FlexibleTorqueJoint self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_triggerOnInit(self, context)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Joints_FlexibleTorqueJoint

# Register Robotics_Joints_FlexibleTorqueJoint in _RoboticsSwig:
_RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_swigregister(Robotics_Joints_FlexibleTorqueJoint)

class Robotics_Joints_PositionHingeJoint(Robotics_Joints_HingeJoint):
    r"""Proxy of C++ openplx::Robotics::Joints::PositionHingeJoint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Robotics_Joints_PositionHingeJoint self) -> Robotics_Joints_PositionHingeJoint"""
        _RoboticsSwig.Robotics_Joints_PositionHingeJoint_swiginit(self, _RoboticsSwig.new_Robotics_Joints_PositionHingeJoint())

    def actuator(self):
        r"""actuator(Robotics_Joints_PositionHingeJoint self) -> std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring >"""
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_actuator(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Robotics_Joints_PositionHingeJoint self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Robotics_Joints_PositionHingeJoint self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Robotics_Joints_PositionHingeJoint self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Robotics_Joints_PositionHingeJoint self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Robotics_Joints_PositionHingeJoint self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Robotics_Joints_PositionHingeJoint self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_triggerOnInit(self, context)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Joints_PositionHingeJoint

# Register Robotics_Joints_PositionHingeJoint in _RoboticsSwig:
_RoboticsSwig.Robotics_Joints_PositionHingeJoint_swigregister(Robotics_Joints_PositionHingeJoint)

class Robotics_Joints_PrismaticJoint(Robotics_Joints_ActuatedJoint):
    r"""Proxy of C++ openplx::Robotics::Joints::PrismaticJoint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Robotics_Joints_PrismaticJoint self) -> Robotics_Joints_PrismaticJoint"""
        _RoboticsSwig.Robotics_Joints_PrismaticJoint_swiginit(self, _RoboticsSwig.new_Robotics_Joints_PrismaticJoint())

    def mate(self):
        r"""mate(Robotics_Joints_PrismaticJoint self) -> std::shared_ptr< openplx::Physics3D::Interactions::Prismatic >"""
        return _RoboticsSwig.Robotics_Joints_PrismaticJoint_mate(self)

    def range(self):
        r"""range(Robotics_Joints_PrismaticJoint self) -> std::shared_ptr< openplx::Physics3D::Interactions::LinearRange >"""
        return _RoboticsSwig.Robotics_Joints_PrismaticJoint_range(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Robotics_Joints_PrismaticJoint self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _RoboticsSwig.Robotics_Joints_PrismaticJoint_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Robotics_Joints_PrismaticJoint self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Robotics_Joints_PrismaticJoint_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Robotics_Joints_PrismaticJoint self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _RoboticsSwig.Robotics_Joints_PrismaticJoint_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Robotics_Joints_PrismaticJoint self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _RoboticsSwig.Robotics_Joints_PrismaticJoint_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Robotics_Joints_PrismaticJoint self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _RoboticsSwig.Robotics_Joints_PrismaticJoint_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Robotics_Joints_PrismaticJoint self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _RoboticsSwig.Robotics_Joints_PrismaticJoint_triggerOnInit(self, context)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Joints_PrismaticJoint

# Register Robotics_Joints_PrismaticJoint in _RoboticsSwig:
_RoboticsSwig.Robotics_Joints_PrismaticJoint_swigregister(Robotics_Joints_PrismaticJoint)

class Robotics_Joints_TorqueHingeJoint(Robotics_Joints_HingeJoint):
    r"""Proxy of C++ openplx::Robotics::Joints::TorqueHingeJoint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Robotics_Joints_TorqueHingeJoint self) -> Robotics_Joints_TorqueHingeJoint"""
        _RoboticsSwig.Robotics_Joints_TorqueHingeJoint_swiginit(self, _RoboticsSwig.new_Robotics_Joints_TorqueHingeJoint())

    def actuator(self):
        r"""actuator(Robotics_Joints_TorqueHingeJoint self) -> std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor >"""
        return _RoboticsSwig.Robotics_Joints_TorqueHingeJoint_actuator(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Robotics_Joints_TorqueHingeJoint self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _RoboticsSwig.Robotics_Joints_TorqueHingeJoint_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Robotics_Joints_TorqueHingeJoint self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Robotics_Joints_TorqueHingeJoint_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Robotics_Joints_TorqueHingeJoint self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _RoboticsSwig.Robotics_Joints_TorqueHingeJoint_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Robotics_Joints_TorqueHingeJoint self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _RoboticsSwig.Robotics_Joints_TorqueHingeJoint_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Robotics_Joints_TorqueHingeJoint self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _RoboticsSwig.Robotics_Joints_TorqueHingeJoint_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Robotics_Joints_TorqueHingeJoint self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _RoboticsSwig.Robotics_Joints_TorqueHingeJoint_triggerOnInit(self, context)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Joints_TorqueHingeJoint

# Register Robotics_Joints_TorqueHingeJoint in _RoboticsSwig:
_RoboticsSwig.Robotics_Joints_TorqueHingeJoint_swigregister(Robotics_Joints_TorqueHingeJoint)

class Robotics_Joints_VelocityHingeJoint(Robotics_Joints_HingeJoint):
    r"""Proxy of C++ openplx::Robotics::Joints::VelocityHingeJoint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Robotics_Joints_VelocityHingeJoint self) -> Robotics_Joints_VelocityHingeJoint"""
        _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_swiginit(self, _RoboticsSwig.new_Robotics_Joints_VelocityHingeJoint())

    def actuator(self):
        r"""actuator(Robotics_Joints_VelocityHingeJoint self) -> std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor >"""
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_actuator(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Robotics_Joints_VelocityHingeJoint self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Robotics_Joints_VelocityHingeJoint self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Robotics_Joints_VelocityHingeJoint self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Robotics_Joints_VelocityHingeJoint self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Robotics_Joints_VelocityHingeJoint self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Robotics_Joints_VelocityHingeJoint self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_triggerOnInit(self, context)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Joints_VelocityHingeJoint

# Register Robotics_Joints_VelocityHingeJoint in _RoboticsSwig:
_RoboticsSwig.Robotics_Joints_VelocityHingeJoint_swigregister(Robotics_Joints_VelocityHingeJoint)

class Robotics_Links_LinkData(openplx.Core.Object):
    r"""Proxy of C++ openplx::Robotics::Links::LinkData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Robotics_Links_LinkData self) -> Robotics_Links_LinkData"""
        _RoboticsSwig.Robotics_Links_LinkData_swiginit(self, _RoboticsSwig.new_Robotics_Links_LinkData())

    def inertia(self):
        r"""inertia(Robotics_Links_LinkData self) -> std::shared_ptr< openplx::Physics3D::Bodies::Inertia >"""
        return _RoboticsSwig.Robotics_Links_LinkData_inertia(self)

    def start_position(self):
        r"""start_position(Robotics_Links_LinkData self) -> std::shared_ptr< openplx::Math::Vec3 >"""
        return _RoboticsSwig.Robotics_Links_LinkData_start_position(self)

    def start_main_axis(self):
        r"""start_main_axis(Robotics_Links_LinkData self) -> std::shared_ptr< openplx::Math::Vec3 >"""
        return _RoboticsSwig.Robotics_Links_LinkData_start_main_axis(self)

    def start_normal(self):
        r"""start_normal(Robotics_Links_LinkData self) -> std::shared_ptr< openplx::Math::Vec3 >"""
        return _RoboticsSwig.Robotics_Links_LinkData_start_normal(self)

    def end_position(self):
        r"""end_position(Robotics_Links_LinkData self) -> std::shared_ptr< openplx::Math::Vec3 >"""
        return _RoboticsSwig.Robotics_Links_LinkData_end_position(self)

    def end_main_axis(self):
        r"""end_main_axis(Robotics_Links_LinkData self) -> std::shared_ptr< openplx::Math::Vec3 >"""
        return _RoboticsSwig.Robotics_Links_LinkData_end_main_axis(self)

    def end_normal(self):
        r"""end_normal(Robotics_Links_LinkData self) -> std::shared_ptr< openplx::Math::Vec3 >"""
        return _RoboticsSwig.Robotics_Links_LinkData_end_normal(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Robotics_Links_LinkData self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _RoboticsSwig.Robotics_Links_LinkData_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Robotics_Links_LinkData self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Robotics_Links_LinkData_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Robotics_Links_LinkData self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _RoboticsSwig.Robotics_Links_LinkData_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Robotics_Links_LinkData self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _RoboticsSwig.Robotics_Links_LinkData_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Robotics_Links_LinkData self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _RoboticsSwig.Robotics_Links_LinkData_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Robotics_Links_LinkData self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _RoboticsSwig.Robotics_Links_LinkData_triggerOnInit(self, context)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Links_LinkData

# Register Robotics_Links_LinkData in _RoboticsSwig:
_RoboticsSwig.Robotics_Links_LinkData_swigregister(Robotics_Links_LinkData)

class Robotics_Links_RigidLink(openplx.Physics3D.Physics3D_Bodies_RigidBody):
    r"""Proxy of C++ openplx::Robotics::Links::RigidLink class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Robotics_Links_RigidLink self) -> Robotics_Links_RigidLink"""
        _RoboticsSwig.Robotics_Links_RigidLink_swiginit(self, _RoboticsSwig.new_Robotics_Links_RigidLink())

    def start(self):
        r"""start(Robotics_Links_RigidLink self) -> std::shared_ptr< openplx::Physics3D::Charges::MateConnector >"""
        return _RoboticsSwig.Robotics_Links_RigidLink_start(self)

    def end(self):
        r"""end(Robotics_Links_RigidLink self) -> std::shared_ptr< openplx::Physics3D::Charges::MateConnector >"""
        return _RoboticsSwig.Robotics_Links_RigidLink_end(self)

    def contact_geometry(self):
        r"""contact_geometry(Robotics_Links_RigidLink self) -> std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry >"""
        return _RoboticsSwig.Robotics_Links_RigidLink_contact_geometry(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Robotics_Links_RigidLink self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _RoboticsSwig.Robotics_Links_RigidLink_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Robotics_Links_RigidLink self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Robotics_Links_RigidLink_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Robotics_Links_RigidLink self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _RoboticsSwig.Robotics_Links_RigidLink_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Robotics_Links_RigidLink self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _RoboticsSwig.Robotics_Links_RigidLink_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Robotics_Links_RigidLink self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _RoboticsSwig.Robotics_Links_RigidLink_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Robotics_Links_RigidLink self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _RoboticsSwig.Robotics_Links_RigidLink_triggerOnInit(self, context)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Links_RigidLink

# Register Robotics_Links_RigidLink in _RoboticsSwig:
_RoboticsSwig.Robotics_Links_RigidLink_swigregister(Robotics_Links_RigidLink)

class Robotics_Links_RigidBoxLink(Robotics_Links_RigidLink):
    r"""Proxy of C++ openplx::Robotics::Links::RigidBoxLink class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Robotics_Links_RigidBoxLink self) -> Robotics_Links_RigidBoxLink"""
        _RoboticsSwig.Robotics_Links_RigidBoxLink_swiginit(self, _RoboticsSwig.new_Robotics_Links_RigidBoxLink())

    def geometry(self):
        r"""geometry(Robotics_Links_RigidBoxLink self) -> std::shared_ptr< openplx::Physics3D::Charges::Box >"""
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_geometry(self)

    def arrow(self):
        r"""arrow(Robotics_Links_RigidBoxLink self) -> std::shared_ptr< openplx::Physics3D::Charges::Box >"""
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_arrow(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Robotics_Links_RigidBoxLink self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Robotics_Links_RigidBoxLink self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Robotics_Links_RigidBoxLink self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Robotics_Links_RigidBoxLink self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Robotics_Links_RigidBoxLink self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Robotics_Links_RigidBoxLink self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_triggerOnInit(self, context)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Links_RigidBoxLink

# Register Robotics_Links_RigidBoxLink in _RoboticsSwig:
_RoboticsSwig.Robotics_Links_RigidBoxLink_swigregister(Robotics_Links_RigidBoxLink)

class Robotics_Links_RigidTriMeshLink(Robotics_Links_RigidLink):
    r"""Proxy of C++ openplx::Robotics::Links::RigidTriMeshLink class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Robotics_Links_RigidTriMeshLink self) -> Robotics_Links_RigidTriMeshLink"""
        _RoboticsSwig.Robotics_Links_RigidTriMeshLink_swiginit(self, _RoboticsSwig.new_Robotics_Links_RigidTriMeshLink())

    def contact_geometry(self):
        r"""contact_geometry(Robotics_Links_RigidTriMeshLink self) -> std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry >"""
        return _RoboticsSwig.Robotics_Links_RigidTriMeshLink_contact_geometry(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Robotics_Links_RigidTriMeshLink self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _RoboticsSwig.Robotics_Links_RigidTriMeshLink_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Robotics_Links_RigidTriMeshLink self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Robotics_Links_RigidTriMeshLink_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Robotics_Links_RigidTriMeshLink self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _RoboticsSwig.Robotics_Links_RigidTriMeshLink_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Robotics_Links_RigidTriMeshLink self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _RoboticsSwig.Robotics_Links_RigidTriMeshLink_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Robotics_Links_RigidTriMeshLink self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _RoboticsSwig.Robotics_Links_RigidTriMeshLink_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Robotics_Links_RigidTriMeshLink self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _RoboticsSwig.Robotics_Links_RigidTriMeshLink_triggerOnInit(self, context)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Links_RigidTriMeshLink

# Register Robotics_Links_RigidTriMeshLink in _RoboticsSwig:
_RoboticsSwig.Robotics_Links_RigidTriMeshLink_swigregister(Robotics_Links_RigidTriMeshLink)

class Robotics_Robots_Robot(openplx.Physics3D.Physics3D_System):
    r"""Proxy of C++ openplx::Robotics::Robots::Robot class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Robotics_Robots_Robot self) -> Robotics_Robots_Robot"""
        _RoboticsSwig.Robotics_Robots_Robot_swiginit(self, _RoboticsSwig.new_Robotics_Robots_Robot())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Robotics_Robots_Robot self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _RoboticsSwig.Robotics_Robots_Robot_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Robotics_Robots_Robot self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Robotics_Robots_Robot_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Robotics_Robots_Robot self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _RoboticsSwig.Robotics_Robots_Robot_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Robotics_Robots_Robot self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _RoboticsSwig.Robotics_Robots_Robot_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Robotics_Robots_Robot self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _RoboticsSwig.Robotics_Robots_Robot_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Robotics_Robots_Robot self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _RoboticsSwig.Robotics_Robots_Robot_triggerOnInit(self, context)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Robots_Robot

# Register Robotics_Robots_Robot in _RoboticsSwig:
_RoboticsSwig.Robotics_Robots_Robot_swigregister(Robotics_Robots_Robot)

class Robotics_Robots_SerialManipulatorData(openplx.Core.Object):
    r"""Proxy of C++ openplx::Robotics::Robots::SerialManipulatorData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Robotics_Robots_SerialManipulatorData self) -> Robotics_Robots_SerialManipulatorData"""
        _RoboticsSwig.Robotics_Robots_SerialManipulatorData_swiginit(self, _RoboticsSwig.new_Robotics_Robots_SerialManipulatorData())

    def link_data(self):
        r"""link_data(Robotics_Robots_SerialManipulatorData self) -> Robotics_Links_LinkData_Vector"""
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_link_data(self)

    def hinge_data(self):
        r"""hinge_data(Robotics_Robots_SerialManipulatorData self) -> Robotics_Joints_HingeJointData_Vector"""
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_hinge_data(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Robotics_Robots_SerialManipulatorData self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Robotics_Robots_SerialManipulatorData self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Robotics_Robots_SerialManipulatorData self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Robotics_Robots_SerialManipulatorData self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Robotics_Robots_SerialManipulatorData self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Robotics_Robots_SerialManipulatorData self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_triggerOnInit(self, context)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Robots_SerialManipulatorData

# Register Robotics_Robots_SerialManipulatorData in _RoboticsSwig:
_RoboticsSwig.Robotics_Robots_SerialManipulatorData_swigregister(Robotics_Robots_SerialManipulatorData)

class Robotics_Robots_SixAxisSerialManipulator(Robotics_Robots_Robot):
    r"""Proxy of C++ openplx::Robotics::Robots::SixAxisSerialManipulator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Robotics_Robots_SixAxisSerialManipulator self) -> Robotics_Robots_SixAxisSerialManipulator"""
        _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_swiginit(self, _RoboticsSwig.new_Robotics_Robots_SixAxisSerialManipulator())

    def data(self):
        r"""data(Robotics_Robots_SixAxisSerialManipulator self) -> std::shared_ptr< openplx::Robotics::Robots::SerialManipulatorData >"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_data(self)

    def link1(self):
        r"""link1(Robotics_Robots_SixAxisSerialManipulator self) -> std::shared_ptr< openplx::Robotics::Links::RigidLink >"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_link1(self)

    def link2(self):
        r"""link2(Robotics_Robots_SixAxisSerialManipulator self) -> std::shared_ptr< openplx::Robotics::Links::RigidLink >"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_link2(self)

    def link3(self):
        r"""link3(Robotics_Robots_SixAxisSerialManipulator self) -> std::shared_ptr< openplx::Robotics::Links::RigidLink >"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_link3(self)

    def link4(self):
        r"""link4(Robotics_Robots_SixAxisSerialManipulator self) -> std::shared_ptr< openplx::Robotics::Links::RigidLink >"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_link4(self)

    def link5(self):
        r"""link5(Robotics_Robots_SixAxisSerialManipulator self) -> std::shared_ptr< openplx::Robotics::Links::RigidLink >"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_link5(self)

    def link6(self):
        r"""link6(Robotics_Robots_SixAxisSerialManipulator self) -> std::shared_ptr< openplx::Robotics::Links::RigidLink >"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_link6(self)

    def joint1(self):
        r"""joint1(Robotics_Robots_SixAxisSerialManipulator self) -> std::shared_ptr< openplx::Robotics::Joints::HingeJoint >"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_joint1(self)

    def joint2(self):
        r"""joint2(Robotics_Robots_SixAxisSerialManipulator self) -> std::shared_ptr< openplx::Robotics::Joints::HingeJoint >"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_joint2(self)

    def joint3(self):
        r"""joint3(Robotics_Robots_SixAxisSerialManipulator self) -> std::shared_ptr< openplx::Robotics::Joints::HingeJoint >"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_joint3(self)

    def joint4(self):
        r"""joint4(Robotics_Robots_SixAxisSerialManipulator self) -> std::shared_ptr< openplx::Robotics::Joints::HingeJoint >"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_joint4(self)

    def joint5(self):
        r"""joint5(Robotics_Robots_SixAxisSerialManipulator self) -> std::shared_ptr< openplx::Robotics::Joints::HingeJoint >"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_joint5(self)

    def joint6(self):
        r"""joint6(Robotics_Robots_SixAxisSerialManipulator self) -> std::shared_ptr< openplx::Robotics::Joints::HingeJoint >"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_joint6(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Robotics_Robots_SixAxisSerialManipulator self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Robotics_Robots_SixAxisSerialManipulator self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Robotics_Robots_SixAxisSerialManipulator self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Robotics_Robots_SixAxisSerialManipulator self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Robotics_Robots_SixAxisSerialManipulator self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Robotics_Robots_SixAxisSerialManipulator self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_triggerOnInit(self, context)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Robots_SixAxisSerialManipulator

# Register Robotics_Robots_SixAxisSerialManipulator in _RoboticsSwig:
_RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_swigregister(Robotics_Robots_SixAxisSerialManipulator)

class Robotics_Signals_RobotInput(openplx.Physics.Physics_Signals_Input):
    r"""Proxy of C++ openplx::Robotics::Signals::RobotInput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Robotics_Signals_RobotInput self) -> Robotics_Signals_RobotInput"""
        _RoboticsSwig.Robotics_Signals_RobotInput_swiginit(self, _RoboticsSwig.new_Robotics_Signals_RobotInput())

    def targets(self):
        r"""targets(Robotics_Signals_RobotInput self) -> Physics_Signals_Input_Vector"""
        return _RoboticsSwig.Robotics_Signals_RobotInput_targets(self)

    def process(self, signal):
        r"""
        process(Robotics_Signals_RobotInput self, std::shared_ptr< openplx::Physics::Signals::InputSignal > signal) -> Physics_Signals_InputSignal_Vector

        Parameters
        ----------
        signal: std::shared_ptr< openplx::Physics::Signals::InputSignal >

        """
        return _RoboticsSwig.Robotics_Signals_RobotInput_process(self, signal)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Robotics_Signals_RobotInput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _RoboticsSwig.Robotics_Signals_RobotInput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Robotics_Signals_RobotInput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotInput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Robotics_Signals_RobotInput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotInput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Robotics_Signals_RobotInput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _RoboticsSwig.Robotics_Signals_RobotInput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Robotics_Signals_RobotInput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _RoboticsSwig.Robotics_Signals_RobotInput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Robotics_Signals_RobotInput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotInput_triggerOnInit(self, context)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Signals_RobotInput

# Register Robotics_Signals_RobotInput in _RoboticsSwig:
_RoboticsSwig.Robotics_Signals_RobotInput_swigregister(Robotics_Signals_RobotInput)

class Robotics_Signals_RobotInputSignal(openplx.Physics.Physics_Signals_InputSignal):
    r"""Proxy of C++ openplx::Robotics::Signals::RobotInputSignal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Robotics_Signals_RobotInputSignal self) -> Robotics_Signals_RobotInputSignal"""
        _RoboticsSwig.Robotics_Signals_RobotInputSignal_swiginit(self, _RoboticsSwig.new_Robotics_Signals_RobotInputSignal())

    def values(self):
        r"""values(Robotics_Signals_RobotInputSignal self) -> Physics_Signals_RealValue_Vector"""
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_values(self)

    def control_events(self):
        r"""control_events(Robotics_Signals_RobotInputSignal self) -> BoolVector"""
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_control_events(self)

    @staticmethod
    def create(values, control_events, target):
        r"""
        create(DoubleVector values, BoolVector control_events, std::shared_ptr< openplx::Physics::Signals::Input > target) -> std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal >

        Parameters
        ----------
        values: std::vector< double,std::allocator< double > >
        control_events: std::vector< bool,std::allocator< bool > >
        target: std::shared_ptr< openplx::Physics::Signals::Input >

        """
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_create(values, control_events, target)

    @staticmethod
    def from_values(values, control_events, target):
        r"""
        from_values(Physics_Signals_RealValue_Vector values, BoolVector control_events, std::shared_ptr< openplx::Physics::Signals::Input > target) -> std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal >

        Parameters
        ----------
        values: std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue >,std::allocator< std::shared_ptr< openplx::Physics::Signals::RealValue > > >
        control_events: std::vector< bool,std::allocator< bool > >
        target: std::shared_ptr< openplx::Physics::Signals::Input >

        """
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_from_values(values, control_events, target)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Robotics_Signals_RobotInputSignal self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Robotics_Signals_RobotInputSignal self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Robotics_Signals_RobotInputSignal self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Robotics_Signals_RobotInputSignal self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Robotics_Signals_RobotInputSignal self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Robotics_Signals_RobotInputSignal self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_triggerOnInit(self, context)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Signals_RobotInputSignal

# Register Robotics_Signals_RobotInputSignal in _RoboticsSwig:
_RoboticsSwig.Robotics_Signals_RobotInputSignal_swigregister(Robotics_Signals_RobotInputSignal)

def Robotics_Signals_RobotInputSignal_create(values, control_events, target):
    r"""
    Robotics_Signals_RobotInputSignal_create(DoubleVector values, BoolVector control_events, std::shared_ptr< openplx::Physics::Signals::Input > target) -> std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal >

    Parameters
    ----------
    values: std::vector< double,std::allocator< double > >
    control_events: std::vector< bool,std::allocator< bool > >
    target: std::shared_ptr< openplx::Physics::Signals::Input >

    """
    return _RoboticsSwig.Robotics_Signals_RobotInputSignal_create(values, control_events, target)

def Robotics_Signals_RobotInputSignal_from_values(values, control_events, target):
    r"""
    Robotics_Signals_RobotInputSignal_from_values(Physics_Signals_RealValue_Vector values, BoolVector control_events, std::shared_ptr< openplx::Physics::Signals::Input > target) -> std::shared_ptr< openplx::Robotics::Signals::RobotInputSignal >

    Parameters
    ----------
    values: std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue >,std::allocator< std::shared_ptr< openplx::Physics::Signals::RealValue > > >
    control_events: std::vector< bool,std::allocator< bool > >
    target: std::shared_ptr< openplx::Physics::Signals::Input >

    """
    return _RoboticsSwig.Robotics_Signals_RobotInputSignal_from_values(values, control_events, target)

class Robotics_Signals_RobotOutput(openplx.Physics.Physics_Signals_Output):
    r"""Proxy of C++ openplx::Robotics::Signals::RobotOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Robotics_Signals_RobotOutput self) -> Robotics_Signals_RobotOutput"""
        _RoboticsSwig.Robotics_Signals_RobotOutput_swiginit(self, _RoboticsSwig.new_Robotics_Signals_RobotOutput())

    def joint_sources(self):
        r"""joint_sources(Robotics_Signals_RobotOutput self) -> Physics_Signals_Output_Vector"""
        return _RoboticsSwig.Robotics_Signals_RobotOutput_joint_sources(self)

    def object_sources(self):
        r"""object_sources(Robotics_Signals_RobotOutput self) -> Physics_Signals_Output_Vector"""
        return _RoboticsSwig.Robotics_Signals_RobotOutput_object_sources(self)

    def sensors(self):
        r"""sensors(Robotics_Signals_RobotOutput self) -> Robotics_Signals_Sensor_Vector"""
        return _RoboticsSwig.Robotics_Signals_RobotOutput_sensors(self)

    def process(self, output, signals):
        r"""
        process(Robotics_Signals_RobotOutput self, std::shared_ptr< openplx::Physics::Signals::Output > output, Physics_Signals_OutputSignal_Vector signals) -> std::shared_ptr< openplx::Physics::Signals::OutputSignal >

        Parameters
        ----------
        output: std::shared_ptr< openplx::Physics::Signals::Output >
        signals: std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal >,std::allocator< std::shared_ptr< openplx::Physics::Signals::OutputSignal > > >

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutput_process(self, output, signals)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Robotics_Signals_RobotOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Robotics_Signals_RobotOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Robotics_Signals_RobotOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Robotics_Signals_RobotOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Robotics_Signals_RobotOutput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Robotics_Signals_RobotOutput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutput_triggerOnInit(self, context)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Signals_RobotOutput

# Register Robotics_Signals_RobotOutput in _RoboticsSwig:
_RoboticsSwig.Robotics_Signals_RobotOutput_swigregister(Robotics_Signals_RobotOutput)

class Robotics_Signals_RobotOutputSignal(openplx.Physics.Physics_Signals_OutputSignal):
    r"""Proxy of C++ openplx::Robotics::Signals::RobotOutputSignal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Robotics_Signals_RobotOutputSignal self) -> Robotics_Signals_RobotOutputSignal"""
        _RoboticsSwig.Robotics_Signals_RobotOutputSignal_swiginit(self, _RoboticsSwig.new_Robotics_Signals_RobotOutputSignal())

    def sensor_values(self):
        r"""sensor_values(Robotics_Signals_RobotOutputSignal self) -> Robotics_Signals_SensorValues_Vector"""
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_sensor_values(self)

    def angles(self):
        r"""angles(Robotics_Signals_RobotOutputSignal self) -> DoubleVector"""
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_angles(self)

    def angular_velocities(self):
        r"""angular_velocities(Robotics_Signals_RobotOutputSignal self) -> DoubleVector"""
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_angular_velocities(self)

    def torques(self):
        r"""torques(Robotics_Signals_RobotOutputSignal self) -> DoubleVector"""
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_torques(self)

    def object_values(self):
        r"""object_values(Robotics_Signals_RobotOutputSignal self) -> Physics_Signals_Value_Vector"""
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_object_values(self)

    @staticmethod
    def create(source_angle_signals, source_angular_velocity_signals, source_torque_signals, object_values, sensor_values, source):
        r"""
        create(Physics_Signals_ValueOutputSignal_Vector source_angle_signals, Physics_Signals_ValueOutputSignal_Vector source_angular_velocity_signals, Physics_Signals_ValueOutputSignal_Vector source_torque_signals, Physics_Signals_Value_Vector object_values, Robotics_Signals_SensorValues_Vector sensor_values, std::shared_ptr< openplx::Physics::Signals::Output > source) -> std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal >

        Parameters
        ----------
        source_angle_signals: std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >,std::allocator< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > > >
        source_angular_velocity_signals: std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >,std::allocator< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > > >
        source_torque_signals: std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >,std::allocator< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > > >
        object_values: std::vector< std::shared_ptr< openplx::Physics::Signals::Value >,std::allocator< std::shared_ptr< openplx::Physics::Signals::Value > > >
        sensor_values: std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues >,std::allocator< std::shared_ptr< openplx::Robotics::Signals::SensorValues > > >
        source: std::shared_ptr< openplx::Physics::Signals::Output >

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_create(source_angle_signals, source_angular_velocity_signals, source_torque_signals, object_values, sensor_values, source)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Robotics_Signals_RobotOutputSignal self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Robotics_Signals_RobotOutputSignal self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Robotics_Signals_RobotOutputSignal self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Robotics_Signals_RobotOutputSignal self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Robotics_Signals_RobotOutputSignal self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Robotics_Signals_RobotOutputSignal self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_triggerOnInit(self, context)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Signals_RobotOutputSignal

# Register Robotics_Signals_RobotOutputSignal in _RoboticsSwig:
_RoboticsSwig.Robotics_Signals_RobotOutputSignal_swigregister(Robotics_Signals_RobotOutputSignal)

def Robotics_Signals_RobotOutputSignal_create(source_angle_signals, source_angular_velocity_signals, source_torque_signals, object_values, sensor_values, source):
    r"""
    Robotics_Signals_RobotOutputSignal_create(Physics_Signals_ValueOutputSignal_Vector source_angle_signals, Physics_Signals_ValueOutputSignal_Vector source_angular_velocity_signals, Physics_Signals_ValueOutputSignal_Vector source_torque_signals, Physics_Signals_Value_Vector object_values, Robotics_Signals_SensorValues_Vector sensor_values, std::shared_ptr< openplx::Physics::Signals::Output > source) -> std::shared_ptr< openplx::Robotics::Signals::RobotOutputSignal >

    Parameters
    ----------
    source_angle_signals: std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >,std::allocator< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > > >
    source_angular_velocity_signals: std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >,std::allocator< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > > >
    source_torque_signals: std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >,std::allocator< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > > >
    object_values: std::vector< std::shared_ptr< openplx::Physics::Signals::Value >,std::allocator< std::shared_ptr< openplx::Physics::Signals::Value > > >
    sensor_values: std::vector< std::shared_ptr< openplx::Robotics::Signals::SensorValues >,std::allocator< std::shared_ptr< openplx::Robotics::Signals::SensorValues > > >
    source: std::shared_ptr< openplx::Physics::Signals::Output >

    """
    return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_create(source_angle_signals, source_angular_velocity_signals, source_torque_signals, object_values, sensor_values, source)

class Robotics_Signals_Sensor(openplx.Core.Object):
    r"""Proxy of C++ openplx::Robotics::Signals::Sensor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Robotics_Signals_Sensor self) -> Robotics_Signals_Sensor"""
        _RoboticsSwig.Robotics_Signals_Sensor_swiginit(self, _RoboticsSwig.new_Robotics_Signals_Sensor())

    def outputs(self):
        r"""outputs(Robotics_Signals_Sensor self) -> Physics_Signals_Output_Vector"""
        return _RoboticsSwig.Robotics_Signals_Sensor_outputs(self)

    def reference_id(self):
        r"""reference_id(Robotics_Signals_Sensor self) -> std::string"""
        return _RoboticsSwig.Robotics_Signals_Sensor_reference_id(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Robotics_Signals_Sensor self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _RoboticsSwig.Robotics_Signals_Sensor_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Robotics_Signals_Sensor self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Robotics_Signals_Sensor_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Robotics_Signals_Sensor self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _RoboticsSwig.Robotics_Signals_Sensor_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Robotics_Signals_Sensor self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _RoboticsSwig.Robotics_Signals_Sensor_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Robotics_Signals_Sensor self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _RoboticsSwig.Robotics_Signals_Sensor_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Robotics_Signals_Sensor self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _RoboticsSwig.Robotics_Signals_Sensor_triggerOnInit(self, context)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Signals_Sensor

# Register Robotics_Signals_Sensor in _RoboticsSwig:
_RoboticsSwig.Robotics_Signals_Sensor_swigregister(Robotics_Signals_Sensor)

class Robotics_Signals_SensorValues(openplx.Core.Object):
    r"""Proxy of C++ openplx::Robotics::Signals::SensorValues class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Robotics_Signals_SensorValues self) -> Robotics_Signals_SensorValues"""
        _RoboticsSwig.Robotics_Signals_SensorValues_swiginit(self, _RoboticsSwig.new_Robotics_Signals_SensorValues())

    def name(self):
        r"""name(Robotics_Signals_SensorValues self) -> std::string"""
        return _RoboticsSwig.Robotics_Signals_SensorValues_name(self)

    def values(self):
        r"""values(Robotics_Signals_SensorValues self) -> Physics_Signals_Value_Vector"""
        return _RoboticsSwig.Robotics_Signals_SensorValues_values(self)

    @staticmethod
    def create(name, values):
        r"""
        create(std::string name, Physics_Signals_Value_Vector values) -> std::shared_ptr< openplx::Robotics::Signals::SensorValues >

        Parameters
        ----------
        name: std::string
        values: std::vector< std::shared_ptr< openplx::Physics::Signals::Value >,std::allocator< std::shared_ptr< openplx::Physics::Signals::Value > > >

        """
        return _RoboticsSwig.Robotics_Signals_SensorValues_create(name, values)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Robotics_Signals_SensorValues self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _RoboticsSwig.Robotics_Signals_SensorValues_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Robotics_Signals_SensorValues self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Robotics_Signals_SensorValues_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Robotics_Signals_SensorValues self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _RoboticsSwig.Robotics_Signals_SensorValues_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Robotics_Signals_SensorValues self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _RoboticsSwig.Robotics_Signals_SensorValues_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Robotics_Signals_SensorValues self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _RoboticsSwig.Robotics_Signals_SensorValues_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Robotics_Signals_SensorValues self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _RoboticsSwig.Robotics_Signals_SensorValues_triggerOnInit(self, context)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Signals_SensorValues

# Register Robotics_Signals_SensorValues in _RoboticsSwig:
_RoboticsSwig.Robotics_Signals_SensorValues_swigregister(Robotics_Signals_SensorValues)

def Robotics_Signals_SensorValues_create(name, values):
    r"""
    Robotics_Signals_SensorValues_create(std::string name, Physics_Signals_Value_Vector values) -> std::shared_ptr< openplx::Robotics::Signals::SensorValues >

    Parameters
    ----------
    name: std::string
    values: std::vector< std::shared_ptr< openplx::Physics::Signals::Value >,std::allocator< std::shared_ptr< openplx::Physics::Signals::Value > > >

    """
    return _RoboticsSwig.Robotics_Signals_SensorValues_create(name, values)



