# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import json
import pprint



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CorePythonSwig
else:
    import _CorePythonSwig

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SHARED_PTR_DISOWN = _CorePythonSwig.SHARED_PTR_DISOWN
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CorePythonSwig.delete_SwigPyIterator

    def value(self):
        return _CorePythonSwig.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _CorePythonSwig.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _CorePythonSwig.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _CorePythonSwig.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _CorePythonSwig.SwigPyIterator_equal(self, x)

    def copy(self):
        return _CorePythonSwig.SwigPyIterator_copy(self)

    def next(self):
        return _CorePythonSwig.SwigPyIterator_next(self)

    def __next__(self):
        return _CorePythonSwig.SwigPyIterator___next__(self)

    def previous(self):
        return _CorePythonSwig.SwigPyIterator_previous(self)

    def advance(self, n):
        return _CorePythonSwig.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _CorePythonSwig.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _CorePythonSwig.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _CorePythonSwig.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _CorePythonSwig.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _CorePythonSwig.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _CorePythonSwig.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _CorePythonSwig:
_CorePythonSwig.SwigPyIterator_swigregister(SwigPyIterator)

class Token(object):
    r"""Proxy of C++ openplx::Token class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type = property(_CorePythonSwig.Token_type_get, _CorePythonSwig.Token_type_set, doc=r"""type : TokenType""")
    lexeme = property(_CorePythonSwig.Token_lexeme_get, _CorePythonSwig.Token_lexeme_set, doc=r"""lexeme : std::string""")
    line = property(_CorePythonSwig.Token_line_get, _CorePythonSwig.Token_line_set, doc=r"""line : line_t""")
    column = property(_CorePythonSwig.Token_column_get, _CorePythonSwig.Token_column_set, doc=r"""column : col_t""")

    def __init__(self, *args):
        r"""
        __init__(Token self) -> Token
        __init__(Token self, TokenType _type, std::string && _lexeme, line_t _line, col_t _column) -> Token

        Parameters
        ----------
        _type: TokenType
        _lexeme: std::string &&
        _line: line_t
        _column: col_t

        """
        _CorePythonSwig.Token_swiginit(self, _CorePythonSwig.new_Token(*args))

    @staticmethod
    def Uninitialized():
        r"""Uninitialized() -> Token"""
        return _CorePythonSwig.Token_Uninitialized()

    @staticmethod
    def Invalid():
        r"""Invalid() -> Token"""
        return _CorePythonSwig.Token_Invalid()

    @staticmethod
    def Identifier(lexeme):
        r"""
        Identifier(std::string lexeme) -> Token

        Parameters
        ----------
        lexeme: std::string

        """
        return _CorePythonSwig.Token_Identifier(lexeme)

    @staticmethod
    def Empty():
        r"""Empty() -> Token"""
        return _CorePythonSwig.Token_Empty()

    @staticmethod
    def Keyword(type):
        r"""
        Keyword(TokenType type) -> Token

        Parameters
        ----------
        type: TokenType

        """
        return _CorePythonSwig.Token_Keyword(type)

    @staticmethod
    def Bool(value):
        r"""
        Bool(bool value) -> Token

        Parameters
        ----------
        value: bool

        """
        return _CorePythonSwig.Token_Bool(value)

    @staticmethod
    def Real(value):
        r"""
        Real(double value) -> Token

        Parameters
        ----------
        value: double

        """
        return _CorePythonSwig.Token_Real(value)

    @staticmethod
    def Int(value):
        r"""
        Int(int64_t value) -> Token

        Parameters
        ----------
        value: int64_t

        """
        return _CorePythonSwig.Token_Int(value)

    @staticmethod
    def String(value):
        r"""
        String(std::string value) -> Token

        Parameters
        ----------
        value: std::string

        """
        return _CorePythonSwig.Token_String(value)

    @staticmethod
    def end_of(token):
        r"""
        end_of(Token token) -> std::pair< line_t,col_t >

        Parameters
        ----------
        token: openplx::Token const &

        """
        return _CorePythonSwig.Token_end_of(token)

    @staticmethod
    def extractString(token):
        r"""
        extractString(Token token) -> std::string

        Parameters
        ----------
        token: openplx::Token const &

        """
        return _CorePythonSwig.Token_extractString(token)

    def __eq__(self, other):
        r"""
        __eq__(Token self, Token other) -> bool

        Parameters
        ----------
        other: openplx::Token const &

        """
        return _CorePythonSwig.Token___eq__(self, other)
    __swig_destroy__ = _CorePythonSwig.delete_Token

# Register Token in _CorePythonSwig:
_CorePythonSwig.Token_swigregister(Token)

def Token_Uninitialized():
    r"""Token_Uninitialized() -> Token"""
    return _CorePythonSwig.Token_Uninitialized()

def Token_Invalid():
    r"""Token_Invalid() -> Token"""
    return _CorePythonSwig.Token_Invalid()

def Token_Identifier(lexeme):
    r"""
    Token_Identifier(std::string lexeme) -> Token

    Parameters
    ----------
    lexeme: std::string

    """
    return _CorePythonSwig.Token_Identifier(lexeme)

def Token_Empty():
    r"""Token_Empty() -> Token"""
    return _CorePythonSwig.Token_Empty()

def Token_Keyword(type):
    r"""
    Token_Keyword(TokenType type) -> Token

    Parameters
    ----------
    type: TokenType

    """
    return _CorePythonSwig.Token_Keyword(type)

def Token_Bool(value):
    r"""
    Token_Bool(bool value) -> Token

    Parameters
    ----------
    value: bool

    """
    return _CorePythonSwig.Token_Bool(value)

def Token_Real(value):
    r"""
    Token_Real(double value) -> Token

    Parameters
    ----------
    value: double

    """
    return _CorePythonSwig.Token_Real(value)

def Token_Int(value):
    r"""
    Token_Int(int64_t value) -> Token

    Parameters
    ----------
    value: int64_t

    """
    return _CorePythonSwig.Token_Int(value)

def Token_String(value):
    r"""
    Token_String(std::string value) -> Token

    Parameters
    ----------
    value: std::string

    """
    return _CorePythonSwig.Token_String(value)

def Token_end_of(token):
    r"""
    Token_end_of(Token token) -> std::pair< line_t,col_t >

    Parameters
    ----------
    token: openplx::Token const &

    """
    return _CorePythonSwig.Token_end_of(token)

def Token_extractString(token):
    r"""
    Token_extractString(Token token) -> std::string

    Parameters
    ----------
    token: openplx::Token const &

    """
    return _CorePythonSwig.Token_extractString(token)

NodeType_Document = _CorePythonSwig.NodeType_Document

NodeType_ModelDeclaration = _CorePythonSwig.NodeType_ModelDeclaration

NodeType_VarDeclaration = _CorePythonSwig.NodeType_VarDeclaration

NodeType_VarAssignment = _CorePythonSwig.NodeType_VarAssignment

NodeType_BinaryOp = _CorePythonSwig.NodeType_BinaryOp

NodeType_MethodDeclaration = _CorePythonSwig.NodeType_MethodDeclaration

NodeType_Parameter = _CorePythonSwig.NodeType_Parameter

NodeType_Array = _CorePythonSwig.NodeType_Array

NodeType_ArrayType = _CorePythonSwig.NodeType_ArrayType

NodeType_Constant = _CorePythonSwig.NodeType_Constant

NodeType_Call = _CorePythonSwig.NodeType_Call

NodeType_MemberAccess = _CorePythonSwig.NodeType_MemberAccess

NodeType_PrimitiveType = _CorePythonSwig.NodeType_PrimitiveType

NodeType_Unary = _CorePythonSwig.NodeType_Unary

NodeType_Indexing = _CorePythonSwig.NodeType_Indexing

NodeType_OperatorOverload = _CorePythonSwig.NodeType_OperatorOverload

NodeType_Annotation = _CorePythonSwig.NodeType_Annotation

NodeType_Import = _CorePythonSwig.NodeType_Import

NodeType_TraitImpl = _CorePythonSwig.NodeType_TraitImpl

NodeType_Initializer = _CorePythonSwig.NodeType_Initializer

NodeType_InitializerType = _CorePythonSwig.NodeType_InitializerType

NodeType_Deletion = _CorePythonSwig.NodeType_Deletion

class Node(object):
    r"""Proxy of C++ openplx::Node class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getNodeType(self):
        r"""getNodeType(Node self) -> openplx::NodeType"""
        return _CorePythonSwig.Node_getNodeType(self)

    def isValid(self):
        r"""isValid(Node self) -> bool"""
        return _CorePythonSwig.Node_isValid(self)

    def setValid(self, valid):
        r"""
        setValid(Node self, bool valid)

        Parameters
        ----------
        valid: bool

        """
        return _CorePythonSwig.Node_setValid(self, valid)

    def isDocument(self):
        r"""isDocument(Node self) -> bool"""
        return _CorePythonSwig.Node_isDocument(self)

    def isModelDeclaration(self):
        r"""isModelDeclaration(Node self) -> bool"""
        return _CorePythonSwig.Node_isModelDeclaration(self)

    def isVarDeclaration(self):
        r"""isVarDeclaration(Node self) -> bool"""
        return _CorePythonSwig.Node_isVarDeclaration(self)

    def isVarAssignment(self):
        r"""isVarAssignment(Node self) -> bool"""
        return _CorePythonSwig.Node_isVarAssignment(self)

    def isMethodDeclaration(self):
        r"""isMethodDeclaration(Node self) -> bool"""
        return _CorePythonSwig.Node_isMethodDeclaration(self)

    def isParameter(self):
        r"""isParameter(Node self) -> bool"""
        return _CorePythonSwig.Node_isParameter(self)

    def isConstant(self):
        r"""isConstant(Node self) -> bool"""
        return _CorePythonSwig.Node_isConstant(self)

    def isBinaryOp(self):
        r"""isBinaryOp(Node self) -> bool"""
        return _CorePythonSwig.Node_isBinaryOp(self)

    def isArray(self):
        r"""isArray(Node self) -> bool"""
        return _CorePythonSwig.Node_isArray(self)

    def isArrayType(self):
        r"""isArrayType(Node self) -> bool"""
        return _CorePythonSwig.Node_isArrayType(self)

    def isUnary(self):
        r"""isUnary(Node self) -> bool"""
        return _CorePythonSwig.Node_isUnary(self)

    def isMemberAccess(self):
        r"""isMemberAccess(Node self) -> bool"""
        return _CorePythonSwig.Node_isMemberAccess(self)

    def isCall(self):
        r"""isCall(Node self) -> bool"""
        return _CorePythonSwig.Node_isCall(self)

    def isPrimitiveType(self):
        r"""isPrimitiveType(Node self) -> bool"""
        return _CorePythonSwig.Node_isPrimitiveType(self)

    def isType(self):
        r"""isType(Node self) -> bool"""
        return _CorePythonSwig.Node_isType(self)

    def isIndexing(self):
        r"""isIndexing(Node self) -> bool"""
        return _CorePythonSwig.Node_isIndexing(self)

    def isOperatorOverload(self):
        r"""isOperatorOverload(Node self) -> bool"""
        return _CorePythonSwig.Node_isOperatorOverload(self)

    def isAnnotation(self):
        r"""isAnnotation(Node self) -> bool"""
        return _CorePythonSwig.Node_isAnnotation(self)

    def isImport(self):
        r"""isImport(Node self) -> bool"""
        return _CorePythonSwig.Node_isImport(self)

    def isTraitImpl(self):
        r"""isTraitImpl(Node self) -> bool"""
        return _CorePythonSwig.Node_isTraitImpl(self)

    def isInitializer(self):
        r"""isInitializer(Node self) -> bool"""
        return _CorePythonSwig.Node_isInitializer(self)

    def isInitializerType(self):
        r"""isInitializerType(Node self) -> bool"""
        return _CorePythonSwig.Node_isInitializerType(self)

    def isDeletion(self):
        r"""isDeletion(Node self) -> bool"""
        return _CorePythonSwig.Node_isDeletion(self)

    def asDocument(self):
        r"""asDocument(Node self) -> openplx::DocPtr"""
        return _CorePythonSwig.Node_asDocument(self)

    def asModelDeclaration(self):
        r"""asModelDeclaration(Node self) -> openplx::ModelDeclPtr"""
        return _CorePythonSwig.Node_asModelDeclaration(self)

    def asVarDeclaration(self):
        r"""asVarDeclaration(Node self) -> openplx::VarDeclPtr"""
        return _CorePythonSwig.Node_asVarDeclaration(self)

    def asVarAssignment(self):
        r"""asVarAssignment(Node self) -> openplx::VarAssignPtr"""
        return _CorePythonSwig.Node_asVarAssignment(self)

    def asMethodDeclaration(self):
        r"""asMethodDeclaration(Node self) -> openplx::MethodDeclPtr"""
        return _CorePythonSwig.Node_asMethodDeclaration(self)

    def asParameter(self):
        r"""asParameter(Node self) -> openplx::ParamPtr"""
        return _CorePythonSwig.Node_asParameter(self)

    def asConstant(self):
        r"""asConstant(Node self) -> openplx::ConstantPtr"""
        return _CorePythonSwig.Node_asConstant(self)

    def asBinaryOp(self):
        r"""asBinaryOp(Node self) -> openplx::BinaryOpPtr"""
        return _CorePythonSwig.Node_asBinaryOp(self)

    def asUnary(self):
        r"""asUnary(Node self) -> openplx::UnaryPtr"""
        return _CorePythonSwig.Node_asUnary(self)

    def asArray(self):
        r"""asArray(Node self) -> openplx::ArrayPtr"""
        return _CorePythonSwig.Node_asArray(self)

    def asArrayType(self):
        r"""asArrayType(Node self) -> openplx::ArrayTypePtr"""
        return _CorePythonSwig.Node_asArrayType(self)

    def asMemberAccess(self):
        r"""asMemberAccess(Node self) -> openplx::MemberAccessPtr"""
        return _CorePythonSwig.Node_asMemberAccess(self)

    def asCall(self):
        r"""asCall(Node self) -> openplx::CallPtr"""
        return _CorePythonSwig.Node_asCall(self)

    def asPrimitiveType(self):
        r"""asPrimitiveType(Node self) -> openplx::PrimitiveTypePtr"""
        return _CorePythonSwig.Node_asPrimitiveType(self)

    def asType(self):
        r"""asType(Node self) -> openplx::TypePtr"""
        return _CorePythonSwig.Node_asType(self)

    def asIndexing(self):
        r"""asIndexing(Node self) -> openplx::IndexingPtr"""
        return _CorePythonSwig.Node_asIndexing(self)

    def asOperatorOverload(self):
        r"""asOperatorOverload(Node self) -> openplx::OpOverloadPtr"""
        return _CorePythonSwig.Node_asOperatorOverload(self)

    def asAnnotation(self):
        r"""asAnnotation(Node self) -> openplx::AnnotationPtr"""
        return _CorePythonSwig.Node_asAnnotation(self)

    def asImport(self):
        r"""asImport(Node self) -> openplx::ImportPtr"""
        return _CorePythonSwig.Node_asImport(self)

    def asTraitImpl(self):
        r"""asTraitImpl(Node self) -> openplx::TraitImplPtr"""
        return _CorePythonSwig.Node_asTraitImpl(self)

    def asInitializer(self):
        r"""asInitializer(Node self) -> openplx::InitializerPtr"""
        return _CorePythonSwig.Node_asInitializer(self)

    def asInitializerType(self):
        r"""asInitializerType(Node self) -> openplx::InitializerTypePtr"""
        return _CorePythonSwig.Node_asInitializerType(self)

    def asDeletion(self):
        r"""asDeletion(Node self) -> openplx::DeletionPtr"""
        return _CorePythonSwig.Node_asDeletion(self)

    def accept(self, visitor):
        r"""
        accept(Node self, openplx::NodeVisitor & visitor)

        Parameters
        ----------
        visitor: openplx::NodeVisitor &

        """
        return _CorePythonSwig.Node_accept(self, visitor)

    def unbind(self):
        r"""unbind(Node self)"""
        return _CorePythonSwig.Node_unbind(self)
    __swig_destroy__ = _CorePythonSwig.delete_Node

    @staticmethod
    def segmentsAsString(segments):
        r"""
        segmentsAsString(TokenVector segments) -> std::string

        Parameters
        ----------
        segments: std::vector< openplx::Token,std::allocator< openplx::Token > > const &

        """
        return _CorePythonSwig.Node_segmentsAsString(segments)

    @staticmethod
    def segmentsAsStringSkipLast(segments):
        r"""
        segmentsAsStringSkipLast(TokenVector segments) -> std::string

        Parameters
        ----------
        segments: std::vector< openplx::Token,std::allocator< openplx::Token > > const &

        """
        return _CorePythonSwig.Node_segmentsAsStringSkipLast(segments)

    @staticmethod
    def segmentsUpToAsString(segments, index):
        r"""
        segmentsUpToAsString(TokenVector segments, size_t index) -> std::string

        Parameters
        ----------
        segments: std::vector< openplx::Token,std::allocator< openplx::Token > > const &
        index: size_t

        """
        return _CorePythonSwig.Node_segmentsUpToAsString(segments, index)

# Register Node in _CorePythonSwig:
_CorePythonSwig.Node_swigregister(Node)

def Node_segmentsAsString(segments):
    r"""
    Node_segmentsAsString(TokenVector segments) -> std::string

    Parameters
    ----------
    segments: std::vector< openplx::Token,std::allocator< openplx::Token > > const &

    """
    return _CorePythonSwig.Node_segmentsAsString(segments)

def Node_segmentsAsStringSkipLast(segments):
    r"""
    Node_segmentsAsStringSkipLast(TokenVector segments) -> std::string

    Parameters
    ----------
    segments: std::vector< openplx::Token,std::allocator< openplx::Token > > const &

    """
    return _CorePythonSwig.Node_segmentsAsStringSkipLast(segments)

def Node_segmentsUpToAsString(segments, index):
    r"""
    Node_segmentsUpToAsString(TokenVector segments, size_t index) -> std::string

    Parameters
    ----------
    segments: std::vector< openplx::Token,std::allocator< openplx::Token > > const &
    index: size_t

    """
    return _CorePythonSwig.Node_segmentsUpToAsString(segments, index)

class Document(Node, ):
    r"""Proxy of C++ openplx::Document class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def create(source_id, members):
        r"""
        create(std::string const & source_id, std::vector< openplx::NodePtr,std::allocator< openplx::NodePtr > > const & members) -> std::shared_ptr< openplx::Document >

        Parameters
        ----------
        source_id: std::string const &
        members: std::vector< openplx::NodePtr,std::allocator< openplx::NodePtr > > const &

        """
        return _CorePythonSwig.Document_create(source_id, members)

    def asDocument(self):
        r"""asDocument(Document self) -> openplx::DocPtr"""
        return _CorePythonSwig.Document_asDocument(self)

    def accept(self, visitor):
        r"""
        accept(Document self, openplx::NodeVisitor & visitor)

        Parameters
        ----------
        visitor: openplx::NodeVisitor &

        """
        return _CorePythonSwig.Document_accept(self, visitor)

    def unbind(self):
        r"""unbind(Document self)"""
        return _CorePythonSwig.Document_unbind(self)

    def appendToNamespace(self, ns_str):
        r"""
        appendToNamespace(Document self, std::string ns_str)

        Parameters
        ----------
        ns_str: std::string

        """
        return _CorePythonSwig.Document_appendToNamespace(self, ns_str)

    def getNamespace(self):
        r"""getNamespace(Document self) -> StringVector"""
        return _CorePythonSwig.Document_getNamespace(self)

    def copyNamespace(self, other):
        r"""
        copyNamespace(Document self, Document other)

        Parameters
        ----------
        other: openplx::Document &

        """
        return _CorePythonSwig.Document_copyNamespace(self, other)

    def joinNamespace(self, separator):
        r"""
        joinNamespace(Document self, std::string const & separator) -> std::string

        Parameters
        ----------
        separator: std::string const &

        """
        return _CorePythonSwig.Document_joinNamespace(self, separator)

    def joinNamespaceWithPrefix(self, *args):
        r"""
        joinNamespaceWithPrefix(Document self, std::string const & separator, std::string const & prefix="openplx") -> std::string

        Parameters
        ----------
        separator: std::string const &
        prefix: std::string const &

        """
        return _CorePythonSwig.Document_joinNamespaceWithPrefix(self, *args)

    def joinNamespaceSkipFirst(self, separator):
        r"""
        joinNamespaceSkipFirst(Document self, std::string const & separator) -> std::string

        Parameters
        ----------
        separator: std::string const &

        """
        return _CorePythonSwig.Document_joinNamespaceSkipFirst(self, separator)

    def compareNamespace(self, other):
        r"""
        compareNamespace(Document self, Document other) -> bool

        Parameters
        ----------
        other: openplx::Document const &

        """
        return _CorePythonSwig.Document_compareNamespace(self, other)

    def cacheNsLookup(self, key, node, source_document):
        r"""
        cacheNsLookup(Document self, std::string const & key, openplx::NodePtr node, openplx::DocPtr const & source_document)

        Parameters
        ----------
        key: std::string const &
        node: openplx::NodePtr
        source_document: openplx::DocPtr const &

        """
        return _CorePythonSwig.Document_cacheNsLookup(self, key, node, source_document)

    def nsLookup(self, key):
        r"""
        nsLookup(Document self, std::string const & key) -> openplx::NodePtr

        Parameters
        ----------
        key: std::string const &

        """
        return _CorePythonSwig.Document_nsLookup(self, key)

    def nsLookupConstOrVar(self, key):
        r"""
        nsLookupConstOrVar(Document self, std::string const & key) -> openplx::NodePtr

        Parameters
        ----------
        key: std::string const &

        """
        return _CorePythonSwig.Document_nsLookupConstOrVar(self, key)

    def copyNsCacheFrom(self, other):
        r"""
        copyNsCacheFrom(Document self, Document other)

        Parameters
        ----------
        other: openplx::Document &

        """
        return _CorePythonSwig.Document_copyNsCacheFrom(self, other)

    def clearNsCache(self):
        r"""clearNsCache(Document self)"""
        return _CorePythonSwig.Document_clearNsCache(self)

    def appendToMembers(self, member):
        r"""
        appendToMembers(Document self, openplx::NodePtr member)

        Parameters
        ----------
        member: openplx::NodePtr

        """
        return _CorePythonSwig.Document_appendToMembers(self, member)

    def getMembers(self):
        r"""getMembers(Document self) -> std::vector< openplx::NodePtr,std::allocator< openplx::NodePtr > > const &"""
        return _CorePythonSwig.Document_getMembers(self)

    def removeMember(self, member):
        r"""
        removeMember(Document self, openplx::NodePtr const & member)

        Parameters
        ----------
        member: openplx::NodePtr const &

        """
        return _CorePythonSwig.Document_removeMember(self, member)

    def removeInvalidMembers(self):
        r"""removeInvalidMembers(Document self)"""
        return _CorePythonSwig.Document_removeInvalidMembers(self)

    def findImports(self):
        r"""findImports(Document self) -> std::vector< openplx::ImportPtr,std::allocator< openplx::ImportPtr > >"""
        return _CorePythonSwig.Document_findImports(self)

    def findMembers(self, name):
        r"""
        findMembers(Document self, std::string const & name) -> std::vector< openplx::NodePtr,std::allocator< openplx::NodePtr > >

        Parameters
        ----------
        name: std::string const &

        """
        return _CorePythonSwig.Document_findMembers(self, name)

    def findFirstMemberOfType(self, name, type):
        r"""
        findFirstMemberOfType(Document self, std::string const & name, openplx::NodeType type) -> openplx::NodePtr

        Parameters
        ----------
        name: std::string const &
        type: enum openplx::NodeType

        """
        return _CorePythonSwig.Document_findFirstMemberOfType(self, name, type)

    def findFirstMember(self, name):
        r"""
        findFirstMember(Document self, std::string const & name) -> openplx::NodePtr

        Parameters
        ----------
        name: std::string const &

        """
        return _CorePythonSwig.Document_findFirstMember(self, name)

    def findLastMemberOfType(self, type):
        r"""
        findLastMemberOfType(Document self, openplx::NodeType type) -> openplx::NodePtr

        Parameters
        ----------
        type: enum openplx::NodeType

        """
        return _CorePythonSwig.Document_findLastMemberOfType(self, type)

    def getSourceId(self):
        r"""getSourceId(Document self) -> std::string"""
        return _CorePythonSwig.Document_getSourceId(self)

    def setSourceId(self, source_id):
        r"""
        setSourceId(Document self, std::string const & source_id)

        Parameters
        ----------
        source_id: std::string const &

        """
        return _CorePythonSwig.Document_setSourceId(self, source_id)
    __swig_destroy__ = _CorePythonSwig.delete_Document

# Register Document in _CorePythonSwig:
_CorePythonSwig.Document_swigregister(Document)

def Document_create(source_id, members):
    r"""
    Document_create(std::string const & source_id, std::vector< openplx::NodePtr,std::allocator< openplx::NodePtr > > const & members) -> std::shared_ptr< openplx::Document >

    Parameters
    ----------
    source_id: std::string const &
    members: std::vector< openplx::NodePtr,std::allocator< openplx::NodePtr > > const &

    """
    return _CorePythonSwig.Document_create(source_id, members)

class ModelDeclaration(object):
    r"""Proxy of C++ openplx::ModelDeclaration class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def create(qualifier_token, name_token, extends_qualifier_token, parent_segments, annotations, traits, deletions, members):
        r"""
        create(Token qualifier_token, Token name_token, Token extends_qualifier_token, TokenVector parent_segments, std::vector< openplx::AnnotationPtr,std::allocator< openplx::AnnotationPtr > > const & annotations, std::vector< openplx::TraitImplPtr,std::allocator< openplx::TraitImplPtr > > const & traits, std::vector< openplx::DeletionPtr,std::allocator< openplx::DeletionPtr > > const & deletions, std::vector< openplx::NodePtr,std::allocator< openplx::NodePtr > > const & members) -> openplx::ModelDeclPtr

        Parameters
        ----------
        qualifier_token: openplx::Token const &
        name_token: openplx::Token const &
        extends_qualifier_token: openplx::Token const &
        parent_segments: std::vector< openplx::Token,std::allocator< openplx::Token > > const &
        annotations: std::vector< openplx::AnnotationPtr,std::allocator< openplx::AnnotationPtr > > const &
        traits: std::vector< openplx::TraitImplPtr,std::allocator< openplx::TraitImplPtr > > const &
        deletions: std::vector< openplx::DeletionPtr,std::allocator< openplx::DeletionPtr > > const &
        members: std::vector< openplx::NodePtr,std::allocator< openplx::NodePtr > > const &

        """
        return _CorePythonSwig.ModelDeclaration_create(qualifier_token, name_token, extends_qualifier_token, parent_segments, annotations, traits, deletions, members)

    def asModelDeclaration(self):
        r"""asModelDeclaration(ModelDeclaration self) -> openplx::ModelDeclPtr"""
        return _CorePythonSwig.ModelDeclaration_asModelDeclaration(self)

    def asType(self):
        r"""asType(ModelDeclaration self) -> openplx::TypePtr"""
        return _CorePythonSwig.ModelDeclaration_asType(self)

    def accept(self, visitor):
        r"""
        accept(ModelDeclaration self, openplx::NodeVisitor & visitor)

        Parameters
        ----------
        visitor: openplx::NodeVisitor &

        """
        return _CorePythonSwig.ModelDeclaration_accept(self, visitor)

    def isAssignableTo(self, other):
        r"""
        isAssignableTo(ModelDeclaration self, openplx::TypePtr const & other) -> bool

        Parameters
        ----------
        other: openplx::TypePtr const &

        """
        return _CorePythonSwig.ModelDeclaration_isAssignableTo(self, other)

    def toString(self):
        r"""toString(ModelDeclaration self) -> std::string"""
        return _CorePythonSwig.ModelDeclaration_toString(self)

    def toKey(self):
        r"""toKey(ModelDeclaration self) -> std::string"""
        return _CorePythonSwig.ModelDeclaration_toKey(self)

    def unbind(self):
        r"""unbind(ModelDeclaration self)"""
        return _CorePythonSwig.ModelDeclaration_unbind(self)

    def getQualifierToken(self):
        r"""getQualifierToken(ModelDeclaration self) -> Token"""
        return _CorePythonSwig.ModelDeclaration_getQualifierToken(self)

    def isConst(self):
        r"""isConst(ModelDeclaration self) -> bool"""
        return _CorePythonSwig.ModelDeclaration_isConst(self)

    def isTrait(self):
        r"""isTrait(ModelDeclaration self) -> bool"""
        return _CorePythonSwig.ModelDeclaration_isTrait(self)

    def getNameToken(self):
        r"""getNameToken(ModelDeclaration self) -> Token"""
        return _CorePythonSwig.ModelDeclaration_getNameToken(self)

    def getName(self):
        r"""getName(ModelDeclaration self) -> std::string const &"""
        return _CorePythonSwig.ModelDeclaration_getName(self)

    def getNameWithNamespace(self, separator):
        r"""
        getNameWithNamespace(ModelDeclaration self, std::string const & separator) -> std::string

        Parameters
        ----------
        separator: std::string const &

        """
        return _CorePythonSwig.ModelDeclaration_getNameWithNamespace(self, separator)

    def getNameWithNamespaceWithPrefix(self, *args):
        r"""
        getNameWithNamespaceWithPrefix(ModelDeclaration self, std::string const & separator, std::string const & prefix="openplx") -> std::string

        Parameters
        ----------
        separator: std::string const &
        prefix: std::string const &

        """
        return _CorePythonSwig.ModelDeclaration_getNameWithNamespaceWithPrefix(self, *args)

    def getNameWithNamespaceSkipFirst(self, separator):
        r"""
        getNameWithNamespaceSkipFirst(ModelDeclaration self, std::string const & separator) -> std::string

        Parameters
        ----------
        separator: std::string const &

        """
        return _CorePythonSwig.ModelDeclaration_getNameWithNamespaceSkipFirst(self, separator)

    def getExtendsQualifierToken(self):
        r"""getExtendsQualifierToken(ModelDeclaration self) -> Token"""
        return _CorePythonSwig.ModelDeclaration_getExtendsQualifierToken(self)

    def isExternal(self):
        r"""isExternal(ModelDeclaration self) -> bool"""
        return _CorePythonSwig.ModelDeclaration_isExternal(self)

    def extendsSegmentsAsString(self):
        r"""extendsSegmentsAsString(ModelDeclaration self) -> std::string"""
        return _CorePythonSwig.ModelDeclaration_extendsSegmentsAsString(self)

    def getExtendsSegments(self):
        r"""getExtendsSegments(ModelDeclaration self) -> TokenVector"""
        return _CorePythonSwig.ModelDeclaration_getExtendsSegments(self)

    def replaceExternalExtendsSegments(self, new_segments):
        r"""
        replaceExternalExtendsSegments(ModelDeclaration self, TokenVector new_segments)

        Parameters
        ----------
        new_segments: std::vector< openplx::Token,std::allocator< openplx::Token > > const &

        """
        return _CorePythonSwig.ModelDeclaration_replaceExternalExtendsSegments(self, new_segments)

    def getExtends(self):
        r"""getExtends(ModelDeclaration self) -> openplx::ModelDeclPtr"""
        return _CorePythonSwig.ModelDeclaration_getExtends(self)

    def setExtends(self, extends):
        r"""
        setExtends(ModelDeclaration self, openplx::ModelDeclPtr extends)

        Parameters
        ----------
        extends: openplx::ModelDeclPtr

        """
        return _CorePythonSwig.ModelDeclaration_setExtends(self, extends)

    def appendToAnnotations(self, annotation):
        r"""
        appendToAnnotations(ModelDeclaration self, openplx::AnnotationPtr annotation)

        Parameters
        ----------
        annotation: openplx::AnnotationPtr

        """
        return _CorePythonSwig.ModelDeclaration_appendToAnnotations(self, annotation)

    def getAnnotations(self):
        r"""getAnnotations(ModelDeclaration self) -> std::vector< openplx::AnnotationPtr,std::allocator< openplx::AnnotationPtr > > const &"""
        return _CorePythonSwig.ModelDeclaration_getAnnotations(self)

    def findModelAnnotations(self, name):
        r"""
        findModelAnnotations(ModelDeclaration self, std::string const & name) -> std::vector< openplx::AnnotationPtr,std::allocator< openplx::AnnotationPtr > >

        Parameters
        ----------
        name: std::string const &

        """
        return _CorePythonSwig.ModelDeclaration_findModelAnnotations(self, name)

    def appendToTraits(self, trait):
        r"""
        appendToTraits(ModelDeclaration self, openplx::TraitImplPtr trait)

        Parameters
        ----------
        trait: openplx::TraitImplPtr

        """
        return _CorePythonSwig.ModelDeclaration_appendToTraits(self, trait)

    def getTraits(self):
        r"""getTraits(ModelDeclaration self) -> std::vector< openplx::TraitImplPtr,std::allocator< openplx::TraitImplPtr > > const &"""
        return _CorePythonSwig.ModelDeclaration_getTraits(self)

    def appendToDeletions(self, trait):
        r"""
        appendToDeletions(ModelDeclaration self, openplx::DeletionPtr trait)

        Parameters
        ----------
        trait: openplx::DeletionPtr

        """
        return _CorePythonSwig.ModelDeclaration_appendToDeletions(self, trait)

    def getDeletions(self):
        r"""getDeletions(ModelDeclaration self) -> std::vector< openplx::DeletionPtr,std::allocator< openplx::DeletionPtr > > const &"""
        return _CorePythonSwig.ModelDeclaration_getDeletions(self)

    def appendToMembers(self, member):
        r"""
        appendToMembers(ModelDeclaration self, openplx::NodePtr member)

        Parameters
        ----------
        member: openplx::NodePtr

        """
        return _CorePythonSwig.ModelDeclaration_appendToMembers(self, member)

    def extendMembers(self, members):
        r"""
        extendMembers(ModelDeclaration self, std::vector< openplx::NodePtr,std::allocator< openplx::NodePtr > > const & members)

        Parameters
        ----------
        members: std::vector< openplx::NodePtr,std::allocator< openplx::NodePtr > > const &

        """
        return _CorePythonSwig.ModelDeclaration_extendMembers(self, members)

    def getMembers(self):
        r"""getMembers(ModelDeclaration self) -> std::vector< openplx::NodePtr,std::allocator< openplx::NodePtr > > const &"""
        return _CorePythonSwig.ModelDeclaration_getMembers(self)

    def getOuterMembers(self):
        r"""getOuterMembers(ModelDeclaration self) -> std::vector< openplx::NodePtr,std::allocator< openplx::NodePtr > >"""
        return _CorePythonSwig.ModelDeclaration_getOuterMembers(self)

    def collapseMembers(self):
        r"""collapseMembers(ModelDeclaration self) -> std::vector< openplx::NodePtr,std::allocator< openplx::NodePtr > >"""
        return _CorePythonSwig.ModelDeclaration_collapseMembers(self)

    def removeMember(self, member):
        r"""
        removeMember(ModelDeclaration self, openplx::NodePtr const & member)

        Parameters
        ----------
        member: openplx::NodePtr const &

        """
        return _CorePythonSwig.ModelDeclaration_removeMember(self, member)

    def removeInvalidMembers(self):
        r"""removeInvalidMembers(ModelDeclaration self)"""
        return _CorePythonSwig.ModelDeclaration_removeInvalidMembers(self)

    def findMembers(self, name):
        r"""
        findMembers(ModelDeclaration self, std::string const & name) -> std::vector< openplx::NodePtr,std::allocator< openplx::NodePtr > >

        Parameters
        ----------
        name: std::string const &

        """
        return _CorePythonSwig.ModelDeclaration_findMembers(self, name)

    def findMembersOfType(self, type):
        r"""
        findMembersOfType(ModelDeclaration self, openplx::NodeType type) -> std::vector< openplx::NodePtr,std::allocator< openplx::NodePtr > >

        Parameters
        ----------
        type: enum openplx::NodeType

        """
        return _CorePythonSwig.ModelDeclaration_findMembersOfType(self, type)

    def findAttributesInOrder(self):
        r"""findAttributesInOrder(ModelDeclaration self) -> std::vector< openplx::VarAssignPtr,std::allocator< openplx::VarAssignPtr > >"""
        return _CorePythonSwig.ModelDeclaration_findAttributesInOrder(self)

    def findFirstMemberOfType(self, name, type):
        r"""
        findFirstMemberOfType(ModelDeclaration self, std::string const & name, openplx::NodeType type) -> openplx::NodePtr

        Parameters
        ----------
        name: std::string const &
        type: enum openplx::NodeType

        """
        return _CorePythonSwig.ModelDeclaration_findFirstMemberOfType(self, name, type)

    def findFirstMemberWithType(self, name):
        r"""
        findFirstMemberWithType(ModelDeclaration self, std::string const & name) -> openplx::VarAssignPtr

        Parameters
        ----------
        name: std::string const &

        """
        return _CorePythonSwig.ModelDeclaration_findFirstMemberWithType(self, name)

    def findFirstMemberExcludeType(self, name, type):
        r"""
        findFirstMemberExcludeType(ModelDeclaration self, std::string const & name, openplx::NodeType type) -> openplx::NodePtr

        Parameters
        ----------
        name: std::string const &
        type: enum openplx::NodeType

        """
        return _CorePythonSwig.ModelDeclaration_findFirstMemberExcludeType(self, name, type)

    def findFirstMember(self, name):
        r"""
        findFirstMember(ModelDeclaration self, std::string const & name) -> openplx::NodePtr

        Parameters
        ----------
        name: std::string const &

        """
        return _CorePythonSwig.ModelDeclaration_findFirstMember(self, name)

    def countMembers(self):
        r"""countMembers(ModelDeclaration self) -> size_t"""
        return _CorePythonSwig.ModelDeclaration_countMembers(self)

    def isEmpty(self):
        r"""isEmpty(ModelDeclaration self) -> bool"""
        return _CorePythonSwig.ModelDeclaration_isEmpty(self)

    def isInitializable(self):
        r"""isInitializable(ModelDeclaration self) -> bool"""
        return _CorePythonSwig.ModelDeclaration_isInitializable(self)

    def setIsNewSymbol(self, symbol_path, symbol):
        r"""
        setIsNewSymbol(ModelDeclaration self, std::string const & symbol_path, openplx::NodePtr symbol)

        Parameters
        ----------
        symbol_path: std::string const &
        symbol: openplx::NodePtr

        """
        return _CorePythonSwig.ModelDeclaration_setIsNewSymbol(self, symbol_path, symbol)

    def lookupDeclaration(self, symbol_path):
        r"""
        lookupDeclaration(ModelDeclaration self, std::string const & symbol_path) -> openplx::VarAssignPtr

        Parameters
        ----------
        symbol_path: std::string const &

        """
        return _CorePythonSwig.ModelDeclaration_lookupDeclaration(self, symbol_path)

    def lookupDeclarationFromSegments(self, segments, first_ix, last_ix):
        r"""
        lookupDeclarationFromSegments(ModelDeclaration self, TokenVector segments, size_t first_ix, size_t last_ix) -> openplx::VarAssignPtr

        Parameters
        ----------
        segments: std::vector< openplx::Token,std::allocator< openplx::Token > > const &
        first_ix: size_t
        last_ix: size_t

        """
        return _CorePythonSwig.ModelDeclaration_lookupDeclarationFromSegments(self, segments, first_ix, last_ix)

    def hasNewSymbol(self, symbol_path):
        r"""
        hasNewSymbol(ModelDeclaration self, std::string const & symbol_path) -> bool

        Parameters
        ----------
        symbol_path: std::string const &

        """
        return _CorePythonSwig.ModelDeclaration_hasNewSymbol(self, symbol_path)

    def setIsExtendedSymbol(self, symbol_path):
        r"""
        setIsExtendedSymbol(ModelDeclaration self, std::string const & symbol_path)

        Parameters
        ----------
        symbol_path: std::string const &

        """
        return _CorePythonSwig.ModelDeclaration_setIsExtendedSymbol(self, symbol_path)

    def isExtendedSymbol(self, symbol_path):
        r"""
        isExtendedSymbol(ModelDeclaration self, std::string const & symbol_path) -> bool

        Parameters
        ----------
        symbol_path: std::string const &

        """
        return _CorePythonSwig.ModelDeclaration_isExtendedSymbol(self, symbol_path)

    def getOwningDocument(self):
        r"""getOwningDocument(ModelDeclaration self) -> openplx::DocPtr"""
        return _CorePythonSwig.ModelDeclaration_getOwningDocument(self)

    def setOwningDocument(self, owning_document):
        r"""
        setOwningDocument(ModelDeclaration self, openplx::DocPtr owning_document)

        Parameters
        ----------
        owning_document: openplx::DocPtr

        """
        return _CorePythonSwig.ModelDeclaration_setOwningDocument(self, owning_document)

    def getSourceIdOrDefault(self):
        r"""getSourceIdOrDefault(ModelDeclaration self) -> std::string"""
        return _CorePythonSwig.ModelDeclaration_getSourceIdOrDefault(self)

    def getTopologicalSort(self):
        r"""getTopologicalSort(ModelDeclaration self) -> std::vector< TopoPathPtr,std::allocator< TopoPathPtr > > const"""
        return _CorePythonSwig.ModelDeclaration_getTopologicalSort(self)

    def setTopologicalSort(self, topological_sort):
        r"""
        setTopologicalSort(ModelDeclaration self, std::vector< TopoPathPtr,std::allocator< TopoPathPtr > > const & topological_sort)

        Parameters
        ----------
        topological_sort: std::vector< TopoPathPtr,std::allocator< TopoPathPtr > > const &

        """
        return _CorePythonSwig.ModelDeclaration_setTopologicalSort(self, topological_sort)
    __swig_destroy__ = _CorePythonSwig.delete_ModelDeclaration

# Register ModelDeclaration in _CorePythonSwig:
_CorePythonSwig.ModelDeclaration_swigregister(ModelDeclaration)

def ModelDeclaration_create(qualifier_token, name_token, extends_qualifier_token, parent_segments, annotations, traits, deletions, members):
    r"""
    ModelDeclaration_create(Token qualifier_token, Token name_token, Token extends_qualifier_token, TokenVector parent_segments, std::vector< openplx::AnnotationPtr,std::allocator< openplx::AnnotationPtr > > const & annotations, std::vector< openplx::TraitImplPtr,std::allocator< openplx::TraitImplPtr > > const & traits, std::vector< openplx::DeletionPtr,std::allocator< openplx::DeletionPtr > > const & deletions, std::vector< openplx::NodePtr,std::allocator< openplx::NodePtr > > const & members) -> openplx::ModelDeclPtr

    Parameters
    ----------
    qualifier_token: openplx::Token const &
    name_token: openplx::Token const &
    extends_qualifier_token: openplx::Token const &
    parent_segments: std::vector< openplx::Token,std::allocator< openplx::Token > > const &
    annotations: std::vector< openplx::AnnotationPtr,std::allocator< openplx::AnnotationPtr > > const &
    traits: std::vector< openplx::TraitImplPtr,std::allocator< openplx::TraitImplPtr > > const &
    deletions: std::vector< openplx::DeletionPtr,std::allocator< openplx::DeletionPtr > > const &
    members: std::vector< openplx::NodePtr,std::allocator< openplx::NodePtr > > const &

    """
    return _CorePythonSwig.ModelDeclaration_create(qualifier_token, name_token, extends_qualifier_token, parent_segments, annotations, traits, deletions, members)

AnyType_Int = _CorePythonSwig.AnyType_Int

AnyType_Real = _CorePythonSwig.AnyType_Real

AnyType_Bool = _CorePythonSwig.AnyType_Bool

AnyType_String = _CorePythonSwig.AnyType_String

AnyType_Object = _CorePythonSwig.AnyType_Object

AnyType_Array = _CorePythonSwig.AnyType_Array

AnyType_Reference = _CorePythonSwig.AnyType_Reference

AnyType_Undefined = _CorePythonSwig.AnyType_Undefined

class Any(object):
    r"""Proxy of C++ openplx::Core::Any class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Any self) -> Any
        __init__(Any self, double value) -> Any

        Parameters
        ----------
        value: double

        __init__(Any self, int64_t value) -> Any

        Parameters
        ----------
        value: int64_t

        __init__(Any self, bool value) -> Any

        Parameters
        ----------
        value: bool

        __init__(Any self, std::string value) -> Any

        Parameters
        ----------
        value: std::string

        __init__(Any self, AnyVector value) -> Any

        Parameters
        ----------
        value: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > >

        __init__(Any self, std::shared_ptr< openplx::Core::Object > value) -> Any

        Parameters
        ----------
        value: std::shared_ptr< openplx::Core::Object >

        __init__(Any self, Any p) -> Any

        Parameters
        ----------
        p: openplx::Core::Any const &

        __init__(Any self, Any arg2) -> Any

        Parameters
        ----------
        arg2: openplx::Core::Any &&

        """
        _CorePythonSwig.Any_swiginit(self, _CorePythonSwig.new_Any(*args))

    def __eq__(self, rhs):
        r"""
        __eq__(Any self, Any rhs) -> bool

        Parameters
        ----------
        rhs: openplx::Core::Any const &

        """
        return _CorePythonSwig.Any___eq__(self, rhs)

    def __ne__(self, rhs):
        r"""
        __ne__(Any self, Any rhs) -> bool

        Parameters
        ----------
        rhs: openplx::Core::Any const &

        """
        return _CorePythonSwig.Any___ne__(self, rhs)

    @staticmethod
    def fromString(value):
        r"""
        fromString(std::string value) -> Any

        Parameters
        ----------
        value: std::string

        """
        return _CorePythonSwig.Any_fromString(value)

    @staticmethod
    def fromArray(value):
        r"""
        fromArray(AnyVector value) -> Any

        Parameters
        ----------
        value: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > >

        """
        return _CorePythonSwig.Any_fromArray(value)

    @staticmethod
    def fromObject(value):
        r"""
        fromObject(std::shared_ptr< openplx::Core::Object > value) -> Any

        Parameters
        ----------
        value: std::shared_ptr< openplx::Core::Object >

        """
        return _CorePythonSwig.Any_fromObject(value)

    def typeAsString(self):
        r"""typeAsString(Any self) -> char const *"""
        return _CorePythonSwig.Any_typeAsString(self)

    @staticmethod
    def typeToString(t):
        r"""
        typeToString(openplx::Core::AnyType const & t) -> char const *

        Parameters
        ----------
        t: openplx::Core::AnyType const &

        """
        return _CorePythonSwig.Any_typeToString(t)

    def getType(self):
        r"""getType(Any self) -> openplx::Core::AnyType"""
        return _CorePythonSwig.Any_getType(self)

    def isReal(self):
        r"""isReal(Any self) -> bool"""
        return _CorePythonSwig.Any_isReal(self)

    def isInt(self):
        r"""isInt(Any self) -> bool"""
        return _CorePythonSwig.Any_isInt(self)

    def isBool(self):
        r"""isBool(Any self) -> bool"""
        return _CorePythonSwig.Any_isBool(self)

    def isString(self):
        r"""isString(Any self) -> bool"""
        return _CorePythonSwig.Any_isString(self)

    def isObject(self):
        r"""isObject(Any self) -> bool"""
        return _CorePythonSwig.Any_isObject(self)

    def isArray(self):
        r"""isArray(Any self) -> bool"""
        return _CorePythonSwig.Any_isArray(self)

    def isReference(self):
        r"""isReference(Any self) -> bool"""
        return _CorePythonSwig.Any_isReference(self)

    def isUndefined(self):
        r"""isUndefined(Any self) -> bool"""
        return _CorePythonSwig.Any_isUndefined(self)

    def asReal(self):
        r"""asReal(Any self) -> double"""
        return _CorePythonSwig.Any_asReal(self)

    def asInt(self):
        r"""asInt(Any self) -> int64_t"""
        return _CorePythonSwig.Any_asInt(self)

    def asBool(self):
        r"""asBool(Any self) -> bool"""
        return _CorePythonSwig.Any_asBool(self)

    def asString(self):
        r"""asString(Any self) -> std::string"""
        return _CorePythonSwig.Any_asString(self)

    def asObject(self):
        r"""asObject(Any self) -> std::shared_ptr< openplx::Core::Object >"""
        return _CorePythonSwig.Any_asObject(self)

    def asReference(self):
        r"""asReference(Any self) -> std::weak_ptr< openplx::Core::Object >"""
        return _CorePythonSwig.Any_asReference(self)

    def asArray(self):
        r"""asArray(Any self) -> AnyVector"""
        return _CorePythonSwig.Any_asArray(self)
    __swig_destroy__ = _CorePythonSwig.delete_Any

# Register Any in _CorePythonSwig:
_CorePythonSwig.Any_swigregister(Any)

def Any_fromString(value):
    r"""
    Any_fromString(std::string value) -> Any

    Parameters
    ----------
    value: std::string

    """
    return _CorePythonSwig.Any_fromString(value)

def Any_fromArray(value):
    r"""
    Any_fromArray(AnyVector value) -> Any

    Parameters
    ----------
    value: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > >

    """
    return _CorePythonSwig.Any_fromArray(value)

def Any_fromObject(value):
    r"""
    Any_fromObject(std::shared_ptr< openplx::Core::Object > value) -> Any

    Parameters
    ----------
    value: std::shared_ptr< openplx::Core::Object >

    """
    return _CorePythonSwig.Any_fromObject(value)

def Any_typeToString(t):
    r"""
    Any_typeToString(openplx::Core::AnyType const & t) -> char const *

    Parameters
    ----------
    t: openplx::Core::AnyType const &

    """
    return _CorePythonSwig.Any_typeToString(t)

class Object(object):
    r"""Proxy of C++ openplx::Core::Object class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Object self) -> Object
        __init__(Object self, std::string name) -> Object

        Parameters
        ----------
        name: std::string

        """
        _CorePythonSwig.Object_swiginit(self, _CorePythonSwig.new_Object(*args))
    __swig_destroy__ = _CorePythonSwig.delete_Object

    def on_init(self, context):
        r"""
        on_init(Object self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _CorePythonSwig.Object_on_init(self, context)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Object self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _CorePythonSwig.Object_setDynamic(self, key, value)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Object self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _CorePythonSwig.Object_extractObjectFieldsTo(self, output)

    def extractNestedObjectFieldsTo(self, output):
        r"""
        extractNestedObjectFieldsTo(Object self, std::unordered_set< std::shared_ptr< openplx::Core::Object > > & output)

        Parameters
        ----------
        output: std::unordered_set< std::shared_ptr< openplx::Core::Object > > &

        """
        return _CorePythonSwig.Object_extractNestedObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Object self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _CorePythonSwig.Object_extractEntriesTo(self, output)

    def getDynamic(self, key):
        r"""
        getDynamic(Object self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _CorePythonSwig.Object_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Object self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _CorePythonSwig.Object_callDynamic(self, key, args)

    def getName(self):
        r"""getName(Object self) -> std::string const &"""
        return _CorePythonSwig.Object_getName(self)

    def getUuid(self):
        r"""getUuid(Object self) -> std::string const &"""
        return _CorePythonSwig.Object_getUuid(self)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Object self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _CorePythonSwig.Object_triggerOnInit(self, context)

    def getType(self):
        r"""getType(Object self) -> openplx::ModelDeclPtr"""
        return _CorePythonSwig.Object_getType(self)

    def getTypeList(self):
        r"""getTypeList(Object self) -> StringVector"""
        return _CorePythonSwig.Object_getTypeList(self)

    def getOwner(self):
        r"""getOwner(Object self) -> openplx::Core::ObjectPtr"""
        return _CorePythonSwig.Object_getOwner(self)

    @staticmethod
    def compareByTypeAndPrimitiveAttributes(obj1, obj2):
        r"""
        compareByTypeAndPrimitiveAttributes(Object obj1, Object obj2) -> bool

        Parameters
        ----------
        obj1: openplx::Core::Object &
        obj2: openplx::Core::Object &

        """
        return _CorePythonSwig.Object_compareByTypeAndPrimitiveAttributes(obj1, obj2)

    def isDefault(self, key):
        r"""
        isDefault(Object self, std::string const & key) -> bool

        Parameters
        ----------
        key: std::string const &

        """
        return _CorePythonSwig.Object_isDefault(self, key)

    def appendToAnnotations(self, annotation):
        r"""
        appendToAnnotations(Object self, openplx::AnnotationPtr annotation)

        Parameters
        ----------
        annotation: openplx::AnnotationPtr

        """
        return _CorePythonSwig.Object_appendToAnnotations(self, annotation)

    def getAnnotations(self):
        r"""getAnnotations(Object self) -> std::vector< openplx::AnnotationPtr,std::allocator< openplx::AnnotationPtr > > const &"""
        return _CorePythonSwig.Object_getAnnotations(self)

    def findAnnotations(self, name):
        r"""
        findAnnotations(Object self, std::string const & name) -> std::vector< openplx::AnnotationPtr,std::allocator< openplx::AnnotationPtr > >

        Parameters
        ----------
        name: std::string const &

        """
        return _CorePythonSwig.Object_findAnnotations(self, name)

    def getObject(self, key):
        r"""
        getObject(Object self, std::string const & key) -> openplx::Core::ObjectPtr

        Parameters
        ----------
        key: std::string const &

        """
        return _CorePythonSwig.Object_getObject(self, key)

    def getNumber(self, key):
        r"""
        getNumber(Object self, std::string const & key) -> double

        Parameters
        ----------
        key: std::string const &

        """
        return _CorePythonSwig.Object_getNumber(self, key)

    def getString(self, key):
        r"""
        getString(Object self, std::string const & key) -> std::string

        Parameters
        ----------
        key: std::string const &

        """
        return _CorePythonSwig.Object_getString(self, key)

    def getBool(self, key):
        r"""
        getBool(Object self, std::string const & key) -> bool

        Parameters
        ----------
        key: std::string const &

        """
        return _CorePythonSwig.Object_getBool(self, key)

    def toJson(self, follow_refs=False):
        r"""
        toJson(Object self, bool follow_refs=False) -> std::string

        Parameters
        ----------
        follow_refs: bool

        """
        return _CorePythonSwig.Object_toJson(self, follow_refs)

    def __str__(self):
        r"""__str__(Object self) -> std::string"""
        val = _CorePythonSwig.Object___str__(self)

        json_dict = json.loads(val)
        val = pprint.pformat(json_dict)


        return val


# Register Object in _CorePythonSwig:
_CorePythonSwig.Object_swigregister(Object)

def Object_compareByTypeAndPrimitiveAttributes(obj1, obj2):
    r"""
    Object_compareByTypeAndPrimitiveAttributes(Object obj1, Object obj2) -> bool

    Parameters
    ----------
    obj1: openplx::Core::Object &
    obj2: openplx::Core::Object &

    """
    return _CorePythonSwig.Object_compareByTypeAndPrimitiveAttributes(obj1, obj2)

class Error(object):
    r"""Proxy of C++ openplx::Error class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def createOnToken(error_code, token, source_id):
        r"""
        createOnToken(error_code_t error_code, Token token, std::string const & source_id) -> std::shared_ptr< openplx::Error >

        Parameters
        ----------
        error_code: error_code_t
        token: openplx::Token const &
        source_id: std::string const &

        """
        return _CorePythonSwig.Error_createOnToken(error_code, token, source_id)

    @staticmethod
    def createOnTokens(error_code, tokens, source_id):
        r"""
        createOnTokens(error_code_t error_code, TokenVector tokens, std::string const & source_id) -> std::shared_ptr< openplx::Error >

        Parameters
        ----------
        error_code: error_code_t
        tokens: std::vector< openplx::Token,std::allocator< openplx::Token > > const &
        source_id: std::string const &

        """
        return _CorePythonSwig.Error_createOnTokens(error_code, tokens, source_id)

    @staticmethod
    def create(*args):
        r"""
        create(error_code_t error_code, line_t from_line, col_t from_column, line_t to_line, line_t to_column, std::string const & source_id) -> std::shared_ptr< openplx::Error >

        Parameters
        ----------
        error_code: error_code_t
        from_line: line_t
        from_column: col_t
        to_line: line_t
        to_column: line_t
        source_id: std::string const &

        create(error_code_t error_code, line_t line, col_t column, std::string const & source_id) -> std::shared_ptr< openplx::Error >

        Parameters
        ----------
        error_code: error_code_t
        line: line_t
        column: col_t
        source_id: std::string const &

        """
        return _CorePythonSwig.Error_create(*args)

    def getErrorCode(self):
        r"""getErrorCode(Error self) -> error_code_t"""
        return _CorePythonSwig.Error_getErrorCode(self)

    def getLine(self):
        r"""getLine(Error self) -> line_t"""
        return _CorePythonSwig.Error_getLine(self)

    def getColumn(self):
        r"""getColumn(Error self) -> col_t"""
        return _CorePythonSwig.Error_getColumn(self)

    def getSourceId(self):
        r"""getSourceId(Error self) -> std::string"""
        return _CorePythonSwig.Error_getSourceId(self)

    def getFromLine(self):
        r"""getFromLine(Error self) -> line_t"""
        return _CorePythonSwig.Error_getFromLine(self)

    def getFromColumn(self):
        r"""getFromColumn(Error self) -> col_t"""
        return _CorePythonSwig.Error_getFromColumn(self)

    def getToLine(self):
        r"""getToLine(Error self) -> line_t"""
        return _CorePythonSwig.Error_getToLine(self)

    def getToColumn(self):
        r"""getToColumn(Error self) -> col_t"""
        return _CorePythonSwig.Error_getToColumn(self)

    def accept(self, visitor):
        r"""
        accept(Error self, ErrorVisitor & visitor) -> std::string

        Parameters
        ----------
        visitor: ErrorVisitor &

        """
        return _CorePythonSwig.Error_accept(self, visitor)
    __swig_destroy__ = _CorePythonSwig.delete_Error

# Register Error in _CorePythonSwig:
_CorePythonSwig.Error_swigregister(Error)

def Error_createOnToken(error_code, token, source_id):
    r"""
    Error_createOnToken(error_code_t error_code, Token token, std::string const & source_id) -> std::shared_ptr< openplx::Error >

    Parameters
    ----------
    error_code: error_code_t
    token: openplx::Token const &
    source_id: std::string const &

    """
    return _CorePythonSwig.Error_createOnToken(error_code, token, source_id)

def Error_createOnTokens(error_code, tokens, source_id):
    r"""
    Error_createOnTokens(error_code_t error_code, TokenVector tokens, std::string const & source_id) -> std::shared_ptr< openplx::Error >

    Parameters
    ----------
    error_code: error_code_t
    tokens: std::vector< openplx::Token,std::allocator< openplx::Token > > const &
    source_id: std::string const &

    """
    return _CorePythonSwig.Error_createOnTokens(error_code, tokens, source_id)

def Error_create(*args):
    r"""
    Error_create(error_code_t error_code, line_t from_line, col_t from_column, line_t to_line, line_t to_column, std::string const & source_id) -> std::shared_ptr< openplx::Error >

    Parameters
    ----------
    error_code: error_code_t
    from_line: line_t
    from_column: col_t
    to_line: line_t
    to_column: line_t
    source_id: std::string const &

    Error_create(error_code_t error_code, line_t line, col_t column, std::string const & source_id) -> std::shared_ptr< openplx::Error >

    Parameters
    ----------
    error_code: error_code_t
    line: line_t
    column: col_t
    source_id: std::string const &

    """
    return _CorePythonSwig.Error_create(*args)

class CycleFoundError(Error):
    r"""Proxy of C++ openplx::CycleFoundError class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getCyclicNodesAsString(self):
        r"""getCyclicNodesAsString(CycleFoundError self) -> std::string"""
        return _CorePythonSwig.CycleFoundError_getCyclicNodesAsString(self)

    def getModelName(self):
        r"""getModelName(CycleFoundError self) -> std::string"""
        return _CorePythonSwig.CycleFoundError_getModelName(self)

    @staticmethod
    def create(token, source_id, model_name, cyclic_nodes):
        r"""
        create(Token token, std::string const & source_id, std::string const & model_name, std::string const & cyclic_nodes) -> std::shared_ptr< openplx::CycleFoundError >

        Parameters
        ----------
        token: openplx::Token const &
        source_id: std::string const &
        model_name: std::string const &
        cyclic_nodes: std::string const &

        """
        return _CorePythonSwig.CycleFoundError_create(token, source_id, model_name, cyclic_nodes)

    def accept(self, visitor):
        r"""
        accept(CycleFoundError self, ErrorVisitor & visitor) -> std::string

        Parameters
        ----------
        visitor: ErrorVisitor &

        """
        return _CorePythonSwig.CycleFoundError_accept(self, visitor)
    __swig_destroy__ = _CorePythonSwig.delete_CycleFoundError

# Register CycleFoundError in _CorePythonSwig:
_CorePythonSwig.CycleFoundError_swigregister(CycleFoundError)

def CycleFoundError_create(token, source_id, model_name, cyclic_nodes):
    r"""
    CycleFoundError_create(Token token, std::string const & source_id, std::string const & model_name, std::string const & cyclic_nodes) -> std::shared_ptr< openplx::CycleFoundError >

    Parameters
    ----------
    token: openplx::Token const &
    source_id: std::string const &
    model_name: std::string const &
    cyclic_nodes: std::string const &

    """
    return _CorePythonSwig.CycleFoundError_create(token, source_id, model_name, cyclic_nodes)

class StringParameterError(Error):
    r"""Proxy of C++ openplx::StringParameterError class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getStringParameter(self):
        r"""getStringParameter(StringParameterError self) -> std::string"""
        return _CorePythonSwig.StringParameterError_getStringParameter(self)

    @staticmethod
    def createOnToken(error_code, token, source_id, string_parameter):
        r"""
        createOnToken(error_code_t error_code, Token token, std::string const & source_id, std::string const & string_parameter) -> std::shared_ptr< openplx::StringParameterError >

        Parameters
        ----------
        error_code: error_code_t
        token: openplx::Token const &
        source_id: std::string const &
        string_parameter: std::string const &

        """
        return _CorePythonSwig.StringParameterError_createOnToken(error_code, token, source_id, string_parameter)

    @staticmethod
    def createOnTokens(error_code, tokens, source_id, string_parameter):
        r"""
        createOnTokens(error_code_t error_code, TokenVector tokens, std::string const & source_id, std::string const & string_parameter) -> std::shared_ptr< openplx::StringParameterError >

        Parameters
        ----------
        error_code: error_code_t
        tokens: std::vector< openplx::Token,std::allocator< openplx::Token > > const &
        source_id: std::string const &
        string_parameter: std::string const &

        """
        return _CorePythonSwig.StringParameterError_createOnTokens(error_code, tokens, source_id, string_parameter)

    @staticmethod
    def create(error_code, line, column, source_id, string_parameter):
        r"""
        create(error_code_t error_code, line_t line, col_t column, std::string const & source_id, std::string const & string_parameter) -> std::shared_ptr< openplx::StringParameterError >

        Parameters
        ----------
        error_code: error_code_t
        line: line_t
        column: col_t
        source_id: std::string const &
        string_parameter: std::string const &

        """
        return _CorePythonSwig.StringParameterError_create(error_code, line, column, source_id, string_parameter)

    def accept(self, visitor):
        r"""
        accept(StringParameterError self, ErrorVisitor & visitor) -> std::string

        Parameters
        ----------
        visitor: ErrorVisitor &

        """
        return _CorePythonSwig.StringParameterError_accept(self, visitor)
    __swig_destroy__ = _CorePythonSwig.delete_StringParameterError

# Register StringParameterError in _CorePythonSwig:
_CorePythonSwig.StringParameterError_swigregister(StringParameterError)

def StringParameterError_createOnToken(error_code, token, source_id, string_parameter):
    r"""
    StringParameterError_createOnToken(error_code_t error_code, Token token, std::string const & source_id, std::string const & string_parameter) -> std::shared_ptr< openplx::StringParameterError >

    Parameters
    ----------
    error_code: error_code_t
    token: openplx::Token const &
    source_id: std::string const &
    string_parameter: std::string const &

    """
    return _CorePythonSwig.StringParameterError_createOnToken(error_code, token, source_id, string_parameter)

def StringParameterError_createOnTokens(error_code, tokens, source_id, string_parameter):
    r"""
    StringParameterError_createOnTokens(error_code_t error_code, TokenVector tokens, std::string const & source_id, std::string const & string_parameter) -> std::shared_ptr< openplx::StringParameterError >

    Parameters
    ----------
    error_code: error_code_t
    tokens: std::vector< openplx::Token,std::allocator< openplx::Token > > const &
    source_id: std::string const &
    string_parameter: std::string const &

    """
    return _CorePythonSwig.StringParameterError_createOnTokens(error_code, tokens, source_id, string_parameter)

def StringParameterError_create(error_code, line, column, source_id, string_parameter):
    r"""
    StringParameterError_create(error_code_t error_code, line_t line, col_t column, std::string const & source_id, std::string const & string_parameter) -> std::shared_ptr< openplx::StringParameterError >

    Parameters
    ----------
    error_code: error_code_t
    line: line_t
    column: col_t
    source_id: std::string const &
    string_parameter: std::string const &

    """
    return _CorePythonSwig.StringParameterError_create(error_code, line, column, source_id, string_parameter)

class MissingAssignmentError(StringParameterError):
    r"""Proxy of C++ openplx::MissingAssignmentError class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def create(line, column, source_id, var_decl_path):
        r"""
        create(line_t line, col_t column, std::string const & source_id, std::string const & var_decl_path) -> std::shared_ptr< openplx::MissingAssignmentError >

        Parameters
        ----------
        line: line_t
        column: col_t
        source_id: std::string const &
        var_decl_path: std::string const &

        """
        return _CorePythonSwig.MissingAssignmentError_create(line, column, source_id, var_decl_path)

    def getVarDeclarationPath(self):
        r"""getVarDeclarationPath(MissingAssignmentError self) -> std::string"""
        return _CorePythonSwig.MissingAssignmentError_getVarDeclarationPath(self)
    __swig_destroy__ = _CorePythonSwig.delete_MissingAssignmentError

# Register MissingAssignmentError in _CorePythonSwig:
_CorePythonSwig.MissingAssignmentError_swigregister(MissingAssignmentError)

def MissingAssignmentError_create(line, column, source_id, var_decl_path):
    r"""
    MissingAssignmentError_create(line_t line, col_t column, std::string const & source_id, std::string const & var_decl_path) -> std::shared_ptr< openplx::MissingAssignmentError >

    Parameters
    ----------
    line: line_t
    column: col_t
    source_id: std::string const &
    var_decl_path: std::string const &

    """
    return _CorePythonSwig.MissingAssignmentError_create(line, column, source_id, var_decl_path)

class CircularDependency(StringParameterError):
    r"""Proxy of C++ openplx::CircularDependency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getCycleAsString(self):
        r"""getCycleAsString(CircularDependency self) -> std::string"""
        return _CorePythonSwig.CircularDependency_getCycleAsString(self)

    @staticmethod
    def create(line, column, source_id, cyclic_nodes):
        r"""
        create(line_t line, col_t column, std::string const & source_id, std::string const & cyclic_nodes) -> std::shared_ptr< openplx::CircularDependency >

        Parameters
        ----------
        line: line_t
        column: col_t
        source_id: std::string const &
        cyclic_nodes: std::string const &

        """
        return _CorePythonSwig.CircularDependency_create(line, column, source_id, cyclic_nodes)
    __swig_destroy__ = _CorePythonSwig.delete_CircularDependency

# Register CircularDependency in _CorePythonSwig:
_CorePythonSwig.CircularDependency_swigregister(CircularDependency)

def CircularDependency_create(line, column, source_id, cyclic_nodes):
    r"""
    CircularDependency_create(line_t line, col_t column, std::string const & source_id, std::string const & cyclic_nodes) -> std::shared_ptr< openplx::CircularDependency >

    Parameters
    ----------
    line: line_t
    column: col_t
    source_id: std::string const &
    cyclic_nodes: std::string const &

    """
    return _CorePythonSwig.CircularDependency_create(line, column, source_id, cyclic_nodes)

class ModelDeclarationNotFound(StringParameterError):
    r"""Proxy of C++ openplx::ModelDeclarationNotFound class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getModelName(self):
        r"""getModelName(ModelDeclarationNotFound self) -> std::string"""
        return _CorePythonSwig.ModelDeclarationNotFound_getModelName(self)

    @staticmethod
    def create(line, column, source_id, model_name):
        r"""
        create(line_t line, col_t column, std::string const & source_id, std::string const & model_name) -> std::shared_ptr< openplx::ModelDeclarationNotFound >

        Parameters
        ----------
        line: line_t
        column: col_t
        source_id: std::string const &
        model_name: std::string const &

        """
        return _CorePythonSwig.ModelDeclarationNotFound_create(line, column, source_id, model_name)
    __swig_destroy__ = _CorePythonSwig.delete_ModelDeclarationNotFound

# Register ModelDeclarationNotFound in _CorePythonSwig:
_CorePythonSwig.ModelDeclarationNotFound_swigregister(ModelDeclarationNotFound)

def ModelDeclarationNotFound_create(line, column, source_id, model_name):
    r"""
    ModelDeclarationNotFound_create(line_t line, col_t column, std::string const & source_id, std::string const & model_name) -> std::shared_ptr< openplx::ModelDeclarationNotFound >

    Parameters
    ----------
    line: line_t
    column: col_t
    source_id: std::string const &
    model_name: std::string const &

    """
    return _CorePythonSwig.ModelDeclarationNotFound_create(line, column, source_id, model_name)

class TypeNotFound(StringParameterError):
    r"""Proxy of C++ openplx::TypeNotFound class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getTypeSegments(self):
        r"""getTypeSegments(TypeNotFound self) -> std::string"""
        return _CorePythonSwig.TypeNotFound_getTypeSegments(self)

    @staticmethod
    def create(type_segments, source_id):
        r"""
        create(TokenVector type_segments, std::string const & source_id) -> std::shared_ptr< openplx::TypeNotFound >

        Parameters
        ----------
        type_segments: std::vector< openplx::Token,std::allocator< openplx::Token > > const &
        source_id: std::string const &

        """
        return _CorePythonSwig.TypeNotFound_create(type_segments, source_id)
    __swig_destroy__ = _CorePythonSwig.delete_TypeNotFound

# Register TypeNotFound in _CorePythonSwig:
_CorePythonSwig.TypeNotFound_swigregister(TypeNotFound)

def TypeNotFound_create(type_segments, source_id):
    r"""
    TypeNotFound_create(TokenVector type_segments, std::string const & source_id) -> std::shared_ptr< openplx::TypeNotFound >

    Parameters
    ----------
    type_segments: std::vector< openplx::Token,std::allocator< openplx::Token > > const &
    source_id: std::string const &

    """
    return _CorePythonSwig.TypeNotFound_create(type_segments, source_id)

class VariableNotFound(StringParameterError):
    r"""Proxy of C++ openplx::VariableNotFound class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def create(line, column, source_id, name):
        r"""
        create(line_t line, col_t column, std::string const & source_id, std::string const & name) -> std::shared_ptr< openplx::VariableNotFound >

        Parameters
        ----------
        line: line_t
        column: col_t
        source_id: std::string const &
        name: std::string const &

        """
        return _CorePythonSwig.VariableNotFound_create(line, column, source_id, name)
    __swig_destroy__ = _CorePythonSwig.delete_VariableNotFound

# Register VariableNotFound in _CorePythonSwig:
_CorePythonSwig.VariableNotFound_swigregister(VariableNotFound)

def VariableNotFound_create(line, column, source_id, name):
    r"""
    VariableNotFound_create(line_t line, col_t column, std::string const & source_id, std::string const & name) -> std::shared_ptr< openplx::VariableNotFound >

    Parameters
    ----------
    line: line_t
    column: col_t
    source_id: std::string const &
    name: std::string const &

    """
    return _CorePythonSwig.VariableNotFound_create(line, column, source_id, name)

class MemberNotFound(StringParameterError):
    r"""Proxy of C++ openplx::MemberNotFound class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def create(member_token, source_id):
        r"""
        create(Token member_token, std::string const & source_id) -> std::shared_ptr< openplx::MemberNotFound >

        Parameters
        ----------
        member_token: openplx::Token const &
        source_id: std::string const &

        """
        return _CorePythonSwig.MemberNotFound_create(member_token, source_id)
    __swig_destroy__ = _CorePythonSwig.delete_MemberNotFound

# Register MemberNotFound in _CorePythonSwig:
_CorePythonSwig.MemberNotFound_swigregister(MemberNotFound)

def MemberNotFound_create(member_token, source_id):
    r"""
    MemberNotFound_create(Token member_token, std::string const & source_id) -> std::shared_ptr< openplx::MemberNotFound >

    Parameters
    ----------
    member_token: openplx::Token const &
    source_id: std::string const &

    """
    return _CorePythonSwig.MemberNotFound_create(member_token, source_id)

class MethodNotFound(StringParameterError):
    r"""Proxy of C++ openplx::MethodNotFound class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def create(name_token, method_path, source_id):
        r"""
        create(Token name_token, std::string const & method_path, std::string const & source_id) -> std::shared_ptr< openplx::MethodNotFound >

        Parameters
        ----------
        name_token: openplx::Token const &
        method_path: std::string const &
        source_id: std::string const &

        """
        return _CorePythonSwig.MethodNotFound_create(name_token, method_path, source_id)
    __swig_destroy__ = _CorePythonSwig.delete_MethodNotFound

# Register MethodNotFound in _CorePythonSwig:
_CorePythonSwig.MethodNotFound_swigregister(MethodNotFound)

def MethodNotFound_create(name_token, method_path, source_id):
    r"""
    MethodNotFound_create(Token name_token, std::string const & method_path, std::string const & source_id) -> std::shared_ptr< openplx::MethodNotFound >

    Parameters
    ----------
    name_token: openplx::Token const &
    method_path: std::string const &
    source_id: std::string const &

    """
    return _CorePythonSwig.MethodNotFound_create(name_token, method_path, source_id)

class SymbolAlreadyDefined(StringParameterError):
    r"""Proxy of C++ openplx::SymbolAlreadyDefined class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def create(line, column, source_id, name):
        r"""
        create(line_t line, col_t column, std::string const & source_id, std::string const & name) -> std::shared_ptr< openplx::SymbolAlreadyDefined >

        Parameters
        ----------
        line: line_t
        column: col_t
        source_id: std::string const &
        name: std::string const &

        """
        return _CorePythonSwig.SymbolAlreadyDefined_create(line, column, source_id, name)
    __swig_destroy__ = _CorePythonSwig.delete_SymbolAlreadyDefined

# Register SymbolAlreadyDefined in _CorePythonSwig:
_CorePythonSwig.SymbolAlreadyDefined_swigregister(SymbolAlreadyDefined)

def SymbolAlreadyDefined_create(line, column, source_id, name):
    r"""
    SymbolAlreadyDefined_create(line_t line, col_t column, std::string const & source_id, std::string const & name) -> std::shared_ptr< openplx::SymbolAlreadyDefined >

    Parameters
    ----------
    line: line_t
    column: col_t
    source_id: std::string const &
    name: std::string const &

    """
    return _CorePythonSwig.SymbolAlreadyDefined_create(line, column, source_id, name)

class SymbolAlreadyAssigned(StringParameterError):
    r"""Proxy of C++ openplx::SymbolAlreadyAssigned class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def create(identifier, source_id):
        r"""
        create(Token identifier, std::string const & source_id) -> std::shared_ptr< openplx::SymbolAlreadyAssigned >

        Parameters
        ----------
        identifier: openplx::Token const &
        source_id: std::string const &

        """
        return _CorePythonSwig.SymbolAlreadyAssigned_create(identifier, source_id)
    __swig_destroy__ = _CorePythonSwig.delete_SymbolAlreadyAssigned

# Register SymbolAlreadyAssigned in _CorePythonSwig:
_CorePythonSwig.SymbolAlreadyAssigned_swigregister(SymbolAlreadyAssigned)

def SymbolAlreadyAssigned_create(identifier, source_id):
    r"""
    SymbolAlreadyAssigned_create(Token identifier, std::string const & source_id) -> std::shared_ptr< openplx::SymbolAlreadyAssigned >

    Parameters
    ----------
    identifier: openplx::Token const &
    source_id: std::string const &

    """
    return _CorePythonSwig.SymbolAlreadyAssigned_create(identifier, source_id)

class ImportedFileNotFound(StringParameterError):
    r"""Proxy of C++ openplx::ImportedFileNotFound class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def create(line, column, source_id, name):
        r"""
        create(line_t line, col_t column, std::string const & source_id, std::string const & name) -> std::shared_ptr< openplx::ImportedFileNotFound >

        Parameters
        ----------
        line: line_t
        column: col_t
        source_id: std::string const &
        name: std::string const &

        """
        return _CorePythonSwig.ImportedFileNotFound_create(line, column, source_id, name)
    __swig_destroy__ = _CorePythonSwig.delete_ImportedFileNotFound

# Register ImportedFileNotFound in _CorePythonSwig:
_CorePythonSwig.ImportedFileNotFound_swigregister(ImportedFileNotFound)

def ImportedFileNotFound_create(line, column, source_id, name):
    r"""
    ImportedFileNotFound_create(line_t line, col_t column, std::string const & source_id, std::string const & name) -> std::shared_ptr< openplx::ImportedFileNotFound >

    Parameters
    ----------
    line: line_t
    column: col_t
    source_id: std::string const &
    name: std::string const &

    """
    return _CorePythonSwig.ImportedFileNotFound_create(line, column, source_id, name)

class NoPluginForImportedFile(StringParameterError):
    r"""Proxy of C++ openplx::NoPluginForImportedFile class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def create(line, column, source_id, name):
        r"""
        create(line_t line, col_t column, std::string const & source_id, std::string const & name) -> std::shared_ptr< openplx::NoPluginForImportedFile >

        Parameters
        ----------
        line: line_t
        column: col_t
        source_id: std::string const &
        name: std::string const &

        """
        return _CorePythonSwig.NoPluginForImportedFile_create(line, column, source_id, name)
    __swig_destroy__ = _CorePythonSwig.delete_NoPluginForImportedFile

# Register NoPluginForImportedFile in _CorePythonSwig:
_CorePythonSwig.NoPluginForImportedFile_swigregister(NoPluginForImportedFile)

def NoPluginForImportedFile_create(line, column, source_id, name):
    r"""
    NoPluginForImportedFile_create(line_t line, col_t column, std::string const & source_id, std::string const & name) -> std::shared_ptr< openplx::NoPluginForImportedFile >

    Parameters
    ----------
    line: line_t
    column: col_t
    source_id: std::string const &
    name: std::string const &

    """
    return _CorePythonSwig.NoPluginForImportedFile_create(line, column, source_id, name)

class FileNotFound(StringParameterError):
    r"""Proxy of C++ openplx::FileNotFound class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def create(line, column, source_id, name):
        r"""
        create(line_t line, col_t column, std::string const & source_id, std::string const & name) -> std::shared_ptr< openplx::FileNotFound >

        Parameters
        ----------
        line: line_t
        column: col_t
        source_id: std::string const &
        name: std::string const &

        """
        return _CorePythonSwig.FileNotFound_create(line, column, source_id, name)
    __swig_destroy__ = _CorePythonSwig.delete_FileNotFound

# Register FileNotFound in _CorePythonSwig:
_CorePythonSwig.FileNotFound_swigregister(FileNotFound)

def FileNotFound_create(line, column, source_id, name):
    r"""
    FileNotFound_create(line_t line, col_t column, std::string const & source_id, std::string const & name) -> std::shared_ptr< openplx::FileNotFound >

    Parameters
    ----------
    line: line_t
    column: col_t
    source_id: std::string const &
    name: std::string const &

    """
    return _CorePythonSwig.FileNotFound_create(line, column, source_id, name)

class ExpectedTrait(StringParameterError):
    r"""Proxy of C++ openplx::ExpectedTrait class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def create(segments, source_id):
        r"""
        create(TokenVector segments, std::string const & source_id) -> std::shared_ptr< openplx::ExpectedTrait >

        Parameters
        ----------
        segments: std::vector< openplx::Token,std::allocator< openplx::Token > > const &
        source_id: std::string const &

        """
        return _CorePythonSwig.ExpectedTrait_create(segments, source_id)
    __swig_destroy__ = _CorePythonSwig.delete_ExpectedTrait

# Register ExpectedTrait in _CorePythonSwig:
_CorePythonSwig.ExpectedTrait_swigregister(ExpectedTrait)

def ExpectedTrait_create(segments, source_id):
    r"""
    ExpectedTrait_create(TokenVector segments, std::string const & source_id) -> std::shared_ptr< openplx::ExpectedTrait >

    Parameters
    ----------
    segments: std::vector< openplx::Token,std::allocator< openplx::Token > > const &
    source_id: std::string const &

    """
    return _CorePythonSwig.ExpectedTrait_create(segments, source_id)

class ModelNotInitializable(StringParameterError):
    r"""Proxy of C++ openplx::ModelNotInitializable class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def create(line, column, model_name, source_id):
        r"""
        create(line_t line, col_t column, std::string const & model_name, std::string const & source_id) -> std::shared_ptr< openplx::ModelNotInitializable >

        Parameters
        ----------
        line: line_t
        column: col_t
        model_name: std::string const &
        source_id: std::string const &

        """
        return _CorePythonSwig.ModelNotInitializable_create(line, column, model_name, source_id)
    __swig_destroy__ = _CorePythonSwig.delete_ModelNotInitializable

# Register ModelNotInitializable in _CorePythonSwig:
_CorePythonSwig.ModelNotInitializable_swigregister(ModelNotInitializable)

def ModelNotInitializable_create(line, column, model_name, source_id):
    r"""
    ModelNotInitializable_create(line_t line, col_t column, std::string const & model_name, std::string const & source_id) -> std::shared_ptr< openplx::ModelNotInitializable >

    Parameters
    ----------
    line: line_t
    column: col_t
    model_name: std::string const &
    source_id: std::string const &

    """
    return _CorePythonSwig.ModelNotInitializable_create(line, column, model_name, source_id)

class DependencyNotSatisfied(StringParameterError):
    r"""Proxy of C++ openplx::DependencyNotSatisfied class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def create(line, column, dependency, source_id):
        r"""
        create(line_t line, col_t column, std::string const & dependency, std::string const & source_id) -> std::shared_ptr< openplx::DependencyNotSatisfied >

        Parameters
        ----------
        line: line_t
        column: col_t
        dependency: std::string const &
        source_id: std::string const &

        """
        return _CorePythonSwig.DependencyNotSatisfied_create(line, column, dependency, source_id)
    __swig_destroy__ = _CorePythonSwig.delete_DependencyNotSatisfied

# Register DependencyNotSatisfied in _CorePythonSwig:
_CorePythonSwig.DependencyNotSatisfied_swigregister(DependencyNotSatisfied)

def DependencyNotSatisfied_create(line, column, dependency, source_id):
    r"""
    DependencyNotSatisfied_create(line_t line, col_t column, std::string const & dependency, std::string const & source_id) -> std::shared_ptr< openplx::DependencyNotSatisfied >

    Parameters
    ----------
    line: line_t
    column: col_t
    dependency: std::string const &
    source_id: std::string const &

    """
    return _CorePythonSwig.DependencyNotSatisfied_create(line, column, dependency, source_id)

class ReferencesAreReadOnly(StringParameterError):
    r"""Proxy of C++ openplx::ReferencesAreReadOnly class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def create(line, column, reference, source_id):
        r"""
        create(line_t line, col_t column, std::string const & reference, std::string const & source_id) -> std::shared_ptr< openplx::ReferencesAreReadOnly >

        Parameters
        ----------
        line: line_t
        column: col_t
        reference: std::string const &
        source_id: std::string const &

        """
        return _CorePythonSwig.ReferencesAreReadOnly_create(line, column, reference, source_id)
    __swig_destroy__ = _CorePythonSwig.delete_ReferencesAreReadOnly

# Register ReferencesAreReadOnly in _CorePythonSwig:
_CorePythonSwig.ReferencesAreReadOnly_swigregister(ReferencesAreReadOnly)

def ReferencesAreReadOnly_create(line, column, reference, source_id):
    r"""
    ReferencesAreReadOnly_create(line_t line, col_t column, std::string const & reference, std::string const & source_id) -> std::shared_ptr< openplx::ReferencesAreReadOnly >

    Parameters
    ----------
    line: line_t
    column: col_t
    reference: std::string const &
    source_id: std::string const &

    """
    return _CorePythonSwig.ReferencesAreReadOnly_create(line, column, reference, source_id)

class ErrorReporter(object):
    r"""Proxy of C++ openplx::ErrorReporter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _CorePythonSwig.delete_ErrorReporter

    def reportError(self, error):
        r"""
        reportError(ErrorReporter self, std::shared_ptr< openplx::Error > error)

        Parameters
        ----------
        error: std::shared_ptr< openplx::Error >

        """
        return _CorePythonSwig.ErrorReporter_reportError(self, error)

    def begin(self):
        r"""begin(ErrorReporter self) -> openplx::Errors::const_iterator"""
        return _CorePythonSwig.ErrorReporter_begin(self)

    def end(self):
        r"""end(ErrorReporter self) -> openplx::Errors::const_iterator"""
        return _CorePythonSwig.ErrorReporter_end(self)

    def getErrorCount(self):
        r"""getErrorCount(ErrorReporter self) -> size_t"""
        return _CorePythonSwig.ErrorReporter_getErrorCount(self)

    def getErrors(self):
        r"""getErrors(ErrorReporter self) -> ErrorVector"""
        return _CorePythonSwig.ErrorReporter_getErrors(self)

    def __init__(self):
        r"""__init__(ErrorReporter self) -> ErrorReporter"""
        _CorePythonSwig.ErrorReporter_swiginit(self, _CorePythonSwig.new_ErrorReporter())

# Register ErrorReporter in _CorePythonSwig:
_CorePythonSwig.ErrorReporter_swigregister(ErrorReporter)

class EvaluatorContext(object):
    r"""Proxy of C++ openplx::Core::EvaluatorContext class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def registerFactory(self, className, createMethod):
        r"""
        registerFactory(EvaluatorContext self, char const * className, openplx::Core::FactoryMethod createMethod)

        Parameters
        ----------
        className: char const *
        createMethod: openplx::Core::FactoryMethod

        """
        return _CorePythonSwig.EvaluatorContext_registerFactory(self, className, createMethod)

    def registerStaticMethod(self, key, static_method):
        r"""
        registerStaticMethod(EvaluatorContext self, char const * key, openplx::Core::StaticMethod static_method)

        Parameters
        ----------
        key: char const *
        static_method: openplx::Core::StaticMethod

        """
        return _CorePythonSwig.EvaluatorContext_registerStaticMethod(self, key, static_method)

    def registerBinaryOperatorMethod(self, key, bin_op_method):
        r"""
        registerBinaryOperatorMethod(EvaluatorContext self, char const * key, openplx::Core::BinaryOperatorMethod bin_op_method)

        Parameters
        ----------
        key: char const *
        bin_op_method: openplx::Core::BinaryOperatorMethod

        """
        return _CorePythonSwig.EvaluatorContext_registerBinaryOperatorMethod(self, key, bin_op_method)

    def registerUnaryOperatorMethod(self, key, unary_op_method):
        r"""
        registerUnaryOperatorMethod(EvaluatorContext self, char const * key, openplx::Core::UnaryOperatorMethod unary_op_method)

        Parameters
        ----------
        key: char const *
        unary_op_method: openplx::Core::UnaryOperatorMethod

        """
        return _CorePythonSwig.EvaluatorContext_registerUnaryOperatorMethod(self, key, unary_op_method)

    def registerObject(self, object):
        r"""
        registerObject(EvaluatorContext self, openplx::Core::ObjectPtr object)

        Parameters
        ----------
        object: openplx::Core::ObjectPtr

        """
        return _CorePythonSwig.EvaluatorContext_registerObject(self, object)

    def lookup(self, className):
        r"""
        lookup(EvaluatorContext self, std::string className) -> std::optional< openplx::Core::FactoryMethod >

        Parameters
        ----------
        className: std::string

        """
        return _CorePythonSwig.EvaluatorContext_lookup(self, className)

    def callStaticMethod(self, key, args):
        r"""
        callStaticMethod(EvaluatorContext self, std::string key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > >

        """
        return _CorePythonSwig.EvaluatorContext_callStaticMethod(self, key, args)

    def callBinaryOperator(self, key, lhs, rhs):
        r"""
        callBinaryOperator(EvaluatorContext self, std::string key, Any lhs, Any rhs) -> Any

        Parameters
        ----------
        key: std::string
        lhs: openplx::Core::Any
        rhs: openplx::Core::Any

        """
        return _CorePythonSwig.EvaluatorContext_callBinaryOperator(self, key, lhs, rhs)

    def callUnaryOperator(self, key, operand):
        r"""
        callUnaryOperator(EvaluatorContext self, std::string key, Any operand) -> Any

        Parameters
        ----------
        key: std::string
        operand: openplx::Core::Any

        """
        return _CorePythonSwig.EvaluatorContext_callUnaryOperator(self, key, operand)

    def getRegisteredObjects(self):
        r"""getRegisteredObjects(EvaluatorContext self) -> std::unordered_set< openplx::Core::ObjectPtr > const &"""
        return _CorePythonSwig.EvaluatorContext_getRegisteredObjects(self)

    def __init__(self):
        r"""__init__(EvaluatorContext self) -> EvaluatorContext"""
        _CorePythonSwig.EvaluatorContext_swiginit(self, _CorePythonSwig.new_EvaluatorContext())
    __swig_destroy__ = _CorePythonSwig.delete_EvaluatorContext

# Register EvaluatorContext in _CorePythonSwig:
_CorePythonSwig.EvaluatorContext_swigregister(EvaluatorContext)

class OpenPlxContext(object):
    r"""Proxy of C++ openplx::Core::Api::OpenPlxContext class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(OpenPlxContext self) -> OpenPlxContext
        __init__(OpenPlxContext self, StringVector paths) -> OpenPlxContext

        Parameters
        ----------
        paths: std::vector< std::string,std::allocator< std::string > > const &

        """
        _CorePythonSwig.OpenPlxContext_swiginit(self, _CorePythonSwig.new_OpenPlxContext(*args))
    __swig_destroy__ = _CorePythonSwig.delete_OpenPlxContext

    @staticmethod
    def deriveBundlePaths(*args):
        r"""
        deriveBundlePaths() -> StringVector
        deriveBundlePaths(std::string const & path) -> StringVector

        Parameters
        ----------
        path: std::string const &

        """
        return _CorePythonSwig.OpenPlxContext_deriveBundlePaths(*args)

    def getErrors(self):
        r"""getErrors(OpenPlxContext self) -> ErrorVector"""
        return _CorePythonSwig.OpenPlxContext_getErrors(self)

    def hasErrors(self):
        r"""hasErrors(OpenPlxContext self) -> bool"""
        return _CorePythonSwig.OpenPlxContext_hasErrors(self)

    def getRegisteredObjects(self):
        r"""getRegisteredObjects(OpenPlxContext self) -> ObjectVector"""
        return _CorePythonSwig.OpenPlxContext_getRegisteredObjects(self)

    def release(self):
        r"""release(OpenPlxContext self)"""
        return _CorePythonSwig.OpenPlxContext_release(self)

    def useUuidv5(self, namespace_id):
        r"""
        useUuidv5(OpenPlxContext self, std::string namespace_id)

        Parameters
        ----------
        namespace_id: std::string

        """
        return _CorePythonSwig.OpenPlxContext_useUuidv5(self, namespace_id)

# Register OpenPlxContext in _CorePythonSwig:
_CorePythonSwig.OpenPlxContext_swigregister(OpenPlxContext)

def OpenPlxContext_deriveBundlePaths(*args):
    r"""
    OpenPlxContext_deriveBundlePaths() -> StringVector
    OpenPlxContext_deriveBundlePaths(std::string const & path) -> StringVector

    Parameters
    ----------
    path: std::string const &

    """
    return _CorePythonSwig.OpenPlxContext_deriveBundlePaths(*args)

class BundleConfig(object):
    r"""Proxy of C++ openplx::Bundle::BundleConfig class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_CorePythonSwig.BundleConfig_name_get, _CorePythonSwig.BundleConfig_name_set, doc=r"""name : std::string""")
    config_file_path = property(_CorePythonSwig.BundleConfig_config_file_path_get, _CorePythonSwig.BundleConfig_config_file_path_set, doc=r"""config_file_path : std::filesystem::path""")
    openplx_files = property(_CorePythonSwig.BundleConfig_openplx_files_get, _CorePythonSwig.BundleConfig_openplx_files_set, doc=r"""openplx_files : std::vector<(std::filesystem::path,std::allocator<(std::filesystem::path)>)>""")
    version = property(_CorePythonSwig.BundleConfig_version_get, _CorePythonSwig.BundleConfig_version_set, doc=r"""version : std::string""")
    dependencies = property(_CorePythonSwig.BundleConfig_dependencies_get, _CorePythonSwig.BundleConfig_dependencies_set, doc=r"""dependencies : std::vector<(openplx::Token,std::allocator<(openplx::Token)>)>""")
    resolved_dependencies = property(_CorePythonSwig.BundleConfig_resolved_dependencies_get, _CorePythonSwig.BundleConfig_resolved_dependencies_set, doc=r"""resolved_dependencies : std::vector<(openplx::Bundle::BundleConfig,std::allocator<(openplx::Bundle::BundleConfig)>)>""")

    def __init__(self):
        r"""__init__(BundleConfig self) -> BundleConfig"""
        _CorePythonSwig.BundleConfig_swiginit(self, _CorePythonSwig.new_BundleConfig())
    __swig_destroy__ = _CorePythonSwig.delete_BundleConfig

# Register BundleConfig in _CorePythonSwig:
_CorePythonSwig.BundleConfig_swigregister(BundleConfig)

class DocumentContext(object):
    r"""Proxy of C++ openplx::DocumentContext class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bundle = property(_CorePythonSwig.DocumentContext_bundle_get, _CorePythonSwig.DocumentContext_bundle_set, doc=r"""bundle : openplx::Bundle::BundleConfig""")
    path = property(_CorePythonSwig.DocumentContext_path_get, _CorePythonSwig.DocumentContext_path_set, doc=r"""path : std::filesystem::path""")
    source = property(_CorePythonSwig.DocumentContext_source_get, _CorePythonSwig.DocumentContext_source_set, doc=r"""source : std::string""")
    document = property(_CorePythonSwig.DocumentContext_document_get, _CorePythonSwig.DocumentContext_document_set, doc=r"""document : openplx::DocPtr""")

    def __init__(self, *args):
        r"""
        __init__(DocumentContext self, std::string s, std::filesystem::path p, BundleConfig b) -> DocumentContext

        Parameters
        ----------
        s: std::string
        p: std::filesystem::path
        b: openplx::Bundle::BundleConfig

        __init__(DocumentContext self, std::string s, std::filesystem::path p, BundleConfig b, openplx::DocPtr const & document) -> DocumentContext

        Parameters
        ----------
        s: std::string
        p: std::filesystem::path
        b: openplx::Bundle::BundleConfig
        document: openplx::DocPtr const &

        """
        _CorePythonSwig.DocumentContext_swiginit(self, _CorePythonSwig.new_DocumentContext(*args))
    __swig_destroy__ = _CorePythonSwig.delete_DocumentContext

# Register DocumentContext in _CorePythonSwig:
_CorePythonSwig.DocumentContext_swigregister(DocumentContext)

class BundleLookup(object):
    r"""Proxy of C++ openplx::Analysis::BundleLookup class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bundle_name = property(_CorePythonSwig.BundleLookup_bundle_name_get, _CorePythonSwig.BundleLookup_bundle_name_set, doc=r"""bundle_name : std::string""")
    documents = property(_CorePythonSwig.BundleLookup_documents_get, _CorePythonSwig.BundleLookup_documents_set, doc=r"""documents : std::vector<(std::shared_ptr<(openplx::DocumentContext)>,std::allocator<(std::shared_ptr<(openplx::DocumentContext)>)>)>""")

    def __init__(self):
        r"""__init__(BundleLookup self) -> BundleLookup"""
        _CorePythonSwig.BundleLookup_swiginit(self, _CorePythonSwig.new_BundleLookup())
    __swig_destroy__ = _CorePythonSwig.delete_BundleLookup

# Register BundleLookup in _CorePythonSwig:
_CorePythonSwig.BundleLookup_swigregister(BundleLookup)

class AnalysisContext(object):
    r"""Proxy of C++ openplx::Analysis::AnalysisContext class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, bundles, error_reporter):
        r"""
        __init__(AnalysisContext self, std::vector< openplx::Analysis::BundleLookup,std::allocator< openplx::Analysis::BundleLookup > > bundles, std::shared_ptr< openplx::ErrorReporter > error_reporter) -> AnalysisContext

        Parameters
        ----------
        bundles: std::vector< openplx::Analysis::BundleLookup,std::allocator< openplx::Analysis::BundleLookup > >
        error_reporter: std::shared_ptr< openplx::ErrorReporter >

        """
        _CorePythonSwig.AnalysisContext_swiginit(self, _CorePythonSwig.new_AnalysisContext(bundles, error_reporter))
    __swig_destroy__ = _CorePythonSwig.delete_AnalysisContext

    def primitive_type_real(self):
        r"""primitive_type_real(AnalysisContext self) -> openplx::PrimitiveTypePtr"""
        return _CorePythonSwig.AnalysisContext_primitive_type_real(self)

    def primitive_type_string(self):
        r"""primitive_type_string(AnalysisContext self) -> openplx::PrimitiveTypePtr"""
        return _CorePythonSwig.AnalysisContext_primitive_type_string(self)

    def primitive_type_int(self):
        r"""primitive_type_int(AnalysisContext self) -> openplx::PrimitiveTypePtr"""
        return _CorePythonSwig.AnalysisContext_primitive_type_int(self)

    def primitive_type_bool(self):
        r"""primitive_type_bool(AnalysisContext self) -> openplx::PrimitiveTypePtr"""
        return _CorePythonSwig.AnalysisContext_primitive_type_bool(self)

    def findAllDocuments(self):
        r"""findAllDocuments(AnalysisContext self) -> DocumentVector"""
        return _CorePythonSwig.AnalysisContext_findAllDocuments(self)

    def getBundles(self):
        r"""getBundles(AnalysisContext self) -> std::vector< openplx::Analysis::BundleLookup,std::allocator< openplx::Analysis::BundleLookup > >"""
        return _CorePythonSwig.AnalysisContext_getBundles(self)

    def cacheNsLookups(self):
        r"""cacheNsLookups(AnalysisContext self)"""
        return _CorePythonSwig.AnalysisContext_cacheNsLookups(self)

    def clearNsLookups(self):
        r"""clearNsLookups(AnalysisContext self)"""
        return _CorePythonSwig.AnalysisContext_clearNsLookups(self)

    def resolveNsPaths(self, target, source):
        r"""
        resolveNsPaths(AnalysisContext self, Document target, Document source) -> StringVector

        Parameters
        ----------
        target: openplx::Document &
        source: openplx::Document &

        """
        return _CorePythonSwig.AnalysisContext_resolveNsPaths(self, target, source)

    def initSymbolTree(self, root_nodes):
        r"""
        initSymbolTree(AnalysisContext self, std::vector< openplx::NodePtr,std::allocator< openplx::NodePtr > > const & root_nodes)

        Parameters
        ----------
        root_nodes: std::vector< openplx::NodePtr,std::allocator< openplx::NodePtr > > const &

        """
        return _CorePythonSwig.AnalysisContext_initSymbolTree(self, root_nodes)

    def getSymbolTree(self):
        r"""getSymbolTree(AnalysisContext self) -> SymTreePtr"""
        return _CorePythonSwig.AnalysisContext_getSymbolTree(self)

    def findModelDeclaration(self, document, fullname):
        r"""
        findModelDeclaration(AnalysisContext self, Document document, TokenVector fullname) -> openplx::ModelDeclPtr

        Parameters
        ----------
        document: openplx::Document &
        fullname: std::vector< openplx::Token,std::allocator< openplx::Token > > const &

        """
        return _CorePythonSwig.AnalysisContext_findModelDeclaration(self, document, fullname)

    def findType(self, document, fullname):
        r"""
        findType(AnalysisContext self, Document document, TokenVector fullname) -> openplx::TypePtr

        Parameters
        ----------
        document: openplx::Document &
        fullname: std::vector< openplx::Token,std::allocator< openplx::Token > > const &

        """
        return _CorePythonSwig.AnalysisContext_findType(self, document, fullname)

    def findModelDeclarationByNameIn(self, name, document):
        r"""
        findModelDeclarationByNameIn(AnalysisContext self, std::string const & name, Document document) -> openplx::ModelDeclPtr

        Parameters
        ----------
        name: std::string const &
        document: openplx::Document &

        """
        return _CorePythonSwig.AnalysisContext_findModelDeclarationByNameIn(self, name, document)

    def findMembersInAllDocuments(self, name_token, document):
        r"""
        findMembersInAllDocuments(AnalysisContext self, Token name_token, Document document) -> std::vector< openplx::NodePtr,std::allocator< openplx::NodePtr > >

        Parameters
        ----------
        name_token: openplx::Token const &
        document: openplx::Document &

        """
        return _CorePythonSwig.AnalysisContext_findMembersInAllDocuments(self, name_token, document)

    def findTypeOf(self, segments, model):
        r"""
        findTypeOf(AnalysisContext self, TokenVector segments, ModelDeclaration model) -> std::vector< openplx::VarAssignPtr,std::allocator< openplx::VarAssignPtr > >

        Parameters
        ----------
        segments: std::vector< openplx::Token,std::allocator< openplx::Token > > const &
        model: openplx::ModelDeclaration &

        """
        return _CorePythonSwig.AnalysisContext_findTypeOf(self, segments, model)

    @staticmethod
    def findFirstMissingType(segments, model):
        r"""
        findFirstMissingType(TokenVector segments, ModelDeclaration model) -> Token

        Parameters
        ----------
        segments: std::vector< openplx::Token,std::allocator< openplx::Token > > const &
        model: openplx::ModelDeclaration &

        """
        return _CorePythonSwig.AnalysisContext_findFirstMissingType(segments, model)

    def findBinaryOperator(self, op_type, lhs, rhs):
        r"""
        findBinaryOperator(AnalysisContext self, TokenType op_type, openplx::TypePtr const & lhs, openplx::TypePtr const & rhs) -> openplx::OpOverloadPtr

        Parameters
        ----------
        op_type: TokenType
        lhs: openplx::TypePtr const &
        rhs: openplx::TypePtr const &

        """
        return _CorePythonSwig.AnalysisContext_findBinaryOperator(self, op_type, lhs, rhs)

    def findUnaryOperator(self, op_type, operand):
        r"""
        findUnaryOperator(AnalysisContext self, TokenType op_type, openplx::TypePtr const & operand) -> openplx::OpOverloadPtr

        Parameters
        ----------
        op_type: TokenType
        operand: openplx::TypePtr const &

        """
        return _CorePythonSwig.AnalysisContext_findUnaryOperator(self, op_type, operand)

    def findTopoNodesFor(self, model_decl):
        r"""
        findTopoNodesFor(AnalysisContext self, openplx::ModelDeclPtr const & model_decl) -> std::vector< openplx::NodePtr,std::allocator< openplx::NodePtr > >

        Parameters
        ----------
        model_decl: openplx::ModelDeclPtr const &

        """
        return _CorePythonSwig.AnalysisContext_findTopoNodesFor(self, model_decl)

    def getErrorReporter(self):
        r"""getErrorReporter(AnalysisContext self) -> std::shared_ptr< openplx::ErrorReporter >"""
        return _CorePythonSwig.AnalysisContext_getErrorReporter(self)

    def invalidateDuplicateSymbols(self):
        r"""invalidateDuplicateSymbols(AnalysisContext self)"""
        return _CorePythonSwig.AnalysisContext_invalidateDuplicateSymbols(self)

    def reportDuplicate(self, key, document_member, remove_from_document):
        r"""
        reportDuplicate(AnalysisContext self, std::string const & key, openplx::NodePtr const & document_member, bool remove_from_document)

        Parameters
        ----------
        key: std::string const &
        document_member: openplx::NodePtr const &
        remove_from_document: bool

        """
        return _CorePythonSwig.AnalysisContext_reportDuplicate(self, key, document_member, remove_from_document)

    def release(self):
        r"""release(AnalysisContext self)"""
        return _CorePythonSwig.AnalysisContext_release(self)

# Register AnalysisContext in _CorePythonSwig:
_CorePythonSwig.AnalysisContext_swigregister(AnalysisContext)

def AnalysisContext_findFirstMissingType(segments, model):
    r"""
    AnalysisContext_findFirstMissingType(TokenVector segments, ModelDeclaration model) -> Token

    Parameters
    ----------
    segments: std::vector< openplx::Token,std::allocator< openplx::Token > > const &
    model: openplx::ModelDeclaration &

    """
    return _CorePythonSwig.AnalysisContext_findFirstMissingType(segments, model)


def loadModelFromFile(openplx_file, modelname, openplx_context):
    r"""
    loadModelFromFile(std::filesystem::path const & openplx_file, std::optional< std::string > modelname, OpenPlxContext openplx_context) -> openplx::Core::ObjectPtr

    Parameters
    ----------
    openplx_file: std::filesystem::path const &
    modelname: std::optional< std::string >
    openplx_context: openplx::Core::Api::OpenPlxContext &

    """
    return _CorePythonSwig.loadModelFromFile(openplx_file, modelname, openplx_context)

def loadModelFromString(openplx_string, modelname, openplx_context):
    r"""
    loadModelFromString(std::string const & openplx_string, std::optional< std::string > modelname, OpenPlxContext openplx_context) -> openplx::Core::ObjectPtr

    Parameters
    ----------
    openplx_string: std::string const &
    modelname: std::optional< std::string >
    openplx_context: openplx::Core::Api::OpenPlxContext &

    """
    return _CorePythonSwig.loadModelFromString(openplx_string, modelname, openplx_context)

def loadModelFromDocument(document, modelname, openplx_context):
    r"""
    loadModelFromDocument(openplx::DocPtr const & document, std::optional< std::string > modelname, OpenPlxContext openplx_context) -> openplx::Core::ObjectPtr

    Parameters
    ----------
    document: openplx::DocPtr const &
    modelname: std::optional< std::string >
    openplx_context: openplx::Core::Api::OpenPlxContext &

    """
    return _CorePythonSwig.loadModelFromDocument(document, modelname, openplx_context)

def analyzeAndEvaluate(openplx_context, document, modelname):
    r"""
    analyzeAndEvaluate(OpenPlxContext openplx_context, openplx::DocPtr const & document, std::optional< std::string > modelname) -> openplx::Core::ObjectPtr

    Parameters
    ----------
    openplx_context: openplx::Core::Api::OpenPlxContext &
    document: openplx::DocPtr const &
    modelname: std::optional< std::string >

    """
    return _CorePythonSwig.analyzeAndEvaluate(openplx_context, document, modelname)

def analyze(openplx_context, model):
    r"""
    analyze(OpenPlxContext openplx_context, openplx::ModelDeclPtr model) -> std::shared_ptr< openplx::Analysis::AnalysisContext >

    Parameters
    ----------
    openplx_context: openplx::Core::Api::OpenPlxContext &
    model: openplx::ModelDeclPtr

    """
    return _CorePythonSwig.analyze(openplx_context, model)

def parseFromFile(openplx_file, openplx_context):
    r"""
    parseFromFile(std::filesystem::path const & openplx_file, OpenPlxContext openplx_context) -> DocDocListPair

    Parameters
    ----------
    openplx_file: std::filesystem::path const &
    openplx_context: openplx::Core::Api::OpenPlxContext &

    """
    return _CorePythonSwig.parseFromFile(openplx_file, openplx_context)

def parseFromString(openplx_string, openplx_context):
    r"""
    parseFromString(std::string const & openplx_string, OpenPlxContext openplx_context) -> DocDocListPair

    Parameters
    ----------
    openplx_string: std::string const &
    openplx_context: openplx::Core::Api::OpenPlxContext &

    """
    return _CorePythonSwig.parseFromString(openplx_string, openplx_context)

def registerPlugin(plugin, openplx_context):
    r"""
    registerPlugin(std::shared_ptr< openplx::Plugin > plugin, OpenPlxContext openplx_context)

    Parameters
    ----------
    plugin: std::shared_ptr< openplx::Plugin >
    openplx_context: openplx::Core::Api::OpenPlxContext &

    """
    return _CorePythonSwig.registerPlugin(plugin, openplx_context)

def getRegisteredPlugins(openplx_context):
    r"""
    getRegisteredPlugins(OpenPlxContext openplx_context) -> PluginVector

    Parameters
    ----------
    openplx_context: openplx::Core::Api::OpenPlxContext &

    """
    return _CorePythonSwig.getRegisteredPlugins(openplx_context)

def getOpenPlxCoreVersion():
    r"""getOpenPlxCoreVersion() -> std::string"""
    return _CorePythonSwig.getOpenPlxCoreVersion()
class RefactorReplaceOp(object):
    r"""Proxy of C++ openplx::Refactor::ReplaceOp class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    source_id = property(_CorePythonSwig.RefactorReplaceOp_source_id_get, _CorePythonSwig.RefactorReplaceOp_source_id_set, doc=r"""source_id : std::string""")
    from_line = property(_CorePythonSwig.RefactorReplaceOp_from_line_get, _CorePythonSwig.RefactorReplaceOp_from_line_set, doc=r"""from_line : uint64_t""")
    from_column = property(_CorePythonSwig.RefactorReplaceOp_from_column_get, _CorePythonSwig.RefactorReplaceOp_from_column_set, doc=r"""from_column : uint64_t""")
    end_line = property(_CorePythonSwig.RefactorReplaceOp_end_line_get, _CorePythonSwig.RefactorReplaceOp_end_line_set, doc=r"""end_line : uint64_t""")
    end_column = property(_CorePythonSwig.RefactorReplaceOp_end_column_get, _CorePythonSwig.RefactorReplaceOp_end_column_set, doc=r"""end_column : uint64_t""")
    new_content = property(_CorePythonSwig.RefactorReplaceOp_new_content_get, _CorePythonSwig.RefactorReplaceOp_new_content_set, doc=r"""new_content : std::string""")

    def __init__(self):
        r"""__init__(RefactorReplaceOp self) -> RefactorReplaceOp"""
        _CorePythonSwig.RefactorReplaceOp_swiginit(self, _CorePythonSwig.new_RefactorReplaceOp())
    __swig_destroy__ = _CorePythonSwig.delete_RefactorReplaceOp

# Register RefactorReplaceOp in _CorePythonSwig:
_CorePythonSwig.RefactorReplaceOp_swigregister(RefactorReplaceOp)

class RefactorToolkit(object):
    r"""Proxy of C++ openplx::Refactor::Toolkit class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def renameModel(documents, old_name_with_namespace, new_name):
        r"""
        renameModel(DocumentVector documents, std::string old_name_with_namespace, std::string new_name) -> ReplaceOpVector

        Parameters
        ----------
        documents: std::vector< openplx::DocPtr,std::allocator< openplx::DocPtr > >
        old_name_with_namespace: std::string
        new_name: std::string

        """
        return _CorePythonSwig.RefactorToolkit_renameModel(documents, old_name_with_namespace, new_name)

    @staticmethod
    def moveModel(documents, model_name_with_namespace, new_namespace):
        r"""
        moveModel(DocumentVector documents, std::string model_name_with_namespace, std::string new_namespace) -> ReplaceOpVector

        Parameters
        ----------
        documents: std::vector< openplx::DocPtr,std::allocator< openplx::DocPtr > >
        model_name_with_namespace: std::string
        new_namespace: std::string

        """
        return _CorePythonSwig.RefactorToolkit_moveModel(documents, model_name_with_namespace, new_namespace)

    @staticmethod
    def moveAndRenameModel(documents, model_name_with_namespace, new_namespace, new_name):
        r"""
        moveAndRenameModel(DocumentVector documents, std::string model_name_with_namespace, std::string new_namespace, std::string new_name) -> ReplaceOpVector

        Parameters
        ----------
        documents: std::vector< openplx::DocPtr,std::allocator< openplx::DocPtr > >
        model_name_with_namespace: std::string
        new_namespace: std::string
        new_name: std::string

        """
        return _CorePythonSwig.RefactorToolkit_moveAndRenameModel(documents, model_name_with_namespace, new_namespace, new_name)

    @staticmethod
    def renameNamespace(documents, old_namespace, new_namespace):
        r"""
        renameNamespace(DocumentVector documents, std::string old_namespace, std::string new_namespace) -> ReplaceOpVector

        Parameters
        ----------
        documents: std::vector< openplx::DocPtr,std::allocator< openplx::DocPtr > >
        old_namespace: std::string
        new_namespace: std::string

        """
        return _CorePythonSwig.RefactorToolkit_renameNamespace(documents, old_namespace, new_namespace)

    @staticmethod
    def renameAttribute(documents, old_name_with_path, new_name):
        r"""
        renameAttribute(DocumentVector documents, std::string old_name_with_path, std::string new_name) -> ReplaceOpVector

        Parameters
        ----------
        documents: std::vector< openplx::DocPtr,std::allocator< openplx::DocPtr > >
        old_name_with_path: std::string
        new_name: std::string

        """
        return _CorePythonSwig.RefactorToolkit_renameAttribute(documents, old_name_with_path, new_name)

    @staticmethod
    def renameMethod(documents, old_name_with_path, new_name):
        r"""
        renameMethod(DocumentVector documents, std::string old_name_with_path, std::string new_name) -> ReplaceOpVector

        Parameters
        ----------
        documents: std::vector< openplx::DocPtr,std::allocator< openplx::DocPtr > >
        old_name_with_path: std::string
        new_name: std::string

        """
        return _CorePythonSwig.RefactorToolkit_renameMethod(documents, old_name_with_path, new_name)

    def __init__(self):
        r"""__init__(RefactorToolkit self) -> RefactorToolkit"""
        _CorePythonSwig.RefactorToolkit_swiginit(self, _CorePythonSwig.new_RefactorToolkit())
    __swig_destroy__ = _CorePythonSwig.delete_RefactorToolkit

# Register RefactorToolkit in _CorePythonSwig:
_CorePythonSwig.RefactorToolkit_swigregister(RefactorToolkit)

def RefactorToolkit_renameModel(documents, old_name_with_namespace, new_name):
    r"""
    RefactorToolkit_renameModel(DocumentVector documents, std::string old_name_with_namespace, std::string new_name) -> ReplaceOpVector

    Parameters
    ----------
    documents: std::vector< openplx::DocPtr,std::allocator< openplx::DocPtr > >
    old_name_with_namespace: std::string
    new_name: std::string

    """
    return _CorePythonSwig.RefactorToolkit_renameModel(documents, old_name_with_namespace, new_name)

def RefactorToolkit_moveModel(documents, model_name_with_namespace, new_namespace):
    r"""
    RefactorToolkit_moveModel(DocumentVector documents, std::string model_name_with_namespace, std::string new_namespace) -> ReplaceOpVector

    Parameters
    ----------
    documents: std::vector< openplx::DocPtr,std::allocator< openplx::DocPtr > >
    model_name_with_namespace: std::string
    new_namespace: std::string

    """
    return _CorePythonSwig.RefactorToolkit_moveModel(documents, model_name_with_namespace, new_namespace)

def RefactorToolkit_moveAndRenameModel(documents, model_name_with_namespace, new_namespace, new_name):
    r"""
    RefactorToolkit_moveAndRenameModel(DocumentVector documents, std::string model_name_with_namespace, std::string new_namespace, std::string new_name) -> ReplaceOpVector

    Parameters
    ----------
    documents: std::vector< openplx::DocPtr,std::allocator< openplx::DocPtr > >
    model_name_with_namespace: std::string
    new_namespace: std::string
    new_name: std::string

    """
    return _CorePythonSwig.RefactorToolkit_moveAndRenameModel(documents, model_name_with_namespace, new_namespace, new_name)

def RefactorToolkit_renameNamespace(documents, old_namespace, new_namespace):
    r"""
    RefactorToolkit_renameNamespace(DocumentVector documents, std::string old_namespace, std::string new_namespace) -> ReplaceOpVector

    Parameters
    ----------
    documents: std::vector< openplx::DocPtr,std::allocator< openplx::DocPtr > >
    old_namespace: std::string
    new_namespace: std::string

    """
    return _CorePythonSwig.RefactorToolkit_renameNamespace(documents, old_namespace, new_namespace)

def RefactorToolkit_renameAttribute(documents, old_name_with_path, new_name):
    r"""
    RefactorToolkit_renameAttribute(DocumentVector documents, std::string old_name_with_path, std::string new_name) -> ReplaceOpVector

    Parameters
    ----------
    documents: std::vector< openplx::DocPtr,std::allocator< openplx::DocPtr > >
    old_name_with_path: std::string
    new_name: std::string

    """
    return _CorePythonSwig.RefactorToolkit_renameAttribute(documents, old_name_with_path, new_name)

def RefactorToolkit_renameMethod(documents, old_name_with_path, new_name):
    r"""
    RefactorToolkit_renameMethod(DocumentVector documents, std::string old_name_with_path, std::string new_name) -> ReplaceOpVector

    Parameters
    ----------
    documents: std::vector< openplx::DocPtr,std::allocator< openplx::DocPtr > >
    old_name_with_path: std::string
    new_name: std::string

    """
    return _CorePythonSwig.RefactorToolkit_renameMethod(documents, old_name_with_path, new_name)

class Plugin(object):
    r"""Proxy of C++ openplx::Plugin class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def parse(self, key, import_node, error_reporter):
        r"""
        parse(Plugin self, std::string const & key, openplx::ImportPtr import_node, ErrorReporter error_reporter) -> openplx::DocPtr

        Parameters
        ----------
        key: std::string const &
        import_node: openplx::ImportPtr
        error_reporter: openplx::ErrorReporter &

        """
        return _CorePythonSwig.Plugin_parse(self, key, import_node, error_reporter)

    def extensions(self):
        r"""extensions(Plugin self) -> StringVector"""
        return _CorePythonSwig.Plugin_extensions(self)

    def setPrecision(self, precision):
        r"""
        setPrecision(Plugin self, int precision)

        Parameters
        ----------
        precision: int

        """
        return _CorePythonSwig.Plugin_setPrecision(self, precision)

    def keyShouldBeSource(self):
        r"""keyShouldBeSource(Plugin self) -> bool"""
        return _CorePythonSwig.Plugin_keyShouldBeSource(self)
    __swig_destroy__ = _CorePythonSwig.delete_Plugin

# Register Plugin in _CorePythonSwig:
_CorePythonSwig.Plugin_swigregister(Plugin)

class DocDocListPair(object):
    r"""Proxy of C++ std::pair< std::shared_ptr< openplx::Document >,std::vector< std::shared_ptr< openplx::Document > > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DocDocListPair self) -> DocDocListPair
        __init__(DocDocListPair self, std::shared_ptr< openplx::Document > first, DocumentVector second) -> DocDocListPair

        Parameters
        ----------
        first: std::shared_ptr< openplx::Document >
        second: std::vector< std::shared_ptr< openplx::Document >,std::allocator< std::shared_ptr< openplx::Document > > >

        __init__(DocDocListPair self, DocDocListPair other) -> DocDocListPair

        Parameters
        ----------
        other: std::pair< std::shared_ptr< openplx::Document >,std::vector< std::shared_ptr< openplx::Document >,std::allocator< std::shared_ptr< openplx::Document > > > > const &

        """
        _CorePythonSwig.DocDocListPair_swiginit(self, _CorePythonSwig.new_DocDocListPair(*args))
    first = property(_CorePythonSwig.DocDocListPair_first_get, _CorePythonSwig.DocDocListPair_first_set, doc=r"""first : std::shared_ptr<(openplx::Document)>""")
    second = property(_CorePythonSwig.DocDocListPair_second_get, _CorePythonSwig.DocDocListPair_second_set, doc=r"""second : std::vector<(std::shared_ptr<(openplx::Document)>,std::allocator<(std::shared_ptr<(openplx::Document)>)>)>""")
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _CorePythonSwig.delete_DocDocListPair

# Register DocDocListPair in _CorePythonSwig:
_CorePythonSwig.DocDocListPair_swigregister(DocDocListPair)

class TokenVector(object):
    r"""Proxy of C++ std::vector< openplx::Token > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(TokenVector self) -> SwigPyIterator"""
        return _CorePythonSwig.TokenVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(TokenVector self) -> bool"""
        return _CorePythonSwig.TokenVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(TokenVector self) -> bool"""
        return _CorePythonSwig.TokenVector___bool__(self)

    def __len__(self):
        r"""__len__(TokenVector self) -> std::vector< openplx::Token >::size_type"""
        return _CorePythonSwig.TokenVector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(TokenVector self, std::vector< openplx::Token >::difference_type i, std::vector< openplx::Token >::difference_type j) -> TokenVector

        Parameters
        ----------
        i: std::vector< openplx::Token >::difference_type
        j: std::vector< openplx::Token >::difference_type

        """
        return _CorePythonSwig.TokenVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(TokenVector self, std::vector< openplx::Token >::difference_type i, std::vector< openplx::Token >::difference_type j)

        Parameters
        ----------
        i: std::vector< openplx::Token >::difference_type
        j: std::vector< openplx::Token >::difference_type

        __setslice__(TokenVector self, std::vector< openplx::Token >::difference_type i, std::vector< openplx::Token >::difference_type j, TokenVector v)

        Parameters
        ----------
        i: std::vector< openplx::Token >::difference_type
        j: std::vector< openplx::Token >::difference_type
        v: std::vector< openplx::Token,std::allocator< openplx::Token > > const &

        """
        return _CorePythonSwig.TokenVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(TokenVector self, std::vector< openplx::Token >::difference_type i, std::vector< openplx::Token >::difference_type j)

        Parameters
        ----------
        i: std::vector< openplx::Token >::difference_type
        j: std::vector< openplx::Token >::difference_type

        """
        return _CorePythonSwig.TokenVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(TokenVector self, std::vector< openplx::Token >::difference_type i)

        Parameters
        ----------
        i: std::vector< openplx::Token >::difference_type

        __delitem__(TokenVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _CorePythonSwig.TokenVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(TokenVector self, PySliceObject * slice) -> TokenVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(TokenVector self, std::vector< openplx::Token >::difference_type i) -> Token

        Parameters
        ----------
        i: std::vector< openplx::Token >::difference_type

        """
        return _CorePythonSwig.TokenVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(TokenVector self, PySliceObject * slice, TokenVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< openplx::Token,std::allocator< openplx::Token > > const &

        __setitem__(TokenVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(TokenVector self, std::vector< openplx::Token >::difference_type i, Token x)

        Parameters
        ----------
        i: std::vector< openplx::Token >::difference_type
        x: std::vector< openplx::Token >::value_type const &

        """
        return _CorePythonSwig.TokenVector___setitem__(self, *args)

    def pop(self):
        r"""pop(TokenVector self) -> Token"""
        return _CorePythonSwig.TokenVector_pop(self)

    def append(self, x):
        r"""
        append(TokenVector self, Token x)

        Parameters
        ----------
        x: std::vector< openplx::Token >::value_type const &

        """
        return _CorePythonSwig.TokenVector_append(self, x)

    def empty(self):
        r"""empty(TokenVector self) -> bool"""
        return _CorePythonSwig.TokenVector_empty(self)

    def size(self):
        r"""size(TokenVector self) -> std::vector< openplx::Token >::size_type"""
        return _CorePythonSwig.TokenVector_size(self)

    def swap(self, v):
        r"""
        swap(TokenVector self, TokenVector v)

        Parameters
        ----------
        v: std::vector< openplx::Token > &

        """
        return _CorePythonSwig.TokenVector_swap(self, v)

    def begin(self):
        r"""begin(TokenVector self) -> std::vector< openplx::Token >::iterator"""
        return _CorePythonSwig.TokenVector_begin(self)

    def end(self):
        r"""end(TokenVector self) -> std::vector< openplx::Token >::iterator"""
        return _CorePythonSwig.TokenVector_end(self)

    def rbegin(self):
        r"""rbegin(TokenVector self) -> std::vector< openplx::Token >::reverse_iterator"""
        return _CorePythonSwig.TokenVector_rbegin(self)

    def rend(self):
        r"""rend(TokenVector self) -> std::vector< openplx::Token >::reverse_iterator"""
        return _CorePythonSwig.TokenVector_rend(self)

    def clear(self):
        r"""clear(TokenVector self)"""
        return _CorePythonSwig.TokenVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(TokenVector self) -> std::vector< openplx::Token >::allocator_type"""
        return _CorePythonSwig.TokenVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(TokenVector self)"""
        return _CorePythonSwig.TokenVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(TokenVector self, std::vector< openplx::Token >::iterator pos) -> std::vector< openplx::Token >::iterator

        Parameters
        ----------
        pos: std::vector< openplx::Token >::iterator

        erase(TokenVector self, std::vector< openplx::Token >::iterator first, std::vector< openplx::Token >::iterator last) -> std::vector< openplx::Token >::iterator

        Parameters
        ----------
        first: std::vector< openplx::Token >::iterator
        last: std::vector< openplx::Token >::iterator

        """
        return _CorePythonSwig.TokenVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(TokenVector self) -> TokenVector
        __init__(TokenVector self, TokenVector other) -> TokenVector

        Parameters
        ----------
        other: std::vector< openplx::Token > const &

        __init__(TokenVector self, std::vector< openplx::Token >::size_type size) -> TokenVector

        Parameters
        ----------
        size: std::vector< openplx::Token >::size_type

        __init__(TokenVector self, std::vector< openplx::Token >::size_type size, Token value) -> TokenVector

        Parameters
        ----------
        size: std::vector< openplx::Token >::size_type
        value: std::vector< openplx::Token >::value_type const &

        """
        _CorePythonSwig.TokenVector_swiginit(self, _CorePythonSwig.new_TokenVector(*args))

    def push_back(self, x):
        r"""
        push_back(TokenVector self, Token x)

        Parameters
        ----------
        x: std::vector< openplx::Token >::value_type const &

        """
        return _CorePythonSwig.TokenVector_push_back(self, x)

    def front(self):
        r"""front(TokenVector self) -> Token"""
        return _CorePythonSwig.TokenVector_front(self)

    def back(self):
        r"""back(TokenVector self) -> Token"""
        return _CorePythonSwig.TokenVector_back(self)

    def assign(self, n, x):
        r"""
        assign(TokenVector self, std::vector< openplx::Token >::size_type n, Token x)

        Parameters
        ----------
        n: std::vector< openplx::Token >::size_type
        x: std::vector< openplx::Token >::value_type const &

        """
        return _CorePythonSwig.TokenVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(TokenVector self, std::vector< openplx::Token >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< openplx::Token >::size_type

        resize(TokenVector self, std::vector< openplx::Token >::size_type new_size, Token x)

        Parameters
        ----------
        new_size: std::vector< openplx::Token >::size_type
        x: std::vector< openplx::Token >::value_type const &

        """
        return _CorePythonSwig.TokenVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(TokenVector self, std::vector< openplx::Token >::iterator pos, Token x) -> std::vector< openplx::Token >::iterator

        Parameters
        ----------
        pos: std::vector< openplx::Token >::iterator
        x: std::vector< openplx::Token >::value_type const &

        insert(TokenVector self, std::vector< openplx::Token >::iterator pos, std::vector< openplx::Token >::size_type n, Token x)

        Parameters
        ----------
        pos: std::vector< openplx::Token >::iterator
        n: std::vector< openplx::Token >::size_type
        x: std::vector< openplx::Token >::value_type const &

        """
        return _CorePythonSwig.TokenVector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(TokenVector self, std::vector< openplx::Token >::size_type n)

        Parameters
        ----------
        n: std::vector< openplx::Token >::size_type

        """
        return _CorePythonSwig.TokenVector_reserve(self, n)

    def capacity(self):
        r"""capacity(TokenVector self) -> std::vector< openplx::Token >::size_type"""
        return _CorePythonSwig.TokenVector_capacity(self)
    __swig_destroy__ = _CorePythonSwig.delete_TokenVector

# Register TokenVector in _CorePythonSwig:
_CorePythonSwig.TokenVector_swigregister(TokenVector)

class DocumentVector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Document > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DocumentVector self) -> SwigPyIterator"""
        return _CorePythonSwig.DocumentVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DocumentVector self) -> bool"""
        return _CorePythonSwig.DocumentVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DocumentVector self) -> bool"""
        return _CorePythonSwig.DocumentVector___bool__(self)

    def __len__(self):
        r"""__len__(DocumentVector self) -> std::vector< std::shared_ptr< openplx::Document > >::size_type"""
        return _CorePythonSwig.DocumentVector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(DocumentVector self, std::vector< std::shared_ptr< openplx::Document > >::difference_type i, std::vector< std::shared_ptr< openplx::Document > >::difference_type j) -> DocumentVector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Document > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Document > >::difference_type

        """
        return _CorePythonSwig.DocumentVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DocumentVector self, std::vector< std::shared_ptr< openplx::Document > >::difference_type i, std::vector< std::shared_ptr< openplx::Document > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Document > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Document > >::difference_type

        __setslice__(DocumentVector self, std::vector< std::shared_ptr< openplx::Document > >::difference_type i, std::vector< std::shared_ptr< openplx::Document > >::difference_type j, DocumentVector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Document > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Document > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Document >,std::allocator< std::shared_ptr< openplx::Document > > > const &

        """
        return _CorePythonSwig.DocumentVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(DocumentVector self, std::vector< std::shared_ptr< openplx::Document > >::difference_type i, std::vector< std::shared_ptr< openplx::Document > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Document > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Document > >::difference_type

        """
        return _CorePythonSwig.DocumentVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DocumentVector self, std::vector< std::shared_ptr< openplx::Document > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Document > >::difference_type

        __delitem__(DocumentVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _CorePythonSwig.DocumentVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DocumentVector self, PySliceObject * slice) -> DocumentVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DocumentVector self, std::vector< std::shared_ptr< openplx::Document > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Document > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Document > >::difference_type

        """
        return _CorePythonSwig.DocumentVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DocumentVector self, PySliceObject * slice, DocumentVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Document >,std::allocator< std::shared_ptr< openplx::Document > > > const &

        __setitem__(DocumentVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DocumentVector self, std::vector< std::shared_ptr< openplx::Document > >::difference_type i, std::vector< std::shared_ptr< openplx::Document > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Document > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Document > >::value_type const &

        """
        return _CorePythonSwig.DocumentVector___setitem__(self, *args)

    def pop(self):
        r"""pop(DocumentVector self) -> std::vector< std::shared_ptr< openplx::Document > >::value_type"""
        return _CorePythonSwig.DocumentVector_pop(self)

    def append(self, x):
        r"""
        append(DocumentVector self, std::vector< std::shared_ptr< openplx::Document > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Document > >::value_type const &

        """
        return _CorePythonSwig.DocumentVector_append(self, x)

    def empty(self):
        r"""empty(DocumentVector self) -> bool"""
        return _CorePythonSwig.DocumentVector_empty(self)

    def size(self):
        r"""size(DocumentVector self) -> std::vector< std::shared_ptr< openplx::Document > >::size_type"""
        return _CorePythonSwig.DocumentVector_size(self)

    def swap(self, v):
        r"""
        swap(DocumentVector self, DocumentVector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Document > > &

        """
        return _CorePythonSwig.DocumentVector_swap(self, v)

    def begin(self):
        r"""begin(DocumentVector self) -> std::vector< std::shared_ptr< openplx::Document > >::iterator"""
        return _CorePythonSwig.DocumentVector_begin(self)

    def end(self):
        r"""end(DocumentVector self) -> std::vector< std::shared_ptr< openplx::Document > >::iterator"""
        return _CorePythonSwig.DocumentVector_end(self)

    def rbegin(self):
        r"""rbegin(DocumentVector self) -> std::vector< std::shared_ptr< openplx::Document > >::reverse_iterator"""
        return _CorePythonSwig.DocumentVector_rbegin(self)

    def rend(self):
        r"""rend(DocumentVector self) -> std::vector< std::shared_ptr< openplx::Document > >::reverse_iterator"""
        return _CorePythonSwig.DocumentVector_rend(self)

    def clear(self):
        r"""clear(DocumentVector self)"""
        return _CorePythonSwig.DocumentVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DocumentVector self) -> std::vector< std::shared_ptr< openplx::Document > >::allocator_type"""
        return _CorePythonSwig.DocumentVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DocumentVector self)"""
        return _CorePythonSwig.DocumentVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DocumentVector self, std::vector< std::shared_ptr< openplx::Document > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Document > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Document > >::iterator

        erase(DocumentVector self, std::vector< std::shared_ptr< openplx::Document > >::iterator first, std::vector< std::shared_ptr< openplx::Document > >::iterator last) -> std::vector< std::shared_ptr< openplx::Document > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Document > >::iterator
        last: std::vector< std::shared_ptr< openplx::Document > >::iterator

        """
        return _CorePythonSwig.DocumentVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DocumentVector self) -> DocumentVector
        __init__(DocumentVector self, DocumentVector other) -> DocumentVector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Document > > const &

        __init__(DocumentVector self, std::vector< std::shared_ptr< openplx::Document > >::size_type size) -> DocumentVector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Document > >::size_type

        __init__(DocumentVector self, std::vector< std::shared_ptr< openplx::Document > >::size_type size, std::vector< std::shared_ptr< openplx::Document > >::value_type const & value) -> DocumentVector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Document > >::size_type
        value: std::vector< std::shared_ptr< openplx::Document > >::value_type const &

        """
        _CorePythonSwig.DocumentVector_swiginit(self, _CorePythonSwig.new_DocumentVector(*args))

    def push_back(self, x):
        r"""
        push_back(DocumentVector self, std::vector< std::shared_ptr< openplx::Document > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Document > >::value_type const &

        """
        return _CorePythonSwig.DocumentVector_push_back(self, x)

    def front(self):
        r"""front(DocumentVector self) -> std::vector< std::shared_ptr< openplx::Document > >::value_type const &"""
        return _CorePythonSwig.DocumentVector_front(self)

    def back(self):
        r"""back(DocumentVector self) -> std::vector< std::shared_ptr< openplx::Document > >::value_type const &"""
        return _CorePythonSwig.DocumentVector_back(self)

    def assign(self, n, x):
        r"""
        assign(DocumentVector self, std::vector< std::shared_ptr< openplx::Document > >::size_type n, std::vector< std::shared_ptr< openplx::Document > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Document > >::size_type
        x: std::vector< std::shared_ptr< openplx::Document > >::value_type const &

        """
        return _CorePythonSwig.DocumentVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DocumentVector self, std::vector< std::shared_ptr< openplx::Document > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Document > >::size_type

        resize(DocumentVector self, std::vector< std::shared_ptr< openplx::Document > >::size_type new_size, std::vector< std::shared_ptr< openplx::Document > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Document > >::size_type
        x: std::vector< std::shared_ptr< openplx::Document > >::value_type const &

        """
        return _CorePythonSwig.DocumentVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DocumentVector self, std::vector< std::shared_ptr< openplx::Document > >::iterator pos, std::vector< std::shared_ptr< openplx::Document > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Document > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Document > >::iterator
        x: std::vector< std::shared_ptr< openplx::Document > >::value_type const &

        insert(DocumentVector self, std::vector< std::shared_ptr< openplx::Document > >::iterator pos, std::vector< std::shared_ptr< openplx::Document > >::size_type n, std::vector< std::shared_ptr< openplx::Document > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Document > >::iterator
        n: std::vector< std::shared_ptr< openplx::Document > >::size_type
        x: std::vector< std::shared_ptr< openplx::Document > >::value_type const &

        """
        return _CorePythonSwig.DocumentVector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(DocumentVector self, std::vector< std::shared_ptr< openplx::Document > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Document > >::size_type

        """
        return _CorePythonSwig.DocumentVector_reserve(self, n)

    def capacity(self):
        r"""capacity(DocumentVector self) -> std::vector< std::shared_ptr< openplx::Document > >::size_type"""
        return _CorePythonSwig.DocumentVector_capacity(self)
    __swig_destroy__ = _CorePythonSwig.delete_DocumentVector

# Register DocumentVector in _CorePythonSwig:
_CorePythonSwig.DocumentVector_swigregister(DocumentVector)

class ObjectVector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Core::Object > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(ObjectVector self) -> SwigPyIterator"""
        return _CorePythonSwig.ObjectVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(ObjectVector self) -> bool"""
        return _CorePythonSwig.ObjectVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(ObjectVector self) -> bool"""
        return _CorePythonSwig.ObjectVector___bool__(self)

    def __len__(self):
        r"""__len__(ObjectVector self) -> std::vector< std::shared_ptr< openplx::Core::Object > >::size_type"""
        return _CorePythonSwig.ObjectVector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(ObjectVector self, std::vector< std::shared_ptr< openplx::Core::Object > >::difference_type i, std::vector< std::shared_ptr< openplx::Core::Object > >::difference_type j) -> ObjectVector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Core::Object > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Core::Object > >::difference_type

        """
        return _CorePythonSwig.ObjectVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(ObjectVector self, std::vector< std::shared_ptr< openplx::Core::Object > >::difference_type i, std::vector< std::shared_ptr< openplx::Core::Object > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Core::Object > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Core::Object > >::difference_type

        __setslice__(ObjectVector self, std::vector< std::shared_ptr< openplx::Core::Object > >::difference_type i, std::vector< std::shared_ptr< openplx::Core::Object > >::difference_type j, ObjectVector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Core::Object > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Core::Object > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > const &

        """
        return _CorePythonSwig.ObjectVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(ObjectVector self, std::vector< std::shared_ptr< openplx::Core::Object > >::difference_type i, std::vector< std::shared_ptr< openplx::Core::Object > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Core::Object > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Core::Object > >::difference_type

        """
        return _CorePythonSwig.ObjectVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(ObjectVector self, std::vector< std::shared_ptr< openplx::Core::Object > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Core::Object > >::difference_type

        __delitem__(ObjectVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _CorePythonSwig.ObjectVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(ObjectVector self, PySliceObject * slice) -> ObjectVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(ObjectVector self, std::vector< std::shared_ptr< openplx::Core::Object > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Core::Object > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Core::Object > >::difference_type

        """
        return _CorePythonSwig.ObjectVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(ObjectVector self, PySliceObject * slice, ObjectVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > const &

        __setitem__(ObjectVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(ObjectVector self, std::vector< std::shared_ptr< openplx::Core::Object > >::difference_type i, std::vector< std::shared_ptr< openplx::Core::Object > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Core::Object > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Core::Object > >::value_type const &

        """
        return _CorePythonSwig.ObjectVector___setitem__(self, *args)

    def pop(self):
        r"""pop(ObjectVector self) -> std::vector< std::shared_ptr< openplx::Core::Object > >::value_type"""
        return _CorePythonSwig.ObjectVector_pop(self)

    def append(self, x):
        r"""
        append(ObjectVector self, std::vector< std::shared_ptr< openplx::Core::Object > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Core::Object > >::value_type const &

        """
        return _CorePythonSwig.ObjectVector_append(self, x)

    def empty(self):
        r"""empty(ObjectVector self) -> bool"""
        return _CorePythonSwig.ObjectVector_empty(self)

    def size(self):
        r"""size(ObjectVector self) -> std::vector< std::shared_ptr< openplx::Core::Object > >::size_type"""
        return _CorePythonSwig.ObjectVector_size(self)

    def swap(self, v):
        r"""
        swap(ObjectVector self, ObjectVector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Core::Object > > &

        """
        return _CorePythonSwig.ObjectVector_swap(self, v)

    def begin(self):
        r"""begin(ObjectVector self) -> std::vector< std::shared_ptr< openplx::Core::Object > >::iterator"""
        return _CorePythonSwig.ObjectVector_begin(self)

    def end(self):
        r"""end(ObjectVector self) -> std::vector< std::shared_ptr< openplx::Core::Object > >::iterator"""
        return _CorePythonSwig.ObjectVector_end(self)

    def rbegin(self):
        r"""rbegin(ObjectVector self) -> std::vector< std::shared_ptr< openplx::Core::Object > >::reverse_iterator"""
        return _CorePythonSwig.ObjectVector_rbegin(self)

    def rend(self):
        r"""rend(ObjectVector self) -> std::vector< std::shared_ptr< openplx::Core::Object > >::reverse_iterator"""
        return _CorePythonSwig.ObjectVector_rend(self)

    def clear(self):
        r"""clear(ObjectVector self)"""
        return _CorePythonSwig.ObjectVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(ObjectVector self) -> std::vector< std::shared_ptr< openplx::Core::Object > >::allocator_type"""
        return _CorePythonSwig.ObjectVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(ObjectVector self)"""
        return _CorePythonSwig.ObjectVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(ObjectVector self, std::vector< std::shared_ptr< openplx::Core::Object > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Core::Object > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Core::Object > >::iterator

        erase(ObjectVector self, std::vector< std::shared_ptr< openplx::Core::Object > >::iterator first, std::vector< std::shared_ptr< openplx::Core::Object > >::iterator last) -> std::vector< std::shared_ptr< openplx::Core::Object > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Core::Object > >::iterator
        last: std::vector< std::shared_ptr< openplx::Core::Object > >::iterator

        """
        return _CorePythonSwig.ObjectVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(ObjectVector self) -> ObjectVector
        __init__(ObjectVector self, ObjectVector other) -> ObjectVector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Core::Object > > const &

        __init__(ObjectVector self, std::vector< std::shared_ptr< openplx::Core::Object > >::size_type size) -> ObjectVector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Core::Object > >::size_type

        __init__(ObjectVector self, std::vector< std::shared_ptr< openplx::Core::Object > >::size_type size, std::vector< std::shared_ptr< openplx::Core::Object > >::value_type const & value) -> ObjectVector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Core::Object > >::size_type
        value: std::vector< std::shared_ptr< openplx::Core::Object > >::value_type const &

        """
        _CorePythonSwig.ObjectVector_swiginit(self, _CorePythonSwig.new_ObjectVector(*args))

    def push_back(self, x):
        r"""
        push_back(ObjectVector self, std::vector< std::shared_ptr< openplx::Core::Object > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Core::Object > >::value_type const &

        """
        return _CorePythonSwig.ObjectVector_push_back(self, x)

    def front(self):
        r"""front(ObjectVector self) -> std::vector< std::shared_ptr< openplx::Core::Object > >::value_type const &"""
        return _CorePythonSwig.ObjectVector_front(self)

    def back(self):
        r"""back(ObjectVector self) -> std::vector< std::shared_ptr< openplx::Core::Object > >::value_type const &"""
        return _CorePythonSwig.ObjectVector_back(self)

    def assign(self, n, x):
        r"""
        assign(ObjectVector self, std::vector< std::shared_ptr< openplx::Core::Object > >::size_type n, std::vector< std::shared_ptr< openplx::Core::Object > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Core::Object > >::size_type
        x: std::vector< std::shared_ptr< openplx::Core::Object > >::value_type const &

        """
        return _CorePythonSwig.ObjectVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(ObjectVector self, std::vector< std::shared_ptr< openplx::Core::Object > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Core::Object > >::size_type

        resize(ObjectVector self, std::vector< std::shared_ptr< openplx::Core::Object > >::size_type new_size, std::vector< std::shared_ptr< openplx::Core::Object > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Core::Object > >::size_type
        x: std::vector< std::shared_ptr< openplx::Core::Object > >::value_type const &

        """
        return _CorePythonSwig.ObjectVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(ObjectVector self, std::vector< std::shared_ptr< openplx::Core::Object > >::iterator pos, std::vector< std::shared_ptr< openplx::Core::Object > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Core::Object > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Core::Object > >::iterator
        x: std::vector< std::shared_ptr< openplx::Core::Object > >::value_type const &

        insert(ObjectVector self, std::vector< std::shared_ptr< openplx::Core::Object > >::iterator pos, std::vector< std::shared_ptr< openplx::Core::Object > >::size_type n, std::vector< std::shared_ptr< openplx::Core::Object > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Core::Object > >::iterator
        n: std::vector< std::shared_ptr< openplx::Core::Object > >::size_type
        x: std::vector< std::shared_ptr< openplx::Core::Object > >::value_type const &

        """
        return _CorePythonSwig.ObjectVector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(ObjectVector self, std::vector< std::shared_ptr< openplx::Core::Object > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Core::Object > >::size_type

        """
        return _CorePythonSwig.ObjectVector_reserve(self, n)

    def capacity(self):
        r"""capacity(ObjectVector self) -> std::vector< std::shared_ptr< openplx::Core::Object > >::size_type"""
        return _CorePythonSwig.ObjectVector_capacity(self)
    __swig_destroy__ = _CorePythonSwig.delete_ObjectVector

# Register ObjectVector in _CorePythonSwig:
_CorePythonSwig.ObjectVector_swigregister(ObjectVector)

class AnyVector(object):
    r"""Proxy of C++ std::vector< openplx::Core::Any > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(AnyVector self) -> SwigPyIterator"""
        return _CorePythonSwig.AnyVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(AnyVector self) -> bool"""
        return _CorePythonSwig.AnyVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(AnyVector self) -> bool"""
        return _CorePythonSwig.AnyVector___bool__(self)

    def __len__(self):
        r"""__len__(AnyVector self) -> std::vector< openplx::Core::Any >::size_type"""
        return _CorePythonSwig.AnyVector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(AnyVector self, std::vector< openplx::Core::Any >::difference_type i, std::vector< openplx::Core::Any >::difference_type j) -> AnyVector

        Parameters
        ----------
        i: std::vector< openplx::Core::Any >::difference_type
        j: std::vector< openplx::Core::Any >::difference_type

        """
        return _CorePythonSwig.AnyVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(AnyVector self, std::vector< openplx::Core::Any >::difference_type i, std::vector< openplx::Core::Any >::difference_type j)

        Parameters
        ----------
        i: std::vector< openplx::Core::Any >::difference_type
        j: std::vector< openplx::Core::Any >::difference_type

        __setslice__(AnyVector self, std::vector< openplx::Core::Any >::difference_type i, std::vector< openplx::Core::Any >::difference_type j, AnyVector v)

        Parameters
        ----------
        i: std::vector< openplx::Core::Any >::difference_type
        j: std::vector< openplx::Core::Any >::difference_type
        v: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _CorePythonSwig.AnyVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(AnyVector self, std::vector< openplx::Core::Any >::difference_type i, std::vector< openplx::Core::Any >::difference_type j)

        Parameters
        ----------
        i: std::vector< openplx::Core::Any >::difference_type
        j: std::vector< openplx::Core::Any >::difference_type

        """
        return _CorePythonSwig.AnyVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(AnyVector self, std::vector< openplx::Core::Any >::difference_type i)

        Parameters
        ----------
        i: std::vector< openplx::Core::Any >::difference_type

        __delitem__(AnyVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _CorePythonSwig.AnyVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(AnyVector self, PySliceObject * slice) -> AnyVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(AnyVector self, std::vector< openplx::Core::Any >::difference_type i) -> Any

        Parameters
        ----------
        i: std::vector< openplx::Core::Any >::difference_type

        """
        return _CorePythonSwig.AnyVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(AnyVector self, PySliceObject * slice, AnyVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        __setitem__(AnyVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(AnyVector self, std::vector< openplx::Core::Any >::difference_type i, Any x)

        Parameters
        ----------
        i: std::vector< openplx::Core::Any >::difference_type
        x: std::vector< openplx::Core::Any >::value_type const &

        """
        return _CorePythonSwig.AnyVector___setitem__(self, *args)

    def pop(self):
        r"""pop(AnyVector self) -> Any"""
        return _CorePythonSwig.AnyVector_pop(self)

    def append(self, x):
        r"""
        append(AnyVector self, Any x)

        Parameters
        ----------
        x: std::vector< openplx::Core::Any >::value_type const &

        """
        return _CorePythonSwig.AnyVector_append(self, x)

    def empty(self):
        r"""empty(AnyVector self) -> bool"""
        return _CorePythonSwig.AnyVector_empty(self)

    def size(self):
        r"""size(AnyVector self) -> std::vector< openplx::Core::Any >::size_type"""
        return _CorePythonSwig.AnyVector_size(self)

    def swap(self, v):
        r"""
        swap(AnyVector self, AnyVector v)

        Parameters
        ----------
        v: std::vector< openplx::Core::Any > &

        """
        return _CorePythonSwig.AnyVector_swap(self, v)

    def begin(self):
        r"""begin(AnyVector self) -> std::vector< openplx::Core::Any >::iterator"""
        return _CorePythonSwig.AnyVector_begin(self)

    def end(self):
        r"""end(AnyVector self) -> std::vector< openplx::Core::Any >::iterator"""
        return _CorePythonSwig.AnyVector_end(self)

    def rbegin(self):
        r"""rbegin(AnyVector self) -> std::vector< openplx::Core::Any >::reverse_iterator"""
        return _CorePythonSwig.AnyVector_rbegin(self)

    def rend(self):
        r"""rend(AnyVector self) -> std::vector< openplx::Core::Any >::reverse_iterator"""
        return _CorePythonSwig.AnyVector_rend(self)

    def clear(self):
        r"""clear(AnyVector self)"""
        return _CorePythonSwig.AnyVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(AnyVector self) -> std::vector< openplx::Core::Any >::allocator_type"""
        return _CorePythonSwig.AnyVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(AnyVector self)"""
        return _CorePythonSwig.AnyVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(AnyVector self, std::vector< openplx::Core::Any >::iterator pos) -> std::vector< openplx::Core::Any >::iterator

        Parameters
        ----------
        pos: std::vector< openplx::Core::Any >::iterator

        erase(AnyVector self, std::vector< openplx::Core::Any >::iterator first, std::vector< openplx::Core::Any >::iterator last) -> std::vector< openplx::Core::Any >::iterator

        Parameters
        ----------
        first: std::vector< openplx::Core::Any >::iterator
        last: std::vector< openplx::Core::Any >::iterator

        """
        return _CorePythonSwig.AnyVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(AnyVector self) -> AnyVector
        __init__(AnyVector self, AnyVector other) -> AnyVector

        Parameters
        ----------
        other: std::vector< openplx::Core::Any > const &

        __init__(AnyVector self, std::vector< openplx::Core::Any >::size_type size) -> AnyVector

        Parameters
        ----------
        size: std::vector< openplx::Core::Any >::size_type

        __init__(AnyVector self, std::vector< openplx::Core::Any >::size_type size, Any value) -> AnyVector

        Parameters
        ----------
        size: std::vector< openplx::Core::Any >::size_type
        value: std::vector< openplx::Core::Any >::value_type const &

        """
        _CorePythonSwig.AnyVector_swiginit(self, _CorePythonSwig.new_AnyVector(*args))

    def push_back(self, x):
        r"""
        push_back(AnyVector self, Any x)

        Parameters
        ----------
        x: std::vector< openplx::Core::Any >::value_type const &

        """
        return _CorePythonSwig.AnyVector_push_back(self, x)

    def front(self):
        r"""front(AnyVector self) -> Any"""
        return _CorePythonSwig.AnyVector_front(self)

    def back(self):
        r"""back(AnyVector self) -> Any"""
        return _CorePythonSwig.AnyVector_back(self)

    def assign(self, n, x):
        r"""
        assign(AnyVector self, std::vector< openplx::Core::Any >::size_type n, Any x)

        Parameters
        ----------
        n: std::vector< openplx::Core::Any >::size_type
        x: std::vector< openplx::Core::Any >::value_type const &

        """
        return _CorePythonSwig.AnyVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(AnyVector self, std::vector< openplx::Core::Any >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< openplx::Core::Any >::size_type

        resize(AnyVector self, std::vector< openplx::Core::Any >::size_type new_size, Any x)

        Parameters
        ----------
        new_size: std::vector< openplx::Core::Any >::size_type
        x: std::vector< openplx::Core::Any >::value_type const &

        """
        return _CorePythonSwig.AnyVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(AnyVector self, std::vector< openplx::Core::Any >::iterator pos, Any x) -> std::vector< openplx::Core::Any >::iterator

        Parameters
        ----------
        pos: std::vector< openplx::Core::Any >::iterator
        x: std::vector< openplx::Core::Any >::value_type const &

        insert(AnyVector self, std::vector< openplx::Core::Any >::iterator pos, std::vector< openplx::Core::Any >::size_type n, Any x)

        Parameters
        ----------
        pos: std::vector< openplx::Core::Any >::iterator
        n: std::vector< openplx::Core::Any >::size_type
        x: std::vector< openplx::Core::Any >::value_type const &

        """
        return _CorePythonSwig.AnyVector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(AnyVector self, std::vector< openplx::Core::Any >::size_type n)

        Parameters
        ----------
        n: std::vector< openplx::Core::Any >::size_type

        """
        return _CorePythonSwig.AnyVector_reserve(self, n)

    def capacity(self):
        r"""capacity(AnyVector self) -> std::vector< openplx::Core::Any >::size_type"""
        return _CorePythonSwig.AnyVector_capacity(self)
    __swig_destroy__ = _CorePythonSwig.delete_AnyVector

# Register AnyVector in _CorePythonSwig:
_CorePythonSwig.AnyVector_swigregister(AnyVector)

class StringVector(object):
    r"""Proxy of C++ std::vector< std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(StringVector self) -> SwigPyIterator"""
        return _CorePythonSwig.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(StringVector self) -> bool"""
        return _CorePythonSwig.StringVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(StringVector self) -> bool"""
        return _CorePythonSwig.StringVector___bool__(self)

    def __len__(self):
        r"""__len__(StringVector self) -> std::vector< std::string >::size_type"""
        return _CorePythonSwig.StringVector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> StringVector

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        """
        return _CorePythonSwig.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        __setslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, StringVector v)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type
        v: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _CorePythonSwig.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        """
        return _CorePythonSwig.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(StringVector self, std::vector< std::string >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type

        __delitem__(StringVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _CorePythonSwig.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(StringVector self, PySliceObject * slice) -> StringVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(StringVector self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &

        Parameters
        ----------
        i: std::vector< std::string >::difference_type

        """
        return _CorePythonSwig.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(StringVector self, PySliceObject * slice, StringVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::string,std::allocator< std::string > > const &

        __setitem__(StringVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        x: std::vector< std::string >::value_type const &

        """
        return _CorePythonSwig.StringVector___setitem__(self, *args)

    def pop(self):
        r"""pop(StringVector self) -> std::vector< std::string >::value_type"""
        return _CorePythonSwig.StringVector_pop(self)

    def append(self, x):
        r"""
        append(StringVector self, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::string >::value_type const &

        """
        return _CorePythonSwig.StringVector_append(self, x)

    def empty(self):
        r"""empty(StringVector self) -> bool"""
        return _CorePythonSwig.StringVector_empty(self)

    def size(self):
        r"""size(StringVector self) -> std::vector< std::string >::size_type"""
        return _CorePythonSwig.StringVector_size(self)

    def swap(self, v):
        r"""
        swap(StringVector self, StringVector v)

        Parameters
        ----------
        v: std::vector< std::string > &

        """
        return _CorePythonSwig.StringVector_swap(self, v)

    def begin(self):
        r"""begin(StringVector self) -> std::vector< std::string >::iterator"""
        return _CorePythonSwig.StringVector_begin(self)

    def end(self):
        r"""end(StringVector self) -> std::vector< std::string >::iterator"""
        return _CorePythonSwig.StringVector_end(self)

    def rbegin(self):
        r"""rbegin(StringVector self) -> std::vector< std::string >::reverse_iterator"""
        return _CorePythonSwig.StringVector_rbegin(self)

    def rend(self):
        r"""rend(StringVector self) -> std::vector< std::string >::reverse_iterator"""
        return _CorePythonSwig.StringVector_rend(self)

    def clear(self):
        r"""clear(StringVector self)"""
        return _CorePythonSwig.StringVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(StringVector self) -> std::vector< std::string >::allocator_type"""
        return _CorePythonSwig.StringVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(StringVector self)"""
        return _CorePythonSwig.StringVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(StringVector self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator

        Parameters
        ----------
        pos: std::vector< std::string >::iterator

        erase(StringVector self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator

        Parameters
        ----------
        first: std::vector< std::string >::iterator
        last: std::vector< std::string >::iterator

        """
        return _CorePythonSwig.StringVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(StringVector self) -> StringVector
        __init__(StringVector self, StringVector other) -> StringVector

        Parameters
        ----------
        other: std::vector< std::string > const &

        __init__(StringVector self, std::vector< std::string >::size_type size) -> StringVector

        Parameters
        ----------
        size: std::vector< std::string >::size_type

        __init__(StringVector self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> StringVector

        Parameters
        ----------
        size: std::vector< std::string >::size_type
        value: std::vector< std::string >::value_type const &

        """
        _CorePythonSwig.StringVector_swiginit(self, _CorePythonSwig.new_StringVector(*args))

    def push_back(self, x):
        r"""
        push_back(StringVector self, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::string >::value_type const &

        """
        return _CorePythonSwig.StringVector_push_back(self, x)

    def front(self):
        r"""front(StringVector self) -> std::vector< std::string >::value_type const &"""
        return _CorePythonSwig.StringVector_front(self)

    def back(self):
        r"""back(StringVector self) -> std::vector< std::string >::value_type const &"""
        return _CorePythonSwig.StringVector_back(self)

    def assign(self, n, x):
        r"""
        assign(StringVector self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _CorePythonSwig.StringVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(StringVector self, std::vector< std::string >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::string >::size_type

        resize(StringVector self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _CorePythonSwig.StringVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(StringVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator

        Parameters
        ----------
        pos: std::vector< std::string >::iterator
        x: std::vector< std::string >::value_type const &

        insert(StringVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::string >::iterator
        n: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _CorePythonSwig.StringVector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(StringVector self, std::vector< std::string >::size_type n)

        Parameters
        ----------
        n: std::vector< std::string >::size_type

        """
        return _CorePythonSwig.StringVector_reserve(self, n)

    def capacity(self):
        r"""capacity(StringVector self) -> std::vector< std::string >::size_type"""
        return _CorePythonSwig.StringVector_capacity(self)
    __swig_destroy__ = _CorePythonSwig.delete_StringVector

# Register StringVector in _CorePythonSwig:
_CorePythonSwig.StringVector_swigregister(StringVector)

class DoubleVector(object):
    r"""Proxy of C++ std::vector< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DoubleVector self) -> SwigPyIterator"""
        return _CorePythonSwig.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DoubleVector self) -> bool"""
        return _CorePythonSwig.DoubleVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DoubleVector self) -> bool"""
        return _CorePythonSwig.DoubleVector___bool__(self)

    def __len__(self):
        r"""__len__(DoubleVector self) -> std::vector< double >::size_type"""
        return _CorePythonSwig.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> DoubleVector

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        """
        return _CorePythonSwig.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        __setslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, DoubleVector v)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type
        v: std::vector< double,std::allocator< double > > const &

        """
        return _CorePythonSwig.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        """
        return _CorePythonSwig.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DoubleVector self, std::vector< double >::difference_type i)

        Parameters
        ----------
        i: std::vector< double >::difference_type

        __delitem__(DoubleVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _CorePythonSwig.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DoubleVector self, PySliceObject * slice) -> DoubleVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DoubleVector self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &

        Parameters
        ----------
        i: std::vector< double >::difference_type

        """
        return _CorePythonSwig.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DoubleVector self, PySliceObject * slice, DoubleVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< double,std::allocator< double > > const &

        __setitem__(DoubleVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        x: std::vector< double >::value_type const &

        """
        return _CorePythonSwig.DoubleVector___setitem__(self, *args)

    def pop(self):
        r"""pop(DoubleVector self) -> std::vector< double >::value_type"""
        return _CorePythonSwig.DoubleVector_pop(self)

    def append(self, x):
        r"""
        append(DoubleVector self, std::vector< double >::value_type const & x)

        Parameters
        ----------
        x: std::vector< double >::value_type const &

        """
        return _CorePythonSwig.DoubleVector_append(self, x)

    def empty(self):
        r"""empty(DoubleVector self) -> bool"""
        return _CorePythonSwig.DoubleVector_empty(self)

    def size(self):
        r"""size(DoubleVector self) -> std::vector< double >::size_type"""
        return _CorePythonSwig.DoubleVector_size(self)

    def swap(self, v):
        r"""
        swap(DoubleVector self, DoubleVector v)

        Parameters
        ----------
        v: std::vector< double > &

        """
        return _CorePythonSwig.DoubleVector_swap(self, v)

    def begin(self):
        r"""begin(DoubleVector self) -> std::vector< double >::iterator"""
        return _CorePythonSwig.DoubleVector_begin(self)

    def end(self):
        r"""end(DoubleVector self) -> std::vector< double >::iterator"""
        return _CorePythonSwig.DoubleVector_end(self)

    def rbegin(self):
        r"""rbegin(DoubleVector self) -> std::vector< double >::reverse_iterator"""
        return _CorePythonSwig.DoubleVector_rbegin(self)

    def rend(self):
        r"""rend(DoubleVector self) -> std::vector< double >::reverse_iterator"""
        return _CorePythonSwig.DoubleVector_rend(self)

    def clear(self):
        r"""clear(DoubleVector self)"""
        return _CorePythonSwig.DoubleVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DoubleVector self) -> std::vector< double >::allocator_type"""
        return _CorePythonSwig.DoubleVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DoubleVector self)"""
        return _CorePythonSwig.DoubleVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DoubleVector self, std::vector< double >::iterator pos) -> std::vector< double >::iterator

        Parameters
        ----------
        pos: std::vector< double >::iterator

        erase(DoubleVector self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator

        Parameters
        ----------
        first: std::vector< double >::iterator
        last: std::vector< double >::iterator

        """
        return _CorePythonSwig.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DoubleVector self) -> DoubleVector
        __init__(DoubleVector self, DoubleVector other) -> DoubleVector

        Parameters
        ----------
        other: std::vector< double > const &

        __init__(DoubleVector self, std::vector< double >::size_type size) -> DoubleVector

        Parameters
        ----------
        size: std::vector< double >::size_type

        __init__(DoubleVector self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> DoubleVector

        Parameters
        ----------
        size: std::vector< double >::size_type
        value: std::vector< double >::value_type const &

        """
        _CorePythonSwig.DoubleVector_swiginit(self, _CorePythonSwig.new_DoubleVector(*args))

    def push_back(self, x):
        r"""
        push_back(DoubleVector self, std::vector< double >::value_type const & x)

        Parameters
        ----------
        x: std::vector< double >::value_type const &

        """
        return _CorePythonSwig.DoubleVector_push_back(self, x)

    def front(self):
        r"""front(DoubleVector self) -> std::vector< double >::value_type const &"""
        return _CorePythonSwig.DoubleVector_front(self)

    def back(self):
        r"""back(DoubleVector self) -> std::vector< double >::value_type const &"""
        return _CorePythonSwig.DoubleVector_back(self)

    def assign(self, n, x):
        r"""
        assign(DoubleVector self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)

        Parameters
        ----------
        n: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _CorePythonSwig.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DoubleVector self, std::vector< double >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< double >::size_type

        resize(DoubleVector self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _CorePythonSwig.DoubleVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DoubleVector self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator

        Parameters
        ----------
        pos: std::vector< double >::iterator
        x: std::vector< double >::value_type const &

        insert(DoubleVector self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< double >::iterator
        n: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _CorePythonSwig.DoubleVector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(DoubleVector self, std::vector< double >::size_type n)

        Parameters
        ----------
        n: std::vector< double >::size_type

        """
        return _CorePythonSwig.DoubleVector_reserve(self, n)

    def capacity(self):
        r"""capacity(DoubleVector self) -> std::vector< double >::size_type"""
        return _CorePythonSwig.DoubleVector_capacity(self)
    __swig_destroy__ = _CorePythonSwig.delete_DoubleVector

# Register DoubleVector in _CorePythonSwig:
_CorePythonSwig.DoubleVector_swigregister(DoubleVector)

class BoolVector(object):
    r"""Proxy of C++ std::vector< bool > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(BoolVector self) -> SwigPyIterator"""
        return _CorePythonSwig.BoolVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(BoolVector self) -> bool"""
        return _CorePythonSwig.BoolVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(BoolVector self) -> bool"""
        return _CorePythonSwig.BoolVector___bool__(self)

    def __len__(self):
        r"""__len__(BoolVector self) -> std::vector< bool >::size_type"""
        return _CorePythonSwig.BoolVector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(BoolVector self, std::vector< bool >::difference_type i, std::vector< bool >::difference_type j) -> BoolVector

        Parameters
        ----------
        i: std::vector< bool >::difference_type
        j: std::vector< bool >::difference_type

        """
        return _CorePythonSwig.BoolVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(BoolVector self, std::vector< bool >::difference_type i, std::vector< bool >::difference_type j)

        Parameters
        ----------
        i: std::vector< bool >::difference_type
        j: std::vector< bool >::difference_type

        __setslice__(BoolVector self, std::vector< bool >::difference_type i, std::vector< bool >::difference_type j, BoolVector v)

        Parameters
        ----------
        i: std::vector< bool >::difference_type
        j: std::vector< bool >::difference_type
        v: std::vector< bool,std::allocator< bool > > const &

        """
        return _CorePythonSwig.BoolVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(BoolVector self, std::vector< bool >::difference_type i, std::vector< bool >::difference_type j)

        Parameters
        ----------
        i: std::vector< bool >::difference_type
        j: std::vector< bool >::difference_type

        """
        return _CorePythonSwig.BoolVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(BoolVector self, std::vector< bool >::difference_type i)

        Parameters
        ----------
        i: std::vector< bool >::difference_type

        __delitem__(BoolVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _CorePythonSwig.BoolVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(BoolVector self, PySliceObject * slice) -> BoolVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(BoolVector self, std::vector< bool >::difference_type i) -> std::vector< bool >::value_type

        Parameters
        ----------
        i: std::vector< bool >::difference_type

        """
        return _CorePythonSwig.BoolVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(BoolVector self, PySliceObject * slice, BoolVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< bool,std::allocator< bool > > const &

        __setitem__(BoolVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(BoolVector self, std::vector< bool >::difference_type i, std::vector< bool >::value_type x)

        Parameters
        ----------
        i: std::vector< bool >::difference_type
        x: std::vector< bool >::value_type

        """
        return _CorePythonSwig.BoolVector___setitem__(self, *args)

    def pop(self):
        r"""pop(BoolVector self) -> std::vector< bool >::value_type"""
        return _CorePythonSwig.BoolVector_pop(self)

    def append(self, x):
        r"""
        append(BoolVector self, std::vector< bool >::value_type x)

        Parameters
        ----------
        x: std::vector< bool >::value_type

        """
        return _CorePythonSwig.BoolVector_append(self, x)

    def empty(self):
        r"""empty(BoolVector self) -> bool"""
        return _CorePythonSwig.BoolVector_empty(self)

    def size(self):
        r"""size(BoolVector self) -> std::vector< bool >::size_type"""
        return _CorePythonSwig.BoolVector_size(self)

    def swap(self, v):
        r"""
        swap(BoolVector self, BoolVector v)

        Parameters
        ----------
        v: std::vector< bool > &

        """
        return _CorePythonSwig.BoolVector_swap(self, v)

    def begin(self):
        r"""begin(BoolVector self) -> std::vector< bool >::iterator"""
        return _CorePythonSwig.BoolVector_begin(self)

    def end(self):
        r"""end(BoolVector self) -> std::vector< bool >::iterator"""
        return _CorePythonSwig.BoolVector_end(self)

    def rbegin(self):
        r"""rbegin(BoolVector self) -> std::vector< bool >::reverse_iterator"""
        return _CorePythonSwig.BoolVector_rbegin(self)

    def rend(self):
        r"""rend(BoolVector self) -> std::vector< bool >::reverse_iterator"""
        return _CorePythonSwig.BoolVector_rend(self)

    def clear(self):
        r"""clear(BoolVector self)"""
        return _CorePythonSwig.BoolVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(BoolVector self) -> std::vector< bool >::allocator_type"""
        return _CorePythonSwig.BoolVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(BoolVector self)"""
        return _CorePythonSwig.BoolVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(BoolVector self, std::vector< bool >::iterator pos) -> std::vector< bool >::iterator

        Parameters
        ----------
        pos: std::vector< bool >::iterator

        erase(BoolVector self, std::vector< bool >::iterator first, std::vector< bool >::iterator last) -> std::vector< bool >::iterator

        Parameters
        ----------
        first: std::vector< bool >::iterator
        last: std::vector< bool >::iterator

        """
        return _CorePythonSwig.BoolVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(BoolVector self) -> BoolVector
        __init__(BoolVector self, BoolVector other) -> BoolVector

        Parameters
        ----------
        other: std::vector< bool > const &

        __init__(BoolVector self, std::vector< bool >::size_type size) -> BoolVector

        Parameters
        ----------
        size: std::vector< bool >::size_type

        __init__(BoolVector self, std::vector< bool >::size_type size, std::vector< bool >::value_type value) -> BoolVector

        Parameters
        ----------
        size: std::vector< bool >::size_type
        value: std::vector< bool >::value_type

        """
        _CorePythonSwig.BoolVector_swiginit(self, _CorePythonSwig.new_BoolVector(*args))

    def push_back(self, x):
        r"""
        push_back(BoolVector self, std::vector< bool >::value_type x)

        Parameters
        ----------
        x: std::vector< bool >::value_type

        """
        return _CorePythonSwig.BoolVector_push_back(self, x)

    def front(self):
        r"""front(BoolVector self) -> std::vector< bool >::value_type"""
        return _CorePythonSwig.BoolVector_front(self)

    def back(self):
        r"""back(BoolVector self) -> std::vector< bool >::value_type"""
        return _CorePythonSwig.BoolVector_back(self)

    def assign(self, n, x):
        r"""
        assign(BoolVector self, std::vector< bool >::size_type n, std::vector< bool >::value_type x)

        Parameters
        ----------
        n: std::vector< bool >::size_type
        x: std::vector< bool >::value_type

        """
        return _CorePythonSwig.BoolVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(BoolVector self, std::vector< bool >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< bool >::size_type

        resize(BoolVector self, std::vector< bool >::size_type new_size, std::vector< bool >::value_type x)

        Parameters
        ----------
        new_size: std::vector< bool >::size_type
        x: std::vector< bool >::value_type

        """
        return _CorePythonSwig.BoolVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(BoolVector self, std::vector< bool >::iterator pos, std::vector< bool >::value_type x) -> std::vector< bool >::iterator

        Parameters
        ----------
        pos: std::vector< bool >::iterator
        x: std::vector< bool >::value_type

        insert(BoolVector self, std::vector< bool >::iterator pos, std::vector< bool >::size_type n, std::vector< bool >::value_type x)

        Parameters
        ----------
        pos: std::vector< bool >::iterator
        n: std::vector< bool >::size_type
        x: std::vector< bool >::value_type

        """
        return _CorePythonSwig.BoolVector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(BoolVector self, std::vector< bool >::size_type n)

        Parameters
        ----------
        n: std::vector< bool >::size_type

        """
        return _CorePythonSwig.BoolVector_reserve(self, n)

    def capacity(self):
        r"""capacity(BoolVector self) -> std::vector< bool >::size_type"""
        return _CorePythonSwig.BoolVector_capacity(self)
    __swig_destroy__ = _CorePythonSwig.delete_BoolVector

# Register BoolVector in _CorePythonSwig:
_CorePythonSwig.BoolVector_swigregister(BoolVector)

class UIntVector(object):
    r"""Proxy of C++ std::vector< uint64_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(UIntVector self) -> SwigPyIterator"""
        return _CorePythonSwig.UIntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(UIntVector self) -> bool"""
        return _CorePythonSwig.UIntVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(UIntVector self) -> bool"""
        return _CorePythonSwig.UIntVector___bool__(self)

    def __len__(self):
        r"""__len__(UIntVector self) -> std::vector< uint64_t >::size_type"""
        return _CorePythonSwig.UIntVector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(UIntVector self, std::vector< uint64_t >::difference_type i, std::vector< uint64_t >::difference_type j) -> UIntVector

        Parameters
        ----------
        i: std::vector< uint64_t >::difference_type
        j: std::vector< uint64_t >::difference_type

        """
        return _CorePythonSwig.UIntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(UIntVector self, std::vector< uint64_t >::difference_type i, std::vector< uint64_t >::difference_type j)

        Parameters
        ----------
        i: std::vector< uint64_t >::difference_type
        j: std::vector< uint64_t >::difference_type

        __setslice__(UIntVector self, std::vector< uint64_t >::difference_type i, std::vector< uint64_t >::difference_type j, UIntVector v)

        Parameters
        ----------
        i: std::vector< uint64_t >::difference_type
        j: std::vector< uint64_t >::difference_type
        v: std::vector< uint64_t,std::allocator< uint64_t > > const &

        """
        return _CorePythonSwig.UIntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(UIntVector self, std::vector< uint64_t >::difference_type i, std::vector< uint64_t >::difference_type j)

        Parameters
        ----------
        i: std::vector< uint64_t >::difference_type
        j: std::vector< uint64_t >::difference_type

        """
        return _CorePythonSwig.UIntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(UIntVector self, std::vector< uint64_t >::difference_type i)

        Parameters
        ----------
        i: std::vector< uint64_t >::difference_type

        __delitem__(UIntVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _CorePythonSwig.UIntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(UIntVector self, PySliceObject * slice) -> UIntVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(UIntVector self, std::vector< uint64_t >::difference_type i) -> std::vector< uint64_t >::value_type const &

        Parameters
        ----------
        i: std::vector< uint64_t >::difference_type

        """
        return _CorePythonSwig.UIntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(UIntVector self, PySliceObject * slice, UIntVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< uint64_t,std::allocator< uint64_t > > const &

        __setitem__(UIntVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(UIntVector self, std::vector< uint64_t >::difference_type i, std::vector< uint64_t >::value_type const & x)

        Parameters
        ----------
        i: std::vector< uint64_t >::difference_type
        x: std::vector< uint64_t >::value_type const &

        """
        return _CorePythonSwig.UIntVector___setitem__(self, *args)

    def pop(self):
        r"""pop(UIntVector self) -> std::vector< uint64_t >::value_type"""
        return _CorePythonSwig.UIntVector_pop(self)

    def append(self, x):
        r"""
        append(UIntVector self, std::vector< uint64_t >::value_type const & x)

        Parameters
        ----------
        x: std::vector< uint64_t >::value_type const &

        """
        return _CorePythonSwig.UIntVector_append(self, x)

    def empty(self):
        r"""empty(UIntVector self) -> bool"""
        return _CorePythonSwig.UIntVector_empty(self)

    def size(self):
        r"""size(UIntVector self) -> std::vector< uint64_t >::size_type"""
        return _CorePythonSwig.UIntVector_size(self)

    def swap(self, v):
        r"""
        swap(UIntVector self, UIntVector v)

        Parameters
        ----------
        v: std::vector< uint64_t > &

        """
        return _CorePythonSwig.UIntVector_swap(self, v)

    def begin(self):
        r"""begin(UIntVector self) -> std::vector< uint64_t >::iterator"""
        return _CorePythonSwig.UIntVector_begin(self)

    def end(self):
        r"""end(UIntVector self) -> std::vector< uint64_t >::iterator"""
        return _CorePythonSwig.UIntVector_end(self)

    def rbegin(self):
        r"""rbegin(UIntVector self) -> std::vector< uint64_t >::reverse_iterator"""
        return _CorePythonSwig.UIntVector_rbegin(self)

    def rend(self):
        r"""rend(UIntVector self) -> std::vector< uint64_t >::reverse_iterator"""
        return _CorePythonSwig.UIntVector_rend(self)

    def clear(self):
        r"""clear(UIntVector self)"""
        return _CorePythonSwig.UIntVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(UIntVector self) -> std::vector< uint64_t >::allocator_type"""
        return _CorePythonSwig.UIntVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(UIntVector self)"""
        return _CorePythonSwig.UIntVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(UIntVector self, std::vector< uint64_t >::iterator pos) -> std::vector< uint64_t >::iterator

        Parameters
        ----------
        pos: std::vector< uint64_t >::iterator

        erase(UIntVector self, std::vector< uint64_t >::iterator first, std::vector< uint64_t >::iterator last) -> std::vector< uint64_t >::iterator

        Parameters
        ----------
        first: std::vector< uint64_t >::iterator
        last: std::vector< uint64_t >::iterator

        """
        return _CorePythonSwig.UIntVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(UIntVector self) -> UIntVector
        __init__(UIntVector self, UIntVector other) -> UIntVector

        Parameters
        ----------
        other: std::vector< uint64_t > const &

        __init__(UIntVector self, std::vector< uint64_t >::size_type size) -> UIntVector

        Parameters
        ----------
        size: std::vector< uint64_t >::size_type

        __init__(UIntVector self, std::vector< uint64_t >::size_type size, std::vector< uint64_t >::value_type const & value) -> UIntVector

        Parameters
        ----------
        size: std::vector< uint64_t >::size_type
        value: std::vector< uint64_t >::value_type const &

        """
        _CorePythonSwig.UIntVector_swiginit(self, _CorePythonSwig.new_UIntVector(*args))

    def push_back(self, x):
        r"""
        push_back(UIntVector self, std::vector< uint64_t >::value_type const & x)

        Parameters
        ----------
        x: std::vector< uint64_t >::value_type const &

        """
        return _CorePythonSwig.UIntVector_push_back(self, x)

    def front(self):
        r"""front(UIntVector self) -> std::vector< uint64_t >::value_type const &"""
        return _CorePythonSwig.UIntVector_front(self)

    def back(self):
        r"""back(UIntVector self) -> std::vector< uint64_t >::value_type const &"""
        return _CorePythonSwig.UIntVector_back(self)

    def assign(self, n, x):
        r"""
        assign(UIntVector self, std::vector< uint64_t >::size_type n, std::vector< uint64_t >::value_type const & x)

        Parameters
        ----------
        n: std::vector< uint64_t >::size_type
        x: std::vector< uint64_t >::value_type const &

        """
        return _CorePythonSwig.UIntVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(UIntVector self, std::vector< uint64_t >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< uint64_t >::size_type

        resize(UIntVector self, std::vector< uint64_t >::size_type new_size, std::vector< uint64_t >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< uint64_t >::size_type
        x: std::vector< uint64_t >::value_type const &

        """
        return _CorePythonSwig.UIntVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(UIntVector self, std::vector< uint64_t >::iterator pos, std::vector< uint64_t >::value_type const & x) -> std::vector< uint64_t >::iterator

        Parameters
        ----------
        pos: std::vector< uint64_t >::iterator
        x: std::vector< uint64_t >::value_type const &

        insert(UIntVector self, std::vector< uint64_t >::iterator pos, std::vector< uint64_t >::size_type n, std::vector< uint64_t >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< uint64_t >::iterator
        n: std::vector< uint64_t >::size_type
        x: std::vector< uint64_t >::value_type const &

        """
        return _CorePythonSwig.UIntVector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(UIntVector self, std::vector< uint64_t >::size_type n)

        Parameters
        ----------
        n: std::vector< uint64_t >::size_type

        """
        return _CorePythonSwig.UIntVector_reserve(self, n)

    def capacity(self):
        r"""capacity(UIntVector self) -> std::vector< uint64_t >::size_type"""
        return _CorePythonSwig.UIntVector_capacity(self)
    __swig_destroy__ = _CorePythonSwig.delete_UIntVector

# Register UIntVector in _CorePythonSwig:
_CorePythonSwig.UIntVector_swigregister(UIntVector)

class IntVector(object):
    r"""Proxy of C++ std::vector< int64_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(IntVector self) -> SwigPyIterator"""
        return _CorePythonSwig.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(IntVector self) -> bool"""
        return _CorePythonSwig.IntVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(IntVector self) -> bool"""
        return _CorePythonSwig.IntVector___bool__(self)

    def __len__(self):
        r"""__len__(IntVector self) -> std::vector< int64_t >::size_type"""
        return _CorePythonSwig.IntVector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(IntVector self, std::vector< int64_t >::difference_type i, std::vector< int64_t >::difference_type j) -> IntVector

        Parameters
        ----------
        i: std::vector< int64_t >::difference_type
        j: std::vector< int64_t >::difference_type

        """
        return _CorePythonSwig.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(IntVector self, std::vector< int64_t >::difference_type i, std::vector< int64_t >::difference_type j)

        Parameters
        ----------
        i: std::vector< int64_t >::difference_type
        j: std::vector< int64_t >::difference_type

        __setslice__(IntVector self, std::vector< int64_t >::difference_type i, std::vector< int64_t >::difference_type j, IntVector v)

        Parameters
        ----------
        i: std::vector< int64_t >::difference_type
        j: std::vector< int64_t >::difference_type
        v: std::vector< int64_t,std::allocator< int64_t > > const &

        """
        return _CorePythonSwig.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(IntVector self, std::vector< int64_t >::difference_type i, std::vector< int64_t >::difference_type j)

        Parameters
        ----------
        i: std::vector< int64_t >::difference_type
        j: std::vector< int64_t >::difference_type

        """
        return _CorePythonSwig.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(IntVector self, std::vector< int64_t >::difference_type i)

        Parameters
        ----------
        i: std::vector< int64_t >::difference_type

        __delitem__(IntVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _CorePythonSwig.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(IntVector self, PySliceObject * slice) -> IntVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(IntVector self, std::vector< int64_t >::difference_type i) -> std::vector< int64_t >::value_type const &

        Parameters
        ----------
        i: std::vector< int64_t >::difference_type

        """
        return _CorePythonSwig.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(IntVector self, PySliceObject * slice, IntVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< int64_t,std::allocator< int64_t > > const &

        __setitem__(IntVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(IntVector self, std::vector< int64_t >::difference_type i, std::vector< int64_t >::value_type const & x)

        Parameters
        ----------
        i: std::vector< int64_t >::difference_type
        x: std::vector< int64_t >::value_type const &

        """
        return _CorePythonSwig.IntVector___setitem__(self, *args)

    def pop(self):
        r"""pop(IntVector self) -> std::vector< int64_t >::value_type"""
        return _CorePythonSwig.IntVector_pop(self)

    def append(self, x):
        r"""
        append(IntVector self, std::vector< int64_t >::value_type const & x)

        Parameters
        ----------
        x: std::vector< int64_t >::value_type const &

        """
        return _CorePythonSwig.IntVector_append(self, x)

    def empty(self):
        r"""empty(IntVector self) -> bool"""
        return _CorePythonSwig.IntVector_empty(self)

    def size(self):
        r"""size(IntVector self) -> std::vector< int64_t >::size_type"""
        return _CorePythonSwig.IntVector_size(self)

    def swap(self, v):
        r"""
        swap(IntVector self, IntVector v)

        Parameters
        ----------
        v: std::vector< int64_t > &

        """
        return _CorePythonSwig.IntVector_swap(self, v)

    def begin(self):
        r"""begin(IntVector self) -> std::vector< int64_t >::iterator"""
        return _CorePythonSwig.IntVector_begin(self)

    def end(self):
        r"""end(IntVector self) -> std::vector< int64_t >::iterator"""
        return _CorePythonSwig.IntVector_end(self)

    def rbegin(self):
        r"""rbegin(IntVector self) -> std::vector< int64_t >::reverse_iterator"""
        return _CorePythonSwig.IntVector_rbegin(self)

    def rend(self):
        r"""rend(IntVector self) -> std::vector< int64_t >::reverse_iterator"""
        return _CorePythonSwig.IntVector_rend(self)

    def clear(self):
        r"""clear(IntVector self)"""
        return _CorePythonSwig.IntVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(IntVector self) -> std::vector< int64_t >::allocator_type"""
        return _CorePythonSwig.IntVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(IntVector self)"""
        return _CorePythonSwig.IntVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(IntVector self, std::vector< int64_t >::iterator pos) -> std::vector< int64_t >::iterator

        Parameters
        ----------
        pos: std::vector< int64_t >::iterator

        erase(IntVector self, std::vector< int64_t >::iterator first, std::vector< int64_t >::iterator last) -> std::vector< int64_t >::iterator

        Parameters
        ----------
        first: std::vector< int64_t >::iterator
        last: std::vector< int64_t >::iterator

        """
        return _CorePythonSwig.IntVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(IntVector self) -> IntVector
        __init__(IntVector self, IntVector other) -> IntVector

        Parameters
        ----------
        other: std::vector< int64_t > const &

        __init__(IntVector self, std::vector< int64_t >::size_type size) -> IntVector

        Parameters
        ----------
        size: std::vector< int64_t >::size_type

        __init__(IntVector self, std::vector< int64_t >::size_type size, std::vector< int64_t >::value_type const & value) -> IntVector

        Parameters
        ----------
        size: std::vector< int64_t >::size_type
        value: std::vector< int64_t >::value_type const &

        """
        _CorePythonSwig.IntVector_swiginit(self, _CorePythonSwig.new_IntVector(*args))

    def push_back(self, x):
        r"""
        push_back(IntVector self, std::vector< int64_t >::value_type const & x)

        Parameters
        ----------
        x: std::vector< int64_t >::value_type const &

        """
        return _CorePythonSwig.IntVector_push_back(self, x)

    def front(self):
        r"""front(IntVector self) -> std::vector< int64_t >::value_type const &"""
        return _CorePythonSwig.IntVector_front(self)

    def back(self):
        r"""back(IntVector self) -> std::vector< int64_t >::value_type const &"""
        return _CorePythonSwig.IntVector_back(self)

    def assign(self, n, x):
        r"""
        assign(IntVector self, std::vector< int64_t >::size_type n, std::vector< int64_t >::value_type const & x)

        Parameters
        ----------
        n: std::vector< int64_t >::size_type
        x: std::vector< int64_t >::value_type const &

        """
        return _CorePythonSwig.IntVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(IntVector self, std::vector< int64_t >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< int64_t >::size_type

        resize(IntVector self, std::vector< int64_t >::size_type new_size, std::vector< int64_t >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< int64_t >::size_type
        x: std::vector< int64_t >::value_type const &

        """
        return _CorePythonSwig.IntVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(IntVector self, std::vector< int64_t >::iterator pos, std::vector< int64_t >::value_type const & x) -> std::vector< int64_t >::iterator

        Parameters
        ----------
        pos: std::vector< int64_t >::iterator
        x: std::vector< int64_t >::value_type const &

        insert(IntVector self, std::vector< int64_t >::iterator pos, std::vector< int64_t >::size_type n, std::vector< int64_t >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< int64_t >::iterator
        n: std::vector< int64_t >::size_type
        x: std::vector< int64_t >::value_type const &

        """
        return _CorePythonSwig.IntVector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(IntVector self, std::vector< int64_t >::size_type n)

        Parameters
        ----------
        n: std::vector< int64_t >::size_type

        """
        return _CorePythonSwig.IntVector_reserve(self, n)

    def capacity(self):
        r"""capacity(IntVector self) -> std::vector< int64_t >::size_type"""
        return _CorePythonSwig.IntVector_capacity(self)
    __swig_destroy__ = _CorePythonSwig.delete_IntVector

# Register IntVector in _CorePythonSwig:
_CorePythonSwig.IntVector_swigregister(IntVector)

class PluginVector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Plugin > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(PluginVector self) -> SwigPyIterator"""
        return _CorePythonSwig.PluginVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(PluginVector self) -> bool"""
        return _CorePythonSwig.PluginVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(PluginVector self) -> bool"""
        return _CorePythonSwig.PluginVector___bool__(self)

    def __len__(self):
        r"""__len__(PluginVector self) -> std::vector< std::shared_ptr< openplx::Plugin > >::size_type"""
        return _CorePythonSwig.PluginVector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(PluginVector self, std::vector< std::shared_ptr< openplx::Plugin > >::difference_type i, std::vector< std::shared_ptr< openplx::Plugin > >::difference_type j) -> PluginVector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Plugin > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Plugin > >::difference_type

        """
        return _CorePythonSwig.PluginVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(PluginVector self, std::vector< std::shared_ptr< openplx::Plugin > >::difference_type i, std::vector< std::shared_ptr< openplx::Plugin > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Plugin > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Plugin > >::difference_type

        __setslice__(PluginVector self, std::vector< std::shared_ptr< openplx::Plugin > >::difference_type i, std::vector< std::shared_ptr< openplx::Plugin > >::difference_type j, PluginVector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Plugin > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Plugin > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Plugin >,std::allocator< std::shared_ptr< openplx::Plugin > > > const &

        """
        return _CorePythonSwig.PluginVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(PluginVector self, std::vector< std::shared_ptr< openplx::Plugin > >::difference_type i, std::vector< std::shared_ptr< openplx::Plugin > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Plugin > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Plugin > >::difference_type

        """
        return _CorePythonSwig.PluginVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(PluginVector self, std::vector< std::shared_ptr< openplx::Plugin > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Plugin > >::difference_type

        __delitem__(PluginVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _CorePythonSwig.PluginVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(PluginVector self, PySliceObject * slice) -> PluginVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(PluginVector self, std::vector< std::shared_ptr< openplx::Plugin > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Plugin > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Plugin > >::difference_type

        """
        return _CorePythonSwig.PluginVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(PluginVector self, PySliceObject * slice, PluginVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Plugin >,std::allocator< std::shared_ptr< openplx::Plugin > > > const &

        __setitem__(PluginVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(PluginVector self, std::vector< std::shared_ptr< openplx::Plugin > >::difference_type i, std::vector< std::shared_ptr< openplx::Plugin > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Plugin > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Plugin > >::value_type const &

        """
        return _CorePythonSwig.PluginVector___setitem__(self, *args)

    def pop(self):
        r"""pop(PluginVector self) -> std::vector< std::shared_ptr< openplx::Plugin > >::value_type"""
        return _CorePythonSwig.PluginVector_pop(self)

    def append(self, x):
        r"""
        append(PluginVector self, std::vector< std::shared_ptr< openplx::Plugin > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Plugin > >::value_type const &

        """
        return _CorePythonSwig.PluginVector_append(self, x)

    def empty(self):
        r"""empty(PluginVector self) -> bool"""
        return _CorePythonSwig.PluginVector_empty(self)

    def size(self):
        r"""size(PluginVector self) -> std::vector< std::shared_ptr< openplx::Plugin > >::size_type"""
        return _CorePythonSwig.PluginVector_size(self)

    def swap(self, v):
        r"""
        swap(PluginVector self, PluginVector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Plugin > > &

        """
        return _CorePythonSwig.PluginVector_swap(self, v)

    def begin(self):
        r"""begin(PluginVector self) -> std::vector< std::shared_ptr< openplx::Plugin > >::iterator"""
        return _CorePythonSwig.PluginVector_begin(self)

    def end(self):
        r"""end(PluginVector self) -> std::vector< std::shared_ptr< openplx::Plugin > >::iterator"""
        return _CorePythonSwig.PluginVector_end(self)

    def rbegin(self):
        r"""rbegin(PluginVector self) -> std::vector< std::shared_ptr< openplx::Plugin > >::reverse_iterator"""
        return _CorePythonSwig.PluginVector_rbegin(self)

    def rend(self):
        r"""rend(PluginVector self) -> std::vector< std::shared_ptr< openplx::Plugin > >::reverse_iterator"""
        return _CorePythonSwig.PluginVector_rend(self)

    def clear(self):
        r"""clear(PluginVector self)"""
        return _CorePythonSwig.PluginVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(PluginVector self) -> std::vector< std::shared_ptr< openplx::Plugin > >::allocator_type"""
        return _CorePythonSwig.PluginVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(PluginVector self)"""
        return _CorePythonSwig.PluginVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(PluginVector self, std::vector< std::shared_ptr< openplx::Plugin > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Plugin > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Plugin > >::iterator

        erase(PluginVector self, std::vector< std::shared_ptr< openplx::Plugin > >::iterator first, std::vector< std::shared_ptr< openplx::Plugin > >::iterator last) -> std::vector< std::shared_ptr< openplx::Plugin > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Plugin > >::iterator
        last: std::vector< std::shared_ptr< openplx::Plugin > >::iterator

        """
        return _CorePythonSwig.PluginVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(PluginVector self) -> PluginVector
        __init__(PluginVector self, PluginVector other) -> PluginVector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Plugin > > const &

        __init__(PluginVector self, std::vector< std::shared_ptr< openplx::Plugin > >::size_type size) -> PluginVector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Plugin > >::size_type

        __init__(PluginVector self, std::vector< std::shared_ptr< openplx::Plugin > >::size_type size, std::vector< std::shared_ptr< openplx::Plugin > >::value_type const & value) -> PluginVector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Plugin > >::size_type
        value: std::vector< std::shared_ptr< openplx::Plugin > >::value_type const &

        """
        _CorePythonSwig.PluginVector_swiginit(self, _CorePythonSwig.new_PluginVector(*args))

    def push_back(self, x):
        r"""
        push_back(PluginVector self, std::vector< std::shared_ptr< openplx::Plugin > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Plugin > >::value_type const &

        """
        return _CorePythonSwig.PluginVector_push_back(self, x)

    def front(self):
        r"""front(PluginVector self) -> std::vector< std::shared_ptr< openplx::Plugin > >::value_type const &"""
        return _CorePythonSwig.PluginVector_front(self)

    def back(self):
        r"""back(PluginVector self) -> std::vector< std::shared_ptr< openplx::Plugin > >::value_type const &"""
        return _CorePythonSwig.PluginVector_back(self)

    def assign(self, n, x):
        r"""
        assign(PluginVector self, std::vector< std::shared_ptr< openplx::Plugin > >::size_type n, std::vector< std::shared_ptr< openplx::Plugin > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Plugin > >::size_type
        x: std::vector< std::shared_ptr< openplx::Plugin > >::value_type const &

        """
        return _CorePythonSwig.PluginVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(PluginVector self, std::vector< std::shared_ptr< openplx::Plugin > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Plugin > >::size_type

        resize(PluginVector self, std::vector< std::shared_ptr< openplx::Plugin > >::size_type new_size, std::vector< std::shared_ptr< openplx::Plugin > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Plugin > >::size_type
        x: std::vector< std::shared_ptr< openplx::Plugin > >::value_type const &

        """
        return _CorePythonSwig.PluginVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(PluginVector self, std::vector< std::shared_ptr< openplx::Plugin > >::iterator pos, std::vector< std::shared_ptr< openplx::Plugin > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Plugin > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Plugin > >::iterator
        x: std::vector< std::shared_ptr< openplx::Plugin > >::value_type const &

        insert(PluginVector self, std::vector< std::shared_ptr< openplx::Plugin > >::iterator pos, std::vector< std::shared_ptr< openplx::Plugin > >::size_type n, std::vector< std::shared_ptr< openplx::Plugin > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Plugin > >::iterator
        n: std::vector< std::shared_ptr< openplx::Plugin > >::size_type
        x: std::vector< std::shared_ptr< openplx::Plugin > >::value_type const &

        """
        return _CorePythonSwig.PluginVector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(PluginVector self, std::vector< std::shared_ptr< openplx::Plugin > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Plugin > >::size_type

        """
        return _CorePythonSwig.PluginVector_reserve(self, n)

    def capacity(self):
        r"""capacity(PluginVector self) -> std::vector< std::shared_ptr< openplx::Plugin > >::size_type"""
        return _CorePythonSwig.PluginVector_capacity(self)
    __swig_destroy__ = _CorePythonSwig.delete_PluginVector

# Register PluginVector in _CorePythonSwig:
_CorePythonSwig.PluginVector_swigregister(PluginVector)

class ReplaceOpVector(object):
    r"""Proxy of C++ std::vector< openplx::Refactor::ReplaceOp > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(ReplaceOpVector self) -> SwigPyIterator"""
        return _CorePythonSwig.ReplaceOpVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(ReplaceOpVector self) -> bool"""
        return _CorePythonSwig.ReplaceOpVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(ReplaceOpVector self) -> bool"""
        return _CorePythonSwig.ReplaceOpVector___bool__(self)

    def __len__(self):
        r"""__len__(ReplaceOpVector self) -> std::vector< openplx::Refactor::ReplaceOp >::size_type"""
        return _CorePythonSwig.ReplaceOpVector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(ReplaceOpVector self, std::vector< openplx::Refactor::ReplaceOp >::difference_type i, std::vector< openplx::Refactor::ReplaceOp >::difference_type j) -> ReplaceOpVector

        Parameters
        ----------
        i: std::vector< openplx::Refactor::ReplaceOp >::difference_type
        j: std::vector< openplx::Refactor::ReplaceOp >::difference_type

        """
        return _CorePythonSwig.ReplaceOpVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(ReplaceOpVector self, std::vector< openplx::Refactor::ReplaceOp >::difference_type i, std::vector< openplx::Refactor::ReplaceOp >::difference_type j)

        Parameters
        ----------
        i: std::vector< openplx::Refactor::ReplaceOp >::difference_type
        j: std::vector< openplx::Refactor::ReplaceOp >::difference_type

        __setslice__(ReplaceOpVector self, std::vector< openplx::Refactor::ReplaceOp >::difference_type i, std::vector< openplx::Refactor::ReplaceOp >::difference_type j, ReplaceOpVector v)

        Parameters
        ----------
        i: std::vector< openplx::Refactor::ReplaceOp >::difference_type
        j: std::vector< openplx::Refactor::ReplaceOp >::difference_type
        v: std::vector< openplx::Refactor::ReplaceOp,std::allocator< openplx::Refactor::ReplaceOp > > const &

        """
        return _CorePythonSwig.ReplaceOpVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(ReplaceOpVector self, std::vector< openplx::Refactor::ReplaceOp >::difference_type i, std::vector< openplx::Refactor::ReplaceOp >::difference_type j)

        Parameters
        ----------
        i: std::vector< openplx::Refactor::ReplaceOp >::difference_type
        j: std::vector< openplx::Refactor::ReplaceOp >::difference_type

        """
        return _CorePythonSwig.ReplaceOpVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(ReplaceOpVector self, std::vector< openplx::Refactor::ReplaceOp >::difference_type i)

        Parameters
        ----------
        i: std::vector< openplx::Refactor::ReplaceOp >::difference_type

        __delitem__(ReplaceOpVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _CorePythonSwig.ReplaceOpVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(ReplaceOpVector self, PySliceObject * slice) -> ReplaceOpVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(ReplaceOpVector self, std::vector< openplx::Refactor::ReplaceOp >::difference_type i) -> RefactorReplaceOp

        Parameters
        ----------
        i: std::vector< openplx::Refactor::ReplaceOp >::difference_type

        """
        return _CorePythonSwig.ReplaceOpVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(ReplaceOpVector self, PySliceObject * slice, ReplaceOpVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< openplx::Refactor::ReplaceOp,std::allocator< openplx::Refactor::ReplaceOp > > const &

        __setitem__(ReplaceOpVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(ReplaceOpVector self, std::vector< openplx::Refactor::ReplaceOp >::difference_type i, RefactorReplaceOp x)

        Parameters
        ----------
        i: std::vector< openplx::Refactor::ReplaceOp >::difference_type
        x: std::vector< openplx::Refactor::ReplaceOp >::value_type const &

        """
        return _CorePythonSwig.ReplaceOpVector___setitem__(self, *args)

    def pop(self):
        r"""pop(ReplaceOpVector self) -> RefactorReplaceOp"""
        return _CorePythonSwig.ReplaceOpVector_pop(self)

    def append(self, x):
        r"""
        append(ReplaceOpVector self, RefactorReplaceOp x)

        Parameters
        ----------
        x: std::vector< openplx::Refactor::ReplaceOp >::value_type const &

        """
        return _CorePythonSwig.ReplaceOpVector_append(self, x)

    def empty(self):
        r"""empty(ReplaceOpVector self) -> bool"""
        return _CorePythonSwig.ReplaceOpVector_empty(self)

    def size(self):
        r"""size(ReplaceOpVector self) -> std::vector< openplx::Refactor::ReplaceOp >::size_type"""
        return _CorePythonSwig.ReplaceOpVector_size(self)

    def swap(self, v):
        r"""
        swap(ReplaceOpVector self, ReplaceOpVector v)

        Parameters
        ----------
        v: std::vector< openplx::Refactor::ReplaceOp > &

        """
        return _CorePythonSwig.ReplaceOpVector_swap(self, v)

    def begin(self):
        r"""begin(ReplaceOpVector self) -> std::vector< openplx::Refactor::ReplaceOp >::iterator"""
        return _CorePythonSwig.ReplaceOpVector_begin(self)

    def end(self):
        r"""end(ReplaceOpVector self) -> std::vector< openplx::Refactor::ReplaceOp >::iterator"""
        return _CorePythonSwig.ReplaceOpVector_end(self)

    def rbegin(self):
        r"""rbegin(ReplaceOpVector self) -> std::vector< openplx::Refactor::ReplaceOp >::reverse_iterator"""
        return _CorePythonSwig.ReplaceOpVector_rbegin(self)

    def rend(self):
        r"""rend(ReplaceOpVector self) -> std::vector< openplx::Refactor::ReplaceOp >::reverse_iterator"""
        return _CorePythonSwig.ReplaceOpVector_rend(self)

    def clear(self):
        r"""clear(ReplaceOpVector self)"""
        return _CorePythonSwig.ReplaceOpVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(ReplaceOpVector self) -> std::vector< openplx::Refactor::ReplaceOp >::allocator_type"""
        return _CorePythonSwig.ReplaceOpVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(ReplaceOpVector self)"""
        return _CorePythonSwig.ReplaceOpVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(ReplaceOpVector self, std::vector< openplx::Refactor::ReplaceOp >::iterator pos) -> std::vector< openplx::Refactor::ReplaceOp >::iterator

        Parameters
        ----------
        pos: std::vector< openplx::Refactor::ReplaceOp >::iterator

        erase(ReplaceOpVector self, std::vector< openplx::Refactor::ReplaceOp >::iterator first, std::vector< openplx::Refactor::ReplaceOp >::iterator last) -> std::vector< openplx::Refactor::ReplaceOp >::iterator

        Parameters
        ----------
        first: std::vector< openplx::Refactor::ReplaceOp >::iterator
        last: std::vector< openplx::Refactor::ReplaceOp >::iterator

        """
        return _CorePythonSwig.ReplaceOpVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(ReplaceOpVector self) -> ReplaceOpVector
        __init__(ReplaceOpVector self, ReplaceOpVector other) -> ReplaceOpVector

        Parameters
        ----------
        other: std::vector< openplx::Refactor::ReplaceOp > const &

        __init__(ReplaceOpVector self, std::vector< openplx::Refactor::ReplaceOp >::size_type size) -> ReplaceOpVector

        Parameters
        ----------
        size: std::vector< openplx::Refactor::ReplaceOp >::size_type

        __init__(ReplaceOpVector self, std::vector< openplx::Refactor::ReplaceOp >::size_type size, RefactorReplaceOp value) -> ReplaceOpVector

        Parameters
        ----------
        size: std::vector< openplx::Refactor::ReplaceOp >::size_type
        value: std::vector< openplx::Refactor::ReplaceOp >::value_type const &

        """
        _CorePythonSwig.ReplaceOpVector_swiginit(self, _CorePythonSwig.new_ReplaceOpVector(*args))

    def push_back(self, x):
        r"""
        push_back(ReplaceOpVector self, RefactorReplaceOp x)

        Parameters
        ----------
        x: std::vector< openplx::Refactor::ReplaceOp >::value_type const &

        """
        return _CorePythonSwig.ReplaceOpVector_push_back(self, x)

    def front(self):
        r"""front(ReplaceOpVector self) -> RefactorReplaceOp"""
        return _CorePythonSwig.ReplaceOpVector_front(self)

    def back(self):
        r"""back(ReplaceOpVector self) -> RefactorReplaceOp"""
        return _CorePythonSwig.ReplaceOpVector_back(self)

    def assign(self, n, x):
        r"""
        assign(ReplaceOpVector self, std::vector< openplx::Refactor::ReplaceOp >::size_type n, RefactorReplaceOp x)

        Parameters
        ----------
        n: std::vector< openplx::Refactor::ReplaceOp >::size_type
        x: std::vector< openplx::Refactor::ReplaceOp >::value_type const &

        """
        return _CorePythonSwig.ReplaceOpVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(ReplaceOpVector self, std::vector< openplx::Refactor::ReplaceOp >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< openplx::Refactor::ReplaceOp >::size_type

        resize(ReplaceOpVector self, std::vector< openplx::Refactor::ReplaceOp >::size_type new_size, RefactorReplaceOp x)

        Parameters
        ----------
        new_size: std::vector< openplx::Refactor::ReplaceOp >::size_type
        x: std::vector< openplx::Refactor::ReplaceOp >::value_type const &

        """
        return _CorePythonSwig.ReplaceOpVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(ReplaceOpVector self, std::vector< openplx::Refactor::ReplaceOp >::iterator pos, RefactorReplaceOp x) -> std::vector< openplx::Refactor::ReplaceOp >::iterator

        Parameters
        ----------
        pos: std::vector< openplx::Refactor::ReplaceOp >::iterator
        x: std::vector< openplx::Refactor::ReplaceOp >::value_type const &

        insert(ReplaceOpVector self, std::vector< openplx::Refactor::ReplaceOp >::iterator pos, std::vector< openplx::Refactor::ReplaceOp >::size_type n, RefactorReplaceOp x)

        Parameters
        ----------
        pos: std::vector< openplx::Refactor::ReplaceOp >::iterator
        n: std::vector< openplx::Refactor::ReplaceOp >::size_type
        x: std::vector< openplx::Refactor::ReplaceOp >::value_type const &

        """
        return _CorePythonSwig.ReplaceOpVector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(ReplaceOpVector self, std::vector< openplx::Refactor::ReplaceOp >::size_type n)

        Parameters
        ----------
        n: std::vector< openplx::Refactor::ReplaceOp >::size_type

        """
        return _CorePythonSwig.ReplaceOpVector_reserve(self, n)

    def capacity(self):
        r"""capacity(ReplaceOpVector self) -> std::vector< openplx::Refactor::ReplaceOp >::size_type"""
        return _CorePythonSwig.ReplaceOpVector_capacity(self)
    __swig_destroy__ = _CorePythonSwig.delete_ReplaceOpVector

# Register ReplaceOpVector in _CorePythonSwig:
_CorePythonSwig.ReplaceOpVector_swigregister(ReplaceOpVector)

class ErrorVector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Error > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(ErrorVector self) -> SwigPyIterator"""
        return _CorePythonSwig.ErrorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(ErrorVector self) -> bool"""
        return _CorePythonSwig.ErrorVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(ErrorVector self) -> bool"""
        return _CorePythonSwig.ErrorVector___bool__(self)

    def __len__(self):
        r"""__len__(ErrorVector self) -> std::vector< std::shared_ptr< openplx::Error > >::size_type"""
        return _CorePythonSwig.ErrorVector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(ErrorVector self, std::vector< std::shared_ptr< openplx::Error > >::difference_type i, std::vector< std::shared_ptr< openplx::Error > >::difference_type j) -> ErrorVector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Error > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Error > >::difference_type

        """
        return _CorePythonSwig.ErrorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(ErrorVector self, std::vector< std::shared_ptr< openplx::Error > >::difference_type i, std::vector< std::shared_ptr< openplx::Error > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Error > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Error > >::difference_type

        __setslice__(ErrorVector self, std::vector< std::shared_ptr< openplx::Error > >::difference_type i, std::vector< std::shared_ptr< openplx::Error > >::difference_type j, ErrorVector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Error > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Error > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Error >,std::allocator< std::shared_ptr< openplx::Error > > > const &

        """
        return _CorePythonSwig.ErrorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(ErrorVector self, std::vector< std::shared_ptr< openplx::Error > >::difference_type i, std::vector< std::shared_ptr< openplx::Error > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Error > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Error > >::difference_type

        """
        return _CorePythonSwig.ErrorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(ErrorVector self, std::vector< std::shared_ptr< openplx::Error > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Error > >::difference_type

        __delitem__(ErrorVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _CorePythonSwig.ErrorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(ErrorVector self, PySliceObject * slice) -> ErrorVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(ErrorVector self, std::vector< std::shared_ptr< openplx::Error > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Error > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Error > >::difference_type

        """
        return _CorePythonSwig.ErrorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(ErrorVector self, PySliceObject * slice, ErrorVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Error >,std::allocator< std::shared_ptr< openplx::Error > > > const &

        __setitem__(ErrorVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(ErrorVector self, std::vector< std::shared_ptr< openplx::Error > >::difference_type i, std::vector< std::shared_ptr< openplx::Error > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Error > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Error > >::value_type const &

        """
        return _CorePythonSwig.ErrorVector___setitem__(self, *args)

    def pop(self):
        r"""pop(ErrorVector self) -> std::vector< std::shared_ptr< openplx::Error > >::value_type"""
        return _CorePythonSwig.ErrorVector_pop(self)

    def append(self, x):
        r"""
        append(ErrorVector self, std::vector< std::shared_ptr< openplx::Error > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Error > >::value_type const &

        """
        return _CorePythonSwig.ErrorVector_append(self, x)

    def empty(self):
        r"""empty(ErrorVector self) -> bool"""
        return _CorePythonSwig.ErrorVector_empty(self)

    def size(self):
        r"""size(ErrorVector self) -> std::vector< std::shared_ptr< openplx::Error > >::size_type"""
        return _CorePythonSwig.ErrorVector_size(self)

    def swap(self, v):
        r"""
        swap(ErrorVector self, ErrorVector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Error > > &

        """
        return _CorePythonSwig.ErrorVector_swap(self, v)

    def begin(self):
        r"""begin(ErrorVector self) -> std::vector< std::shared_ptr< openplx::Error > >::iterator"""
        return _CorePythonSwig.ErrorVector_begin(self)

    def end(self):
        r"""end(ErrorVector self) -> std::vector< std::shared_ptr< openplx::Error > >::iterator"""
        return _CorePythonSwig.ErrorVector_end(self)

    def rbegin(self):
        r"""rbegin(ErrorVector self) -> std::vector< std::shared_ptr< openplx::Error > >::reverse_iterator"""
        return _CorePythonSwig.ErrorVector_rbegin(self)

    def rend(self):
        r"""rend(ErrorVector self) -> std::vector< std::shared_ptr< openplx::Error > >::reverse_iterator"""
        return _CorePythonSwig.ErrorVector_rend(self)

    def clear(self):
        r"""clear(ErrorVector self)"""
        return _CorePythonSwig.ErrorVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(ErrorVector self) -> std::vector< std::shared_ptr< openplx::Error > >::allocator_type"""
        return _CorePythonSwig.ErrorVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(ErrorVector self)"""
        return _CorePythonSwig.ErrorVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(ErrorVector self, std::vector< std::shared_ptr< openplx::Error > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Error > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Error > >::iterator

        erase(ErrorVector self, std::vector< std::shared_ptr< openplx::Error > >::iterator first, std::vector< std::shared_ptr< openplx::Error > >::iterator last) -> std::vector< std::shared_ptr< openplx::Error > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Error > >::iterator
        last: std::vector< std::shared_ptr< openplx::Error > >::iterator

        """
        return _CorePythonSwig.ErrorVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(ErrorVector self) -> ErrorVector
        __init__(ErrorVector self, ErrorVector other) -> ErrorVector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Error > > const &

        __init__(ErrorVector self, std::vector< std::shared_ptr< openplx::Error > >::size_type size) -> ErrorVector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Error > >::size_type

        __init__(ErrorVector self, std::vector< std::shared_ptr< openplx::Error > >::size_type size, std::vector< std::shared_ptr< openplx::Error > >::value_type const & value) -> ErrorVector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Error > >::size_type
        value: std::vector< std::shared_ptr< openplx::Error > >::value_type const &

        """
        _CorePythonSwig.ErrorVector_swiginit(self, _CorePythonSwig.new_ErrorVector(*args))

    def push_back(self, x):
        r"""
        push_back(ErrorVector self, std::vector< std::shared_ptr< openplx::Error > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Error > >::value_type const &

        """
        return _CorePythonSwig.ErrorVector_push_back(self, x)

    def front(self):
        r"""front(ErrorVector self) -> std::vector< std::shared_ptr< openplx::Error > >::value_type const &"""
        return _CorePythonSwig.ErrorVector_front(self)

    def back(self):
        r"""back(ErrorVector self) -> std::vector< std::shared_ptr< openplx::Error > >::value_type const &"""
        return _CorePythonSwig.ErrorVector_back(self)

    def assign(self, n, x):
        r"""
        assign(ErrorVector self, std::vector< std::shared_ptr< openplx::Error > >::size_type n, std::vector< std::shared_ptr< openplx::Error > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Error > >::size_type
        x: std::vector< std::shared_ptr< openplx::Error > >::value_type const &

        """
        return _CorePythonSwig.ErrorVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(ErrorVector self, std::vector< std::shared_ptr< openplx::Error > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Error > >::size_type

        resize(ErrorVector self, std::vector< std::shared_ptr< openplx::Error > >::size_type new_size, std::vector< std::shared_ptr< openplx::Error > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Error > >::size_type
        x: std::vector< std::shared_ptr< openplx::Error > >::value_type const &

        """
        return _CorePythonSwig.ErrorVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(ErrorVector self, std::vector< std::shared_ptr< openplx::Error > >::iterator pos, std::vector< std::shared_ptr< openplx::Error > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Error > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Error > >::iterator
        x: std::vector< std::shared_ptr< openplx::Error > >::value_type const &

        insert(ErrorVector self, std::vector< std::shared_ptr< openplx::Error > >::iterator pos, std::vector< std::shared_ptr< openplx::Error > >::size_type n, std::vector< std::shared_ptr< openplx::Error > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Error > >::iterator
        n: std::vector< std::shared_ptr< openplx::Error > >::size_type
        x: std::vector< std::shared_ptr< openplx::Error > >::value_type const &

        """
        return _CorePythonSwig.ErrorVector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(ErrorVector self, std::vector< std::shared_ptr< openplx::Error > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Error > >::size_type

        """
        return _CorePythonSwig.ErrorVector_reserve(self, n)

    def capacity(self):
        r"""capacity(ErrorVector self) -> std::vector< std::shared_ptr< openplx::Error > >::size_type"""
        return _CorePythonSwig.ErrorVector_capacity(self)
    __swig_destroy__ = _CorePythonSwig.delete_ErrorVector

# Register ErrorVector in _CorePythonSwig:
_CorePythonSwig.ErrorVector_swigregister(ErrorVector)



