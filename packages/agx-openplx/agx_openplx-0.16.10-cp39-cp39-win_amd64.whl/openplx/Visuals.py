# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _VisualsSwig
else:
    import _VisualsSwig

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SHARED_PTR_DISOWN = _VisualsSwig.SHARED_PTR_DISOWN

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VisualsSwig.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _VisualsSwig.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _VisualsSwig.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _VisualsSwig.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _VisualsSwig.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _VisualsSwig.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _VisualsSwig.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _VisualsSwig.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _VisualsSwig.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _VisualsSwig.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _VisualsSwig.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _VisualsSwig.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _VisualsSwig.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _VisualsSwig.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _VisualsSwig.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _VisualsSwig.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _VisualsSwig.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _VisualsSwig:
_VisualsSwig.SwigPyIterator_swigregister(SwigPyIterator)

import openplx.Core
import openplx.Math
class Visuals_Geometries_Box_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Visuals_Geometries_Box_Vector self) -> SwigPyIterator"""
        return _VisualsSwig.Visuals_Geometries_Box_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Visuals_Geometries_Box_Vector self) -> bool"""
        return _VisualsSwig.Visuals_Geometries_Box_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Visuals_Geometries_Box_Vector self) -> bool"""
        return _VisualsSwig.Visuals_Geometries_Box_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Visuals_Geometries_Box_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::size_type"""
        return _VisualsSwig.Visuals_Geometries_Box_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Visuals_Geometries_Box_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::difference_type j) -> Visuals_Geometries_Box_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::difference_type

        """
        return _VisualsSwig.Visuals_Geometries_Box_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Visuals_Geometries_Box_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::difference_type

        __setslice__(Visuals_Geometries_Box_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::difference_type j, Visuals_Geometries_Box_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box >,std::allocator< std::shared_ptr< openplx::Visuals::Geometries::Box > > > const &

        """
        return _VisualsSwig.Visuals_Geometries_Box_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Visuals_Geometries_Box_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::difference_type

        """
        return _VisualsSwig.Visuals_Geometries_Box_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Visuals_Geometries_Box_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::difference_type

        __delitem__(Visuals_Geometries_Box_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _VisualsSwig.Visuals_Geometries_Box_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Visuals_Geometries_Box_Vector self, PySliceObject * slice) -> Visuals_Geometries_Box_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Visuals_Geometries_Box_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::difference_type

        """
        return _VisualsSwig.Visuals_Geometries_Box_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Visuals_Geometries_Box_Vector self, PySliceObject * slice, Visuals_Geometries_Box_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box >,std::allocator< std::shared_ptr< openplx::Visuals::Geometries::Box > > > const &

        __setitem__(Visuals_Geometries_Box_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Visuals_Geometries_Box_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::value_type const &

        """
        return _VisualsSwig.Visuals_Geometries_Box_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Visuals_Geometries_Box_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::value_type"""
        return _VisualsSwig.Visuals_Geometries_Box_Vector_pop(self)

    def append(self, x):
        r"""
        append(Visuals_Geometries_Box_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::value_type const &

        """
        return _VisualsSwig.Visuals_Geometries_Box_Vector_append(self, x)

    def empty(self):
        r"""empty(Visuals_Geometries_Box_Vector self) -> bool"""
        return _VisualsSwig.Visuals_Geometries_Box_Vector_empty(self)

    def size(self):
        r"""size(Visuals_Geometries_Box_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::size_type"""
        return _VisualsSwig.Visuals_Geometries_Box_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Visuals_Geometries_Box_Vector self, Visuals_Geometries_Box_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > > &

        """
        return _VisualsSwig.Visuals_Geometries_Box_Vector_swap(self, v)

    def begin(self):
        r"""begin(Visuals_Geometries_Box_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::iterator"""
        return _VisualsSwig.Visuals_Geometries_Box_Vector_begin(self)

    def end(self):
        r"""end(Visuals_Geometries_Box_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::iterator"""
        return _VisualsSwig.Visuals_Geometries_Box_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Visuals_Geometries_Box_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::reverse_iterator"""
        return _VisualsSwig.Visuals_Geometries_Box_Vector_rbegin(self)

    def rend(self):
        r"""rend(Visuals_Geometries_Box_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::reverse_iterator"""
        return _VisualsSwig.Visuals_Geometries_Box_Vector_rend(self)

    def clear(self):
        r"""clear(Visuals_Geometries_Box_Vector self)"""
        return _VisualsSwig.Visuals_Geometries_Box_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Visuals_Geometries_Box_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::allocator_type"""
        return _VisualsSwig.Visuals_Geometries_Box_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Visuals_Geometries_Box_Vector self)"""
        return _VisualsSwig.Visuals_Geometries_Box_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Visuals_Geometries_Box_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::iterator

        erase(Visuals_Geometries_Box_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::iterator first, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::iterator last) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::iterator
        last: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::iterator

        """
        return _VisualsSwig.Visuals_Geometries_Box_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Visuals_Geometries_Box_Vector self) -> Visuals_Geometries_Box_Vector
        __init__(Visuals_Geometries_Box_Vector self, Visuals_Geometries_Box_Vector other) -> Visuals_Geometries_Box_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > > const &

        __init__(Visuals_Geometries_Box_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::size_type size) -> Visuals_Geometries_Box_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::size_type

        __init__(Visuals_Geometries_Box_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::size_type size, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::value_type const & value) -> Visuals_Geometries_Box_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::size_type
        value: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::value_type const &

        """
        _VisualsSwig.Visuals_Geometries_Box_Vector_swiginit(self, _VisualsSwig.new_Visuals_Geometries_Box_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Visuals_Geometries_Box_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::value_type const &

        """
        return _VisualsSwig.Visuals_Geometries_Box_Vector_push_back(self, x)

    def front(self):
        r"""front(Visuals_Geometries_Box_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::value_type const &"""
        return _VisualsSwig.Visuals_Geometries_Box_Vector_front(self)

    def back(self):
        r"""back(Visuals_Geometries_Box_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::value_type const &"""
        return _VisualsSwig.Visuals_Geometries_Box_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Visuals_Geometries_Box_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::size_type n, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::size_type
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::value_type const &

        """
        return _VisualsSwig.Visuals_Geometries_Box_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Visuals_Geometries_Box_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::size_type

        resize(Visuals_Geometries_Box_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::size_type new_size, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::size_type
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::value_type const &

        """
        return _VisualsSwig.Visuals_Geometries_Box_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Visuals_Geometries_Box_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::iterator pos, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::iterator
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::value_type const &

        insert(Visuals_Geometries_Box_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::iterator pos, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::size_type n, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::iterator
        n: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::size_type
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::value_type const &

        """
        return _VisualsSwig.Visuals_Geometries_Box_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Visuals_Geometries_Box_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::size_type

        """
        return _VisualsSwig.Visuals_Geometries_Box_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Visuals_Geometries_Box_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Box > >::size_type"""
        return _VisualsSwig.Visuals_Geometries_Box_Vector_capacity(self)
    __swig_destroy__ = _VisualsSwig.delete_Visuals_Geometries_Box_Vector

# Register Visuals_Geometries_Box_Vector in _VisualsSwig:
_VisualsSwig.Visuals_Geometries_Box_Vector_swigregister(Visuals_Geometries_Box_Vector)

class Visuals_Geometries_ConvexMesh_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Visuals_Geometries_ConvexMesh_Vector self) -> SwigPyIterator"""
        return _VisualsSwig.Visuals_Geometries_ConvexMesh_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Visuals_Geometries_ConvexMesh_Vector self) -> bool"""
        return _VisualsSwig.Visuals_Geometries_ConvexMesh_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Visuals_Geometries_ConvexMesh_Vector self) -> bool"""
        return _VisualsSwig.Visuals_Geometries_ConvexMesh_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Visuals_Geometries_ConvexMesh_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::size_type"""
        return _VisualsSwig.Visuals_Geometries_ConvexMesh_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Visuals_Geometries_ConvexMesh_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::difference_type j) -> Visuals_Geometries_ConvexMesh_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::difference_type

        """
        return _VisualsSwig.Visuals_Geometries_ConvexMesh_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Visuals_Geometries_ConvexMesh_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::difference_type

        __setslice__(Visuals_Geometries_ConvexMesh_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::difference_type j, Visuals_Geometries_ConvexMesh_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh >,std::allocator< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > > > const &

        """
        return _VisualsSwig.Visuals_Geometries_ConvexMesh_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Visuals_Geometries_ConvexMesh_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::difference_type

        """
        return _VisualsSwig.Visuals_Geometries_ConvexMesh_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Visuals_Geometries_ConvexMesh_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::difference_type

        __delitem__(Visuals_Geometries_ConvexMesh_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _VisualsSwig.Visuals_Geometries_ConvexMesh_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Visuals_Geometries_ConvexMesh_Vector self, PySliceObject * slice) -> Visuals_Geometries_ConvexMesh_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Visuals_Geometries_ConvexMesh_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::difference_type

        """
        return _VisualsSwig.Visuals_Geometries_ConvexMesh_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Visuals_Geometries_ConvexMesh_Vector self, PySliceObject * slice, Visuals_Geometries_ConvexMesh_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh >,std::allocator< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > > > const &

        __setitem__(Visuals_Geometries_ConvexMesh_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Visuals_Geometries_ConvexMesh_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::value_type const &

        """
        return _VisualsSwig.Visuals_Geometries_ConvexMesh_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Visuals_Geometries_ConvexMesh_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::value_type"""
        return _VisualsSwig.Visuals_Geometries_ConvexMesh_Vector_pop(self)

    def append(self, x):
        r"""
        append(Visuals_Geometries_ConvexMesh_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::value_type const &

        """
        return _VisualsSwig.Visuals_Geometries_ConvexMesh_Vector_append(self, x)

    def empty(self):
        r"""empty(Visuals_Geometries_ConvexMesh_Vector self) -> bool"""
        return _VisualsSwig.Visuals_Geometries_ConvexMesh_Vector_empty(self)

    def size(self):
        r"""size(Visuals_Geometries_ConvexMesh_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::size_type"""
        return _VisualsSwig.Visuals_Geometries_ConvexMesh_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Visuals_Geometries_ConvexMesh_Vector self, Visuals_Geometries_ConvexMesh_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > > &

        """
        return _VisualsSwig.Visuals_Geometries_ConvexMesh_Vector_swap(self, v)

    def begin(self):
        r"""begin(Visuals_Geometries_ConvexMesh_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::iterator"""
        return _VisualsSwig.Visuals_Geometries_ConvexMesh_Vector_begin(self)

    def end(self):
        r"""end(Visuals_Geometries_ConvexMesh_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::iterator"""
        return _VisualsSwig.Visuals_Geometries_ConvexMesh_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Visuals_Geometries_ConvexMesh_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::reverse_iterator"""
        return _VisualsSwig.Visuals_Geometries_ConvexMesh_Vector_rbegin(self)

    def rend(self):
        r"""rend(Visuals_Geometries_ConvexMesh_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::reverse_iterator"""
        return _VisualsSwig.Visuals_Geometries_ConvexMesh_Vector_rend(self)

    def clear(self):
        r"""clear(Visuals_Geometries_ConvexMesh_Vector self)"""
        return _VisualsSwig.Visuals_Geometries_ConvexMesh_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Visuals_Geometries_ConvexMesh_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::allocator_type"""
        return _VisualsSwig.Visuals_Geometries_ConvexMesh_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Visuals_Geometries_ConvexMesh_Vector self)"""
        return _VisualsSwig.Visuals_Geometries_ConvexMesh_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Visuals_Geometries_ConvexMesh_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::iterator

        erase(Visuals_Geometries_ConvexMesh_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::iterator first, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::iterator last) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::iterator
        last: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::iterator

        """
        return _VisualsSwig.Visuals_Geometries_ConvexMesh_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Visuals_Geometries_ConvexMesh_Vector self) -> Visuals_Geometries_ConvexMesh_Vector
        __init__(Visuals_Geometries_ConvexMesh_Vector self, Visuals_Geometries_ConvexMesh_Vector other) -> Visuals_Geometries_ConvexMesh_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > > const &

        __init__(Visuals_Geometries_ConvexMesh_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::size_type size) -> Visuals_Geometries_ConvexMesh_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::size_type

        __init__(Visuals_Geometries_ConvexMesh_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::size_type size, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::value_type const & value) -> Visuals_Geometries_ConvexMesh_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::size_type
        value: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::value_type const &

        """
        _VisualsSwig.Visuals_Geometries_ConvexMesh_Vector_swiginit(self, _VisualsSwig.new_Visuals_Geometries_ConvexMesh_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Visuals_Geometries_ConvexMesh_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::value_type const &

        """
        return _VisualsSwig.Visuals_Geometries_ConvexMesh_Vector_push_back(self, x)

    def front(self):
        r"""front(Visuals_Geometries_ConvexMesh_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::value_type const &"""
        return _VisualsSwig.Visuals_Geometries_ConvexMesh_Vector_front(self)

    def back(self):
        r"""back(Visuals_Geometries_ConvexMesh_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::value_type const &"""
        return _VisualsSwig.Visuals_Geometries_ConvexMesh_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Visuals_Geometries_ConvexMesh_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::size_type n, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::size_type
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::value_type const &

        """
        return _VisualsSwig.Visuals_Geometries_ConvexMesh_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Visuals_Geometries_ConvexMesh_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::size_type

        resize(Visuals_Geometries_ConvexMesh_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::size_type new_size, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::size_type
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::value_type const &

        """
        return _VisualsSwig.Visuals_Geometries_ConvexMesh_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Visuals_Geometries_ConvexMesh_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::iterator pos, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::iterator
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::value_type const &

        insert(Visuals_Geometries_ConvexMesh_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::iterator pos, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::size_type n, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::iterator
        n: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::size_type
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::value_type const &

        """
        return _VisualsSwig.Visuals_Geometries_ConvexMesh_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Visuals_Geometries_ConvexMesh_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::size_type

        """
        return _VisualsSwig.Visuals_Geometries_ConvexMesh_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Visuals_Geometries_ConvexMesh_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::ConvexMesh > >::size_type"""
        return _VisualsSwig.Visuals_Geometries_ConvexMesh_Vector_capacity(self)
    __swig_destroy__ = _VisualsSwig.delete_Visuals_Geometries_ConvexMesh_Vector

# Register Visuals_Geometries_ConvexMesh_Vector in _VisualsSwig:
_VisualsSwig.Visuals_Geometries_ConvexMesh_Vector_swigregister(Visuals_Geometries_ConvexMesh_Vector)

class Visuals_Geometries_Cylinder_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Visuals_Geometries_Cylinder_Vector self) -> SwigPyIterator"""
        return _VisualsSwig.Visuals_Geometries_Cylinder_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Visuals_Geometries_Cylinder_Vector self) -> bool"""
        return _VisualsSwig.Visuals_Geometries_Cylinder_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Visuals_Geometries_Cylinder_Vector self) -> bool"""
        return _VisualsSwig.Visuals_Geometries_Cylinder_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Visuals_Geometries_Cylinder_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::size_type"""
        return _VisualsSwig.Visuals_Geometries_Cylinder_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Visuals_Geometries_Cylinder_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::difference_type j) -> Visuals_Geometries_Cylinder_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::difference_type

        """
        return _VisualsSwig.Visuals_Geometries_Cylinder_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Visuals_Geometries_Cylinder_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::difference_type

        __setslice__(Visuals_Geometries_Cylinder_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::difference_type j, Visuals_Geometries_Cylinder_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder >,std::allocator< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > > > const &

        """
        return _VisualsSwig.Visuals_Geometries_Cylinder_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Visuals_Geometries_Cylinder_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::difference_type

        """
        return _VisualsSwig.Visuals_Geometries_Cylinder_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Visuals_Geometries_Cylinder_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::difference_type

        __delitem__(Visuals_Geometries_Cylinder_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _VisualsSwig.Visuals_Geometries_Cylinder_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Visuals_Geometries_Cylinder_Vector self, PySliceObject * slice) -> Visuals_Geometries_Cylinder_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Visuals_Geometries_Cylinder_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::difference_type

        """
        return _VisualsSwig.Visuals_Geometries_Cylinder_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Visuals_Geometries_Cylinder_Vector self, PySliceObject * slice, Visuals_Geometries_Cylinder_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder >,std::allocator< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > > > const &

        __setitem__(Visuals_Geometries_Cylinder_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Visuals_Geometries_Cylinder_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::value_type const &

        """
        return _VisualsSwig.Visuals_Geometries_Cylinder_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Visuals_Geometries_Cylinder_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::value_type"""
        return _VisualsSwig.Visuals_Geometries_Cylinder_Vector_pop(self)

    def append(self, x):
        r"""
        append(Visuals_Geometries_Cylinder_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::value_type const &

        """
        return _VisualsSwig.Visuals_Geometries_Cylinder_Vector_append(self, x)

    def empty(self):
        r"""empty(Visuals_Geometries_Cylinder_Vector self) -> bool"""
        return _VisualsSwig.Visuals_Geometries_Cylinder_Vector_empty(self)

    def size(self):
        r"""size(Visuals_Geometries_Cylinder_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::size_type"""
        return _VisualsSwig.Visuals_Geometries_Cylinder_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Visuals_Geometries_Cylinder_Vector self, Visuals_Geometries_Cylinder_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > > &

        """
        return _VisualsSwig.Visuals_Geometries_Cylinder_Vector_swap(self, v)

    def begin(self):
        r"""begin(Visuals_Geometries_Cylinder_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::iterator"""
        return _VisualsSwig.Visuals_Geometries_Cylinder_Vector_begin(self)

    def end(self):
        r"""end(Visuals_Geometries_Cylinder_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::iterator"""
        return _VisualsSwig.Visuals_Geometries_Cylinder_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Visuals_Geometries_Cylinder_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::reverse_iterator"""
        return _VisualsSwig.Visuals_Geometries_Cylinder_Vector_rbegin(self)

    def rend(self):
        r"""rend(Visuals_Geometries_Cylinder_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::reverse_iterator"""
        return _VisualsSwig.Visuals_Geometries_Cylinder_Vector_rend(self)

    def clear(self):
        r"""clear(Visuals_Geometries_Cylinder_Vector self)"""
        return _VisualsSwig.Visuals_Geometries_Cylinder_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Visuals_Geometries_Cylinder_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::allocator_type"""
        return _VisualsSwig.Visuals_Geometries_Cylinder_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Visuals_Geometries_Cylinder_Vector self)"""
        return _VisualsSwig.Visuals_Geometries_Cylinder_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Visuals_Geometries_Cylinder_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::iterator

        erase(Visuals_Geometries_Cylinder_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::iterator first, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::iterator last) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::iterator
        last: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::iterator

        """
        return _VisualsSwig.Visuals_Geometries_Cylinder_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Visuals_Geometries_Cylinder_Vector self) -> Visuals_Geometries_Cylinder_Vector
        __init__(Visuals_Geometries_Cylinder_Vector self, Visuals_Geometries_Cylinder_Vector other) -> Visuals_Geometries_Cylinder_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > > const &

        __init__(Visuals_Geometries_Cylinder_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::size_type size) -> Visuals_Geometries_Cylinder_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::size_type

        __init__(Visuals_Geometries_Cylinder_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::size_type size, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::value_type const & value) -> Visuals_Geometries_Cylinder_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::size_type
        value: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::value_type const &

        """
        _VisualsSwig.Visuals_Geometries_Cylinder_Vector_swiginit(self, _VisualsSwig.new_Visuals_Geometries_Cylinder_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Visuals_Geometries_Cylinder_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::value_type const &

        """
        return _VisualsSwig.Visuals_Geometries_Cylinder_Vector_push_back(self, x)

    def front(self):
        r"""front(Visuals_Geometries_Cylinder_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::value_type const &"""
        return _VisualsSwig.Visuals_Geometries_Cylinder_Vector_front(self)

    def back(self):
        r"""back(Visuals_Geometries_Cylinder_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::value_type const &"""
        return _VisualsSwig.Visuals_Geometries_Cylinder_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Visuals_Geometries_Cylinder_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::size_type n, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::size_type
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::value_type const &

        """
        return _VisualsSwig.Visuals_Geometries_Cylinder_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Visuals_Geometries_Cylinder_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::size_type

        resize(Visuals_Geometries_Cylinder_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::size_type new_size, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::size_type
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::value_type const &

        """
        return _VisualsSwig.Visuals_Geometries_Cylinder_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Visuals_Geometries_Cylinder_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::iterator pos, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::iterator
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::value_type const &

        insert(Visuals_Geometries_Cylinder_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::iterator pos, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::size_type n, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::iterator
        n: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::size_type
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::value_type const &

        """
        return _VisualsSwig.Visuals_Geometries_Cylinder_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Visuals_Geometries_Cylinder_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::size_type

        """
        return _VisualsSwig.Visuals_Geometries_Cylinder_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Visuals_Geometries_Cylinder_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Cylinder > >::size_type"""
        return _VisualsSwig.Visuals_Geometries_Cylinder_Vector_capacity(self)
    __swig_destroy__ = _VisualsSwig.delete_Visuals_Geometries_Cylinder_Vector

# Register Visuals_Geometries_Cylinder_Vector in _VisualsSwig:
_VisualsSwig.Visuals_Geometries_Cylinder_Vector_swigregister(Visuals_Geometries_Cylinder_Vector)

class Visuals_Geometries_ExternalTriMeshGeometry_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Visuals_Geometries_ExternalTriMeshGeometry_Vector self) -> SwigPyIterator"""
        return _VisualsSwig.Visuals_Geometries_ExternalTriMeshGeometry_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Visuals_Geometries_ExternalTriMeshGeometry_Vector self) -> bool"""
        return _VisualsSwig.Visuals_Geometries_ExternalTriMeshGeometry_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Visuals_Geometries_ExternalTriMeshGeometry_Vector self) -> bool"""
        return _VisualsSwig.Visuals_Geometries_ExternalTriMeshGeometry_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Visuals_Geometries_ExternalTriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::size_type"""
        return _VisualsSwig.Visuals_Geometries_ExternalTriMeshGeometry_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Visuals_Geometries_ExternalTriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::difference_type j) -> Visuals_Geometries_ExternalTriMeshGeometry_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::difference_type

        """
        return _VisualsSwig.Visuals_Geometries_ExternalTriMeshGeometry_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Visuals_Geometries_ExternalTriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::difference_type

        __setslice__(Visuals_Geometries_ExternalTriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::difference_type j, Visuals_Geometries_ExternalTriMeshGeometry_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry >,std::allocator< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > > > const &

        """
        return _VisualsSwig.Visuals_Geometries_ExternalTriMeshGeometry_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Visuals_Geometries_ExternalTriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::difference_type

        """
        return _VisualsSwig.Visuals_Geometries_ExternalTriMeshGeometry_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Visuals_Geometries_ExternalTriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::difference_type

        __delitem__(Visuals_Geometries_ExternalTriMeshGeometry_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _VisualsSwig.Visuals_Geometries_ExternalTriMeshGeometry_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Visuals_Geometries_ExternalTriMeshGeometry_Vector self, PySliceObject * slice) -> Visuals_Geometries_ExternalTriMeshGeometry_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Visuals_Geometries_ExternalTriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::difference_type

        """
        return _VisualsSwig.Visuals_Geometries_ExternalTriMeshGeometry_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Visuals_Geometries_ExternalTriMeshGeometry_Vector self, PySliceObject * slice, Visuals_Geometries_ExternalTriMeshGeometry_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry >,std::allocator< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > > > const &

        __setitem__(Visuals_Geometries_ExternalTriMeshGeometry_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Visuals_Geometries_ExternalTriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::value_type const &

        """
        return _VisualsSwig.Visuals_Geometries_ExternalTriMeshGeometry_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Visuals_Geometries_ExternalTriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::value_type"""
        return _VisualsSwig.Visuals_Geometries_ExternalTriMeshGeometry_Vector_pop(self)

    def append(self, x):
        r"""
        append(Visuals_Geometries_ExternalTriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::value_type const &

        """
        return _VisualsSwig.Visuals_Geometries_ExternalTriMeshGeometry_Vector_append(self, x)

    def empty(self):
        r"""empty(Visuals_Geometries_ExternalTriMeshGeometry_Vector self) -> bool"""
        return _VisualsSwig.Visuals_Geometries_ExternalTriMeshGeometry_Vector_empty(self)

    def size(self):
        r"""size(Visuals_Geometries_ExternalTriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::size_type"""
        return _VisualsSwig.Visuals_Geometries_ExternalTriMeshGeometry_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Visuals_Geometries_ExternalTriMeshGeometry_Vector self, Visuals_Geometries_ExternalTriMeshGeometry_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > > &

        """
        return _VisualsSwig.Visuals_Geometries_ExternalTriMeshGeometry_Vector_swap(self, v)

    def begin(self):
        r"""begin(Visuals_Geometries_ExternalTriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::iterator"""
        return _VisualsSwig.Visuals_Geometries_ExternalTriMeshGeometry_Vector_begin(self)

    def end(self):
        r"""end(Visuals_Geometries_ExternalTriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::iterator"""
        return _VisualsSwig.Visuals_Geometries_ExternalTriMeshGeometry_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Visuals_Geometries_ExternalTriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::reverse_iterator"""
        return _VisualsSwig.Visuals_Geometries_ExternalTriMeshGeometry_Vector_rbegin(self)

    def rend(self):
        r"""rend(Visuals_Geometries_ExternalTriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::reverse_iterator"""
        return _VisualsSwig.Visuals_Geometries_ExternalTriMeshGeometry_Vector_rend(self)

    def clear(self):
        r"""clear(Visuals_Geometries_ExternalTriMeshGeometry_Vector self)"""
        return _VisualsSwig.Visuals_Geometries_ExternalTriMeshGeometry_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Visuals_Geometries_ExternalTriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::allocator_type"""
        return _VisualsSwig.Visuals_Geometries_ExternalTriMeshGeometry_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Visuals_Geometries_ExternalTriMeshGeometry_Vector self)"""
        return _VisualsSwig.Visuals_Geometries_ExternalTriMeshGeometry_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Visuals_Geometries_ExternalTriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::iterator

        erase(Visuals_Geometries_ExternalTriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::iterator first, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::iterator last) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::iterator
        last: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::iterator

        """
        return _VisualsSwig.Visuals_Geometries_ExternalTriMeshGeometry_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Visuals_Geometries_ExternalTriMeshGeometry_Vector self) -> Visuals_Geometries_ExternalTriMeshGeometry_Vector
        __init__(Visuals_Geometries_ExternalTriMeshGeometry_Vector self, Visuals_Geometries_ExternalTriMeshGeometry_Vector other) -> Visuals_Geometries_ExternalTriMeshGeometry_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > > const &

        __init__(Visuals_Geometries_ExternalTriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::size_type size) -> Visuals_Geometries_ExternalTriMeshGeometry_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::size_type

        __init__(Visuals_Geometries_ExternalTriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::size_type size, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::value_type const & value) -> Visuals_Geometries_ExternalTriMeshGeometry_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::size_type
        value: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::value_type const &

        """
        _VisualsSwig.Visuals_Geometries_ExternalTriMeshGeometry_Vector_swiginit(self, _VisualsSwig.new_Visuals_Geometries_ExternalTriMeshGeometry_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Visuals_Geometries_ExternalTriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::value_type const &

        """
        return _VisualsSwig.Visuals_Geometries_ExternalTriMeshGeometry_Vector_push_back(self, x)

    def front(self):
        r"""front(Visuals_Geometries_ExternalTriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::value_type const &"""
        return _VisualsSwig.Visuals_Geometries_ExternalTriMeshGeometry_Vector_front(self)

    def back(self):
        r"""back(Visuals_Geometries_ExternalTriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::value_type const &"""
        return _VisualsSwig.Visuals_Geometries_ExternalTriMeshGeometry_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Visuals_Geometries_ExternalTriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::size_type n, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::size_type
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::value_type const &

        """
        return _VisualsSwig.Visuals_Geometries_ExternalTriMeshGeometry_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Visuals_Geometries_ExternalTriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::size_type

        resize(Visuals_Geometries_ExternalTriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::size_type new_size, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::size_type
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::value_type const &

        """
        return _VisualsSwig.Visuals_Geometries_ExternalTriMeshGeometry_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Visuals_Geometries_ExternalTriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::iterator pos, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::iterator
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::value_type const &

        insert(Visuals_Geometries_ExternalTriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::iterator pos, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::size_type n, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::iterator
        n: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::size_type
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::value_type const &

        """
        return _VisualsSwig.Visuals_Geometries_ExternalTriMeshGeometry_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Visuals_Geometries_ExternalTriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::size_type

        """
        return _VisualsSwig.Visuals_Geometries_ExternalTriMeshGeometry_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Visuals_Geometries_ExternalTriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::ExternalTriMeshGeometry > >::size_type"""
        return _VisualsSwig.Visuals_Geometries_ExternalTriMeshGeometry_Vector_capacity(self)
    __swig_destroy__ = _VisualsSwig.delete_Visuals_Geometries_ExternalTriMeshGeometry_Vector

# Register Visuals_Geometries_ExternalTriMeshGeometry_Vector in _VisualsSwig:
_VisualsSwig.Visuals_Geometries_ExternalTriMeshGeometry_Vector_swigregister(Visuals_Geometries_ExternalTriMeshGeometry_Vector)

class Visuals_Geometries_Geometry_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Visuals_Geometries_Geometry_Vector self) -> SwigPyIterator"""
        return _VisualsSwig.Visuals_Geometries_Geometry_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Visuals_Geometries_Geometry_Vector self) -> bool"""
        return _VisualsSwig.Visuals_Geometries_Geometry_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Visuals_Geometries_Geometry_Vector self) -> bool"""
        return _VisualsSwig.Visuals_Geometries_Geometry_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Visuals_Geometries_Geometry_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::size_type"""
        return _VisualsSwig.Visuals_Geometries_Geometry_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Visuals_Geometries_Geometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::difference_type j) -> Visuals_Geometries_Geometry_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::difference_type

        """
        return _VisualsSwig.Visuals_Geometries_Geometry_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Visuals_Geometries_Geometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::difference_type

        __setslice__(Visuals_Geometries_Geometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::difference_type j, Visuals_Geometries_Geometry_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry >,std::allocator< std::shared_ptr< openplx::Visuals::Geometries::Geometry > > > const &

        """
        return _VisualsSwig.Visuals_Geometries_Geometry_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Visuals_Geometries_Geometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::difference_type

        """
        return _VisualsSwig.Visuals_Geometries_Geometry_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Visuals_Geometries_Geometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::difference_type

        __delitem__(Visuals_Geometries_Geometry_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _VisualsSwig.Visuals_Geometries_Geometry_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Visuals_Geometries_Geometry_Vector self, PySliceObject * slice) -> Visuals_Geometries_Geometry_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Visuals_Geometries_Geometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::difference_type

        """
        return _VisualsSwig.Visuals_Geometries_Geometry_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Visuals_Geometries_Geometry_Vector self, PySliceObject * slice, Visuals_Geometries_Geometry_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry >,std::allocator< std::shared_ptr< openplx::Visuals::Geometries::Geometry > > > const &

        __setitem__(Visuals_Geometries_Geometry_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Visuals_Geometries_Geometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::value_type const &

        """
        return _VisualsSwig.Visuals_Geometries_Geometry_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Visuals_Geometries_Geometry_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::value_type"""
        return _VisualsSwig.Visuals_Geometries_Geometry_Vector_pop(self)

    def append(self, x):
        r"""
        append(Visuals_Geometries_Geometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::value_type const &

        """
        return _VisualsSwig.Visuals_Geometries_Geometry_Vector_append(self, x)

    def empty(self):
        r"""empty(Visuals_Geometries_Geometry_Vector self) -> bool"""
        return _VisualsSwig.Visuals_Geometries_Geometry_Vector_empty(self)

    def size(self):
        r"""size(Visuals_Geometries_Geometry_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::size_type"""
        return _VisualsSwig.Visuals_Geometries_Geometry_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Visuals_Geometries_Geometry_Vector self, Visuals_Geometries_Geometry_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > > &

        """
        return _VisualsSwig.Visuals_Geometries_Geometry_Vector_swap(self, v)

    def begin(self):
        r"""begin(Visuals_Geometries_Geometry_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::iterator"""
        return _VisualsSwig.Visuals_Geometries_Geometry_Vector_begin(self)

    def end(self):
        r"""end(Visuals_Geometries_Geometry_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::iterator"""
        return _VisualsSwig.Visuals_Geometries_Geometry_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Visuals_Geometries_Geometry_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::reverse_iterator"""
        return _VisualsSwig.Visuals_Geometries_Geometry_Vector_rbegin(self)

    def rend(self):
        r"""rend(Visuals_Geometries_Geometry_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::reverse_iterator"""
        return _VisualsSwig.Visuals_Geometries_Geometry_Vector_rend(self)

    def clear(self):
        r"""clear(Visuals_Geometries_Geometry_Vector self)"""
        return _VisualsSwig.Visuals_Geometries_Geometry_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Visuals_Geometries_Geometry_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::allocator_type"""
        return _VisualsSwig.Visuals_Geometries_Geometry_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Visuals_Geometries_Geometry_Vector self)"""
        return _VisualsSwig.Visuals_Geometries_Geometry_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Visuals_Geometries_Geometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::iterator

        erase(Visuals_Geometries_Geometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::iterator first, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::iterator last) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::iterator
        last: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::iterator

        """
        return _VisualsSwig.Visuals_Geometries_Geometry_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Visuals_Geometries_Geometry_Vector self) -> Visuals_Geometries_Geometry_Vector
        __init__(Visuals_Geometries_Geometry_Vector self, Visuals_Geometries_Geometry_Vector other) -> Visuals_Geometries_Geometry_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > > const &

        __init__(Visuals_Geometries_Geometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::size_type size) -> Visuals_Geometries_Geometry_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::size_type

        __init__(Visuals_Geometries_Geometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::size_type size, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::value_type const & value) -> Visuals_Geometries_Geometry_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::size_type
        value: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::value_type const &

        """
        _VisualsSwig.Visuals_Geometries_Geometry_Vector_swiginit(self, _VisualsSwig.new_Visuals_Geometries_Geometry_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Visuals_Geometries_Geometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::value_type const &

        """
        return _VisualsSwig.Visuals_Geometries_Geometry_Vector_push_back(self, x)

    def front(self):
        r"""front(Visuals_Geometries_Geometry_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::value_type const &"""
        return _VisualsSwig.Visuals_Geometries_Geometry_Vector_front(self)

    def back(self):
        r"""back(Visuals_Geometries_Geometry_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::value_type const &"""
        return _VisualsSwig.Visuals_Geometries_Geometry_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Visuals_Geometries_Geometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::size_type n, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::size_type
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::value_type const &

        """
        return _VisualsSwig.Visuals_Geometries_Geometry_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Visuals_Geometries_Geometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::size_type

        resize(Visuals_Geometries_Geometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::size_type new_size, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::size_type
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::value_type const &

        """
        return _VisualsSwig.Visuals_Geometries_Geometry_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Visuals_Geometries_Geometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::iterator pos, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::iterator
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::value_type const &

        insert(Visuals_Geometries_Geometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::iterator pos, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::size_type n, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::iterator
        n: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::size_type
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::value_type const &

        """
        return _VisualsSwig.Visuals_Geometries_Geometry_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Visuals_Geometries_Geometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::size_type

        """
        return _VisualsSwig.Visuals_Geometries_Geometry_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Visuals_Geometries_Geometry_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Geometry > >::size_type"""
        return _VisualsSwig.Visuals_Geometries_Geometry_Vector_capacity(self)
    __swig_destroy__ = _VisualsSwig.delete_Visuals_Geometries_Geometry_Vector

# Register Visuals_Geometries_Geometry_Vector in _VisualsSwig:
_VisualsSwig.Visuals_Geometries_Geometry_Vector_swigregister(Visuals_Geometries_Geometry_Vector)

class Visuals_Geometries_Sphere_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Visuals_Geometries_Sphere_Vector self) -> SwigPyIterator"""
        return _VisualsSwig.Visuals_Geometries_Sphere_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Visuals_Geometries_Sphere_Vector self) -> bool"""
        return _VisualsSwig.Visuals_Geometries_Sphere_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Visuals_Geometries_Sphere_Vector self) -> bool"""
        return _VisualsSwig.Visuals_Geometries_Sphere_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Visuals_Geometries_Sphere_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::size_type"""
        return _VisualsSwig.Visuals_Geometries_Sphere_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Visuals_Geometries_Sphere_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::difference_type j) -> Visuals_Geometries_Sphere_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::difference_type

        """
        return _VisualsSwig.Visuals_Geometries_Sphere_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Visuals_Geometries_Sphere_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::difference_type

        __setslice__(Visuals_Geometries_Sphere_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::difference_type j, Visuals_Geometries_Sphere_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere >,std::allocator< std::shared_ptr< openplx::Visuals::Geometries::Sphere > > > const &

        """
        return _VisualsSwig.Visuals_Geometries_Sphere_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Visuals_Geometries_Sphere_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::difference_type

        """
        return _VisualsSwig.Visuals_Geometries_Sphere_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Visuals_Geometries_Sphere_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::difference_type

        __delitem__(Visuals_Geometries_Sphere_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _VisualsSwig.Visuals_Geometries_Sphere_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Visuals_Geometries_Sphere_Vector self, PySliceObject * slice) -> Visuals_Geometries_Sphere_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Visuals_Geometries_Sphere_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::difference_type

        """
        return _VisualsSwig.Visuals_Geometries_Sphere_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Visuals_Geometries_Sphere_Vector self, PySliceObject * slice, Visuals_Geometries_Sphere_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere >,std::allocator< std::shared_ptr< openplx::Visuals::Geometries::Sphere > > > const &

        __setitem__(Visuals_Geometries_Sphere_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Visuals_Geometries_Sphere_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::value_type const &

        """
        return _VisualsSwig.Visuals_Geometries_Sphere_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Visuals_Geometries_Sphere_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::value_type"""
        return _VisualsSwig.Visuals_Geometries_Sphere_Vector_pop(self)

    def append(self, x):
        r"""
        append(Visuals_Geometries_Sphere_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::value_type const &

        """
        return _VisualsSwig.Visuals_Geometries_Sphere_Vector_append(self, x)

    def empty(self):
        r"""empty(Visuals_Geometries_Sphere_Vector self) -> bool"""
        return _VisualsSwig.Visuals_Geometries_Sphere_Vector_empty(self)

    def size(self):
        r"""size(Visuals_Geometries_Sphere_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::size_type"""
        return _VisualsSwig.Visuals_Geometries_Sphere_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Visuals_Geometries_Sphere_Vector self, Visuals_Geometries_Sphere_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > > &

        """
        return _VisualsSwig.Visuals_Geometries_Sphere_Vector_swap(self, v)

    def begin(self):
        r"""begin(Visuals_Geometries_Sphere_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::iterator"""
        return _VisualsSwig.Visuals_Geometries_Sphere_Vector_begin(self)

    def end(self):
        r"""end(Visuals_Geometries_Sphere_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::iterator"""
        return _VisualsSwig.Visuals_Geometries_Sphere_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Visuals_Geometries_Sphere_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::reverse_iterator"""
        return _VisualsSwig.Visuals_Geometries_Sphere_Vector_rbegin(self)

    def rend(self):
        r"""rend(Visuals_Geometries_Sphere_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::reverse_iterator"""
        return _VisualsSwig.Visuals_Geometries_Sphere_Vector_rend(self)

    def clear(self):
        r"""clear(Visuals_Geometries_Sphere_Vector self)"""
        return _VisualsSwig.Visuals_Geometries_Sphere_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Visuals_Geometries_Sphere_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::allocator_type"""
        return _VisualsSwig.Visuals_Geometries_Sphere_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Visuals_Geometries_Sphere_Vector self)"""
        return _VisualsSwig.Visuals_Geometries_Sphere_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Visuals_Geometries_Sphere_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::iterator

        erase(Visuals_Geometries_Sphere_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::iterator first, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::iterator last) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::iterator
        last: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::iterator

        """
        return _VisualsSwig.Visuals_Geometries_Sphere_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Visuals_Geometries_Sphere_Vector self) -> Visuals_Geometries_Sphere_Vector
        __init__(Visuals_Geometries_Sphere_Vector self, Visuals_Geometries_Sphere_Vector other) -> Visuals_Geometries_Sphere_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > > const &

        __init__(Visuals_Geometries_Sphere_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::size_type size) -> Visuals_Geometries_Sphere_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::size_type

        __init__(Visuals_Geometries_Sphere_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::size_type size, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::value_type const & value) -> Visuals_Geometries_Sphere_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::size_type
        value: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::value_type const &

        """
        _VisualsSwig.Visuals_Geometries_Sphere_Vector_swiginit(self, _VisualsSwig.new_Visuals_Geometries_Sphere_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Visuals_Geometries_Sphere_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::value_type const &

        """
        return _VisualsSwig.Visuals_Geometries_Sphere_Vector_push_back(self, x)

    def front(self):
        r"""front(Visuals_Geometries_Sphere_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::value_type const &"""
        return _VisualsSwig.Visuals_Geometries_Sphere_Vector_front(self)

    def back(self):
        r"""back(Visuals_Geometries_Sphere_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::value_type const &"""
        return _VisualsSwig.Visuals_Geometries_Sphere_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Visuals_Geometries_Sphere_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::size_type n, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::size_type
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::value_type const &

        """
        return _VisualsSwig.Visuals_Geometries_Sphere_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Visuals_Geometries_Sphere_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::size_type

        resize(Visuals_Geometries_Sphere_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::size_type new_size, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::size_type
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::value_type const &

        """
        return _VisualsSwig.Visuals_Geometries_Sphere_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Visuals_Geometries_Sphere_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::iterator pos, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::iterator
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::value_type const &

        insert(Visuals_Geometries_Sphere_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::iterator pos, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::size_type n, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::iterator
        n: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::size_type
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::value_type const &

        """
        return _VisualsSwig.Visuals_Geometries_Sphere_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Visuals_Geometries_Sphere_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::size_type

        """
        return _VisualsSwig.Visuals_Geometries_Sphere_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Visuals_Geometries_Sphere_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::Sphere > >::size_type"""
        return _VisualsSwig.Visuals_Geometries_Sphere_Vector_capacity(self)
    __swig_destroy__ = _VisualsSwig.delete_Visuals_Geometries_Sphere_Vector

# Register Visuals_Geometries_Sphere_Vector in _VisualsSwig:
_VisualsSwig.Visuals_Geometries_Sphere_Vector_swigregister(Visuals_Geometries_Sphere_Vector)

class Visuals_Geometries_TriMeshGeometry_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Visuals_Geometries_TriMeshGeometry_Vector self) -> SwigPyIterator"""
        return _VisualsSwig.Visuals_Geometries_TriMeshGeometry_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Visuals_Geometries_TriMeshGeometry_Vector self) -> bool"""
        return _VisualsSwig.Visuals_Geometries_TriMeshGeometry_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Visuals_Geometries_TriMeshGeometry_Vector self) -> bool"""
        return _VisualsSwig.Visuals_Geometries_TriMeshGeometry_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Visuals_Geometries_TriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::size_type"""
        return _VisualsSwig.Visuals_Geometries_TriMeshGeometry_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Visuals_Geometries_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::difference_type j) -> Visuals_Geometries_TriMeshGeometry_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::difference_type

        """
        return _VisualsSwig.Visuals_Geometries_TriMeshGeometry_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Visuals_Geometries_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::difference_type

        __setslice__(Visuals_Geometries_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::difference_type j, Visuals_Geometries_TriMeshGeometry_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry >,std::allocator< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > > > const &

        """
        return _VisualsSwig.Visuals_Geometries_TriMeshGeometry_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Visuals_Geometries_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::difference_type

        """
        return _VisualsSwig.Visuals_Geometries_TriMeshGeometry_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Visuals_Geometries_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::difference_type

        __delitem__(Visuals_Geometries_TriMeshGeometry_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _VisualsSwig.Visuals_Geometries_TriMeshGeometry_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Visuals_Geometries_TriMeshGeometry_Vector self, PySliceObject * slice) -> Visuals_Geometries_TriMeshGeometry_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Visuals_Geometries_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::difference_type

        """
        return _VisualsSwig.Visuals_Geometries_TriMeshGeometry_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Visuals_Geometries_TriMeshGeometry_Vector self, PySliceObject * slice, Visuals_Geometries_TriMeshGeometry_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry >,std::allocator< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > > > const &

        __setitem__(Visuals_Geometries_TriMeshGeometry_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Visuals_Geometries_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::value_type const &

        """
        return _VisualsSwig.Visuals_Geometries_TriMeshGeometry_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Visuals_Geometries_TriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::value_type"""
        return _VisualsSwig.Visuals_Geometries_TriMeshGeometry_Vector_pop(self)

    def append(self, x):
        r"""
        append(Visuals_Geometries_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::value_type const &

        """
        return _VisualsSwig.Visuals_Geometries_TriMeshGeometry_Vector_append(self, x)

    def empty(self):
        r"""empty(Visuals_Geometries_TriMeshGeometry_Vector self) -> bool"""
        return _VisualsSwig.Visuals_Geometries_TriMeshGeometry_Vector_empty(self)

    def size(self):
        r"""size(Visuals_Geometries_TriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::size_type"""
        return _VisualsSwig.Visuals_Geometries_TriMeshGeometry_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Visuals_Geometries_TriMeshGeometry_Vector self, Visuals_Geometries_TriMeshGeometry_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > > &

        """
        return _VisualsSwig.Visuals_Geometries_TriMeshGeometry_Vector_swap(self, v)

    def begin(self):
        r"""begin(Visuals_Geometries_TriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::iterator"""
        return _VisualsSwig.Visuals_Geometries_TriMeshGeometry_Vector_begin(self)

    def end(self):
        r"""end(Visuals_Geometries_TriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::iterator"""
        return _VisualsSwig.Visuals_Geometries_TriMeshGeometry_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Visuals_Geometries_TriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::reverse_iterator"""
        return _VisualsSwig.Visuals_Geometries_TriMeshGeometry_Vector_rbegin(self)

    def rend(self):
        r"""rend(Visuals_Geometries_TriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::reverse_iterator"""
        return _VisualsSwig.Visuals_Geometries_TriMeshGeometry_Vector_rend(self)

    def clear(self):
        r"""clear(Visuals_Geometries_TriMeshGeometry_Vector self)"""
        return _VisualsSwig.Visuals_Geometries_TriMeshGeometry_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Visuals_Geometries_TriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::allocator_type"""
        return _VisualsSwig.Visuals_Geometries_TriMeshGeometry_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Visuals_Geometries_TriMeshGeometry_Vector self)"""
        return _VisualsSwig.Visuals_Geometries_TriMeshGeometry_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Visuals_Geometries_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::iterator

        erase(Visuals_Geometries_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::iterator first, std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::iterator last) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::iterator
        last: std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::iterator

        """
        return _VisualsSwig.Visuals_Geometries_TriMeshGeometry_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Visuals_Geometries_TriMeshGeometry_Vector self) -> Visuals_Geometries_TriMeshGeometry_Vector
        __init__(Visuals_Geometries_TriMeshGeometry_Vector self, Visuals_Geometries_TriMeshGeometry_Vector other) -> Visuals_Geometries_TriMeshGeometry_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > > const &

        __init__(Visuals_Geometries_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::size_type size) -> Visuals_Geometries_TriMeshGeometry_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::size_type

        __init__(Visuals_Geometries_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::size_type size, std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::value_type const & value) -> Visuals_Geometries_TriMeshGeometry_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::size_type
        value: std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::value_type const &

        """
        _VisualsSwig.Visuals_Geometries_TriMeshGeometry_Vector_swiginit(self, _VisualsSwig.new_Visuals_Geometries_TriMeshGeometry_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Visuals_Geometries_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::value_type const &

        """
        return _VisualsSwig.Visuals_Geometries_TriMeshGeometry_Vector_push_back(self, x)

    def front(self):
        r"""front(Visuals_Geometries_TriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::value_type const &"""
        return _VisualsSwig.Visuals_Geometries_TriMeshGeometry_Vector_front(self)

    def back(self):
        r"""back(Visuals_Geometries_TriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::value_type const &"""
        return _VisualsSwig.Visuals_Geometries_TriMeshGeometry_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Visuals_Geometries_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::size_type n, std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::size_type
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::value_type const &

        """
        return _VisualsSwig.Visuals_Geometries_TriMeshGeometry_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Visuals_Geometries_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::size_type

        resize(Visuals_Geometries_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::size_type new_size, std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::size_type
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::value_type const &

        """
        return _VisualsSwig.Visuals_Geometries_TriMeshGeometry_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Visuals_Geometries_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::iterator pos, std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::iterator
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::value_type const &

        insert(Visuals_Geometries_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::iterator pos, std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::size_type n, std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::iterator
        n: std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::size_type
        x: std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::value_type const &

        """
        return _VisualsSwig.Visuals_Geometries_TriMeshGeometry_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Visuals_Geometries_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::size_type

        """
        return _VisualsSwig.Visuals_Geometries_TriMeshGeometry_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Visuals_Geometries_TriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Geometries::TriMeshGeometry > >::size_type"""
        return _VisualsSwig.Visuals_Geometries_TriMeshGeometry_Vector_capacity(self)
    __swig_destroy__ = _VisualsSwig.delete_Visuals_Geometries_TriMeshGeometry_Vector

# Register Visuals_Geometries_TriMeshGeometry_Vector in _VisualsSwig:
_VisualsSwig.Visuals_Geometries_TriMeshGeometry_Vector_swigregister(Visuals_Geometries_TriMeshGeometry_Vector)

class Visuals_Materials_Material_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Visuals_Materials_Material_Vector self) -> SwigPyIterator"""
        return _VisualsSwig.Visuals_Materials_Material_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Visuals_Materials_Material_Vector self) -> bool"""
        return _VisualsSwig.Visuals_Materials_Material_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Visuals_Materials_Material_Vector self) -> bool"""
        return _VisualsSwig.Visuals_Materials_Material_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Visuals_Materials_Material_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::size_type"""
        return _VisualsSwig.Visuals_Materials_Material_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Visuals_Materials_Material_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::difference_type j) -> Visuals_Materials_Material_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::difference_type

        """
        return _VisualsSwig.Visuals_Materials_Material_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Visuals_Materials_Material_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::difference_type

        __setslice__(Visuals_Materials_Material_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::difference_type j, Visuals_Materials_Material_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Visuals::Materials::Material >,std::allocator< std::shared_ptr< openplx::Visuals::Materials::Material > > > const &

        """
        return _VisualsSwig.Visuals_Materials_Material_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Visuals_Materials_Material_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::difference_type

        """
        return _VisualsSwig.Visuals_Materials_Material_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Visuals_Materials_Material_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::difference_type

        __delitem__(Visuals_Materials_Material_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _VisualsSwig.Visuals_Materials_Material_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Visuals_Materials_Material_Vector self, PySliceObject * slice) -> Visuals_Materials_Material_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Visuals_Materials_Material_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::difference_type

        """
        return _VisualsSwig.Visuals_Materials_Material_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Visuals_Materials_Material_Vector self, PySliceObject * slice, Visuals_Materials_Material_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Visuals::Materials::Material >,std::allocator< std::shared_ptr< openplx::Visuals::Materials::Material > > > const &

        __setitem__(Visuals_Materials_Material_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Visuals_Materials_Material_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::value_type const &

        """
        return _VisualsSwig.Visuals_Materials_Material_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Visuals_Materials_Material_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::value_type"""
        return _VisualsSwig.Visuals_Materials_Material_Vector_pop(self)

    def append(self, x):
        r"""
        append(Visuals_Materials_Material_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::value_type const &

        """
        return _VisualsSwig.Visuals_Materials_Material_Vector_append(self, x)

    def empty(self):
        r"""empty(Visuals_Materials_Material_Vector self) -> bool"""
        return _VisualsSwig.Visuals_Materials_Material_Vector_empty(self)

    def size(self):
        r"""size(Visuals_Materials_Material_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::size_type"""
        return _VisualsSwig.Visuals_Materials_Material_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Visuals_Materials_Material_Vector self, Visuals_Materials_Material_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > > &

        """
        return _VisualsSwig.Visuals_Materials_Material_Vector_swap(self, v)

    def begin(self):
        r"""begin(Visuals_Materials_Material_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::iterator"""
        return _VisualsSwig.Visuals_Materials_Material_Vector_begin(self)

    def end(self):
        r"""end(Visuals_Materials_Material_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::iterator"""
        return _VisualsSwig.Visuals_Materials_Material_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Visuals_Materials_Material_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::reverse_iterator"""
        return _VisualsSwig.Visuals_Materials_Material_Vector_rbegin(self)

    def rend(self):
        r"""rend(Visuals_Materials_Material_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::reverse_iterator"""
        return _VisualsSwig.Visuals_Materials_Material_Vector_rend(self)

    def clear(self):
        r"""clear(Visuals_Materials_Material_Vector self)"""
        return _VisualsSwig.Visuals_Materials_Material_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Visuals_Materials_Material_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::allocator_type"""
        return _VisualsSwig.Visuals_Materials_Material_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Visuals_Materials_Material_Vector self)"""
        return _VisualsSwig.Visuals_Materials_Material_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Visuals_Materials_Material_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::iterator

        erase(Visuals_Materials_Material_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::iterator first, std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::iterator last) -> std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::iterator
        last: std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::iterator

        """
        return _VisualsSwig.Visuals_Materials_Material_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Visuals_Materials_Material_Vector self) -> Visuals_Materials_Material_Vector
        __init__(Visuals_Materials_Material_Vector self, Visuals_Materials_Material_Vector other) -> Visuals_Materials_Material_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > > const &

        __init__(Visuals_Materials_Material_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::size_type size) -> Visuals_Materials_Material_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::size_type

        __init__(Visuals_Materials_Material_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::size_type size, std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::value_type const & value) -> Visuals_Materials_Material_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::size_type
        value: std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::value_type const &

        """
        _VisualsSwig.Visuals_Materials_Material_Vector_swiginit(self, _VisualsSwig.new_Visuals_Materials_Material_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Visuals_Materials_Material_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::value_type const &

        """
        return _VisualsSwig.Visuals_Materials_Material_Vector_push_back(self, x)

    def front(self):
        r"""front(Visuals_Materials_Material_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::value_type const &"""
        return _VisualsSwig.Visuals_Materials_Material_Vector_front(self)

    def back(self):
        r"""back(Visuals_Materials_Material_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::value_type const &"""
        return _VisualsSwig.Visuals_Materials_Material_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Visuals_Materials_Material_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::size_type n, std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::size_type
        x: std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::value_type const &

        """
        return _VisualsSwig.Visuals_Materials_Material_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Visuals_Materials_Material_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::size_type

        resize(Visuals_Materials_Material_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::size_type new_size, std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::size_type
        x: std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::value_type const &

        """
        return _VisualsSwig.Visuals_Materials_Material_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Visuals_Materials_Material_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::iterator pos, std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::iterator
        x: std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::value_type const &

        insert(Visuals_Materials_Material_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::iterator pos, std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::size_type n, std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::iterator
        n: std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::size_type
        x: std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::value_type const &

        """
        return _VisualsSwig.Visuals_Materials_Material_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Visuals_Materials_Material_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::size_type

        """
        return _VisualsSwig.Visuals_Materials_Material_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Visuals_Materials_Material_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Materials::Material > >::size_type"""
        return _VisualsSwig.Visuals_Materials_Material_Vector_capacity(self)
    __swig_destroy__ = _VisualsSwig.delete_Visuals_Materials_Material_Vector

# Register Visuals_Materials_Material_Vector in _VisualsSwig:
_VisualsSwig.Visuals_Materials_Material_Vector_swigregister(Visuals_Materials_Material_Vector)

class Visuals_Materials_TextureMaterial_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Visuals_Materials_TextureMaterial_Vector self) -> SwigPyIterator"""
        return _VisualsSwig.Visuals_Materials_TextureMaterial_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Visuals_Materials_TextureMaterial_Vector self) -> bool"""
        return _VisualsSwig.Visuals_Materials_TextureMaterial_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Visuals_Materials_TextureMaterial_Vector self) -> bool"""
        return _VisualsSwig.Visuals_Materials_TextureMaterial_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Visuals_Materials_TextureMaterial_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::size_type"""
        return _VisualsSwig.Visuals_Materials_TextureMaterial_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Visuals_Materials_TextureMaterial_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::difference_type j) -> Visuals_Materials_TextureMaterial_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::difference_type

        """
        return _VisualsSwig.Visuals_Materials_TextureMaterial_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Visuals_Materials_TextureMaterial_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::difference_type

        __setslice__(Visuals_Materials_TextureMaterial_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::difference_type j, Visuals_Materials_TextureMaterial_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial >,std::allocator< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > > > const &

        """
        return _VisualsSwig.Visuals_Materials_TextureMaterial_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Visuals_Materials_TextureMaterial_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::difference_type

        """
        return _VisualsSwig.Visuals_Materials_TextureMaterial_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Visuals_Materials_TextureMaterial_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::difference_type

        __delitem__(Visuals_Materials_TextureMaterial_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _VisualsSwig.Visuals_Materials_TextureMaterial_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Visuals_Materials_TextureMaterial_Vector self, PySliceObject * slice) -> Visuals_Materials_TextureMaterial_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Visuals_Materials_TextureMaterial_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::difference_type

        """
        return _VisualsSwig.Visuals_Materials_TextureMaterial_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Visuals_Materials_TextureMaterial_Vector self, PySliceObject * slice, Visuals_Materials_TextureMaterial_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial >,std::allocator< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > > > const &

        __setitem__(Visuals_Materials_TextureMaterial_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Visuals_Materials_TextureMaterial_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::difference_type i, std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::value_type const &

        """
        return _VisualsSwig.Visuals_Materials_TextureMaterial_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Visuals_Materials_TextureMaterial_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::value_type"""
        return _VisualsSwig.Visuals_Materials_TextureMaterial_Vector_pop(self)

    def append(self, x):
        r"""
        append(Visuals_Materials_TextureMaterial_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::value_type const &

        """
        return _VisualsSwig.Visuals_Materials_TextureMaterial_Vector_append(self, x)

    def empty(self):
        r"""empty(Visuals_Materials_TextureMaterial_Vector self) -> bool"""
        return _VisualsSwig.Visuals_Materials_TextureMaterial_Vector_empty(self)

    def size(self):
        r"""size(Visuals_Materials_TextureMaterial_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::size_type"""
        return _VisualsSwig.Visuals_Materials_TextureMaterial_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Visuals_Materials_TextureMaterial_Vector self, Visuals_Materials_TextureMaterial_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > > &

        """
        return _VisualsSwig.Visuals_Materials_TextureMaterial_Vector_swap(self, v)

    def begin(self):
        r"""begin(Visuals_Materials_TextureMaterial_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::iterator"""
        return _VisualsSwig.Visuals_Materials_TextureMaterial_Vector_begin(self)

    def end(self):
        r"""end(Visuals_Materials_TextureMaterial_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::iterator"""
        return _VisualsSwig.Visuals_Materials_TextureMaterial_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Visuals_Materials_TextureMaterial_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::reverse_iterator"""
        return _VisualsSwig.Visuals_Materials_TextureMaterial_Vector_rbegin(self)

    def rend(self):
        r"""rend(Visuals_Materials_TextureMaterial_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::reverse_iterator"""
        return _VisualsSwig.Visuals_Materials_TextureMaterial_Vector_rend(self)

    def clear(self):
        r"""clear(Visuals_Materials_TextureMaterial_Vector self)"""
        return _VisualsSwig.Visuals_Materials_TextureMaterial_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Visuals_Materials_TextureMaterial_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::allocator_type"""
        return _VisualsSwig.Visuals_Materials_TextureMaterial_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Visuals_Materials_TextureMaterial_Vector self)"""
        return _VisualsSwig.Visuals_Materials_TextureMaterial_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Visuals_Materials_TextureMaterial_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::iterator

        erase(Visuals_Materials_TextureMaterial_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::iterator first, std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::iterator last) -> std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::iterator
        last: std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::iterator

        """
        return _VisualsSwig.Visuals_Materials_TextureMaterial_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Visuals_Materials_TextureMaterial_Vector self) -> Visuals_Materials_TextureMaterial_Vector
        __init__(Visuals_Materials_TextureMaterial_Vector self, Visuals_Materials_TextureMaterial_Vector other) -> Visuals_Materials_TextureMaterial_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > > const &

        __init__(Visuals_Materials_TextureMaterial_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::size_type size) -> Visuals_Materials_TextureMaterial_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::size_type

        __init__(Visuals_Materials_TextureMaterial_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::size_type size, std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::value_type const & value) -> Visuals_Materials_TextureMaterial_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::size_type
        value: std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::value_type const &

        """
        _VisualsSwig.Visuals_Materials_TextureMaterial_Vector_swiginit(self, _VisualsSwig.new_Visuals_Materials_TextureMaterial_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Visuals_Materials_TextureMaterial_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::value_type const &

        """
        return _VisualsSwig.Visuals_Materials_TextureMaterial_Vector_push_back(self, x)

    def front(self):
        r"""front(Visuals_Materials_TextureMaterial_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::value_type const &"""
        return _VisualsSwig.Visuals_Materials_TextureMaterial_Vector_front(self)

    def back(self):
        r"""back(Visuals_Materials_TextureMaterial_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::value_type const &"""
        return _VisualsSwig.Visuals_Materials_TextureMaterial_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Visuals_Materials_TextureMaterial_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::size_type n, std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::size_type
        x: std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::value_type const &

        """
        return _VisualsSwig.Visuals_Materials_TextureMaterial_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Visuals_Materials_TextureMaterial_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::size_type

        resize(Visuals_Materials_TextureMaterial_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::size_type new_size, std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::size_type
        x: std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::value_type const &

        """
        return _VisualsSwig.Visuals_Materials_TextureMaterial_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Visuals_Materials_TextureMaterial_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::iterator pos, std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::iterator
        x: std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::value_type const &

        insert(Visuals_Materials_TextureMaterial_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::iterator pos, std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::size_type n, std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::iterator
        n: std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::size_type
        x: std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::value_type const &

        """
        return _VisualsSwig.Visuals_Materials_TextureMaterial_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Visuals_Materials_TextureMaterial_Vector self, std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::size_type

        """
        return _VisualsSwig.Visuals_Materials_TextureMaterial_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Visuals_Materials_TextureMaterial_Vector self) -> std::vector< std::shared_ptr< openplx::Visuals::Materials::TextureMaterial > >::size_type"""
        return _VisualsSwig.Visuals_Materials_TextureMaterial_Vector_capacity(self)
    __swig_destroy__ = _VisualsSwig.delete_Visuals_Materials_TextureMaterial_Vector

# Register Visuals_Materials_TextureMaterial_Vector in _VisualsSwig:
_VisualsSwig.Visuals_Materials_TextureMaterial_Vector_swigregister(Visuals_Materials_TextureMaterial_Vector)

class Visuals_Geometries_Geometry(openplx.Core.Object):
    r"""Proxy of C++ openplx::Visuals::Geometries::Geometry class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Visuals_Geometries_Geometry self) -> Visuals_Geometries_Geometry"""
        _VisualsSwig.Visuals_Geometries_Geometry_swiginit(self, _VisualsSwig.new_Visuals_Geometries_Geometry())

    def local_transform(self):
        r"""local_transform(Visuals_Geometries_Geometry self) -> std::shared_ptr< openplx::Math::AffineTransform >"""
        return _VisualsSwig.Visuals_Geometries_Geometry_local_transform(self)

    def material(self):
        r"""material(Visuals_Geometries_Geometry self) -> std::shared_ptr< openplx::Visuals::Materials::Material >"""
        return _VisualsSwig.Visuals_Geometries_Geometry_material(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Visuals_Geometries_Geometry self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _VisualsSwig.Visuals_Geometries_Geometry_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Visuals_Geometries_Geometry self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _VisualsSwig.Visuals_Geometries_Geometry_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Visuals_Geometries_Geometry self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _VisualsSwig.Visuals_Geometries_Geometry_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Visuals_Geometries_Geometry self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _VisualsSwig.Visuals_Geometries_Geometry_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Visuals_Geometries_Geometry self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _VisualsSwig.Visuals_Geometries_Geometry_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Visuals_Geometries_Geometry self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _VisualsSwig.Visuals_Geometries_Geometry_triggerOnInit(self, context)
    __swig_destroy__ = _VisualsSwig.delete_Visuals_Geometries_Geometry

# Register Visuals_Geometries_Geometry in _VisualsSwig:
_VisualsSwig.Visuals_Geometries_Geometry_swigregister(Visuals_Geometries_Geometry)

class Visuals_Geometries_Box(Visuals_Geometries_Geometry):
    r"""Proxy of C++ openplx::Visuals::Geometries::Box class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Visuals_Geometries_Box self) -> Visuals_Geometries_Box"""
        _VisualsSwig.Visuals_Geometries_Box_swiginit(self, _VisualsSwig.new_Visuals_Geometries_Box())

    def size(self):
        r"""size(Visuals_Geometries_Box self) -> std::shared_ptr< openplx::Math::Vec3 >"""
        return _VisualsSwig.Visuals_Geometries_Box_size(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Visuals_Geometries_Box self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _VisualsSwig.Visuals_Geometries_Box_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Visuals_Geometries_Box self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _VisualsSwig.Visuals_Geometries_Box_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Visuals_Geometries_Box self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _VisualsSwig.Visuals_Geometries_Box_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Visuals_Geometries_Box self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _VisualsSwig.Visuals_Geometries_Box_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Visuals_Geometries_Box self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _VisualsSwig.Visuals_Geometries_Box_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Visuals_Geometries_Box self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _VisualsSwig.Visuals_Geometries_Box_triggerOnInit(self, context)
    __swig_destroy__ = _VisualsSwig.delete_Visuals_Geometries_Box

# Register Visuals_Geometries_Box in _VisualsSwig:
_VisualsSwig.Visuals_Geometries_Box_swigregister(Visuals_Geometries_Box)

class Visuals_Geometries_TriMeshGeometry(Visuals_Geometries_Geometry):
    r"""Proxy of C++ openplx::Visuals::Geometries::TriMeshGeometry class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Visuals_Geometries_TriMeshGeometry self) -> Visuals_Geometries_TriMeshGeometry"""
        _VisualsSwig.Visuals_Geometries_TriMeshGeometry_swiginit(self, _VisualsSwig.new_Visuals_Geometries_TriMeshGeometry())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Visuals_Geometries_TriMeshGeometry self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _VisualsSwig.Visuals_Geometries_TriMeshGeometry_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Visuals_Geometries_TriMeshGeometry self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _VisualsSwig.Visuals_Geometries_TriMeshGeometry_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Visuals_Geometries_TriMeshGeometry self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _VisualsSwig.Visuals_Geometries_TriMeshGeometry_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Visuals_Geometries_TriMeshGeometry self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _VisualsSwig.Visuals_Geometries_TriMeshGeometry_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Visuals_Geometries_TriMeshGeometry self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _VisualsSwig.Visuals_Geometries_TriMeshGeometry_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Visuals_Geometries_TriMeshGeometry self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _VisualsSwig.Visuals_Geometries_TriMeshGeometry_triggerOnInit(self, context)
    __swig_destroy__ = _VisualsSwig.delete_Visuals_Geometries_TriMeshGeometry

# Register Visuals_Geometries_TriMeshGeometry in _VisualsSwig:
_VisualsSwig.Visuals_Geometries_TriMeshGeometry_swigregister(Visuals_Geometries_TriMeshGeometry)

class Visuals_Geometries_ConvexMesh(Visuals_Geometries_TriMeshGeometry):
    r"""Proxy of C++ openplx::Visuals::Geometries::ConvexMesh class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Visuals_Geometries_ConvexMesh self) -> Visuals_Geometries_ConvexMesh"""
        _VisualsSwig.Visuals_Geometries_ConvexMesh_swiginit(self, _VisualsSwig.new_Visuals_Geometries_ConvexMesh())

    def vertices(self):
        r"""vertices(Visuals_Geometries_ConvexMesh self) -> Math_Vec3_Vector"""
        return _VisualsSwig.Visuals_Geometries_ConvexMesh_vertices(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Visuals_Geometries_ConvexMesh self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _VisualsSwig.Visuals_Geometries_ConvexMesh_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Visuals_Geometries_ConvexMesh self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _VisualsSwig.Visuals_Geometries_ConvexMesh_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Visuals_Geometries_ConvexMesh self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _VisualsSwig.Visuals_Geometries_ConvexMesh_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Visuals_Geometries_ConvexMesh self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _VisualsSwig.Visuals_Geometries_ConvexMesh_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Visuals_Geometries_ConvexMesh self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _VisualsSwig.Visuals_Geometries_ConvexMesh_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Visuals_Geometries_ConvexMesh self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _VisualsSwig.Visuals_Geometries_ConvexMesh_triggerOnInit(self, context)
    __swig_destroy__ = _VisualsSwig.delete_Visuals_Geometries_ConvexMesh

# Register Visuals_Geometries_ConvexMesh in _VisualsSwig:
_VisualsSwig.Visuals_Geometries_ConvexMesh_swigregister(Visuals_Geometries_ConvexMesh)

class Visuals_Geometries_Cylinder(Visuals_Geometries_Geometry):
    r"""Proxy of C++ openplx::Visuals::Geometries::Cylinder class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Visuals_Geometries_Cylinder self) -> Visuals_Geometries_Cylinder"""
        _VisualsSwig.Visuals_Geometries_Cylinder_swiginit(self, _VisualsSwig.new_Visuals_Geometries_Cylinder())

    def radius(self):
        r"""radius(Visuals_Geometries_Cylinder self) -> double"""
        return _VisualsSwig.Visuals_Geometries_Cylinder_radius(self)

    def height(self):
        r"""height(Visuals_Geometries_Cylinder self) -> double"""
        return _VisualsSwig.Visuals_Geometries_Cylinder_height(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Visuals_Geometries_Cylinder self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _VisualsSwig.Visuals_Geometries_Cylinder_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Visuals_Geometries_Cylinder self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _VisualsSwig.Visuals_Geometries_Cylinder_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Visuals_Geometries_Cylinder self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _VisualsSwig.Visuals_Geometries_Cylinder_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Visuals_Geometries_Cylinder self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _VisualsSwig.Visuals_Geometries_Cylinder_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Visuals_Geometries_Cylinder self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _VisualsSwig.Visuals_Geometries_Cylinder_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Visuals_Geometries_Cylinder self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _VisualsSwig.Visuals_Geometries_Cylinder_triggerOnInit(self, context)
    __swig_destroy__ = _VisualsSwig.delete_Visuals_Geometries_Cylinder

# Register Visuals_Geometries_Cylinder in _VisualsSwig:
_VisualsSwig.Visuals_Geometries_Cylinder_swigregister(Visuals_Geometries_Cylinder)

class Visuals_Geometries_ExternalTriMeshGeometry(Visuals_Geometries_TriMeshGeometry):
    r"""Proxy of C++ openplx::Visuals::Geometries::ExternalTriMeshGeometry class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Visuals_Geometries_ExternalTriMeshGeometry self) -> Visuals_Geometries_ExternalTriMeshGeometry"""
        _VisualsSwig.Visuals_Geometries_ExternalTriMeshGeometry_swiginit(self, _VisualsSwig.new_Visuals_Geometries_ExternalTriMeshGeometry())

    def path(self):
        r"""path(Visuals_Geometries_ExternalTriMeshGeometry self) -> std::string"""
        return _VisualsSwig.Visuals_Geometries_ExternalTriMeshGeometry_path(self)

    def scale(self):
        r"""scale(Visuals_Geometries_ExternalTriMeshGeometry self) -> std::shared_ptr< openplx::Math::Vec3 >"""
        return _VisualsSwig.Visuals_Geometries_ExternalTriMeshGeometry_scale(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Visuals_Geometries_ExternalTriMeshGeometry self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _VisualsSwig.Visuals_Geometries_ExternalTriMeshGeometry_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Visuals_Geometries_ExternalTriMeshGeometry self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _VisualsSwig.Visuals_Geometries_ExternalTriMeshGeometry_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Visuals_Geometries_ExternalTriMeshGeometry self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _VisualsSwig.Visuals_Geometries_ExternalTriMeshGeometry_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Visuals_Geometries_ExternalTriMeshGeometry self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _VisualsSwig.Visuals_Geometries_ExternalTriMeshGeometry_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Visuals_Geometries_ExternalTriMeshGeometry self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _VisualsSwig.Visuals_Geometries_ExternalTriMeshGeometry_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Visuals_Geometries_ExternalTriMeshGeometry self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _VisualsSwig.Visuals_Geometries_ExternalTriMeshGeometry_triggerOnInit(self, context)
    __swig_destroy__ = _VisualsSwig.delete_Visuals_Geometries_ExternalTriMeshGeometry

# Register Visuals_Geometries_ExternalTriMeshGeometry in _VisualsSwig:
_VisualsSwig.Visuals_Geometries_ExternalTriMeshGeometry_swigregister(Visuals_Geometries_ExternalTriMeshGeometry)

class Visuals_Geometries_Sphere(Visuals_Geometries_Geometry):
    r"""Proxy of C++ openplx::Visuals::Geometries::Sphere class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Visuals_Geometries_Sphere self) -> Visuals_Geometries_Sphere"""
        _VisualsSwig.Visuals_Geometries_Sphere_swiginit(self, _VisualsSwig.new_Visuals_Geometries_Sphere())

    def radius(self):
        r"""radius(Visuals_Geometries_Sphere self) -> double"""
        return _VisualsSwig.Visuals_Geometries_Sphere_radius(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Visuals_Geometries_Sphere self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _VisualsSwig.Visuals_Geometries_Sphere_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Visuals_Geometries_Sphere self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _VisualsSwig.Visuals_Geometries_Sphere_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Visuals_Geometries_Sphere self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _VisualsSwig.Visuals_Geometries_Sphere_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Visuals_Geometries_Sphere self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _VisualsSwig.Visuals_Geometries_Sphere_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Visuals_Geometries_Sphere self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _VisualsSwig.Visuals_Geometries_Sphere_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Visuals_Geometries_Sphere self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _VisualsSwig.Visuals_Geometries_Sphere_triggerOnInit(self, context)
    __swig_destroy__ = _VisualsSwig.delete_Visuals_Geometries_Sphere

# Register Visuals_Geometries_Sphere in _VisualsSwig:
_VisualsSwig.Visuals_Geometries_Sphere_swigregister(Visuals_Geometries_Sphere)

class Visuals_Materials_Material(openplx.Core.Object):
    r"""Proxy of C++ openplx::Visuals::Materials::Material class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Visuals_Materials_Material self) -> Visuals_Materials_Material"""
        _VisualsSwig.Visuals_Materials_Material_swiginit(self, _VisualsSwig.new_Visuals_Materials_Material())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Visuals_Materials_Material self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _VisualsSwig.Visuals_Materials_Material_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Visuals_Materials_Material self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _VisualsSwig.Visuals_Materials_Material_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Visuals_Materials_Material self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _VisualsSwig.Visuals_Materials_Material_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Visuals_Materials_Material self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _VisualsSwig.Visuals_Materials_Material_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Visuals_Materials_Material self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _VisualsSwig.Visuals_Materials_Material_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Visuals_Materials_Material self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _VisualsSwig.Visuals_Materials_Material_triggerOnInit(self, context)
    __swig_destroy__ = _VisualsSwig.delete_Visuals_Materials_Material

# Register Visuals_Materials_Material in _VisualsSwig:
_VisualsSwig.Visuals_Materials_Material_swigregister(Visuals_Materials_Material)

class Visuals_Materials_TextureMaterial(Visuals_Materials_Material):
    r"""Proxy of C++ openplx::Visuals::Materials::TextureMaterial class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Visuals_Materials_TextureMaterial self) -> Visuals_Materials_TextureMaterial"""
        _VisualsSwig.Visuals_Materials_TextureMaterial_swiginit(self, _VisualsSwig.new_Visuals_Materials_TextureMaterial())

    def path(self):
        r"""path(Visuals_Materials_TextureMaterial self) -> std::string"""
        return _VisualsSwig.Visuals_Materials_TextureMaterial_path(self)

    def repeat(self):
        r"""repeat(Visuals_Materials_TextureMaterial self) -> bool"""
        return _VisualsSwig.Visuals_Materials_TextureMaterial_repeat(self)

    def scale_u(self):
        r"""scale_u(Visuals_Materials_TextureMaterial self) -> double"""
        return _VisualsSwig.Visuals_Materials_TextureMaterial_scale_u(self)

    def scale_v(self):
        r"""scale_v(Visuals_Materials_TextureMaterial self) -> double"""
        return _VisualsSwig.Visuals_Materials_TextureMaterial_scale_v(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Visuals_Materials_TextureMaterial self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _VisualsSwig.Visuals_Materials_TextureMaterial_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Visuals_Materials_TextureMaterial self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _VisualsSwig.Visuals_Materials_TextureMaterial_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Visuals_Materials_TextureMaterial self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _VisualsSwig.Visuals_Materials_TextureMaterial_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Visuals_Materials_TextureMaterial self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _VisualsSwig.Visuals_Materials_TextureMaterial_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Visuals_Materials_TextureMaterial self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _VisualsSwig.Visuals_Materials_TextureMaterial_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Visuals_Materials_TextureMaterial self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _VisualsSwig.Visuals_Materials_TextureMaterial_triggerOnInit(self, context)
    __swig_destroy__ = _VisualsSwig.delete_Visuals_Materials_TextureMaterial

# Register Visuals_Materials_TextureMaterial in _VisualsSwig:
_VisualsSwig.Visuals_Materials_TextureMaterial_swigregister(Visuals_Materials_TextureMaterial)



