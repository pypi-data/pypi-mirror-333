# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _MathSwig
else:
    import _MathSwig

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SHARED_PTR_DISOWN = _MathSwig.SHARED_PTR_DISOWN

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MathSwig.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _MathSwig.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _MathSwig.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _MathSwig.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _MathSwig.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _MathSwig.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _MathSwig.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _MathSwig.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _MathSwig.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _MathSwig.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _MathSwig.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _MathSwig.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _MathSwig.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _MathSwig.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _MathSwig.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _MathSwig.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _MathSwig.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _MathSwig:
_MathSwig.SwigPyIterator_swigregister(SwigPyIterator)

import openplx.Core
class Math_AffineTransform_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Math::AffineTransform > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Math_AffineTransform_Vector self) -> SwigPyIterator"""
        return _MathSwig.Math_AffineTransform_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Math_AffineTransform_Vector self) -> bool"""
        return _MathSwig.Math_AffineTransform_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Math_AffineTransform_Vector self) -> bool"""
        return _MathSwig.Math_AffineTransform_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Math_AffineTransform_Vector self) -> std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::size_type"""
        return _MathSwig.Math_AffineTransform_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Math_AffineTransform_Vector self, std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::difference_type i, std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::difference_type j) -> Math_AffineTransform_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::difference_type

        """
        return _MathSwig.Math_AffineTransform_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Math_AffineTransform_Vector self, std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::difference_type i, std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::difference_type

        __setslice__(Math_AffineTransform_Vector self, std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::difference_type i, std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::difference_type j, Math_AffineTransform_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Math::AffineTransform >,std::allocator< std::shared_ptr< openplx::Math::AffineTransform > > > const &

        """
        return _MathSwig.Math_AffineTransform_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Math_AffineTransform_Vector self, std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::difference_type i, std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::difference_type

        """
        return _MathSwig.Math_AffineTransform_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Math_AffineTransform_Vector self, std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::difference_type

        __delitem__(Math_AffineTransform_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _MathSwig.Math_AffineTransform_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Math_AffineTransform_Vector self, PySliceObject * slice) -> Math_AffineTransform_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Math_AffineTransform_Vector self, std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::difference_type

        """
        return _MathSwig.Math_AffineTransform_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Math_AffineTransform_Vector self, PySliceObject * slice, Math_AffineTransform_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Math::AffineTransform >,std::allocator< std::shared_ptr< openplx::Math::AffineTransform > > > const &

        __setitem__(Math_AffineTransform_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Math_AffineTransform_Vector self, std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::difference_type i, std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::value_type const &

        """
        return _MathSwig.Math_AffineTransform_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Math_AffineTransform_Vector self) -> std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::value_type"""
        return _MathSwig.Math_AffineTransform_Vector_pop(self)

    def append(self, x):
        r"""
        append(Math_AffineTransform_Vector self, std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::value_type const &

        """
        return _MathSwig.Math_AffineTransform_Vector_append(self, x)

    def empty(self):
        r"""empty(Math_AffineTransform_Vector self) -> bool"""
        return _MathSwig.Math_AffineTransform_Vector_empty(self)

    def size(self):
        r"""size(Math_AffineTransform_Vector self) -> std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::size_type"""
        return _MathSwig.Math_AffineTransform_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Math_AffineTransform_Vector self, Math_AffineTransform_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Math::AffineTransform > > &

        """
        return _MathSwig.Math_AffineTransform_Vector_swap(self, v)

    def begin(self):
        r"""begin(Math_AffineTransform_Vector self) -> std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::iterator"""
        return _MathSwig.Math_AffineTransform_Vector_begin(self)

    def end(self):
        r"""end(Math_AffineTransform_Vector self) -> std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::iterator"""
        return _MathSwig.Math_AffineTransform_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Math_AffineTransform_Vector self) -> std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::reverse_iterator"""
        return _MathSwig.Math_AffineTransform_Vector_rbegin(self)

    def rend(self):
        r"""rend(Math_AffineTransform_Vector self) -> std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::reverse_iterator"""
        return _MathSwig.Math_AffineTransform_Vector_rend(self)

    def clear(self):
        r"""clear(Math_AffineTransform_Vector self)"""
        return _MathSwig.Math_AffineTransform_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Math_AffineTransform_Vector self) -> std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::allocator_type"""
        return _MathSwig.Math_AffineTransform_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Math_AffineTransform_Vector self)"""
        return _MathSwig.Math_AffineTransform_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Math_AffineTransform_Vector self, std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::iterator

        erase(Math_AffineTransform_Vector self, std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::iterator first, std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::iterator last) -> std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::iterator
        last: std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::iterator

        """
        return _MathSwig.Math_AffineTransform_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Math_AffineTransform_Vector self) -> Math_AffineTransform_Vector
        __init__(Math_AffineTransform_Vector self, Math_AffineTransform_Vector other) -> Math_AffineTransform_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Math::AffineTransform > > const &

        __init__(Math_AffineTransform_Vector self, std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::size_type size) -> Math_AffineTransform_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::size_type

        __init__(Math_AffineTransform_Vector self, std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::size_type size, std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::value_type const & value) -> Math_AffineTransform_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::size_type
        value: std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::value_type const &

        """
        _MathSwig.Math_AffineTransform_Vector_swiginit(self, _MathSwig.new_Math_AffineTransform_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Math_AffineTransform_Vector self, std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::value_type const &

        """
        return _MathSwig.Math_AffineTransform_Vector_push_back(self, x)

    def front(self):
        r"""front(Math_AffineTransform_Vector self) -> std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::value_type const &"""
        return _MathSwig.Math_AffineTransform_Vector_front(self)

    def back(self):
        r"""back(Math_AffineTransform_Vector self) -> std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::value_type const &"""
        return _MathSwig.Math_AffineTransform_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Math_AffineTransform_Vector self, std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::size_type n, std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::size_type
        x: std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::value_type const &

        """
        return _MathSwig.Math_AffineTransform_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Math_AffineTransform_Vector self, std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::size_type

        resize(Math_AffineTransform_Vector self, std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::size_type new_size, std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::size_type
        x: std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::value_type const &

        """
        return _MathSwig.Math_AffineTransform_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Math_AffineTransform_Vector self, std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::iterator pos, std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::iterator
        x: std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::value_type const &

        insert(Math_AffineTransform_Vector self, std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::iterator pos, std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::size_type n, std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::iterator
        n: std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::size_type
        x: std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::value_type const &

        """
        return _MathSwig.Math_AffineTransform_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Math_AffineTransform_Vector self, std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::size_type

        """
        return _MathSwig.Math_AffineTransform_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Math_AffineTransform_Vector self) -> std::vector< std::shared_ptr< openplx::Math::AffineTransform > >::size_type"""
        return _MathSwig.Math_AffineTransform_Vector_capacity(self)
    __swig_destroy__ = _MathSwig.delete_Math_AffineTransform_Vector

# Register Math_AffineTransform_Vector in _MathSwig:
_MathSwig.Math_AffineTransform_Vector_swigregister(Math_AffineTransform_Vector)

class Math_Functions_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Math::Functions > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Math_Functions_Vector self) -> SwigPyIterator"""
        return _MathSwig.Math_Functions_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Math_Functions_Vector self) -> bool"""
        return _MathSwig.Math_Functions_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Math_Functions_Vector self) -> bool"""
        return _MathSwig.Math_Functions_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Math_Functions_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Functions > >::size_type"""
        return _MathSwig.Math_Functions_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Math_Functions_Vector self, std::vector< std::shared_ptr< openplx::Math::Functions > >::difference_type i, std::vector< std::shared_ptr< openplx::Math::Functions > >::difference_type j) -> Math_Functions_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Functions > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Math::Functions > >::difference_type

        """
        return _MathSwig.Math_Functions_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Math_Functions_Vector self, std::vector< std::shared_ptr< openplx::Math::Functions > >::difference_type i, std::vector< std::shared_ptr< openplx::Math::Functions > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Functions > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Math::Functions > >::difference_type

        __setslice__(Math_Functions_Vector self, std::vector< std::shared_ptr< openplx::Math::Functions > >::difference_type i, std::vector< std::shared_ptr< openplx::Math::Functions > >::difference_type j, Math_Functions_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Functions > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Math::Functions > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Math::Functions >,std::allocator< std::shared_ptr< openplx::Math::Functions > > > const &

        """
        return _MathSwig.Math_Functions_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Math_Functions_Vector self, std::vector< std::shared_ptr< openplx::Math::Functions > >::difference_type i, std::vector< std::shared_ptr< openplx::Math::Functions > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Functions > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Math::Functions > >::difference_type

        """
        return _MathSwig.Math_Functions_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Math_Functions_Vector self, std::vector< std::shared_ptr< openplx::Math::Functions > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Functions > >::difference_type

        __delitem__(Math_Functions_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _MathSwig.Math_Functions_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Math_Functions_Vector self, PySliceObject * slice) -> Math_Functions_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Math_Functions_Vector self, std::vector< std::shared_ptr< openplx::Math::Functions > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Math::Functions > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Functions > >::difference_type

        """
        return _MathSwig.Math_Functions_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Math_Functions_Vector self, PySliceObject * slice, Math_Functions_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Math::Functions >,std::allocator< std::shared_ptr< openplx::Math::Functions > > > const &

        __setitem__(Math_Functions_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Math_Functions_Vector self, std::vector< std::shared_ptr< openplx::Math::Functions > >::difference_type i, std::vector< std::shared_ptr< openplx::Math::Functions > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Functions > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Math::Functions > >::value_type const &

        """
        return _MathSwig.Math_Functions_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Math_Functions_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Functions > >::value_type"""
        return _MathSwig.Math_Functions_Vector_pop(self)

    def append(self, x):
        r"""
        append(Math_Functions_Vector self, std::vector< std::shared_ptr< openplx::Math::Functions > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Math::Functions > >::value_type const &

        """
        return _MathSwig.Math_Functions_Vector_append(self, x)

    def empty(self):
        r"""empty(Math_Functions_Vector self) -> bool"""
        return _MathSwig.Math_Functions_Vector_empty(self)

    def size(self):
        r"""size(Math_Functions_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Functions > >::size_type"""
        return _MathSwig.Math_Functions_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Math_Functions_Vector self, Math_Functions_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Math::Functions > > &

        """
        return _MathSwig.Math_Functions_Vector_swap(self, v)

    def begin(self):
        r"""begin(Math_Functions_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Functions > >::iterator"""
        return _MathSwig.Math_Functions_Vector_begin(self)

    def end(self):
        r"""end(Math_Functions_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Functions > >::iterator"""
        return _MathSwig.Math_Functions_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Math_Functions_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Functions > >::reverse_iterator"""
        return _MathSwig.Math_Functions_Vector_rbegin(self)

    def rend(self):
        r"""rend(Math_Functions_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Functions > >::reverse_iterator"""
        return _MathSwig.Math_Functions_Vector_rend(self)

    def clear(self):
        r"""clear(Math_Functions_Vector self)"""
        return _MathSwig.Math_Functions_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Math_Functions_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Functions > >::allocator_type"""
        return _MathSwig.Math_Functions_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Math_Functions_Vector self)"""
        return _MathSwig.Math_Functions_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Math_Functions_Vector self, std::vector< std::shared_ptr< openplx::Math::Functions > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Math::Functions > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Math::Functions > >::iterator

        erase(Math_Functions_Vector self, std::vector< std::shared_ptr< openplx::Math::Functions > >::iterator first, std::vector< std::shared_ptr< openplx::Math::Functions > >::iterator last) -> std::vector< std::shared_ptr< openplx::Math::Functions > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Math::Functions > >::iterator
        last: std::vector< std::shared_ptr< openplx::Math::Functions > >::iterator

        """
        return _MathSwig.Math_Functions_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Math_Functions_Vector self) -> Math_Functions_Vector
        __init__(Math_Functions_Vector self, Math_Functions_Vector other) -> Math_Functions_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Math::Functions > > const &

        __init__(Math_Functions_Vector self, std::vector< std::shared_ptr< openplx::Math::Functions > >::size_type size) -> Math_Functions_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Math::Functions > >::size_type

        __init__(Math_Functions_Vector self, std::vector< std::shared_ptr< openplx::Math::Functions > >::size_type size, std::vector< std::shared_ptr< openplx::Math::Functions > >::value_type const & value) -> Math_Functions_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Math::Functions > >::size_type
        value: std::vector< std::shared_ptr< openplx::Math::Functions > >::value_type const &

        """
        _MathSwig.Math_Functions_Vector_swiginit(self, _MathSwig.new_Math_Functions_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Math_Functions_Vector self, std::vector< std::shared_ptr< openplx::Math::Functions > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Math::Functions > >::value_type const &

        """
        return _MathSwig.Math_Functions_Vector_push_back(self, x)

    def front(self):
        r"""front(Math_Functions_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Functions > >::value_type const &"""
        return _MathSwig.Math_Functions_Vector_front(self)

    def back(self):
        r"""back(Math_Functions_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Functions > >::value_type const &"""
        return _MathSwig.Math_Functions_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Math_Functions_Vector self, std::vector< std::shared_ptr< openplx::Math::Functions > >::size_type n, std::vector< std::shared_ptr< openplx::Math::Functions > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Math::Functions > >::size_type
        x: std::vector< std::shared_ptr< openplx::Math::Functions > >::value_type const &

        """
        return _MathSwig.Math_Functions_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Math_Functions_Vector self, std::vector< std::shared_ptr< openplx::Math::Functions > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Math::Functions > >::size_type

        resize(Math_Functions_Vector self, std::vector< std::shared_ptr< openplx::Math::Functions > >::size_type new_size, std::vector< std::shared_ptr< openplx::Math::Functions > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Math::Functions > >::size_type
        x: std::vector< std::shared_ptr< openplx::Math::Functions > >::value_type const &

        """
        return _MathSwig.Math_Functions_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Math_Functions_Vector self, std::vector< std::shared_ptr< openplx::Math::Functions > >::iterator pos, std::vector< std::shared_ptr< openplx::Math::Functions > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Math::Functions > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Math::Functions > >::iterator
        x: std::vector< std::shared_ptr< openplx::Math::Functions > >::value_type const &

        insert(Math_Functions_Vector self, std::vector< std::shared_ptr< openplx::Math::Functions > >::iterator pos, std::vector< std::shared_ptr< openplx::Math::Functions > >::size_type n, std::vector< std::shared_ptr< openplx::Math::Functions > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Math::Functions > >::iterator
        n: std::vector< std::shared_ptr< openplx::Math::Functions > >::size_type
        x: std::vector< std::shared_ptr< openplx::Math::Functions > >::value_type const &

        """
        return _MathSwig.Math_Functions_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Math_Functions_Vector self, std::vector< std::shared_ptr< openplx::Math::Functions > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Math::Functions > >::size_type

        """
        return _MathSwig.Math_Functions_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Math_Functions_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Functions > >::size_type"""
        return _MathSwig.Math_Functions_Vector_capacity(self)
    __swig_destroy__ = _MathSwig.delete_Math_Functions_Vector

# Register Math_Functions_Vector in _MathSwig:
_MathSwig.Math_Functions_Vector_swigregister(Math_Functions_Vector)

class Math_Line_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Math::Line > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Math_Line_Vector self) -> SwigPyIterator"""
        return _MathSwig.Math_Line_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Math_Line_Vector self) -> bool"""
        return _MathSwig.Math_Line_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Math_Line_Vector self) -> bool"""
        return _MathSwig.Math_Line_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Math_Line_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Line > >::size_type"""
        return _MathSwig.Math_Line_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Math_Line_Vector self, std::vector< std::shared_ptr< openplx::Math::Line > >::difference_type i, std::vector< std::shared_ptr< openplx::Math::Line > >::difference_type j) -> Math_Line_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Line > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Math::Line > >::difference_type

        """
        return _MathSwig.Math_Line_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Math_Line_Vector self, std::vector< std::shared_ptr< openplx::Math::Line > >::difference_type i, std::vector< std::shared_ptr< openplx::Math::Line > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Line > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Math::Line > >::difference_type

        __setslice__(Math_Line_Vector self, std::vector< std::shared_ptr< openplx::Math::Line > >::difference_type i, std::vector< std::shared_ptr< openplx::Math::Line > >::difference_type j, Math_Line_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Line > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Math::Line > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Math::Line >,std::allocator< std::shared_ptr< openplx::Math::Line > > > const &

        """
        return _MathSwig.Math_Line_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Math_Line_Vector self, std::vector< std::shared_ptr< openplx::Math::Line > >::difference_type i, std::vector< std::shared_ptr< openplx::Math::Line > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Line > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Math::Line > >::difference_type

        """
        return _MathSwig.Math_Line_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Math_Line_Vector self, std::vector< std::shared_ptr< openplx::Math::Line > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Line > >::difference_type

        __delitem__(Math_Line_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _MathSwig.Math_Line_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Math_Line_Vector self, PySliceObject * slice) -> Math_Line_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Math_Line_Vector self, std::vector< std::shared_ptr< openplx::Math::Line > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Math::Line > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Line > >::difference_type

        """
        return _MathSwig.Math_Line_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Math_Line_Vector self, PySliceObject * slice, Math_Line_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Math::Line >,std::allocator< std::shared_ptr< openplx::Math::Line > > > const &

        __setitem__(Math_Line_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Math_Line_Vector self, std::vector< std::shared_ptr< openplx::Math::Line > >::difference_type i, std::vector< std::shared_ptr< openplx::Math::Line > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Line > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Math::Line > >::value_type const &

        """
        return _MathSwig.Math_Line_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Math_Line_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Line > >::value_type"""
        return _MathSwig.Math_Line_Vector_pop(self)

    def append(self, x):
        r"""
        append(Math_Line_Vector self, std::vector< std::shared_ptr< openplx::Math::Line > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Math::Line > >::value_type const &

        """
        return _MathSwig.Math_Line_Vector_append(self, x)

    def empty(self):
        r"""empty(Math_Line_Vector self) -> bool"""
        return _MathSwig.Math_Line_Vector_empty(self)

    def size(self):
        r"""size(Math_Line_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Line > >::size_type"""
        return _MathSwig.Math_Line_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Math_Line_Vector self, Math_Line_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Math::Line > > &

        """
        return _MathSwig.Math_Line_Vector_swap(self, v)

    def begin(self):
        r"""begin(Math_Line_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Line > >::iterator"""
        return _MathSwig.Math_Line_Vector_begin(self)

    def end(self):
        r"""end(Math_Line_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Line > >::iterator"""
        return _MathSwig.Math_Line_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Math_Line_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Line > >::reverse_iterator"""
        return _MathSwig.Math_Line_Vector_rbegin(self)

    def rend(self):
        r"""rend(Math_Line_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Line > >::reverse_iterator"""
        return _MathSwig.Math_Line_Vector_rend(self)

    def clear(self):
        r"""clear(Math_Line_Vector self)"""
        return _MathSwig.Math_Line_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Math_Line_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Line > >::allocator_type"""
        return _MathSwig.Math_Line_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Math_Line_Vector self)"""
        return _MathSwig.Math_Line_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Math_Line_Vector self, std::vector< std::shared_ptr< openplx::Math::Line > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Math::Line > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Math::Line > >::iterator

        erase(Math_Line_Vector self, std::vector< std::shared_ptr< openplx::Math::Line > >::iterator first, std::vector< std::shared_ptr< openplx::Math::Line > >::iterator last) -> std::vector< std::shared_ptr< openplx::Math::Line > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Math::Line > >::iterator
        last: std::vector< std::shared_ptr< openplx::Math::Line > >::iterator

        """
        return _MathSwig.Math_Line_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Math_Line_Vector self) -> Math_Line_Vector
        __init__(Math_Line_Vector self, Math_Line_Vector other) -> Math_Line_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Math::Line > > const &

        __init__(Math_Line_Vector self, std::vector< std::shared_ptr< openplx::Math::Line > >::size_type size) -> Math_Line_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Math::Line > >::size_type

        __init__(Math_Line_Vector self, std::vector< std::shared_ptr< openplx::Math::Line > >::size_type size, std::vector< std::shared_ptr< openplx::Math::Line > >::value_type const & value) -> Math_Line_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Math::Line > >::size_type
        value: std::vector< std::shared_ptr< openplx::Math::Line > >::value_type const &

        """
        _MathSwig.Math_Line_Vector_swiginit(self, _MathSwig.new_Math_Line_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Math_Line_Vector self, std::vector< std::shared_ptr< openplx::Math::Line > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Math::Line > >::value_type const &

        """
        return _MathSwig.Math_Line_Vector_push_back(self, x)

    def front(self):
        r"""front(Math_Line_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Line > >::value_type const &"""
        return _MathSwig.Math_Line_Vector_front(self)

    def back(self):
        r"""back(Math_Line_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Line > >::value_type const &"""
        return _MathSwig.Math_Line_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Math_Line_Vector self, std::vector< std::shared_ptr< openplx::Math::Line > >::size_type n, std::vector< std::shared_ptr< openplx::Math::Line > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Math::Line > >::size_type
        x: std::vector< std::shared_ptr< openplx::Math::Line > >::value_type const &

        """
        return _MathSwig.Math_Line_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Math_Line_Vector self, std::vector< std::shared_ptr< openplx::Math::Line > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Math::Line > >::size_type

        resize(Math_Line_Vector self, std::vector< std::shared_ptr< openplx::Math::Line > >::size_type new_size, std::vector< std::shared_ptr< openplx::Math::Line > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Math::Line > >::size_type
        x: std::vector< std::shared_ptr< openplx::Math::Line > >::value_type const &

        """
        return _MathSwig.Math_Line_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Math_Line_Vector self, std::vector< std::shared_ptr< openplx::Math::Line > >::iterator pos, std::vector< std::shared_ptr< openplx::Math::Line > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Math::Line > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Math::Line > >::iterator
        x: std::vector< std::shared_ptr< openplx::Math::Line > >::value_type const &

        insert(Math_Line_Vector self, std::vector< std::shared_ptr< openplx::Math::Line > >::iterator pos, std::vector< std::shared_ptr< openplx::Math::Line > >::size_type n, std::vector< std::shared_ptr< openplx::Math::Line > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Math::Line > >::iterator
        n: std::vector< std::shared_ptr< openplx::Math::Line > >::size_type
        x: std::vector< std::shared_ptr< openplx::Math::Line > >::value_type const &

        """
        return _MathSwig.Math_Line_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Math_Line_Vector self, std::vector< std::shared_ptr< openplx::Math::Line > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Math::Line > >::size_type

        """
        return _MathSwig.Math_Line_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Math_Line_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Line > >::size_type"""
        return _MathSwig.Math_Line_Vector_capacity(self)
    __swig_destroy__ = _MathSwig.delete_Math_Line_Vector

# Register Math_Line_Vector in _MathSwig:
_MathSwig.Math_Line_Vector_swigregister(Math_Line_Vector)

class Math_Matrix3x3_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Math_Matrix3x3_Vector self) -> SwigPyIterator"""
        return _MathSwig.Math_Matrix3x3_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Math_Matrix3x3_Vector self) -> bool"""
        return _MathSwig.Math_Matrix3x3_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Math_Matrix3x3_Vector self) -> bool"""
        return _MathSwig.Math_Matrix3x3_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Math_Matrix3x3_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::size_type"""
        return _MathSwig.Math_Matrix3x3_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Math_Matrix3x3_Vector self, std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::difference_type i, std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::difference_type j) -> Math_Matrix3x3_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::difference_type

        """
        return _MathSwig.Math_Matrix3x3_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Math_Matrix3x3_Vector self, std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::difference_type i, std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::difference_type

        __setslice__(Math_Matrix3x3_Vector self, std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::difference_type i, std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::difference_type j, Math_Matrix3x3_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Math::Matrix3x3 >,std::allocator< std::shared_ptr< openplx::Math::Matrix3x3 > > > const &

        """
        return _MathSwig.Math_Matrix3x3_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Math_Matrix3x3_Vector self, std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::difference_type i, std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::difference_type

        """
        return _MathSwig.Math_Matrix3x3_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Math_Matrix3x3_Vector self, std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::difference_type

        __delitem__(Math_Matrix3x3_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _MathSwig.Math_Matrix3x3_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Math_Matrix3x3_Vector self, PySliceObject * slice) -> Math_Matrix3x3_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Math_Matrix3x3_Vector self, std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::difference_type

        """
        return _MathSwig.Math_Matrix3x3_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Math_Matrix3x3_Vector self, PySliceObject * slice, Math_Matrix3x3_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Math::Matrix3x3 >,std::allocator< std::shared_ptr< openplx::Math::Matrix3x3 > > > const &

        __setitem__(Math_Matrix3x3_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Math_Matrix3x3_Vector self, std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::difference_type i, std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::value_type const &

        """
        return _MathSwig.Math_Matrix3x3_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Math_Matrix3x3_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::value_type"""
        return _MathSwig.Math_Matrix3x3_Vector_pop(self)

    def append(self, x):
        r"""
        append(Math_Matrix3x3_Vector self, std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::value_type const &

        """
        return _MathSwig.Math_Matrix3x3_Vector_append(self, x)

    def empty(self):
        r"""empty(Math_Matrix3x3_Vector self) -> bool"""
        return _MathSwig.Math_Matrix3x3_Vector_empty(self)

    def size(self):
        r"""size(Math_Matrix3x3_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::size_type"""
        return _MathSwig.Math_Matrix3x3_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Math_Matrix3x3_Vector self, Math_Matrix3x3_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > > &

        """
        return _MathSwig.Math_Matrix3x3_Vector_swap(self, v)

    def begin(self):
        r"""begin(Math_Matrix3x3_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::iterator"""
        return _MathSwig.Math_Matrix3x3_Vector_begin(self)

    def end(self):
        r"""end(Math_Matrix3x3_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::iterator"""
        return _MathSwig.Math_Matrix3x3_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Math_Matrix3x3_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::reverse_iterator"""
        return _MathSwig.Math_Matrix3x3_Vector_rbegin(self)

    def rend(self):
        r"""rend(Math_Matrix3x3_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::reverse_iterator"""
        return _MathSwig.Math_Matrix3x3_Vector_rend(self)

    def clear(self):
        r"""clear(Math_Matrix3x3_Vector self)"""
        return _MathSwig.Math_Matrix3x3_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Math_Matrix3x3_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::allocator_type"""
        return _MathSwig.Math_Matrix3x3_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Math_Matrix3x3_Vector self)"""
        return _MathSwig.Math_Matrix3x3_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Math_Matrix3x3_Vector self, std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::iterator

        erase(Math_Matrix3x3_Vector self, std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::iterator first, std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::iterator last) -> std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::iterator
        last: std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::iterator

        """
        return _MathSwig.Math_Matrix3x3_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Math_Matrix3x3_Vector self) -> Math_Matrix3x3_Vector
        __init__(Math_Matrix3x3_Vector self, Math_Matrix3x3_Vector other) -> Math_Matrix3x3_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > > const &

        __init__(Math_Matrix3x3_Vector self, std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::size_type size) -> Math_Matrix3x3_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::size_type

        __init__(Math_Matrix3x3_Vector self, std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::size_type size, std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::value_type const & value) -> Math_Matrix3x3_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::size_type
        value: std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::value_type const &

        """
        _MathSwig.Math_Matrix3x3_Vector_swiginit(self, _MathSwig.new_Math_Matrix3x3_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Math_Matrix3x3_Vector self, std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::value_type const &

        """
        return _MathSwig.Math_Matrix3x3_Vector_push_back(self, x)

    def front(self):
        r"""front(Math_Matrix3x3_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::value_type const &"""
        return _MathSwig.Math_Matrix3x3_Vector_front(self)

    def back(self):
        r"""back(Math_Matrix3x3_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::value_type const &"""
        return _MathSwig.Math_Matrix3x3_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Math_Matrix3x3_Vector self, std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::size_type n, std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::size_type
        x: std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::value_type const &

        """
        return _MathSwig.Math_Matrix3x3_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Math_Matrix3x3_Vector self, std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::size_type

        resize(Math_Matrix3x3_Vector self, std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::size_type new_size, std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::size_type
        x: std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::value_type const &

        """
        return _MathSwig.Math_Matrix3x3_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Math_Matrix3x3_Vector self, std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::iterator pos, std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::iterator
        x: std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::value_type const &

        insert(Math_Matrix3x3_Vector self, std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::iterator pos, std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::size_type n, std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::iterator
        n: std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::size_type
        x: std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::value_type const &

        """
        return _MathSwig.Math_Matrix3x3_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Math_Matrix3x3_Vector self, std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::size_type

        """
        return _MathSwig.Math_Matrix3x3_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Math_Matrix3x3_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Matrix3x3 > >::size_type"""
        return _MathSwig.Math_Matrix3x3_Vector_capacity(self)
    __swig_destroy__ = _MathSwig.delete_Math_Matrix3x3_Vector

# Register Math_Matrix3x3_Vector in _MathSwig:
_MathSwig.Math_Matrix3x3_Vector_swigregister(Math_Matrix3x3_Vector)

class Math_Matrix4x4_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Math_Matrix4x4_Vector self) -> SwigPyIterator"""
        return _MathSwig.Math_Matrix4x4_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Math_Matrix4x4_Vector self) -> bool"""
        return _MathSwig.Math_Matrix4x4_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Math_Matrix4x4_Vector self) -> bool"""
        return _MathSwig.Math_Matrix4x4_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Math_Matrix4x4_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::size_type"""
        return _MathSwig.Math_Matrix4x4_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Math_Matrix4x4_Vector self, std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::difference_type i, std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::difference_type j) -> Math_Matrix4x4_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::difference_type

        """
        return _MathSwig.Math_Matrix4x4_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Math_Matrix4x4_Vector self, std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::difference_type i, std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::difference_type

        __setslice__(Math_Matrix4x4_Vector self, std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::difference_type i, std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::difference_type j, Math_Matrix4x4_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Math::Matrix4x4 >,std::allocator< std::shared_ptr< openplx::Math::Matrix4x4 > > > const &

        """
        return _MathSwig.Math_Matrix4x4_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Math_Matrix4x4_Vector self, std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::difference_type i, std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::difference_type

        """
        return _MathSwig.Math_Matrix4x4_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Math_Matrix4x4_Vector self, std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::difference_type

        __delitem__(Math_Matrix4x4_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _MathSwig.Math_Matrix4x4_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Math_Matrix4x4_Vector self, PySliceObject * slice) -> Math_Matrix4x4_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Math_Matrix4x4_Vector self, std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::difference_type

        """
        return _MathSwig.Math_Matrix4x4_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Math_Matrix4x4_Vector self, PySliceObject * slice, Math_Matrix4x4_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Math::Matrix4x4 >,std::allocator< std::shared_ptr< openplx::Math::Matrix4x4 > > > const &

        __setitem__(Math_Matrix4x4_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Math_Matrix4x4_Vector self, std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::difference_type i, std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::value_type const &

        """
        return _MathSwig.Math_Matrix4x4_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Math_Matrix4x4_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::value_type"""
        return _MathSwig.Math_Matrix4x4_Vector_pop(self)

    def append(self, x):
        r"""
        append(Math_Matrix4x4_Vector self, std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::value_type const &

        """
        return _MathSwig.Math_Matrix4x4_Vector_append(self, x)

    def empty(self):
        r"""empty(Math_Matrix4x4_Vector self) -> bool"""
        return _MathSwig.Math_Matrix4x4_Vector_empty(self)

    def size(self):
        r"""size(Math_Matrix4x4_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::size_type"""
        return _MathSwig.Math_Matrix4x4_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Math_Matrix4x4_Vector self, Math_Matrix4x4_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > > &

        """
        return _MathSwig.Math_Matrix4x4_Vector_swap(self, v)

    def begin(self):
        r"""begin(Math_Matrix4x4_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::iterator"""
        return _MathSwig.Math_Matrix4x4_Vector_begin(self)

    def end(self):
        r"""end(Math_Matrix4x4_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::iterator"""
        return _MathSwig.Math_Matrix4x4_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Math_Matrix4x4_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::reverse_iterator"""
        return _MathSwig.Math_Matrix4x4_Vector_rbegin(self)

    def rend(self):
        r"""rend(Math_Matrix4x4_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::reverse_iterator"""
        return _MathSwig.Math_Matrix4x4_Vector_rend(self)

    def clear(self):
        r"""clear(Math_Matrix4x4_Vector self)"""
        return _MathSwig.Math_Matrix4x4_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Math_Matrix4x4_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::allocator_type"""
        return _MathSwig.Math_Matrix4x4_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Math_Matrix4x4_Vector self)"""
        return _MathSwig.Math_Matrix4x4_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Math_Matrix4x4_Vector self, std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::iterator

        erase(Math_Matrix4x4_Vector self, std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::iterator first, std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::iterator last) -> std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::iterator
        last: std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::iterator

        """
        return _MathSwig.Math_Matrix4x4_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Math_Matrix4x4_Vector self) -> Math_Matrix4x4_Vector
        __init__(Math_Matrix4x4_Vector self, Math_Matrix4x4_Vector other) -> Math_Matrix4x4_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > > const &

        __init__(Math_Matrix4x4_Vector self, std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::size_type size) -> Math_Matrix4x4_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::size_type

        __init__(Math_Matrix4x4_Vector self, std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::size_type size, std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::value_type const & value) -> Math_Matrix4x4_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::size_type
        value: std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::value_type const &

        """
        _MathSwig.Math_Matrix4x4_Vector_swiginit(self, _MathSwig.new_Math_Matrix4x4_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Math_Matrix4x4_Vector self, std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::value_type const &

        """
        return _MathSwig.Math_Matrix4x4_Vector_push_back(self, x)

    def front(self):
        r"""front(Math_Matrix4x4_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::value_type const &"""
        return _MathSwig.Math_Matrix4x4_Vector_front(self)

    def back(self):
        r"""back(Math_Matrix4x4_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::value_type const &"""
        return _MathSwig.Math_Matrix4x4_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Math_Matrix4x4_Vector self, std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::size_type n, std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::size_type
        x: std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::value_type const &

        """
        return _MathSwig.Math_Matrix4x4_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Math_Matrix4x4_Vector self, std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::size_type

        resize(Math_Matrix4x4_Vector self, std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::size_type new_size, std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::size_type
        x: std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::value_type const &

        """
        return _MathSwig.Math_Matrix4x4_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Math_Matrix4x4_Vector self, std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::iterator pos, std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::iterator
        x: std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::value_type const &

        insert(Math_Matrix4x4_Vector self, std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::iterator pos, std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::size_type n, std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::iterator
        n: std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::size_type
        x: std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::value_type const &

        """
        return _MathSwig.Math_Matrix4x4_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Math_Matrix4x4_Vector self, std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::size_type

        """
        return _MathSwig.Math_Matrix4x4_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Math_Matrix4x4_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Matrix4x4 > >::size_type"""
        return _MathSwig.Math_Matrix4x4_Vector_capacity(self)
    __swig_destroy__ = _MathSwig.delete_Math_Matrix4x4_Vector

# Register Math_Matrix4x4_Vector in _MathSwig:
_MathSwig.Math_Matrix4x4_Vector_swigregister(Math_Matrix4x4_Vector)

class Math_Quat_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Math::Quat > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Math_Quat_Vector self) -> SwigPyIterator"""
        return _MathSwig.Math_Quat_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Math_Quat_Vector self) -> bool"""
        return _MathSwig.Math_Quat_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Math_Quat_Vector self) -> bool"""
        return _MathSwig.Math_Quat_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Math_Quat_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Quat > >::size_type"""
        return _MathSwig.Math_Quat_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Math_Quat_Vector self, std::vector< std::shared_ptr< openplx::Math::Quat > >::difference_type i, std::vector< std::shared_ptr< openplx::Math::Quat > >::difference_type j) -> Math_Quat_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Quat > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Math::Quat > >::difference_type

        """
        return _MathSwig.Math_Quat_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Math_Quat_Vector self, std::vector< std::shared_ptr< openplx::Math::Quat > >::difference_type i, std::vector< std::shared_ptr< openplx::Math::Quat > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Quat > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Math::Quat > >::difference_type

        __setslice__(Math_Quat_Vector self, std::vector< std::shared_ptr< openplx::Math::Quat > >::difference_type i, std::vector< std::shared_ptr< openplx::Math::Quat > >::difference_type j, Math_Quat_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Quat > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Math::Quat > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Math::Quat >,std::allocator< std::shared_ptr< openplx::Math::Quat > > > const &

        """
        return _MathSwig.Math_Quat_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Math_Quat_Vector self, std::vector< std::shared_ptr< openplx::Math::Quat > >::difference_type i, std::vector< std::shared_ptr< openplx::Math::Quat > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Quat > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Math::Quat > >::difference_type

        """
        return _MathSwig.Math_Quat_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Math_Quat_Vector self, std::vector< std::shared_ptr< openplx::Math::Quat > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Quat > >::difference_type

        __delitem__(Math_Quat_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _MathSwig.Math_Quat_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Math_Quat_Vector self, PySliceObject * slice) -> Math_Quat_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Math_Quat_Vector self, std::vector< std::shared_ptr< openplx::Math::Quat > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Math::Quat > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Quat > >::difference_type

        """
        return _MathSwig.Math_Quat_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Math_Quat_Vector self, PySliceObject * slice, Math_Quat_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Math::Quat >,std::allocator< std::shared_ptr< openplx::Math::Quat > > > const &

        __setitem__(Math_Quat_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Math_Quat_Vector self, std::vector< std::shared_ptr< openplx::Math::Quat > >::difference_type i, std::vector< std::shared_ptr< openplx::Math::Quat > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Quat > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Math::Quat > >::value_type const &

        """
        return _MathSwig.Math_Quat_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Math_Quat_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Quat > >::value_type"""
        return _MathSwig.Math_Quat_Vector_pop(self)

    def append(self, x):
        r"""
        append(Math_Quat_Vector self, std::vector< std::shared_ptr< openplx::Math::Quat > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Math::Quat > >::value_type const &

        """
        return _MathSwig.Math_Quat_Vector_append(self, x)

    def empty(self):
        r"""empty(Math_Quat_Vector self) -> bool"""
        return _MathSwig.Math_Quat_Vector_empty(self)

    def size(self):
        r"""size(Math_Quat_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Quat > >::size_type"""
        return _MathSwig.Math_Quat_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Math_Quat_Vector self, Math_Quat_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Math::Quat > > &

        """
        return _MathSwig.Math_Quat_Vector_swap(self, v)

    def begin(self):
        r"""begin(Math_Quat_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Quat > >::iterator"""
        return _MathSwig.Math_Quat_Vector_begin(self)

    def end(self):
        r"""end(Math_Quat_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Quat > >::iterator"""
        return _MathSwig.Math_Quat_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Math_Quat_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Quat > >::reverse_iterator"""
        return _MathSwig.Math_Quat_Vector_rbegin(self)

    def rend(self):
        r"""rend(Math_Quat_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Quat > >::reverse_iterator"""
        return _MathSwig.Math_Quat_Vector_rend(self)

    def clear(self):
        r"""clear(Math_Quat_Vector self)"""
        return _MathSwig.Math_Quat_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Math_Quat_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Quat > >::allocator_type"""
        return _MathSwig.Math_Quat_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Math_Quat_Vector self)"""
        return _MathSwig.Math_Quat_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Math_Quat_Vector self, std::vector< std::shared_ptr< openplx::Math::Quat > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Math::Quat > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Math::Quat > >::iterator

        erase(Math_Quat_Vector self, std::vector< std::shared_ptr< openplx::Math::Quat > >::iterator first, std::vector< std::shared_ptr< openplx::Math::Quat > >::iterator last) -> std::vector< std::shared_ptr< openplx::Math::Quat > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Math::Quat > >::iterator
        last: std::vector< std::shared_ptr< openplx::Math::Quat > >::iterator

        """
        return _MathSwig.Math_Quat_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Math_Quat_Vector self) -> Math_Quat_Vector
        __init__(Math_Quat_Vector self, Math_Quat_Vector other) -> Math_Quat_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Math::Quat > > const &

        __init__(Math_Quat_Vector self, std::vector< std::shared_ptr< openplx::Math::Quat > >::size_type size) -> Math_Quat_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Math::Quat > >::size_type

        __init__(Math_Quat_Vector self, std::vector< std::shared_ptr< openplx::Math::Quat > >::size_type size, std::vector< std::shared_ptr< openplx::Math::Quat > >::value_type const & value) -> Math_Quat_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Math::Quat > >::size_type
        value: std::vector< std::shared_ptr< openplx::Math::Quat > >::value_type const &

        """
        _MathSwig.Math_Quat_Vector_swiginit(self, _MathSwig.new_Math_Quat_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Math_Quat_Vector self, std::vector< std::shared_ptr< openplx::Math::Quat > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Math::Quat > >::value_type const &

        """
        return _MathSwig.Math_Quat_Vector_push_back(self, x)

    def front(self):
        r"""front(Math_Quat_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Quat > >::value_type const &"""
        return _MathSwig.Math_Quat_Vector_front(self)

    def back(self):
        r"""back(Math_Quat_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Quat > >::value_type const &"""
        return _MathSwig.Math_Quat_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Math_Quat_Vector self, std::vector< std::shared_ptr< openplx::Math::Quat > >::size_type n, std::vector< std::shared_ptr< openplx::Math::Quat > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Math::Quat > >::size_type
        x: std::vector< std::shared_ptr< openplx::Math::Quat > >::value_type const &

        """
        return _MathSwig.Math_Quat_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Math_Quat_Vector self, std::vector< std::shared_ptr< openplx::Math::Quat > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Math::Quat > >::size_type

        resize(Math_Quat_Vector self, std::vector< std::shared_ptr< openplx::Math::Quat > >::size_type new_size, std::vector< std::shared_ptr< openplx::Math::Quat > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Math::Quat > >::size_type
        x: std::vector< std::shared_ptr< openplx::Math::Quat > >::value_type const &

        """
        return _MathSwig.Math_Quat_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Math_Quat_Vector self, std::vector< std::shared_ptr< openplx::Math::Quat > >::iterator pos, std::vector< std::shared_ptr< openplx::Math::Quat > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Math::Quat > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Math::Quat > >::iterator
        x: std::vector< std::shared_ptr< openplx::Math::Quat > >::value_type const &

        insert(Math_Quat_Vector self, std::vector< std::shared_ptr< openplx::Math::Quat > >::iterator pos, std::vector< std::shared_ptr< openplx::Math::Quat > >::size_type n, std::vector< std::shared_ptr< openplx::Math::Quat > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Math::Quat > >::iterator
        n: std::vector< std::shared_ptr< openplx::Math::Quat > >::size_type
        x: std::vector< std::shared_ptr< openplx::Math::Quat > >::value_type const &

        """
        return _MathSwig.Math_Quat_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Math_Quat_Vector self, std::vector< std::shared_ptr< openplx::Math::Quat > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Math::Quat > >::size_type

        """
        return _MathSwig.Math_Quat_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Math_Quat_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Quat > >::size_type"""
        return _MathSwig.Math_Quat_Vector_capacity(self)
    __swig_destroy__ = _MathSwig.delete_Math_Quat_Vector

# Register Math_Quat_Vector in _MathSwig:
_MathSwig.Math_Quat_Vector_swigregister(Math_Quat_Vector)

class Math_Vec2_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Math::Vec2 > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Math_Vec2_Vector self) -> SwigPyIterator"""
        return _MathSwig.Math_Vec2_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Math_Vec2_Vector self) -> bool"""
        return _MathSwig.Math_Vec2_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Math_Vec2_Vector self) -> bool"""
        return _MathSwig.Math_Vec2_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Math_Vec2_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Vec2 > >::size_type"""
        return _MathSwig.Math_Vec2_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Math_Vec2_Vector self, std::vector< std::shared_ptr< openplx::Math::Vec2 > >::difference_type i, std::vector< std::shared_ptr< openplx::Math::Vec2 > >::difference_type j) -> Math_Vec2_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Vec2 > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Math::Vec2 > >::difference_type

        """
        return _MathSwig.Math_Vec2_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Math_Vec2_Vector self, std::vector< std::shared_ptr< openplx::Math::Vec2 > >::difference_type i, std::vector< std::shared_ptr< openplx::Math::Vec2 > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Vec2 > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Math::Vec2 > >::difference_type

        __setslice__(Math_Vec2_Vector self, std::vector< std::shared_ptr< openplx::Math::Vec2 > >::difference_type i, std::vector< std::shared_ptr< openplx::Math::Vec2 > >::difference_type j, Math_Vec2_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Vec2 > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Math::Vec2 > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Math::Vec2 >,std::allocator< std::shared_ptr< openplx::Math::Vec2 > > > const &

        """
        return _MathSwig.Math_Vec2_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Math_Vec2_Vector self, std::vector< std::shared_ptr< openplx::Math::Vec2 > >::difference_type i, std::vector< std::shared_ptr< openplx::Math::Vec2 > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Vec2 > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Math::Vec2 > >::difference_type

        """
        return _MathSwig.Math_Vec2_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Math_Vec2_Vector self, std::vector< std::shared_ptr< openplx::Math::Vec2 > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Vec2 > >::difference_type

        __delitem__(Math_Vec2_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _MathSwig.Math_Vec2_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Math_Vec2_Vector self, PySliceObject * slice) -> Math_Vec2_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Math_Vec2_Vector self, std::vector< std::shared_ptr< openplx::Math::Vec2 > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Math::Vec2 > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Vec2 > >::difference_type

        """
        return _MathSwig.Math_Vec2_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Math_Vec2_Vector self, PySliceObject * slice, Math_Vec2_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Math::Vec2 >,std::allocator< std::shared_ptr< openplx::Math::Vec2 > > > const &

        __setitem__(Math_Vec2_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Math_Vec2_Vector self, std::vector< std::shared_ptr< openplx::Math::Vec2 > >::difference_type i, std::vector< std::shared_ptr< openplx::Math::Vec2 > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Vec2 > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Math::Vec2 > >::value_type const &

        """
        return _MathSwig.Math_Vec2_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Math_Vec2_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Vec2 > >::value_type"""
        return _MathSwig.Math_Vec2_Vector_pop(self)

    def append(self, x):
        r"""
        append(Math_Vec2_Vector self, std::vector< std::shared_ptr< openplx::Math::Vec2 > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Math::Vec2 > >::value_type const &

        """
        return _MathSwig.Math_Vec2_Vector_append(self, x)

    def empty(self):
        r"""empty(Math_Vec2_Vector self) -> bool"""
        return _MathSwig.Math_Vec2_Vector_empty(self)

    def size(self):
        r"""size(Math_Vec2_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Vec2 > >::size_type"""
        return _MathSwig.Math_Vec2_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Math_Vec2_Vector self, Math_Vec2_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Math::Vec2 > > &

        """
        return _MathSwig.Math_Vec2_Vector_swap(self, v)

    def begin(self):
        r"""begin(Math_Vec2_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Vec2 > >::iterator"""
        return _MathSwig.Math_Vec2_Vector_begin(self)

    def end(self):
        r"""end(Math_Vec2_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Vec2 > >::iterator"""
        return _MathSwig.Math_Vec2_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Math_Vec2_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Vec2 > >::reverse_iterator"""
        return _MathSwig.Math_Vec2_Vector_rbegin(self)

    def rend(self):
        r"""rend(Math_Vec2_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Vec2 > >::reverse_iterator"""
        return _MathSwig.Math_Vec2_Vector_rend(self)

    def clear(self):
        r"""clear(Math_Vec2_Vector self)"""
        return _MathSwig.Math_Vec2_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Math_Vec2_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Vec2 > >::allocator_type"""
        return _MathSwig.Math_Vec2_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Math_Vec2_Vector self)"""
        return _MathSwig.Math_Vec2_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Math_Vec2_Vector self, std::vector< std::shared_ptr< openplx::Math::Vec2 > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Math::Vec2 > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Math::Vec2 > >::iterator

        erase(Math_Vec2_Vector self, std::vector< std::shared_ptr< openplx::Math::Vec2 > >::iterator first, std::vector< std::shared_ptr< openplx::Math::Vec2 > >::iterator last) -> std::vector< std::shared_ptr< openplx::Math::Vec2 > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Math::Vec2 > >::iterator
        last: std::vector< std::shared_ptr< openplx::Math::Vec2 > >::iterator

        """
        return _MathSwig.Math_Vec2_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Math_Vec2_Vector self) -> Math_Vec2_Vector
        __init__(Math_Vec2_Vector self, Math_Vec2_Vector other) -> Math_Vec2_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Math::Vec2 > > const &

        __init__(Math_Vec2_Vector self, std::vector< std::shared_ptr< openplx::Math::Vec2 > >::size_type size) -> Math_Vec2_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Math::Vec2 > >::size_type

        __init__(Math_Vec2_Vector self, std::vector< std::shared_ptr< openplx::Math::Vec2 > >::size_type size, std::vector< std::shared_ptr< openplx::Math::Vec2 > >::value_type const & value) -> Math_Vec2_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Math::Vec2 > >::size_type
        value: std::vector< std::shared_ptr< openplx::Math::Vec2 > >::value_type const &

        """
        _MathSwig.Math_Vec2_Vector_swiginit(self, _MathSwig.new_Math_Vec2_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Math_Vec2_Vector self, std::vector< std::shared_ptr< openplx::Math::Vec2 > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Math::Vec2 > >::value_type const &

        """
        return _MathSwig.Math_Vec2_Vector_push_back(self, x)

    def front(self):
        r"""front(Math_Vec2_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Vec2 > >::value_type const &"""
        return _MathSwig.Math_Vec2_Vector_front(self)

    def back(self):
        r"""back(Math_Vec2_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Vec2 > >::value_type const &"""
        return _MathSwig.Math_Vec2_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Math_Vec2_Vector self, std::vector< std::shared_ptr< openplx::Math::Vec2 > >::size_type n, std::vector< std::shared_ptr< openplx::Math::Vec2 > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Math::Vec2 > >::size_type
        x: std::vector< std::shared_ptr< openplx::Math::Vec2 > >::value_type const &

        """
        return _MathSwig.Math_Vec2_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Math_Vec2_Vector self, std::vector< std::shared_ptr< openplx::Math::Vec2 > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Math::Vec2 > >::size_type

        resize(Math_Vec2_Vector self, std::vector< std::shared_ptr< openplx::Math::Vec2 > >::size_type new_size, std::vector< std::shared_ptr< openplx::Math::Vec2 > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Math::Vec2 > >::size_type
        x: std::vector< std::shared_ptr< openplx::Math::Vec2 > >::value_type const &

        """
        return _MathSwig.Math_Vec2_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Math_Vec2_Vector self, std::vector< std::shared_ptr< openplx::Math::Vec2 > >::iterator pos, std::vector< std::shared_ptr< openplx::Math::Vec2 > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Math::Vec2 > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Math::Vec2 > >::iterator
        x: std::vector< std::shared_ptr< openplx::Math::Vec2 > >::value_type const &

        insert(Math_Vec2_Vector self, std::vector< std::shared_ptr< openplx::Math::Vec2 > >::iterator pos, std::vector< std::shared_ptr< openplx::Math::Vec2 > >::size_type n, std::vector< std::shared_ptr< openplx::Math::Vec2 > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Math::Vec2 > >::iterator
        n: std::vector< std::shared_ptr< openplx::Math::Vec2 > >::size_type
        x: std::vector< std::shared_ptr< openplx::Math::Vec2 > >::value_type const &

        """
        return _MathSwig.Math_Vec2_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Math_Vec2_Vector self, std::vector< std::shared_ptr< openplx::Math::Vec2 > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Math::Vec2 > >::size_type

        """
        return _MathSwig.Math_Vec2_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Math_Vec2_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Vec2 > >::size_type"""
        return _MathSwig.Math_Vec2_Vector_capacity(self)
    __swig_destroy__ = _MathSwig.delete_Math_Vec2_Vector

# Register Math_Vec2_Vector in _MathSwig:
_MathSwig.Math_Vec2_Vector_swigregister(Math_Vec2_Vector)

class Math_Vec3_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Math::Vec3 > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Math_Vec3_Vector self) -> SwigPyIterator"""
        return _MathSwig.Math_Vec3_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Math_Vec3_Vector self) -> bool"""
        return _MathSwig.Math_Vec3_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Math_Vec3_Vector self) -> bool"""
        return _MathSwig.Math_Vec3_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Math_Vec3_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Vec3 > >::size_type"""
        return _MathSwig.Math_Vec3_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Math_Vec3_Vector self, std::vector< std::shared_ptr< openplx::Math::Vec3 > >::difference_type i, std::vector< std::shared_ptr< openplx::Math::Vec3 > >::difference_type j) -> Math_Vec3_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Vec3 > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Math::Vec3 > >::difference_type

        """
        return _MathSwig.Math_Vec3_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Math_Vec3_Vector self, std::vector< std::shared_ptr< openplx::Math::Vec3 > >::difference_type i, std::vector< std::shared_ptr< openplx::Math::Vec3 > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Vec3 > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Math::Vec3 > >::difference_type

        __setslice__(Math_Vec3_Vector self, std::vector< std::shared_ptr< openplx::Math::Vec3 > >::difference_type i, std::vector< std::shared_ptr< openplx::Math::Vec3 > >::difference_type j, Math_Vec3_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Vec3 > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Math::Vec3 > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Math::Vec3 >,std::allocator< std::shared_ptr< openplx::Math::Vec3 > > > const &

        """
        return _MathSwig.Math_Vec3_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Math_Vec3_Vector self, std::vector< std::shared_ptr< openplx::Math::Vec3 > >::difference_type i, std::vector< std::shared_ptr< openplx::Math::Vec3 > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Vec3 > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Math::Vec3 > >::difference_type

        """
        return _MathSwig.Math_Vec3_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Math_Vec3_Vector self, std::vector< std::shared_ptr< openplx::Math::Vec3 > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Vec3 > >::difference_type

        __delitem__(Math_Vec3_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _MathSwig.Math_Vec3_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Math_Vec3_Vector self, PySliceObject * slice) -> Math_Vec3_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Math_Vec3_Vector self, std::vector< std::shared_ptr< openplx::Math::Vec3 > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Math::Vec3 > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Vec3 > >::difference_type

        """
        return _MathSwig.Math_Vec3_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Math_Vec3_Vector self, PySliceObject * slice, Math_Vec3_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Math::Vec3 >,std::allocator< std::shared_ptr< openplx::Math::Vec3 > > > const &

        __setitem__(Math_Vec3_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Math_Vec3_Vector self, std::vector< std::shared_ptr< openplx::Math::Vec3 > >::difference_type i, std::vector< std::shared_ptr< openplx::Math::Vec3 > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Math::Vec3 > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Math::Vec3 > >::value_type const &

        """
        return _MathSwig.Math_Vec3_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Math_Vec3_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Vec3 > >::value_type"""
        return _MathSwig.Math_Vec3_Vector_pop(self)

    def append(self, x):
        r"""
        append(Math_Vec3_Vector self, std::vector< std::shared_ptr< openplx::Math::Vec3 > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Math::Vec3 > >::value_type const &

        """
        return _MathSwig.Math_Vec3_Vector_append(self, x)

    def empty(self):
        r"""empty(Math_Vec3_Vector self) -> bool"""
        return _MathSwig.Math_Vec3_Vector_empty(self)

    def size(self):
        r"""size(Math_Vec3_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Vec3 > >::size_type"""
        return _MathSwig.Math_Vec3_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Math_Vec3_Vector self, Math_Vec3_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Math::Vec3 > > &

        """
        return _MathSwig.Math_Vec3_Vector_swap(self, v)

    def begin(self):
        r"""begin(Math_Vec3_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Vec3 > >::iterator"""
        return _MathSwig.Math_Vec3_Vector_begin(self)

    def end(self):
        r"""end(Math_Vec3_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Vec3 > >::iterator"""
        return _MathSwig.Math_Vec3_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Math_Vec3_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Vec3 > >::reverse_iterator"""
        return _MathSwig.Math_Vec3_Vector_rbegin(self)

    def rend(self):
        r"""rend(Math_Vec3_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Vec3 > >::reverse_iterator"""
        return _MathSwig.Math_Vec3_Vector_rend(self)

    def clear(self):
        r"""clear(Math_Vec3_Vector self)"""
        return _MathSwig.Math_Vec3_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Math_Vec3_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Vec3 > >::allocator_type"""
        return _MathSwig.Math_Vec3_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Math_Vec3_Vector self)"""
        return _MathSwig.Math_Vec3_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Math_Vec3_Vector self, std::vector< std::shared_ptr< openplx::Math::Vec3 > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Math::Vec3 > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Math::Vec3 > >::iterator

        erase(Math_Vec3_Vector self, std::vector< std::shared_ptr< openplx::Math::Vec3 > >::iterator first, std::vector< std::shared_ptr< openplx::Math::Vec3 > >::iterator last) -> std::vector< std::shared_ptr< openplx::Math::Vec3 > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Math::Vec3 > >::iterator
        last: std::vector< std::shared_ptr< openplx::Math::Vec3 > >::iterator

        """
        return _MathSwig.Math_Vec3_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Math_Vec3_Vector self) -> Math_Vec3_Vector
        __init__(Math_Vec3_Vector self, Math_Vec3_Vector other) -> Math_Vec3_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Math::Vec3 > > const &

        __init__(Math_Vec3_Vector self, std::vector< std::shared_ptr< openplx::Math::Vec3 > >::size_type size) -> Math_Vec3_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Math::Vec3 > >::size_type

        __init__(Math_Vec3_Vector self, std::vector< std::shared_ptr< openplx::Math::Vec3 > >::size_type size, std::vector< std::shared_ptr< openplx::Math::Vec3 > >::value_type const & value) -> Math_Vec3_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Math::Vec3 > >::size_type
        value: std::vector< std::shared_ptr< openplx::Math::Vec3 > >::value_type const &

        """
        _MathSwig.Math_Vec3_Vector_swiginit(self, _MathSwig.new_Math_Vec3_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Math_Vec3_Vector self, std::vector< std::shared_ptr< openplx::Math::Vec3 > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Math::Vec3 > >::value_type const &

        """
        return _MathSwig.Math_Vec3_Vector_push_back(self, x)

    def front(self):
        r"""front(Math_Vec3_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Vec3 > >::value_type const &"""
        return _MathSwig.Math_Vec3_Vector_front(self)

    def back(self):
        r"""back(Math_Vec3_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Vec3 > >::value_type const &"""
        return _MathSwig.Math_Vec3_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Math_Vec3_Vector self, std::vector< std::shared_ptr< openplx::Math::Vec3 > >::size_type n, std::vector< std::shared_ptr< openplx::Math::Vec3 > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Math::Vec3 > >::size_type
        x: std::vector< std::shared_ptr< openplx::Math::Vec3 > >::value_type const &

        """
        return _MathSwig.Math_Vec3_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Math_Vec3_Vector self, std::vector< std::shared_ptr< openplx::Math::Vec3 > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Math::Vec3 > >::size_type

        resize(Math_Vec3_Vector self, std::vector< std::shared_ptr< openplx::Math::Vec3 > >::size_type new_size, std::vector< std::shared_ptr< openplx::Math::Vec3 > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Math::Vec3 > >::size_type
        x: std::vector< std::shared_ptr< openplx::Math::Vec3 > >::value_type const &

        """
        return _MathSwig.Math_Vec3_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Math_Vec3_Vector self, std::vector< std::shared_ptr< openplx::Math::Vec3 > >::iterator pos, std::vector< std::shared_ptr< openplx::Math::Vec3 > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Math::Vec3 > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Math::Vec3 > >::iterator
        x: std::vector< std::shared_ptr< openplx::Math::Vec3 > >::value_type const &

        insert(Math_Vec3_Vector self, std::vector< std::shared_ptr< openplx::Math::Vec3 > >::iterator pos, std::vector< std::shared_ptr< openplx::Math::Vec3 > >::size_type n, std::vector< std::shared_ptr< openplx::Math::Vec3 > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Math::Vec3 > >::iterator
        n: std::vector< std::shared_ptr< openplx::Math::Vec3 > >::size_type
        x: std::vector< std::shared_ptr< openplx::Math::Vec3 > >::value_type const &

        """
        return _MathSwig.Math_Vec3_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Math_Vec3_Vector self, std::vector< std::shared_ptr< openplx::Math::Vec3 > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Math::Vec3 > >::size_type

        """
        return _MathSwig.Math_Vec3_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Math_Vec3_Vector self) -> std::vector< std::shared_ptr< openplx::Math::Vec3 > >::size_type"""
        return _MathSwig.Math_Vec3_Vector_capacity(self)
    __swig_destroy__ = _MathSwig.delete_Math_Vec3_Vector

# Register Math_Vec3_Vector in _MathSwig:
_MathSwig.Math_Vec3_Vector_swigregister(Math_Vec3_Vector)

class Math_AffineTransform(openplx.Core.Object):
    r"""Proxy of C++ openplx::Math::AffineTransform class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Math_AffineTransform self) -> Math_AffineTransform"""
        _MathSwig.Math_AffineTransform_swiginit(self, _MathSwig.new_Math_AffineTransform())

    def position(self):
        r"""position(Math_AffineTransform self) -> std::shared_ptr< openplx::Math::Vec3 >"""
        return _MathSwig.Math_AffineTransform_position(self)

    def rotation(self):
        r"""rotation(Math_AffineTransform self) -> std::shared_ptr< openplx::Math::Quat >"""
        return _MathSwig.Math_AffineTransform_rotation(self)

    @staticmethod
    def create():
        r"""create() -> std::shared_ptr< openplx::Math::AffineTransform >"""
        return _MathSwig.Math_AffineTransform_create()

    @staticmethod
    def _from(p, r):
        r"""
        _from(std::shared_ptr< openplx::Math::Vec3 > p, std::shared_ptr< openplx::Math::Quat > r) -> std::shared_ptr< openplx::Math::AffineTransform >

        Parameters
        ----------
        p: std::shared_ptr< openplx::Math::Vec3 >
        r: std::shared_ptr< openplx::Math::Quat >

        """
        return _MathSwig.Math_AffineTransform__from(p, r)

    @staticmethod
    def from_axes(new_Z, new_X, position):
        r"""
        from_axes(std::shared_ptr< openplx::Math::Vec3 > new_Z, std::shared_ptr< openplx::Math::Vec3 > new_X, std::shared_ptr< openplx::Math::Vec3 > position) -> std::shared_ptr< openplx::Math::AffineTransform >

        Parameters
        ----------
        new_Z: std::shared_ptr< openplx::Math::Vec3 >
        new_X: std::shared_ptr< openplx::Math::Vec3 >
        position: std::shared_ptr< openplx::Math::Vec3 >

        """
        return _MathSwig.Math_AffineTransform_from_axes(new_Z, new_X, position)

    @staticmethod
    def inverse_of(p, r):
        r"""
        inverse_of(std::shared_ptr< openplx::Math::Vec3 > p, std::shared_ptr< openplx::Math::Quat > r) -> std::shared_ptr< openplx::Math::AffineTransform >

        Parameters
        ----------
        p: std::shared_ptr< openplx::Math::Vec3 >
        r: std::shared_ptr< openplx::Math::Quat >

        """
        return _MathSwig.Math_AffineTransform_inverse_of(p, r)

    def inverse(self):
        r"""inverse(Math_AffineTransform self) -> std::shared_ptr< openplx::Math::AffineTransform >"""
        return _MathSwig.Math_AffineTransform_inverse(self)

    def transform_vec3_point(self, _in):
        r"""
        transform_vec3_point(Math_AffineTransform self, std::shared_ptr< openplx::Math::Vec3 > _in) -> std::shared_ptr< openplx::Math::Vec3 >

        Parameters
        ----------
        in: std::shared_ptr< openplx::Math::Vec3 >

        """
        return _MathSwig.Math_AffineTransform_transform_vec3_point(self, _in)

    def transform_vec3_vector(self, _in):
        r"""
        transform_vec3_vector(Math_AffineTransform self, std::shared_ptr< openplx::Math::Vec3 > _in) -> std::shared_ptr< openplx::Math::Vec3 >

        Parameters
        ----------
        in: std::shared_ptr< openplx::Math::Vec3 >

        """
        return _MathSwig.Math_AffineTransform_transform_vec3_vector(self, _in)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Math_AffineTransform self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _MathSwig.Math_AffineTransform_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Math_AffineTransform self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _MathSwig.Math_AffineTransform_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Math_AffineTransform self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _MathSwig.Math_AffineTransform_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Math_AffineTransform self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _MathSwig.Math_AffineTransform_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Math_AffineTransform self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _MathSwig.Math_AffineTransform_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Math_AffineTransform self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _MathSwig.Math_AffineTransform_triggerOnInit(self, context)
    __swig_destroy__ = _MathSwig.delete_Math_AffineTransform

# Register Math_AffineTransform in _MathSwig:
_MathSwig.Math_AffineTransform_swigregister(Math_AffineTransform)

def Math_AffineTransform_create():
    r"""Math_AffineTransform_create() -> std::shared_ptr< openplx::Math::AffineTransform >"""
    return _MathSwig.Math_AffineTransform_create()

def Math_AffineTransform__from(p, r):
    r"""
    Math_AffineTransform__from(std::shared_ptr< openplx::Math::Vec3 > p, std::shared_ptr< openplx::Math::Quat > r) -> std::shared_ptr< openplx::Math::AffineTransform >

    Parameters
    ----------
    p: std::shared_ptr< openplx::Math::Vec3 >
    r: std::shared_ptr< openplx::Math::Quat >

    """
    return _MathSwig.Math_AffineTransform__from(p, r)

def Math_AffineTransform_from_axes(new_Z, new_X, position):
    r"""
    Math_AffineTransform_from_axes(std::shared_ptr< openplx::Math::Vec3 > new_Z, std::shared_ptr< openplx::Math::Vec3 > new_X, std::shared_ptr< openplx::Math::Vec3 > position) -> std::shared_ptr< openplx::Math::AffineTransform >

    Parameters
    ----------
    new_Z: std::shared_ptr< openplx::Math::Vec3 >
    new_X: std::shared_ptr< openplx::Math::Vec3 >
    position: std::shared_ptr< openplx::Math::Vec3 >

    """
    return _MathSwig.Math_AffineTransform_from_axes(new_Z, new_X, position)

def Math_AffineTransform_inverse_of(p, r):
    r"""
    Math_AffineTransform_inverse_of(std::shared_ptr< openplx::Math::Vec3 > p, std::shared_ptr< openplx::Math::Quat > r) -> std::shared_ptr< openplx::Math::AffineTransform >

    Parameters
    ----------
    p: std::shared_ptr< openplx::Math::Vec3 >
    r: std::shared_ptr< openplx::Math::Quat >

    """
    return _MathSwig.Math_AffineTransform_inverse_of(p, r)

class Math_Functions(openplx.Core.Object):
    r"""Proxy of C++ openplx::Math::Functions class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Math_Functions self) -> Math_Functions"""
        _MathSwig.Math_Functions_swiginit(self, _MathSwig.new_Math_Functions())

    @staticmethod
    def sin(x):
        r"""
        sin(double x) -> double

        Parameters
        ----------
        x: double

        """
        return _MathSwig.Math_Functions_sin(x)

    @staticmethod
    def cos(x):
        r"""
        cos(double x) -> double

        Parameters
        ----------
        x: double

        """
        return _MathSwig.Math_Functions_cos(x)

    @staticmethod
    def tan(x):
        r"""
        tan(double x) -> double

        Parameters
        ----------
        x: double

        """
        return _MathSwig.Math_Functions_tan(x)

    @staticmethod
    def arcsin(x):
        r"""
        arcsin(double x) -> double

        Parameters
        ----------
        x: double

        """
        return _MathSwig.Math_Functions_arcsin(x)

    @staticmethod
    def arccos(x):
        r"""
        arccos(double x) -> double

        Parameters
        ----------
        x: double

        """
        return _MathSwig.Math_Functions_arccos(x)

    @staticmethod
    def arctan(x):
        r"""
        arctan(double x) -> double

        Parameters
        ----------
        x: double

        """
        return _MathSwig.Math_Functions_arctan(x)

    @staticmethod
    def arctan2(x, y):
        r"""
        arctan2(double x, double y) -> double

        Parameters
        ----------
        x: double
        y: double

        """
        return _MathSwig.Math_Functions_arctan2(x, y)

    @staticmethod
    def sqrt(values):
        r"""
        sqrt(double values) -> double

        Parameters
        ----------
        values: double

        """
        return _MathSwig.Math_Functions_sqrt(values)

    @staticmethod
    def pow(base, exponent):
        r"""
        pow(double base, double exponent) -> double

        Parameters
        ----------
        base: double
        exponent: double

        """
        return _MathSwig.Math_Functions_pow(base, exponent)

    @staticmethod
    def mean(values):
        r"""
        mean(DoubleVector values) -> double

        Parameters
        ----------
        values: std::vector< double,std::allocator< double > >

        """
        return _MathSwig.Math_Functions_mean(values)

    @staticmethod
    def median(values):
        r"""
        median(DoubleVector values) -> double

        Parameters
        ----------
        values: std::vector< double,std::allocator< double > >

        """
        return _MathSwig.Math_Functions_median(values)

    @staticmethod
    def harmonic_mean(values):
        r"""
        harmonic_mean(DoubleVector values) -> double

        Parameters
        ----------
        values: std::vector< double,std::allocator< double > >

        """
        return _MathSwig.Math_Functions_harmonic_mean(values)

    @staticmethod
    def min(values):
        r"""
        min(DoubleVector values) -> double

        Parameters
        ----------
        values: std::vector< double,std::allocator< double > >

        """
        return _MathSwig.Math_Functions_min(values)

    @staticmethod
    def max(values):
        r"""
        max(DoubleVector values) -> double

        Parameters
        ----------
        values: std::vector< double,std::allocator< double > >

        """
        return _MathSwig.Math_Functions_max(values)

    @staticmethod
    def sum(values):
        r"""
        sum(DoubleVector values) -> double

        Parameters
        ----------
        values: std::vector< double,std::allocator< double > >

        """
        return _MathSwig.Math_Functions_sum(values)

    @staticmethod
    def equals_approx(value, reference):
        r"""
        equals_approx(double value, double reference) -> bool

        Parameters
        ----------
        value: double
        reference: double

        """
        return _MathSwig.Math_Functions_equals_approx(value, reference)

    @staticmethod
    def inf():
        r"""inf() -> double"""
        return _MathSwig.Math_Functions_inf()

    @staticmethod
    def neg_inf():
        r"""neg_inf() -> double"""
        return _MathSwig.Math_Functions_neg_inf()

    def setDynamic(self, key, value):
        r"""
        setDynamic(Math_Functions self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _MathSwig.Math_Functions_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Math_Functions self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _MathSwig.Math_Functions_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Math_Functions self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _MathSwig.Math_Functions_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Math_Functions self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _MathSwig.Math_Functions_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Math_Functions self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _MathSwig.Math_Functions_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Math_Functions self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _MathSwig.Math_Functions_triggerOnInit(self, context)
    __swig_destroy__ = _MathSwig.delete_Math_Functions

# Register Math_Functions in _MathSwig:
_MathSwig.Math_Functions_swigregister(Math_Functions)

def Math_Functions_sin(x):
    r"""
    Math_Functions_sin(double x) -> double

    Parameters
    ----------
    x: double

    """
    return _MathSwig.Math_Functions_sin(x)

def Math_Functions_cos(x):
    r"""
    Math_Functions_cos(double x) -> double

    Parameters
    ----------
    x: double

    """
    return _MathSwig.Math_Functions_cos(x)

def Math_Functions_tan(x):
    r"""
    Math_Functions_tan(double x) -> double

    Parameters
    ----------
    x: double

    """
    return _MathSwig.Math_Functions_tan(x)

def Math_Functions_arcsin(x):
    r"""
    Math_Functions_arcsin(double x) -> double

    Parameters
    ----------
    x: double

    """
    return _MathSwig.Math_Functions_arcsin(x)

def Math_Functions_arccos(x):
    r"""
    Math_Functions_arccos(double x) -> double

    Parameters
    ----------
    x: double

    """
    return _MathSwig.Math_Functions_arccos(x)

def Math_Functions_arctan(x):
    r"""
    Math_Functions_arctan(double x) -> double

    Parameters
    ----------
    x: double

    """
    return _MathSwig.Math_Functions_arctan(x)

def Math_Functions_arctan2(x, y):
    r"""
    Math_Functions_arctan2(double x, double y) -> double

    Parameters
    ----------
    x: double
    y: double

    """
    return _MathSwig.Math_Functions_arctan2(x, y)

def Math_Functions_sqrt(values):
    r"""
    Math_Functions_sqrt(double values) -> double

    Parameters
    ----------
    values: double

    """
    return _MathSwig.Math_Functions_sqrt(values)

def Math_Functions_pow(base, exponent):
    r"""
    Math_Functions_pow(double base, double exponent) -> double

    Parameters
    ----------
    base: double
    exponent: double

    """
    return _MathSwig.Math_Functions_pow(base, exponent)

def Math_Functions_mean(values):
    r"""
    Math_Functions_mean(DoubleVector values) -> double

    Parameters
    ----------
    values: std::vector< double,std::allocator< double > >

    """
    return _MathSwig.Math_Functions_mean(values)

def Math_Functions_median(values):
    r"""
    Math_Functions_median(DoubleVector values) -> double

    Parameters
    ----------
    values: std::vector< double,std::allocator< double > >

    """
    return _MathSwig.Math_Functions_median(values)

def Math_Functions_harmonic_mean(values):
    r"""
    Math_Functions_harmonic_mean(DoubleVector values) -> double

    Parameters
    ----------
    values: std::vector< double,std::allocator< double > >

    """
    return _MathSwig.Math_Functions_harmonic_mean(values)

def Math_Functions_min(values):
    r"""
    Math_Functions_min(DoubleVector values) -> double

    Parameters
    ----------
    values: std::vector< double,std::allocator< double > >

    """
    return _MathSwig.Math_Functions_min(values)

def Math_Functions_max(values):
    r"""
    Math_Functions_max(DoubleVector values) -> double

    Parameters
    ----------
    values: std::vector< double,std::allocator< double > >

    """
    return _MathSwig.Math_Functions_max(values)

def Math_Functions_sum(values):
    r"""
    Math_Functions_sum(DoubleVector values) -> double

    Parameters
    ----------
    values: std::vector< double,std::allocator< double > >

    """
    return _MathSwig.Math_Functions_sum(values)

def Math_Functions_equals_approx(value, reference):
    r"""
    Math_Functions_equals_approx(double value, double reference) -> bool

    Parameters
    ----------
    value: double
    reference: double

    """
    return _MathSwig.Math_Functions_equals_approx(value, reference)

def Math_Functions_inf():
    r"""Math_Functions_inf() -> double"""
    return _MathSwig.Math_Functions_inf()

def Math_Functions_neg_inf():
    r"""Math_Functions_neg_inf() -> double"""
    return _MathSwig.Math_Functions_neg_inf()

class Math_Line(openplx.Core.Object):
    r"""Proxy of C++ openplx::Math::Line class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Math_Line self) -> Math_Line"""
        _MathSwig.Math_Line_swiginit(self, _MathSwig.new_Math_Line())

    def start(self):
        r"""start(Math_Line self) -> std::shared_ptr< openplx::Math::Vec3 >"""
        return _MathSwig.Math_Line_start(self)

    def end(self):
        r"""end(Math_Line self) -> std::shared_ptr< openplx::Math::Vec3 >"""
        return _MathSwig.Math_Line_end(self)

    @staticmethod
    def from_points(start, end):
        r"""
        from_points(std::shared_ptr< openplx::Math::Vec3 > start, std::shared_ptr< openplx::Math::Vec3 > end) -> std::shared_ptr< openplx::Math::Line >

        Parameters
        ----------
        start: std::shared_ptr< openplx::Math::Vec3 >
        end: std::shared_ptr< openplx::Math::Vec3 >

        """
        return _MathSwig.Math_Line_from_points(start, end)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Math_Line self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _MathSwig.Math_Line_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Math_Line self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _MathSwig.Math_Line_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Math_Line self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _MathSwig.Math_Line_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Math_Line self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _MathSwig.Math_Line_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Math_Line self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _MathSwig.Math_Line_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Math_Line self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _MathSwig.Math_Line_triggerOnInit(self, context)
    __swig_destroy__ = _MathSwig.delete_Math_Line

# Register Math_Line in _MathSwig:
_MathSwig.Math_Line_swigregister(Math_Line)

def Math_Line_from_points(start, end):
    r"""
    Math_Line_from_points(std::shared_ptr< openplx::Math::Vec3 > start, std::shared_ptr< openplx::Math::Vec3 > end) -> std::shared_ptr< openplx::Math::Line >

    Parameters
    ----------
    start: std::shared_ptr< openplx::Math::Vec3 >
    end: std::shared_ptr< openplx::Math::Vec3 >

    """
    return _MathSwig.Math_Line_from_points(start, end)

class Math_Matrix3x3(openplx.Core.Object):
    r"""Proxy of C++ openplx::Math::Matrix3x3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Math_Matrix3x3 self) -> Math_Matrix3x3"""
        _MathSwig.Math_Matrix3x3_swiginit(self, _MathSwig.new_Math_Matrix3x3())

    def e00(self):
        r"""e00(Math_Matrix3x3 self) -> double"""
        return _MathSwig.Math_Matrix3x3_e00(self)

    def e01(self):
        r"""e01(Math_Matrix3x3 self) -> double"""
        return _MathSwig.Math_Matrix3x3_e01(self)

    def e02(self):
        r"""e02(Math_Matrix3x3 self) -> double"""
        return _MathSwig.Math_Matrix3x3_e02(self)

    def e10(self):
        r"""e10(Math_Matrix3x3 self) -> double"""
        return _MathSwig.Math_Matrix3x3_e10(self)

    def e11(self):
        r"""e11(Math_Matrix3x3 self) -> double"""
        return _MathSwig.Math_Matrix3x3_e11(self)

    def e12(self):
        r"""e12(Math_Matrix3x3 self) -> double"""
        return _MathSwig.Math_Matrix3x3_e12(self)

    def e20(self):
        r"""e20(Math_Matrix3x3 self) -> double"""
        return _MathSwig.Math_Matrix3x3_e20(self)

    def e21(self):
        r"""e21(Math_Matrix3x3 self) -> double"""
        return _MathSwig.Math_Matrix3x3_e21(self)

    def e22(self):
        r"""e22(Math_Matrix3x3 self) -> double"""
        return _MathSwig.Math_Matrix3x3_e22(self)

    @staticmethod
    def from_row_major(r0c0, r0c1, r0c2, r1c0, r1c1, r1c2, r2c0, r2c1, r2c2):
        r"""
        from_row_major(double r0c0, double r0c1, double r0c2, double r1c0, double r1c1, double r1c2, double r2c0, double r2c1, double r2c2) -> std::shared_ptr< openplx::Math::Matrix3x3 >

        Parameters
        ----------
        r0c0: double
        r0c1: double
        r0c2: double
        r1c0: double
        r1c1: double
        r1c2: double
        r2c0: double
        r2c1: double
        r2c2: double

        """
        return _MathSwig.Math_Matrix3x3_from_row_major(r0c0, r0c1, r0c2, r1c0, r1c1, r1c2, r2c0, r2c1, r2c2)

    @staticmethod
    def from_rows(r0, r1, r2):
        r"""
        from_rows(DoubleVector r0, DoubleVector r1, DoubleVector r2) -> std::shared_ptr< openplx::Math::Matrix3x3 >

        Parameters
        ----------
        r0: std::vector< double,std::allocator< double > >
        r1: std::vector< double,std::allocator< double > >
        r2: std::vector< double,std::allocator< double > >

        """
        return _MathSwig.Math_Matrix3x3_from_rows(r0, r1, r2)

    @staticmethod
    def from_columns(c0, c1, c2):
        r"""
        from_columns(DoubleVector c0, DoubleVector c1, DoubleVector c2) -> std::shared_ptr< openplx::Math::Matrix3x3 >

        Parameters
        ----------
        c0: std::vector< double,std::allocator< double > >
        c1: std::vector< double,std::allocator< double > >
        c2: std::vector< double,std::allocator< double > >

        """
        return _MathSwig.Math_Matrix3x3_from_columns(c0, c1, c2)

    @staticmethod
    def diag(x, y, z):
        r"""
        diag(double x, double y, double z) -> std::shared_ptr< openplx::Math::Matrix3x3 >

        Parameters
        ----------
        x: double
        y: double
        z: double

        """
        return _MathSwig.Math_Matrix3x3_diag(x, y, z)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Math_Matrix3x3 self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _MathSwig.Math_Matrix3x3_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Math_Matrix3x3 self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _MathSwig.Math_Matrix3x3_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Math_Matrix3x3 self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _MathSwig.Math_Matrix3x3_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Math_Matrix3x3 self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _MathSwig.Math_Matrix3x3_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Math_Matrix3x3 self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _MathSwig.Math_Matrix3x3_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Math_Matrix3x3 self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _MathSwig.Math_Matrix3x3_triggerOnInit(self, context)
    __swig_destroy__ = _MathSwig.delete_Math_Matrix3x3

# Register Math_Matrix3x3 in _MathSwig:
_MathSwig.Math_Matrix3x3_swigregister(Math_Matrix3x3)

def Math_Matrix3x3_from_row_major(r0c0, r0c1, r0c2, r1c0, r1c1, r1c2, r2c0, r2c1, r2c2):
    r"""
    Math_Matrix3x3_from_row_major(double r0c0, double r0c1, double r0c2, double r1c0, double r1c1, double r1c2, double r2c0, double r2c1, double r2c2) -> std::shared_ptr< openplx::Math::Matrix3x3 >

    Parameters
    ----------
    r0c0: double
    r0c1: double
    r0c2: double
    r1c0: double
    r1c1: double
    r1c2: double
    r2c0: double
    r2c1: double
    r2c2: double

    """
    return _MathSwig.Math_Matrix3x3_from_row_major(r0c0, r0c1, r0c2, r1c0, r1c1, r1c2, r2c0, r2c1, r2c2)

def Math_Matrix3x3_from_rows(r0, r1, r2):
    r"""
    Math_Matrix3x3_from_rows(DoubleVector r0, DoubleVector r1, DoubleVector r2) -> std::shared_ptr< openplx::Math::Matrix3x3 >

    Parameters
    ----------
    r0: std::vector< double,std::allocator< double > >
    r1: std::vector< double,std::allocator< double > >
    r2: std::vector< double,std::allocator< double > >

    """
    return _MathSwig.Math_Matrix3x3_from_rows(r0, r1, r2)

def Math_Matrix3x3_from_columns(c0, c1, c2):
    r"""
    Math_Matrix3x3_from_columns(DoubleVector c0, DoubleVector c1, DoubleVector c2) -> std::shared_ptr< openplx::Math::Matrix3x3 >

    Parameters
    ----------
    c0: std::vector< double,std::allocator< double > >
    c1: std::vector< double,std::allocator< double > >
    c2: std::vector< double,std::allocator< double > >

    """
    return _MathSwig.Math_Matrix3x3_from_columns(c0, c1, c2)

def Math_Matrix3x3_diag(x, y, z):
    r"""
    Math_Matrix3x3_diag(double x, double y, double z) -> std::shared_ptr< openplx::Math::Matrix3x3 >

    Parameters
    ----------
    x: double
    y: double
    z: double

    """
    return _MathSwig.Math_Matrix3x3_diag(x, y, z)

class Math_Matrix4x4(openplx.Core.Object):
    r"""Proxy of C++ openplx::Math::Matrix4x4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Math_Matrix4x4 self) -> Math_Matrix4x4"""
        _MathSwig.Math_Matrix4x4_swiginit(self, _MathSwig.new_Math_Matrix4x4())

    def e00(self):
        r"""e00(Math_Matrix4x4 self) -> double"""
        return _MathSwig.Math_Matrix4x4_e00(self)

    def e01(self):
        r"""e01(Math_Matrix4x4 self) -> double"""
        return _MathSwig.Math_Matrix4x4_e01(self)

    def e02(self):
        r"""e02(Math_Matrix4x4 self) -> double"""
        return _MathSwig.Math_Matrix4x4_e02(self)

    def e03(self):
        r"""e03(Math_Matrix4x4 self) -> double"""
        return _MathSwig.Math_Matrix4x4_e03(self)

    def e10(self):
        r"""e10(Math_Matrix4x4 self) -> double"""
        return _MathSwig.Math_Matrix4x4_e10(self)

    def e11(self):
        r"""e11(Math_Matrix4x4 self) -> double"""
        return _MathSwig.Math_Matrix4x4_e11(self)

    def e12(self):
        r"""e12(Math_Matrix4x4 self) -> double"""
        return _MathSwig.Math_Matrix4x4_e12(self)

    def e13(self):
        r"""e13(Math_Matrix4x4 self) -> double"""
        return _MathSwig.Math_Matrix4x4_e13(self)

    def e20(self):
        r"""e20(Math_Matrix4x4 self) -> double"""
        return _MathSwig.Math_Matrix4x4_e20(self)

    def e21(self):
        r"""e21(Math_Matrix4x4 self) -> double"""
        return _MathSwig.Math_Matrix4x4_e21(self)

    def e22(self):
        r"""e22(Math_Matrix4x4 self) -> double"""
        return _MathSwig.Math_Matrix4x4_e22(self)

    def e23(self):
        r"""e23(Math_Matrix4x4 self) -> double"""
        return _MathSwig.Math_Matrix4x4_e23(self)

    def e30(self):
        r"""e30(Math_Matrix4x4 self) -> double"""
        return _MathSwig.Math_Matrix4x4_e30(self)

    def e31(self):
        r"""e31(Math_Matrix4x4 self) -> double"""
        return _MathSwig.Math_Matrix4x4_e31(self)

    def e32(self):
        r"""e32(Math_Matrix4x4 self) -> double"""
        return _MathSwig.Math_Matrix4x4_e32(self)

    def e33(self):
        r"""e33(Math_Matrix4x4 self) -> double"""
        return _MathSwig.Math_Matrix4x4_e33(self)

    @staticmethod
    def from_row_major(r0c0, r0c1, r0c2, r0c3, r1c0, r1c1, r1c2, r1c3, r2c0, r2c1, r2c2, r2c3, r3c0, r3c1, r3c2, r3c3):
        r"""
        from_row_major(double r0c0, double r0c1, double r0c2, double r0c3, double r1c0, double r1c1, double r1c2, double r1c3, double r2c0, double r2c1, double r2c2, double r2c3, double r3c0, double r3c1, double r3c2, double r3c3) -> std::shared_ptr< openplx::Math::Matrix4x4 >

        Parameters
        ----------
        r0c0: double
        r0c1: double
        r0c2: double
        r0c3: double
        r1c0: double
        r1c1: double
        r1c2: double
        r1c3: double
        r2c0: double
        r2c1: double
        r2c2: double
        r2c3: double
        r3c0: double
        r3c1: double
        r3c2: double
        r3c3: double

        """
        return _MathSwig.Math_Matrix4x4_from_row_major(r0c0, r0c1, r0c2, r0c3, r1c0, r1c1, r1c2, r1c3, r2c0, r2c1, r2c2, r2c3, r3c0, r3c1, r3c2, r3c3)

    @staticmethod
    def from_rows(r0, r1, r2, r3):
        r"""
        from_rows(DoubleVector r0, DoubleVector r1, DoubleVector r2, DoubleVector r3) -> std::shared_ptr< openplx::Math::Matrix4x4 >

        Parameters
        ----------
        r0: std::vector< double,std::allocator< double > >
        r1: std::vector< double,std::allocator< double > >
        r2: std::vector< double,std::allocator< double > >
        r3: std::vector< double,std::allocator< double > >

        """
        return _MathSwig.Math_Matrix4x4_from_rows(r0, r1, r2, r3)

    @staticmethod
    def from_columns(c0, c1, c2, c3):
        r"""
        from_columns(DoubleVector c0, DoubleVector c1, DoubleVector c2, DoubleVector c3) -> std::shared_ptr< openplx::Math::Matrix4x4 >

        Parameters
        ----------
        c0: std::vector< double,std::allocator< double > >
        c1: std::vector< double,std::allocator< double > >
        c2: std::vector< double,std::allocator< double > >
        c3: std::vector< double,std::allocator< double > >

        """
        return _MathSwig.Math_Matrix4x4_from_columns(c0, c1, c2, c3)

    @staticmethod
    def from_vec3_quat(v, q):
        r"""
        from_vec3_quat(std::shared_ptr< openplx::Math::Vec3 > v, std::shared_ptr< openplx::Math::Quat > q) -> std::shared_ptr< openplx::Math::Matrix4x4 >

        Parameters
        ----------
        v: std::shared_ptr< openplx::Math::Vec3 >
        q: std::shared_ptr< openplx::Math::Quat >

        """
        return _MathSwig.Math_Matrix4x4_from_vec3_quat(v, q)

    def transpose(self):
        r"""transpose(Math_Matrix4x4 self) -> std::shared_ptr< openplx::Math::Matrix4x4 >"""
        return _MathSwig.Math_Matrix4x4_transpose(self)

    def copy(self):
        r"""copy(Math_Matrix4x4 self) -> std::shared_ptr< openplx::Math::Matrix4x4 >"""
        return _MathSwig.Math_Matrix4x4_copy(self)

    def get_affine_translation(self):
        r"""get_affine_translation(Math_Matrix4x4 self) -> std::shared_ptr< openplx::Math::Vec3 >"""
        return _MathSwig.Math_Matrix4x4_get_affine_translation(self)

    def get_affine_rotation(self):
        r"""get_affine_rotation(Math_Matrix4x4 self) -> std::shared_ptr< openplx::Math::Quat >"""
        return _MathSwig.Math_Matrix4x4_get_affine_rotation(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Math_Matrix4x4 self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _MathSwig.Math_Matrix4x4_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Math_Matrix4x4 self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _MathSwig.Math_Matrix4x4_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Math_Matrix4x4 self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _MathSwig.Math_Matrix4x4_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Math_Matrix4x4 self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _MathSwig.Math_Matrix4x4_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Math_Matrix4x4 self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _MathSwig.Math_Matrix4x4_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Math_Matrix4x4 self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _MathSwig.Math_Matrix4x4_triggerOnInit(self, context)
    __swig_destroy__ = _MathSwig.delete_Math_Matrix4x4

# Register Math_Matrix4x4 in _MathSwig:
_MathSwig.Math_Matrix4x4_swigregister(Math_Matrix4x4)

def Math_Matrix4x4_from_row_major(r0c0, r0c1, r0c2, r0c3, r1c0, r1c1, r1c2, r1c3, r2c0, r2c1, r2c2, r2c3, r3c0, r3c1, r3c2, r3c3):
    r"""
    Math_Matrix4x4_from_row_major(double r0c0, double r0c1, double r0c2, double r0c3, double r1c0, double r1c1, double r1c2, double r1c3, double r2c0, double r2c1, double r2c2, double r2c3, double r3c0, double r3c1, double r3c2, double r3c3) -> std::shared_ptr< openplx::Math::Matrix4x4 >

    Parameters
    ----------
    r0c0: double
    r0c1: double
    r0c2: double
    r0c3: double
    r1c0: double
    r1c1: double
    r1c2: double
    r1c3: double
    r2c0: double
    r2c1: double
    r2c2: double
    r2c3: double
    r3c0: double
    r3c1: double
    r3c2: double
    r3c3: double

    """
    return _MathSwig.Math_Matrix4x4_from_row_major(r0c0, r0c1, r0c2, r0c3, r1c0, r1c1, r1c2, r1c3, r2c0, r2c1, r2c2, r2c3, r3c0, r3c1, r3c2, r3c3)

def Math_Matrix4x4_from_rows(r0, r1, r2, r3):
    r"""
    Math_Matrix4x4_from_rows(DoubleVector r0, DoubleVector r1, DoubleVector r2, DoubleVector r3) -> std::shared_ptr< openplx::Math::Matrix4x4 >

    Parameters
    ----------
    r0: std::vector< double,std::allocator< double > >
    r1: std::vector< double,std::allocator< double > >
    r2: std::vector< double,std::allocator< double > >
    r3: std::vector< double,std::allocator< double > >

    """
    return _MathSwig.Math_Matrix4x4_from_rows(r0, r1, r2, r3)

def Math_Matrix4x4_from_columns(c0, c1, c2, c3):
    r"""
    Math_Matrix4x4_from_columns(DoubleVector c0, DoubleVector c1, DoubleVector c2, DoubleVector c3) -> std::shared_ptr< openplx::Math::Matrix4x4 >

    Parameters
    ----------
    c0: std::vector< double,std::allocator< double > >
    c1: std::vector< double,std::allocator< double > >
    c2: std::vector< double,std::allocator< double > >
    c3: std::vector< double,std::allocator< double > >

    """
    return _MathSwig.Math_Matrix4x4_from_columns(c0, c1, c2, c3)

def Math_Matrix4x4_from_vec3_quat(v, q):
    r"""
    Math_Matrix4x4_from_vec3_quat(std::shared_ptr< openplx::Math::Vec3 > v, std::shared_ptr< openplx::Math::Quat > q) -> std::shared_ptr< openplx::Math::Matrix4x4 >

    Parameters
    ----------
    v: std::shared_ptr< openplx::Math::Vec3 >
    q: std::shared_ptr< openplx::Math::Quat >

    """
    return _MathSwig.Math_Matrix4x4_from_vec3_quat(v, q)

class Math_Quat(openplx.Core.Object):
    r"""Proxy of C++ openplx::Math::Quat class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Math_Quat self) -> Math_Quat"""
        _MathSwig.Math_Quat_swiginit(self, _MathSwig.new_Math_Quat())

    def x(self):
        r"""x(Math_Quat self) -> double"""
        return _MathSwig.Math_Quat_x(self)

    def y(self):
        r"""y(Math_Quat self) -> double"""
        return _MathSwig.Math_Quat_y(self)

    def z(self):
        r"""z(Math_Quat self) -> double"""
        return _MathSwig.Math_Quat_z(self)

    def w(self):
        r"""w(Math_Quat self) -> double"""
        return _MathSwig.Math_Quat_w(self)

    def rotate(self, v):
        r"""
        rotate(Math_Quat self, std::shared_ptr< openplx::Math::Vec3 > v) -> std::shared_ptr< openplx::Math::Vec3 >

        Parameters
        ----------
        v: std::shared_ptr< openplx::Math::Vec3 >

        """
        return _MathSwig.Math_Quat_rotate(self, v)

    def conj(self):
        r"""conj(Math_Quat self) -> std::shared_ptr< openplx::Math::Quat >"""
        return _MathSwig.Math_Quat_conj(self)

    def inverse(self):
        r"""inverse(Math_Quat self) -> std::shared_ptr< openplx::Math::Quat >"""
        return _MathSwig.Math_Quat_inverse(self)

    @staticmethod
    def angle_axis(angle, axis):
        r"""
        angle_axis(double angle, std::shared_ptr< openplx::Math::Vec3 > axis) -> std::shared_ptr< openplx::Math::Quat >

        Parameters
        ----------
        angle: double
        axis: std::shared_ptr< openplx::Math::Vec3 >

        """
        return _MathSwig.Math_Quat_angle_axis(angle, axis)

    @staticmethod
    def from_to(_from, to):
        r"""
        from_to(std::shared_ptr< openplx::Math::Vec3 > _from, std::shared_ptr< openplx::Math::Vec3 > to) -> std::shared_ptr< openplx::Math::Quat >

        Parameters
        ----------
        from: std::shared_ptr< openplx::Math::Vec3 >
        to: std::shared_ptr< openplx::Math::Vec3 >

        """
        return _MathSwig.Math_Quat_from_to(_from, to)

    @staticmethod
    def normal(q):
        r"""
        normal(std::shared_ptr< openplx::Math::Quat > q) -> std::shared_ptr< openplx::Math::Quat >

        Parameters
        ----------
        q: std::shared_ptr< openplx::Math::Quat >

        """
        return _MathSwig.Math_Quat_normal(q)

    @staticmethod
    def from_xyzw(x, y, z, w):
        r"""
        from_xyzw(double x, double y, double z, double w) -> std::shared_ptr< openplx::Math::Quat >

        Parameters
        ----------
        x: double
        y: double
        z: double
        w: double

        """
        return _MathSwig.Math_Quat_from_xyzw(x, y, z, w)

    @staticmethod
    def from_euler_angles_xyzs(alpha, beta, gamma):
        r"""
        from_euler_angles_xyzs(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

        Parameters
        ----------
        alpha: double
        beta: double
        gamma: double

        """
        return _MathSwig.Math_Quat_from_euler_angles_xyzs(alpha, beta, gamma)

    @staticmethod
    def from_euler_angles_xyxs(alpha, beta, gamma):
        r"""
        from_euler_angles_xyxs(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

        Parameters
        ----------
        alpha: double
        beta: double
        gamma: double

        """
        return _MathSwig.Math_Quat_from_euler_angles_xyxs(alpha, beta, gamma)

    @staticmethod
    def from_euler_angles_xzys(alpha, beta, gamma):
        r"""
        from_euler_angles_xzys(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

        Parameters
        ----------
        alpha: double
        beta: double
        gamma: double

        """
        return _MathSwig.Math_Quat_from_euler_angles_xzys(alpha, beta, gamma)

    @staticmethod
    def from_euler_angles_xzxs(alpha, beta, gamma):
        r"""
        from_euler_angles_xzxs(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

        Parameters
        ----------
        alpha: double
        beta: double
        gamma: double

        """
        return _MathSwig.Math_Quat_from_euler_angles_xzxs(alpha, beta, gamma)

    @staticmethod
    def from_euler_angles_yzxs(alpha, beta, gamma):
        r"""
        from_euler_angles_yzxs(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

        Parameters
        ----------
        alpha: double
        beta: double
        gamma: double

        """
        return _MathSwig.Math_Quat_from_euler_angles_yzxs(alpha, beta, gamma)

    @staticmethod
    def from_euler_angles_yzys(alpha, beta, gamma):
        r"""
        from_euler_angles_yzys(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

        Parameters
        ----------
        alpha: double
        beta: double
        gamma: double

        """
        return _MathSwig.Math_Quat_from_euler_angles_yzys(alpha, beta, gamma)

    @staticmethod
    def from_euler_angles_yxzs(alpha, beta, gamma):
        r"""
        from_euler_angles_yxzs(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

        Parameters
        ----------
        alpha: double
        beta: double
        gamma: double

        """
        return _MathSwig.Math_Quat_from_euler_angles_yxzs(alpha, beta, gamma)

    @staticmethod
    def from_euler_angles_yxys(alpha, beta, gamma):
        r"""
        from_euler_angles_yxys(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

        Parameters
        ----------
        alpha: double
        beta: double
        gamma: double

        """
        return _MathSwig.Math_Quat_from_euler_angles_yxys(alpha, beta, gamma)

    @staticmethod
    def from_euler_angles_zxys(alpha, beta, gamma):
        r"""
        from_euler_angles_zxys(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

        Parameters
        ----------
        alpha: double
        beta: double
        gamma: double

        """
        return _MathSwig.Math_Quat_from_euler_angles_zxys(alpha, beta, gamma)

    @staticmethod
    def from_euler_angles_zxzs(alpha, beta, gamma):
        r"""
        from_euler_angles_zxzs(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

        Parameters
        ----------
        alpha: double
        beta: double
        gamma: double

        """
        return _MathSwig.Math_Quat_from_euler_angles_zxzs(alpha, beta, gamma)

    @staticmethod
    def from_euler_angles_zyxs(alpha, beta, gamma):
        r"""
        from_euler_angles_zyxs(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

        Parameters
        ----------
        alpha: double
        beta: double
        gamma: double

        """
        return _MathSwig.Math_Quat_from_euler_angles_zyxs(alpha, beta, gamma)

    @staticmethod
    def from_euler_angles_zyzs(alpha, beta, gamma):
        r"""
        from_euler_angles_zyzs(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

        Parameters
        ----------
        alpha: double
        beta: double
        gamma: double

        """
        return _MathSwig.Math_Quat_from_euler_angles_zyzs(alpha, beta, gamma)

    @staticmethod
    def from_euler_angles_zyxr(alpha, beta, gamma):
        r"""
        from_euler_angles_zyxr(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

        Parameters
        ----------
        alpha: double
        beta: double
        gamma: double

        """
        return _MathSwig.Math_Quat_from_euler_angles_zyxr(alpha, beta, gamma)

    @staticmethod
    def from_euler_angles_xyxr(alpha, beta, gamma):
        r"""
        from_euler_angles_xyxr(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

        Parameters
        ----------
        alpha: double
        beta: double
        gamma: double

        """
        return _MathSwig.Math_Quat_from_euler_angles_xyxr(alpha, beta, gamma)

    @staticmethod
    def from_euler_angles_yzxr(alpha, beta, gamma):
        r"""
        from_euler_angles_yzxr(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

        Parameters
        ----------
        alpha: double
        beta: double
        gamma: double

        """
        return _MathSwig.Math_Quat_from_euler_angles_yzxr(alpha, beta, gamma)

    @staticmethod
    def from_euler_angles_xzxr(alpha, beta, gamma):
        r"""
        from_euler_angles_xzxr(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

        Parameters
        ----------
        alpha: double
        beta: double
        gamma: double

        """
        return _MathSwig.Math_Quat_from_euler_angles_xzxr(alpha, beta, gamma)

    @staticmethod
    def from_euler_angles_xzyr(alpha, beta, gamma):
        r"""
        from_euler_angles_xzyr(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

        Parameters
        ----------
        alpha: double
        beta: double
        gamma: double

        """
        return _MathSwig.Math_Quat_from_euler_angles_xzyr(alpha, beta, gamma)

    @staticmethod
    def from_euler_angles_yzyr(alpha, beta, gamma):
        r"""
        from_euler_angles_yzyr(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

        Parameters
        ----------
        alpha: double
        beta: double
        gamma: double

        """
        return _MathSwig.Math_Quat_from_euler_angles_yzyr(alpha, beta, gamma)

    @staticmethod
    def from_euler_angles_zxyr(alpha, beta, gamma):
        r"""
        from_euler_angles_zxyr(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

        Parameters
        ----------
        alpha: double
        beta: double
        gamma: double

        """
        return _MathSwig.Math_Quat_from_euler_angles_zxyr(alpha, beta, gamma)

    @staticmethod
    def from_euler_angles_yxyr(alpha, beta, gamma):
        r"""
        from_euler_angles_yxyr(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

        Parameters
        ----------
        alpha: double
        beta: double
        gamma: double

        """
        return _MathSwig.Math_Quat_from_euler_angles_yxyr(alpha, beta, gamma)

    @staticmethod
    def from_euler_angles_yxzr(alpha, beta, gamma):
        r"""
        from_euler_angles_yxzr(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

        Parameters
        ----------
        alpha: double
        beta: double
        gamma: double

        """
        return _MathSwig.Math_Quat_from_euler_angles_yxzr(alpha, beta, gamma)

    @staticmethod
    def from_euler_angles_zxzr(alpha, beta, gamma):
        r"""
        from_euler_angles_zxzr(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

        Parameters
        ----------
        alpha: double
        beta: double
        gamma: double

        """
        return _MathSwig.Math_Quat_from_euler_angles_zxzr(alpha, beta, gamma)

    @staticmethod
    def from_euler_angles_xyzr(alpha, beta, gamma):
        r"""
        from_euler_angles_xyzr(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

        Parameters
        ----------
        alpha: double
        beta: double
        gamma: double

        """
        return _MathSwig.Math_Quat_from_euler_angles_xyzr(alpha, beta, gamma)

    @staticmethod
    def from_euler_angles_zyzr(alpha, beta, gamma):
        r"""
        from_euler_angles_zyzr(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

        Parameters
        ----------
        alpha: double
        beta: double
        gamma: double

        """
        return _MathSwig.Math_Quat_from_euler_angles_zyzr(alpha, beta, gamma)

    @staticmethod
    def from_euler_angles(alpha, beta, gamma):
        r"""
        from_euler_angles(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

        Parameters
        ----------
        alpha: double
        beta: double
        gamma: double

        """
        return _MathSwig.Math_Quat_from_euler_angles(alpha, beta, gamma)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Math_Quat self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _MathSwig.Math_Quat_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Math_Quat self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _MathSwig.Math_Quat_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Math_Quat self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _MathSwig.Math_Quat_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Math_Quat self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _MathSwig.Math_Quat_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Math_Quat self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _MathSwig.Math_Quat_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Math_Quat self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _MathSwig.Math_Quat_triggerOnInit(self, context)
    __swig_destroy__ = _MathSwig.delete_Math_Quat

# Register Math_Quat in _MathSwig:
_MathSwig.Math_Quat_swigregister(Math_Quat)

def Math_Quat_angle_axis(angle, axis):
    r"""
    Math_Quat_angle_axis(double angle, std::shared_ptr< openplx::Math::Vec3 > axis) -> std::shared_ptr< openplx::Math::Quat >

    Parameters
    ----------
    angle: double
    axis: std::shared_ptr< openplx::Math::Vec3 >

    """
    return _MathSwig.Math_Quat_angle_axis(angle, axis)

def Math_Quat_from_to(_from, to):
    r"""
    Math_Quat_from_to(std::shared_ptr< openplx::Math::Vec3 > _from, std::shared_ptr< openplx::Math::Vec3 > to) -> std::shared_ptr< openplx::Math::Quat >

    Parameters
    ----------
    from: std::shared_ptr< openplx::Math::Vec3 >
    to: std::shared_ptr< openplx::Math::Vec3 >

    """
    return _MathSwig.Math_Quat_from_to(_from, to)

def Math_Quat_normal(q):
    r"""
    Math_Quat_normal(std::shared_ptr< openplx::Math::Quat > q) -> std::shared_ptr< openplx::Math::Quat >

    Parameters
    ----------
    q: std::shared_ptr< openplx::Math::Quat >

    """
    return _MathSwig.Math_Quat_normal(q)

def Math_Quat_from_xyzw(x, y, z, w):
    r"""
    Math_Quat_from_xyzw(double x, double y, double z, double w) -> std::shared_ptr< openplx::Math::Quat >

    Parameters
    ----------
    x: double
    y: double
    z: double
    w: double

    """
    return _MathSwig.Math_Quat_from_xyzw(x, y, z, w)

def Math_Quat_from_euler_angles_xyzs(alpha, beta, gamma):
    r"""
    Math_Quat_from_euler_angles_xyzs(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

    Parameters
    ----------
    alpha: double
    beta: double
    gamma: double

    """
    return _MathSwig.Math_Quat_from_euler_angles_xyzs(alpha, beta, gamma)

def Math_Quat_from_euler_angles_xyxs(alpha, beta, gamma):
    r"""
    Math_Quat_from_euler_angles_xyxs(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

    Parameters
    ----------
    alpha: double
    beta: double
    gamma: double

    """
    return _MathSwig.Math_Quat_from_euler_angles_xyxs(alpha, beta, gamma)

def Math_Quat_from_euler_angles_xzys(alpha, beta, gamma):
    r"""
    Math_Quat_from_euler_angles_xzys(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

    Parameters
    ----------
    alpha: double
    beta: double
    gamma: double

    """
    return _MathSwig.Math_Quat_from_euler_angles_xzys(alpha, beta, gamma)

def Math_Quat_from_euler_angles_xzxs(alpha, beta, gamma):
    r"""
    Math_Quat_from_euler_angles_xzxs(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

    Parameters
    ----------
    alpha: double
    beta: double
    gamma: double

    """
    return _MathSwig.Math_Quat_from_euler_angles_xzxs(alpha, beta, gamma)

def Math_Quat_from_euler_angles_yzxs(alpha, beta, gamma):
    r"""
    Math_Quat_from_euler_angles_yzxs(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

    Parameters
    ----------
    alpha: double
    beta: double
    gamma: double

    """
    return _MathSwig.Math_Quat_from_euler_angles_yzxs(alpha, beta, gamma)

def Math_Quat_from_euler_angles_yzys(alpha, beta, gamma):
    r"""
    Math_Quat_from_euler_angles_yzys(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

    Parameters
    ----------
    alpha: double
    beta: double
    gamma: double

    """
    return _MathSwig.Math_Quat_from_euler_angles_yzys(alpha, beta, gamma)

def Math_Quat_from_euler_angles_yxzs(alpha, beta, gamma):
    r"""
    Math_Quat_from_euler_angles_yxzs(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

    Parameters
    ----------
    alpha: double
    beta: double
    gamma: double

    """
    return _MathSwig.Math_Quat_from_euler_angles_yxzs(alpha, beta, gamma)

def Math_Quat_from_euler_angles_yxys(alpha, beta, gamma):
    r"""
    Math_Quat_from_euler_angles_yxys(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

    Parameters
    ----------
    alpha: double
    beta: double
    gamma: double

    """
    return _MathSwig.Math_Quat_from_euler_angles_yxys(alpha, beta, gamma)

def Math_Quat_from_euler_angles_zxys(alpha, beta, gamma):
    r"""
    Math_Quat_from_euler_angles_zxys(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

    Parameters
    ----------
    alpha: double
    beta: double
    gamma: double

    """
    return _MathSwig.Math_Quat_from_euler_angles_zxys(alpha, beta, gamma)

def Math_Quat_from_euler_angles_zxzs(alpha, beta, gamma):
    r"""
    Math_Quat_from_euler_angles_zxzs(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

    Parameters
    ----------
    alpha: double
    beta: double
    gamma: double

    """
    return _MathSwig.Math_Quat_from_euler_angles_zxzs(alpha, beta, gamma)

def Math_Quat_from_euler_angles_zyxs(alpha, beta, gamma):
    r"""
    Math_Quat_from_euler_angles_zyxs(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

    Parameters
    ----------
    alpha: double
    beta: double
    gamma: double

    """
    return _MathSwig.Math_Quat_from_euler_angles_zyxs(alpha, beta, gamma)

def Math_Quat_from_euler_angles_zyzs(alpha, beta, gamma):
    r"""
    Math_Quat_from_euler_angles_zyzs(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

    Parameters
    ----------
    alpha: double
    beta: double
    gamma: double

    """
    return _MathSwig.Math_Quat_from_euler_angles_zyzs(alpha, beta, gamma)

def Math_Quat_from_euler_angles_zyxr(alpha, beta, gamma):
    r"""
    Math_Quat_from_euler_angles_zyxr(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

    Parameters
    ----------
    alpha: double
    beta: double
    gamma: double

    """
    return _MathSwig.Math_Quat_from_euler_angles_zyxr(alpha, beta, gamma)

def Math_Quat_from_euler_angles_xyxr(alpha, beta, gamma):
    r"""
    Math_Quat_from_euler_angles_xyxr(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

    Parameters
    ----------
    alpha: double
    beta: double
    gamma: double

    """
    return _MathSwig.Math_Quat_from_euler_angles_xyxr(alpha, beta, gamma)

def Math_Quat_from_euler_angles_yzxr(alpha, beta, gamma):
    r"""
    Math_Quat_from_euler_angles_yzxr(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

    Parameters
    ----------
    alpha: double
    beta: double
    gamma: double

    """
    return _MathSwig.Math_Quat_from_euler_angles_yzxr(alpha, beta, gamma)

def Math_Quat_from_euler_angles_xzxr(alpha, beta, gamma):
    r"""
    Math_Quat_from_euler_angles_xzxr(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

    Parameters
    ----------
    alpha: double
    beta: double
    gamma: double

    """
    return _MathSwig.Math_Quat_from_euler_angles_xzxr(alpha, beta, gamma)

def Math_Quat_from_euler_angles_xzyr(alpha, beta, gamma):
    r"""
    Math_Quat_from_euler_angles_xzyr(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

    Parameters
    ----------
    alpha: double
    beta: double
    gamma: double

    """
    return _MathSwig.Math_Quat_from_euler_angles_xzyr(alpha, beta, gamma)

def Math_Quat_from_euler_angles_yzyr(alpha, beta, gamma):
    r"""
    Math_Quat_from_euler_angles_yzyr(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

    Parameters
    ----------
    alpha: double
    beta: double
    gamma: double

    """
    return _MathSwig.Math_Quat_from_euler_angles_yzyr(alpha, beta, gamma)

def Math_Quat_from_euler_angles_zxyr(alpha, beta, gamma):
    r"""
    Math_Quat_from_euler_angles_zxyr(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

    Parameters
    ----------
    alpha: double
    beta: double
    gamma: double

    """
    return _MathSwig.Math_Quat_from_euler_angles_zxyr(alpha, beta, gamma)

def Math_Quat_from_euler_angles_yxyr(alpha, beta, gamma):
    r"""
    Math_Quat_from_euler_angles_yxyr(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

    Parameters
    ----------
    alpha: double
    beta: double
    gamma: double

    """
    return _MathSwig.Math_Quat_from_euler_angles_yxyr(alpha, beta, gamma)

def Math_Quat_from_euler_angles_yxzr(alpha, beta, gamma):
    r"""
    Math_Quat_from_euler_angles_yxzr(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

    Parameters
    ----------
    alpha: double
    beta: double
    gamma: double

    """
    return _MathSwig.Math_Quat_from_euler_angles_yxzr(alpha, beta, gamma)

def Math_Quat_from_euler_angles_zxzr(alpha, beta, gamma):
    r"""
    Math_Quat_from_euler_angles_zxzr(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

    Parameters
    ----------
    alpha: double
    beta: double
    gamma: double

    """
    return _MathSwig.Math_Quat_from_euler_angles_zxzr(alpha, beta, gamma)

def Math_Quat_from_euler_angles_xyzr(alpha, beta, gamma):
    r"""
    Math_Quat_from_euler_angles_xyzr(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

    Parameters
    ----------
    alpha: double
    beta: double
    gamma: double

    """
    return _MathSwig.Math_Quat_from_euler_angles_xyzr(alpha, beta, gamma)

def Math_Quat_from_euler_angles_zyzr(alpha, beta, gamma):
    r"""
    Math_Quat_from_euler_angles_zyzr(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

    Parameters
    ----------
    alpha: double
    beta: double
    gamma: double

    """
    return _MathSwig.Math_Quat_from_euler_angles_zyzr(alpha, beta, gamma)

def Math_Quat_from_euler_angles(alpha, beta, gamma):
    r"""
    Math_Quat_from_euler_angles(double alpha, double beta, double gamma) -> std::shared_ptr< openplx::Math::Quat >

    Parameters
    ----------
    alpha: double
    beta: double
    gamma: double

    """
    return _MathSwig.Math_Quat_from_euler_angles(alpha, beta, gamma)

class Math_Vec2(openplx.Core.Object):
    r"""Proxy of C++ openplx::Math::Vec2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Math_Vec2 self) -> Math_Vec2"""
        _MathSwig.Math_Vec2_swiginit(self, _MathSwig.new_Math_Vec2())

    def x(self):
        r"""x(Math_Vec2 self) -> double"""
        return _MathSwig.Math_Vec2_x(self)

    def y(self):
        r"""y(Math_Vec2 self) -> double"""
        return _MathSwig.Math_Vec2_y(self)

    @staticmethod
    def X_AXIS():
        r"""X_AXIS() -> std::shared_ptr< openplx::Math::Vec2 >"""
        return _MathSwig.Math_Vec2_X_AXIS()

    @staticmethod
    def Y_AXIS():
        r"""Y_AXIS() -> std::shared_ptr< openplx::Math::Vec2 >"""
        return _MathSwig.Math_Vec2_Y_AXIS()

    @staticmethod
    def from_xy(x, y):
        r"""
        from_xy(double x, double y) -> std::shared_ptr< openplx::Math::Vec2 >

        Parameters
        ----------
        x: double
        y: double

        """
        return _MathSwig.Math_Vec2_from_xy(x, y)

    def length(self):
        r"""length(Math_Vec2 self) -> double"""
        return _MathSwig.Math_Vec2_length(self)

    def normal(self):
        r"""normal(Math_Vec2 self) -> std::shared_ptr< openplx::Math::Vec2 >"""
        return _MathSwig.Math_Vec2_normal(self)

    def dot(self, rhs):
        r"""
        dot(Math_Vec2 self, std::shared_ptr< openplx::Math::Vec2 > rhs) -> double

        Parameters
        ----------
        rhs: std::shared_ptr< openplx::Math::Vec2 >

        """
        return _MathSwig.Math_Vec2_dot(self, rhs)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Math_Vec2 self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _MathSwig.Math_Vec2_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Math_Vec2 self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _MathSwig.Math_Vec2_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Math_Vec2 self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _MathSwig.Math_Vec2_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Math_Vec2 self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _MathSwig.Math_Vec2_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Math_Vec2 self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _MathSwig.Math_Vec2_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Math_Vec2 self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _MathSwig.Math_Vec2_triggerOnInit(self, context)
    __swig_destroy__ = _MathSwig.delete_Math_Vec2

# Register Math_Vec2 in _MathSwig:
_MathSwig.Math_Vec2_swigregister(Math_Vec2)

def Math_Vec2_X_AXIS():
    r"""Math_Vec2_X_AXIS() -> std::shared_ptr< openplx::Math::Vec2 >"""
    return _MathSwig.Math_Vec2_X_AXIS()

def Math_Vec2_Y_AXIS():
    r"""Math_Vec2_Y_AXIS() -> std::shared_ptr< openplx::Math::Vec2 >"""
    return _MathSwig.Math_Vec2_Y_AXIS()

def Math_Vec2_from_xy(x, y):
    r"""
    Math_Vec2_from_xy(double x, double y) -> std::shared_ptr< openplx::Math::Vec2 >

    Parameters
    ----------
    x: double
    y: double

    """
    return _MathSwig.Math_Vec2_from_xy(x, y)

class Math_Vec3(openplx.Core.Object):
    r"""Proxy of C++ openplx::Math::Vec3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Math_Vec3 self) -> Math_Vec3"""
        _MathSwig.Math_Vec3_swiginit(self, _MathSwig.new_Math_Vec3())

    def x(self):
        r"""x(Math_Vec3 self) -> double"""
        return _MathSwig.Math_Vec3_x(self)

    def y(self):
        r"""y(Math_Vec3 self) -> double"""
        return _MathSwig.Math_Vec3_y(self)

    def z(self):
        r"""z(Math_Vec3 self) -> double"""
        return _MathSwig.Math_Vec3_z(self)

    @staticmethod
    def X_AXIS():
        r"""X_AXIS() -> std::shared_ptr< openplx::Math::Vec3 >"""
        return _MathSwig.Math_Vec3_X_AXIS()

    @staticmethod
    def Y_AXIS():
        r"""Y_AXIS() -> std::shared_ptr< openplx::Math::Vec3 >"""
        return _MathSwig.Math_Vec3_Y_AXIS()

    @staticmethod
    def Z_AXIS():
        r"""Z_AXIS() -> std::shared_ptr< openplx::Math::Vec3 >"""
        return _MathSwig.Math_Vec3_Z_AXIS()

    @staticmethod
    def from_xyz(x, y, z):
        r"""
        from_xyz(double x, double y, double z) -> std::shared_ptr< openplx::Math::Vec3 >

        Parameters
        ----------
        x: double
        y: double
        z: double

        """
        return _MathSwig.Math_Vec3_from_xyz(x, y, z)

    def length(self):
        r"""length(Math_Vec3 self) -> double"""
        return _MathSwig.Math_Vec3_length(self)

    def normal(self):
        r"""normal(Math_Vec3 self) -> std::shared_ptr< openplx::Math::Vec3 >"""
        return _MathSwig.Math_Vec3_normal(self)

    def dot(self, rhs):
        r"""
        dot(Math_Vec3 self, std::shared_ptr< openplx::Math::Vec3 > rhs) -> double

        Parameters
        ----------
        rhs: std::shared_ptr< openplx::Math::Vec3 >

        """
        return _MathSwig.Math_Vec3_dot(self, rhs)

    def cross(self, rhs):
        r"""
        cross(Math_Vec3 self, std::shared_ptr< openplx::Math::Vec3 > rhs) -> std::shared_ptr< openplx::Math::Vec3 >

        Parameters
        ----------
        rhs: std::shared_ptr< openplx::Math::Vec3 >

        """
        return _MathSwig.Math_Vec3_cross(self, rhs)

    def get_orthogonal_unit_vector(self):
        r"""get_orthogonal_unit_vector(Math_Vec3 self) -> std::shared_ptr< openplx::Math::Vec3 >"""
        return _MathSwig.Math_Vec3_get_orthogonal_unit_vector(self)

    @staticmethod
    def angle_between_vectors(vector1, vector2, rot_vector):
        r"""
        angle_between_vectors(std::shared_ptr< openplx::Math::Vec3 > vector1, std::shared_ptr< openplx::Math::Vec3 > vector2, std::shared_ptr< openplx::Math::Vec3 > rot_vector) -> double

        Parameters
        ----------
        vector1: std::shared_ptr< openplx::Math::Vec3 >
        vector2: std::shared_ptr< openplx::Math::Vec3 >
        rot_vector: std::shared_ptr< openplx::Math::Vec3 >

        """
        return _MathSwig.Math_Vec3_angle_between_vectors(vector1, vector2, rot_vector)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Math_Vec3 self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _MathSwig.Math_Vec3_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Math_Vec3 self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _MathSwig.Math_Vec3_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Math_Vec3 self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _MathSwig.Math_Vec3_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Math_Vec3 self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _MathSwig.Math_Vec3_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Math_Vec3 self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _MathSwig.Math_Vec3_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Math_Vec3 self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _MathSwig.Math_Vec3_triggerOnInit(self, context)
    __swig_destroy__ = _MathSwig.delete_Math_Vec3

# Register Math_Vec3 in _MathSwig:
_MathSwig.Math_Vec3_swigregister(Math_Vec3)

def Math_Vec3_X_AXIS():
    r"""Math_Vec3_X_AXIS() -> std::shared_ptr< openplx::Math::Vec3 >"""
    return _MathSwig.Math_Vec3_X_AXIS()

def Math_Vec3_Y_AXIS():
    r"""Math_Vec3_Y_AXIS() -> std::shared_ptr< openplx::Math::Vec3 >"""
    return _MathSwig.Math_Vec3_Y_AXIS()

def Math_Vec3_Z_AXIS():
    r"""Math_Vec3_Z_AXIS() -> std::shared_ptr< openplx::Math::Vec3 >"""
    return _MathSwig.Math_Vec3_Z_AXIS()

def Math_Vec3_from_xyz(x, y, z):
    r"""
    Math_Vec3_from_xyz(double x, double y, double z) -> std::shared_ptr< openplx::Math::Vec3 >

    Parameters
    ----------
    x: double
    y: double
    z: double

    """
    return _MathSwig.Math_Vec3_from_xyz(x, y, z)

def Math_Vec3_angle_between_vectors(vector1, vector2, rot_vector):
    r"""
    Math_Vec3_angle_between_vectors(std::shared_ptr< openplx::Math::Vec3 > vector1, std::shared_ptr< openplx::Math::Vec3 > vector2, std::shared_ptr< openplx::Math::Vec3 > rot_vector) -> double

    Parameters
    ----------
    vector1: std::shared_ptr< openplx::Math::Vec3 >
    vector2: std::shared_ptr< openplx::Math::Vec3 >
    rot_vector: std::shared_ptr< openplx::Math::Vec3 >

    """
    return _MathSwig.Math_Vec3_angle_between_vectors(vector1, vector2, rot_vector)



