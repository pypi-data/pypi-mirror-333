# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _UrdfSwig
else:
    import _UrdfSwig

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SHARED_PTR_DISOWN = _UrdfSwig.SHARED_PTR_DISOWN

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _UrdfSwig.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _UrdfSwig.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _UrdfSwig.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _UrdfSwig.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _UrdfSwig.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _UrdfSwig.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _UrdfSwig.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _UrdfSwig.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _UrdfSwig.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _UrdfSwig.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _UrdfSwig.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _UrdfSwig.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _UrdfSwig.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _UrdfSwig.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _UrdfSwig.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _UrdfSwig.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _UrdfSwig.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _UrdfSwig:
_UrdfSwig.SwigPyIterator_swigregister(SwigPyIterator)

import openplx.Core
import openplx.Math
import openplx.Physics
import openplx.Physics3D
import openplx.Visuals
class Urdf_PackagePath_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Urdf::PackagePath > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Urdf_PackagePath_Vector self) -> SwigPyIterator"""
        return _UrdfSwig.Urdf_PackagePath_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Urdf_PackagePath_Vector self) -> bool"""
        return _UrdfSwig.Urdf_PackagePath_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Urdf_PackagePath_Vector self) -> bool"""
        return _UrdfSwig.Urdf_PackagePath_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Urdf_PackagePath_Vector self) -> std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::size_type"""
        return _UrdfSwig.Urdf_PackagePath_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Urdf_PackagePath_Vector self, std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::difference_type i, std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::difference_type j) -> Urdf_PackagePath_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::difference_type

        """
        return _UrdfSwig.Urdf_PackagePath_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Urdf_PackagePath_Vector self, std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::difference_type i, std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::difference_type

        __setslice__(Urdf_PackagePath_Vector self, std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::difference_type i, std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::difference_type j, Urdf_PackagePath_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Urdf::PackagePath >,std::allocator< std::shared_ptr< openplx::Urdf::PackagePath > > > const &

        """
        return _UrdfSwig.Urdf_PackagePath_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Urdf_PackagePath_Vector self, std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::difference_type i, std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::difference_type

        """
        return _UrdfSwig.Urdf_PackagePath_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Urdf_PackagePath_Vector self, std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::difference_type

        __delitem__(Urdf_PackagePath_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _UrdfSwig.Urdf_PackagePath_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Urdf_PackagePath_Vector self, PySliceObject * slice) -> Urdf_PackagePath_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Urdf_PackagePath_Vector self, std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::difference_type

        """
        return _UrdfSwig.Urdf_PackagePath_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Urdf_PackagePath_Vector self, PySliceObject * slice, Urdf_PackagePath_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Urdf::PackagePath >,std::allocator< std::shared_ptr< openplx::Urdf::PackagePath > > > const &

        __setitem__(Urdf_PackagePath_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Urdf_PackagePath_Vector self, std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::difference_type i, std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::value_type const &

        """
        return _UrdfSwig.Urdf_PackagePath_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Urdf_PackagePath_Vector self) -> std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::value_type"""
        return _UrdfSwig.Urdf_PackagePath_Vector_pop(self)

    def append(self, x):
        r"""
        append(Urdf_PackagePath_Vector self, std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::value_type const &

        """
        return _UrdfSwig.Urdf_PackagePath_Vector_append(self, x)

    def empty(self):
        r"""empty(Urdf_PackagePath_Vector self) -> bool"""
        return _UrdfSwig.Urdf_PackagePath_Vector_empty(self)

    def size(self):
        r"""size(Urdf_PackagePath_Vector self) -> std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::size_type"""
        return _UrdfSwig.Urdf_PackagePath_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Urdf_PackagePath_Vector self, Urdf_PackagePath_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Urdf::PackagePath > > &

        """
        return _UrdfSwig.Urdf_PackagePath_Vector_swap(self, v)

    def begin(self):
        r"""begin(Urdf_PackagePath_Vector self) -> std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::iterator"""
        return _UrdfSwig.Urdf_PackagePath_Vector_begin(self)

    def end(self):
        r"""end(Urdf_PackagePath_Vector self) -> std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::iterator"""
        return _UrdfSwig.Urdf_PackagePath_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Urdf_PackagePath_Vector self) -> std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::reverse_iterator"""
        return _UrdfSwig.Urdf_PackagePath_Vector_rbegin(self)

    def rend(self):
        r"""rend(Urdf_PackagePath_Vector self) -> std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::reverse_iterator"""
        return _UrdfSwig.Urdf_PackagePath_Vector_rend(self)

    def clear(self):
        r"""clear(Urdf_PackagePath_Vector self)"""
        return _UrdfSwig.Urdf_PackagePath_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Urdf_PackagePath_Vector self) -> std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::allocator_type"""
        return _UrdfSwig.Urdf_PackagePath_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Urdf_PackagePath_Vector self)"""
        return _UrdfSwig.Urdf_PackagePath_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Urdf_PackagePath_Vector self, std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::iterator

        erase(Urdf_PackagePath_Vector self, std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::iterator first, std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::iterator last) -> std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::iterator
        last: std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::iterator

        """
        return _UrdfSwig.Urdf_PackagePath_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Urdf_PackagePath_Vector self) -> Urdf_PackagePath_Vector
        __init__(Urdf_PackagePath_Vector self, Urdf_PackagePath_Vector other) -> Urdf_PackagePath_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Urdf::PackagePath > > const &

        __init__(Urdf_PackagePath_Vector self, std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::size_type size) -> Urdf_PackagePath_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::size_type

        __init__(Urdf_PackagePath_Vector self, std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::size_type size, std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::value_type const & value) -> Urdf_PackagePath_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::size_type
        value: std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::value_type const &

        """
        _UrdfSwig.Urdf_PackagePath_Vector_swiginit(self, _UrdfSwig.new_Urdf_PackagePath_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Urdf_PackagePath_Vector self, std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::value_type const &

        """
        return _UrdfSwig.Urdf_PackagePath_Vector_push_back(self, x)

    def front(self):
        r"""front(Urdf_PackagePath_Vector self) -> std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::value_type const &"""
        return _UrdfSwig.Urdf_PackagePath_Vector_front(self)

    def back(self):
        r"""back(Urdf_PackagePath_Vector self) -> std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::value_type const &"""
        return _UrdfSwig.Urdf_PackagePath_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Urdf_PackagePath_Vector self, std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::size_type n, std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::size_type
        x: std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::value_type const &

        """
        return _UrdfSwig.Urdf_PackagePath_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Urdf_PackagePath_Vector self, std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::size_type

        resize(Urdf_PackagePath_Vector self, std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::size_type new_size, std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::size_type
        x: std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::value_type const &

        """
        return _UrdfSwig.Urdf_PackagePath_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Urdf_PackagePath_Vector self, std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::iterator pos, std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::iterator
        x: std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::value_type const &

        insert(Urdf_PackagePath_Vector self, std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::iterator pos, std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::size_type n, std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::iterator
        n: std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::size_type
        x: std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::value_type const &

        """
        return _UrdfSwig.Urdf_PackagePath_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Urdf_PackagePath_Vector self, std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::size_type

        """
        return _UrdfSwig.Urdf_PackagePath_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Urdf_PackagePath_Vector self) -> std::vector< std::shared_ptr< openplx::Urdf::PackagePath > >::size_type"""
        return _UrdfSwig.Urdf_PackagePath_Vector_capacity(self)
    __swig_destroy__ = _UrdfSwig.delete_Urdf_PackagePath_Vector

# Register Urdf_PackagePath_Vector in _UrdfSwig:
_UrdfSwig.Urdf_PackagePath_Vector_swigregister(Urdf_PackagePath_Vector)

class Urdf_PackagePath(openplx.Core.Object):
    r"""Proxy of C++ openplx::Urdf::PackagePath class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Urdf_PackagePath self) -> Urdf_PackagePath"""
        _UrdfSwig.Urdf_PackagePath_swiginit(self, _UrdfSwig.new_Urdf_PackagePath())

    def name(self):
        r"""name(Urdf_PackagePath self) -> std::string"""
        return _UrdfSwig.Urdf_PackagePath_name(self)

    def path(self):
        r"""path(Urdf_PackagePath self) -> std::string"""
        return _UrdfSwig.Urdf_PackagePath_path(self)

    def on_init(self, context):
        r"""
        on_init(Urdf_PackagePath self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _UrdfSwig.Urdf_PackagePath_on_init(self, context)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Urdf_PackagePath self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _UrdfSwig.Urdf_PackagePath_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Urdf_PackagePath self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _UrdfSwig.Urdf_PackagePath_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Urdf_PackagePath self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _UrdfSwig.Urdf_PackagePath_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Urdf_PackagePath self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _UrdfSwig.Urdf_PackagePath_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Urdf_PackagePath self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _UrdfSwig.Urdf_PackagePath_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Urdf_PackagePath self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _UrdfSwig.Urdf_PackagePath_triggerOnInit(self, context)
    __swig_destroy__ = _UrdfSwig.delete_Urdf_PackagePath

# Register Urdf_PackagePath in _UrdfSwig:
_UrdfSwig.Urdf_PackagePath_swigregister(Urdf_PackagePath)



