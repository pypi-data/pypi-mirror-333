# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _VehiclesSwig
else:
    import _VehiclesSwig

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SHARED_PTR_DISOWN = _VehiclesSwig.SHARED_PTR_DISOWN

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VehiclesSwig.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _VehiclesSwig.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _VehiclesSwig.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _VehiclesSwig.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _VehiclesSwig.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _VehiclesSwig.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _VehiclesSwig.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _VehiclesSwig.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _VehiclesSwig.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _VehiclesSwig.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _VehiclesSwig.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _VehiclesSwig.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _VehiclesSwig.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _VehiclesSwig.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _VehiclesSwig.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _VehiclesSwig.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _VehiclesSwig.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _VehiclesSwig:
_VehiclesSwig.SwigPyIterator_swigregister(SwigPyIterator)

import openplx.Core
import openplx.DriveTrain
import openplx.Math
import openplx.Physics
import openplx.Physics1D
import openplx.Physics3D
class Vehicles_Tracks_Belt_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Vehicles_Tracks_Belt_Vector self) -> SwigPyIterator"""
        return _VehiclesSwig.Vehicles_Tracks_Belt_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Vehicles_Tracks_Belt_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_Belt_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Vehicles_Tracks_Belt_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_Belt_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Vehicles_Tracks_Belt_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_Belt_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Vehicles_Tracks_Belt_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::difference_type j) -> Vehicles_Tracks_Belt_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_Belt_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Vehicles_Tracks_Belt_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::difference_type

        __setslice__(Vehicles_Tracks_Belt_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::difference_type j, Vehicles_Tracks_Belt_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt >,std::allocator< std::shared_ptr< openplx::Vehicles::Tracks::Belt > > > const &

        """
        return _VehiclesSwig.Vehicles_Tracks_Belt_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Vehicles_Tracks_Belt_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_Belt_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Vehicles_Tracks_Belt_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::difference_type

        __delitem__(Vehicles_Tracks_Belt_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _VehiclesSwig.Vehicles_Tracks_Belt_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Vehicles_Tracks_Belt_Vector self, PySliceObject * slice) -> Vehicles_Tracks_Belt_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Vehicles_Tracks_Belt_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_Belt_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Vehicles_Tracks_Belt_Vector self, PySliceObject * slice, Vehicles_Tracks_Belt_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt >,std::allocator< std::shared_ptr< openplx::Vehicles::Tracks::Belt > > > const &

        __setitem__(Vehicles_Tracks_Belt_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Vehicles_Tracks_Belt_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_Belt_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Vehicles_Tracks_Belt_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::value_type"""
        return _VehiclesSwig.Vehicles_Tracks_Belt_Vector_pop(self)

    def append(self, x):
        r"""
        append(Vehicles_Tracks_Belt_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_Belt_Vector_append(self, x)

    def empty(self):
        r"""empty(Vehicles_Tracks_Belt_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_Belt_Vector_empty(self)

    def size(self):
        r"""size(Vehicles_Tracks_Belt_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_Belt_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Vehicles_Tracks_Belt_Vector self, Vehicles_Tracks_Belt_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_Belt_Vector_swap(self, v)

    def begin(self):
        r"""begin(Vehicles_Tracks_Belt_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::iterator"""
        return _VehiclesSwig.Vehicles_Tracks_Belt_Vector_begin(self)

    def end(self):
        r"""end(Vehicles_Tracks_Belt_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::iterator"""
        return _VehiclesSwig.Vehicles_Tracks_Belt_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Vehicles_Tracks_Belt_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::reverse_iterator"""
        return _VehiclesSwig.Vehicles_Tracks_Belt_Vector_rbegin(self)

    def rend(self):
        r"""rend(Vehicles_Tracks_Belt_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::reverse_iterator"""
        return _VehiclesSwig.Vehicles_Tracks_Belt_Vector_rend(self)

    def clear(self):
        r"""clear(Vehicles_Tracks_Belt_Vector self)"""
        return _VehiclesSwig.Vehicles_Tracks_Belt_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Vehicles_Tracks_Belt_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::allocator_type"""
        return _VehiclesSwig.Vehicles_Tracks_Belt_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Vehicles_Tracks_Belt_Vector self)"""
        return _VehiclesSwig.Vehicles_Tracks_Belt_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Vehicles_Tracks_Belt_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::iterator

        erase(Vehicles_Tracks_Belt_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::iterator first, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::iterator last) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::iterator
        last: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::iterator

        """
        return _VehiclesSwig.Vehicles_Tracks_Belt_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Vehicles_Tracks_Belt_Vector self) -> Vehicles_Tracks_Belt_Vector
        __init__(Vehicles_Tracks_Belt_Vector self, Vehicles_Tracks_Belt_Vector other) -> Vehicles_Tracks_Belt_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > > const &

        __init__(Vehicles_Tracks_Belt_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::size_type size) -> Vehicles_Tracks_Belt_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::size_type

        __init__(Vehicles_Tracks_Belt_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::size_type size, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::value_type const & value) -> Vehicles_Tracks_Belt_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::size_type
        value: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::value_type const &

        """
        _VehiclesSwig.Vehicles_Tracks_Belt_Vector_swiginit(self, _VehiclesSwig.new_Vehicles_Tracks_Belt_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Vehicles_Tracks_Belt_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_Belt_Vector_push_back(self, x)

    def front(self):
        r"""front(Vehicles_Tracks_Belt_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::value_type const &"""
        return _VehiclesSwig.Vehicles_Tracks_Belt_Vector_front(self)

    def back(self):
        r"""back(Vehicles_Tracks_Belt_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::value_type const &"""
        return _VehiclesSwig.Vehicles_Tracks_Belt_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Vehicles_Tracks_Belt_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::size_type n, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_Belt_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Vehicles_Tracks_Belt_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::size_type

        resize(Vehicles_Tracks_Belt_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::size_type new_size, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_Belt_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Vehicles_Tracks_Belt_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::iterator pos, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::iterator
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::value_type const &

        insert(Vehicles_Tracks_Belt_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::iterator pos, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::size_type n, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::iterator
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_Belt_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Vehicles_Tracks_Belt_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::size_type

        """
        return _VehiclesSwig.Vehicles_Tracks_Belt_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Vehicles_Tracks_Belt_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::Belt > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_Belt_Vector_capacity(self)
    __swig_destroy__ = _VehiclesSwig.delete_Vehicles_Tracks_Belt_Vector

# Register Vehicles_Tracks_Belt_Vector in _VehiclesSwig:
_VehiclesSwig.Vehicles_Tracks_Belt_Vector_swigregister(Vehicles_Tracks_Belt_Vector)

class Vehicles_Tracks_BoxLinkDescription_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Vehicles_Tracks_BoxLinkDescription_Vector self) -> SwigPyIterator"""
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Vehicles_Tracks_BoxLinkDescription_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Vehicles_Tracks_BoxLinkDescription_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Vehicles_Tracks_BoxLinkDescription_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Vehicles_Tracks_BoxLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::difference_type j) -> Vehicles_Tracks_BoxLinkDescription_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Vehicles_Tracks_BoxLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::difference_type

        __setslice__(Vehicles_Tracks_BoxLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::difference_type j, Vehicles_Tracks_BoxLinkDescription_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription >,std::allocator< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > > > const &

        """
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Vehicles_Tracks_BoxLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Vehicles_Tracks_BoxLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::difference_type

        __delitem__(Vehicles_Tracks_BoxLinkDescription_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Vehicles_Tracks_BoxLinkDescription_Vector self, PySliceObject * slice) -> Vehicles_Tracks_BoxLinkDescription_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Vehicles_Tracks_BoxLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Vehicles_Tracks_BoxLinkDescription_Vector self, PySliceObject * slice, Vehicles_Tracks_BoxLinkDescription_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription >,std::allocator< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > > > const &

        __setitem__(Vehicles_Tracks_BoxLinkDescription_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Vehicles_Tracks_BoxLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Vehicles_Tracks_BoxLinkDescription_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::value_type"""
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_Vector_pop(self)

    def append(self, x):
        r"""
        append(Vehicles_Tracks_BoxLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_Vector_append(self, x)

    def empty(self):
        r"""empty(Vehicles_Tracks_BoxLinkDescription_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_Vector_empty(self)

    def size(self):
        r"""size(Vehicles_Tracks_BoxLinkDescription_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Vehicles_Tracks_BoxLinkDescription_Vector self, Vehicles_Tracks_BoxLinkDescription_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_Vector_swap(self, v)

    def begin(self):
        r"""begin(Vehicles_Tracks_BoxLinkDescription_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::iterator"""
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_Vector_begin(self)

    def end(self):
        r"""end(Vehicles_Tracks_BoxLinkDescription_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::iterator"""
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Vehicles_Tracks_BoxLinkDescription_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::reverse_iterator"""
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_Vector_rbegin(self)

    def rend(self):
        r"""rend(Vehicles_Tracks_BoxLinkDescription_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::reverse_iterator"""
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_Vector_rend(self)

    def clear(self):
        r"""clear(Vehicles_Tracks_BoxLinkDescription_Vector self)"""
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Vehicles_Tracks_BoxLinkDescription_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::allocator_type"""
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Vehicles_Tracks_BoxLinkDescription_Vector self)"""
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Vehicles_Tracks_BoxLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::iterator

        erase(Vehicles_Tracks_BoxLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::iterator first, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::iterator last) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::iterator
        last: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::iterator

        """
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Vehicles_Tracks_BoxLinkDescription_Vector self) -> Vehicles_Tracks_BoxLinkDescription_Vector
        __init__(Vehicles_Tracks_BoxLinkDescription_Vector self, Vehicles_Tracks_BoxLinkDescription_Vector other) -> Vehicles_Tracks_BoxLinkDescription_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > > const &

        __init__(Vehicles_Tracks_BoxLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::size_type size) -> Vehicles_Tracks_BoxLinkDescription_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::size_type

        __init__(Vehicles_Tracks_BoxLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::size_type size, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::value_type const & value) -> Vehicles_Tracks_BoxLinkDescription_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::size_type
        value: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::value_type const &

        """
        _VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_Vector_swiginit(self, _VehiclesSwig.new_Vehicles_Tracks_BoxLinkDescription_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Vehicles_Tracks_BoxLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_Vector_push_back(self, x)

    def front(self):
        r"""front(Vehicles_Tracks_BoxLinkDescription_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::value_type const &"""
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_Vector_front(self)

    def back(self):
        r"""back(Vehicles_Tracks_BoxLinkDescription_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::value_type const &"""
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Vehicles_Tracks_BoxLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::size_type n, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Vehicles_Tracks_BoxLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::size_type

        resize(Vehicles_Tracks_BoxLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::size_type new_size, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Vehicles_Tracks_BoxLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::iterator pos, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::iterator
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::value_type const &

        insert(Vehicles_Tracks_BoxLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::iterator pos, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::size_type n, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::iterator
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Vehicles_Tracks_BoxLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::size_type

        """
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Vehicles_Tracks_BoxLinkDescription_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkDescription > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_Vector_capacity(self)
    __swig_destroy__ = _VehiclesSwig.delete_Vehicles_Tracks_BoxLinkDescription_Vector

# Register Vehicles_Tracks_BoxLinkDescription_Vector in _VehiclesSwig:
_VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_Vector_swigregister(Vehicles_Tracks_BoxLinkDescription_Vector)

class Vehicles_Tracks_BoxLinkVariation_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Vehicles_Tracks_BoxLinkVariation_Vector self) -> SwigPyIterator"""
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkVariation_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Vehicles_Tracks_BoxLinkVariation_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkVariation_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Vehicles_Tracks_BoxLinkVariation_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkVariation_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Vehicles_Tracks_BoxLinkVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkVariation_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Vehicles_Tracks_BoxLinkVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::difference_type j) -> Vehicles_Tracks_BoxLinkVariation_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkVariation_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Vehicles_Tracks_BoxLinkVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::difference_type

        __setslice__(Vehicles_Tracks_BoxLinkVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::difference_type j, Vehicles_Tracks_BoxLinkVariation_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation >,std::allocator< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > > > const &

        """
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkVariation_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Vehicles_Tracks_BoxLinkVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkVariation_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Vehicles_Tracks_BoxLinkVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::difference_type

        __delitem__(Vehicles_Tracks_BoxLinkVariation_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkVariation_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Vehicles_Tracks_BoxLinkVariation_Vector self, PySliceObject * slice) -> Vehicles_Tracks_BoxLinkVariation_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Vehicles_Tracks_BoxLinkVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkVariation_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Vehicles_Tracks_BoxLinkVariation_Vector self, PySliceObject * slice, Vehicles_Tracks_BoxLinkVariation_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation >,std::allocator< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > > > const &

        __setitem__(Vehicles_Tracks_BoxLinkVariation_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Vehicles_Tracks_BoxLinkVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkVariation_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Vehicles_Tracks_BoxLinkVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::value_type"""
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkVariation_Vector_pop(self)

    def append(self, x):
        r"""
        append(Vehicles_Tracks_BoxLinkVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkVariation_Vector_append(self, x)

    def empty(self):
        r"""empty(Vehicles_Tracks_BoxLinkVariation_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkVariation_Vector_empty(self)

    def size(self):
        r"""size(Vehicles_Tracks_BoxLinkVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkVariation_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Vehicles_Tracks_BoxLinkVariation_Vector self, Vehicles_Tracks_BoxLinkVariation_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkVariation_Vector_swap(self, v)

    def begin(self):
        r"""begin(Vehicles_Tracks_BoxLinkVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::iterator"""
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkVariation_Vector_begin(self)

    def end(self):
        r"""end(Vehicles_Tracks_BoxLinkVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::iterator"""
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkVariation_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Vehicles_Tracks_BoxLinkVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::reverse_iterator"""
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkVariation_Vector_rbegin(self)

    def rend(self):
        r"""rend(Vehicles_Tracks_BoxLinkVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::reverse_iterator"""
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkVariation_Vector_rend(self)

    def clear(self):
        r"""clear(Vehicles_Tracks_BoxLinkVariation_Vector self)"""
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkVariation_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Vehicles_Tracks_BoxLinkVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::allocator_type"""
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkVariation_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Vehicles_Tracks_BoxLinkVariation_Vector self)"""
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkVariation_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Vehicles_Tracks_BoxLinkVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::iterator

        erase(Vehicles_Tracks_BoxLinkVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::iterator first, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::iterator last) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::iterator
        last: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::iterator

        """
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkVariation_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Vehicles_Tracks_BoxLinkVariation_Vector self) -> Vehicles_Tracks_BoxLinkVariation_Vector
        __init__(Vehicles_Tracks_BoxLinkVariation_Vector self, Vehicles_Tracks_BoxLinkVariation_Vector other) -> Vehicles_Tracks_BoxLinkVariation_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > > const &

        __init__(Vehicles_Tracks_BoxLinkVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::size_type size) -> Vehicles_Tracks_BoxLinkVariation_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::size_type

        __init__(Vehicles_Tracks_BoxLinkVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::size_type size, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::value_type const & value) -> Vehicles_Tracks_BoxLinkVariation_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::size_type
        value: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::value_type const &

        """
        _VehiclesSwig.Vehicles_Tracks_BoxLinkVariation_Vector_swiginit(self, _VehiclesSwig.new_Vehicles_Tracks_BoxLinkVariation_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Vehicles_Tracks_BoxLinkVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkVariation_Vector_push_back(self, x)

    def front(self):
        r"""front(Vehicles_Tracks_BoxLinkVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::value_type const &"""
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkVariation_Vector_front(self)

    def back(self):
        r"""back(Vehicles_Tracks_BoxLinkVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::value_type const &"""
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkVariation_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Vehicles_Tracks_BoxLinkVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::size_type n, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkVariation_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Vehicles_Tracks_BoxLinkVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::size_type

        resize(Vehicles_Tracks_BoxLinkVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::size_type new_size, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkVariation_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Vehicles_Tracks_BoxLinkVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::iterator pos, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::iterator
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::value_type const &

        insert(Vehicles_Tracks_BoxLinkVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::iterator pos, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::size_type n, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::iterator
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkVariation_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Vehicles_Tracks_BoxLinkVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::size_type

        """
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkVariation_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Vehicles_Tracks_BoxLinkVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkVariation_Vector_capacity(self)
    __swig_destroy__ = _VehiclesSwig.delete_Vehicles_Tracks_BoxLinkVariation_Vector

# Register Vehicles_Tracks_BoxLinkVariation_Vector in _VehiclesSwig:
_VehiclesSwig.Vehicles_Tracks_BoxLinkVariation_Vector_swigregister(Vehicles_Tracks_BoxLinkVariation_Vector)

class Vehicles_Tracks_ContactGeometryLinkDescription_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Vehicles_Tracks_ContactGeometryLinkDescription_Vector self) -> SwigPyIterator"""
        return _VehiclesSwig.Vehicles_Tracks_ContactGeometryLinkDescription_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Vehicles_Tracks_ContactGeometryLinkDescription_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_ContactGeometryLinkDescription_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Vehicles_Tracks_ContactGeometryLinkDescription_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_ContactGeometryLinkDescription_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Vehicles_Tracks_ContactGeometryLinkDescription_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_ContactGeometryLinkDescription_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Vehicles_Tracks_ContactGeometryLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::difference_type j) -> Vehicles_Tracks_ContactGeometryLinkDescription_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_ContactGeometryLinkDescription_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Vehicles_Tracks_ContactGeometryLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::difference_type

        __setslice__(Vehicles_Tracks_ContactGeometryLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::difference_type j, Vehicles_Tracks_ContactGeometryLinkDescription_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription >,std::allocator< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > > > const &

        """
        return _VehiclesSwig.Vehicles_Tracks_ContactGeometryLinkDescription_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Vehicles_Tracks_ContactGeometryLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_ContactGeometryLinkDescription_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Vehicles_Tracks_ContactGeometryLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::difference_type

        __delitem__(Vehicles_Tracks_ContactGeometryLinkDescription_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _VehiclesSwig.Vehicles_Tracks_ContactGeometryLinkDescription_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Vehicles_Tracks_ContactGeometryLinkDescription_Vector self, PySliceObject * slice) -> Vehicles_Tracks_ContactGeometryLinkDescription_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Vehicles_Tracks_ContactGeometryLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_ContactGeometryLinkDescription_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Vehicles_Tracks_ContactGeometryLinkDescription_Vector self, PySliceObject * slice, Vehicles_Tracks_ContactGeometryLinkDescription_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription >,std::allocator< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > > > const &

        __setitem__(Vehicles_Tracks_ContactGeometryLinkDescription_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Vehicles_Tracks_ContactGeometryLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_ContactGeometryLinkDescription_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Vehicles_Tracks_ContactGeometryLinkDescription_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::value_type"""
        return _VehiclesSwig.Vehicles_Tracks_ContactGeometryLinkDescription_Vector_pop(self)

    def append(self, x):
        r"""
        append(Vehicles_Tracks_ContactGeometryLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_ContactGeometryLinkDescription_Vector_append(self, x)

    def empty(self):
        r"""empty(Vehicles_Tracks_ContactGeometryLinkDescription_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_ContactGeometryLinkDescription_Vector_empty(self)

    def size(self):
        r"""size(Vehicles_Tracks_ContactGeometryLinkDescription_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_ContactGeometryLinkDescription_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Vehicles_Tracks_ContactGeometryLinkDescription_Vector self, Vehicles_Tracks_ContactGeometryLinkDescription_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_ContactGeometryLinkDescription_Vector_swap(self, v)

    def begin(self):
        r"""begin(Vehicles_Tracks_ContactGeometryLinkDescription_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::iterator"""
        return _VehiclesSwig.Vehicles_Tracks_ContactGeometryLinkDescription_Vector_begin(self)

    def end(self):
        r"""end(Vehicles_Tracks_ContactGeometryLinkDescription_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::iterator"""
        return _VehiclesSwig.Vehicles_Tracks_ContactGeometryLinkDescription_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Vehicles_Tracks_ContactGeometryLinkDescription_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::reverse_iterator"""
        return _VehiclesSwig.Vehicles_Tracks_ContactGeometryLinkDescription_Vector_rbegin(self)

    def rend(self):
        r"""rend(Vehicles_Tracks_ContactGeometryLinkDescription_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::reverse_iterator"""
        return _VehiclesSwig.Vehicles_Tracks_ContactGeometryLinkDescription_Vector_rend(self)

    def clear(self):
        r"""clear(Vehicles_Tracks_ContactGeometryLinkDescription_Vector self)"""
        return _VehiclesSwig.Vehicles_Tracks_ContactGeometryLinkDescription_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Vehicles_Tracks_ContactGeometryLinkDescription_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::allocator_type"""
        return _VehiclesSwig.Vehicles_Tracks_ContactGeometryLinkDescription_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Vehicles_Tracks_ContactGeometryLinkDescription_Vector self)"""
        return _VehiclesSwig.Vehicles_Tracks_ContactGeometryLinkDescription_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Vehicles_Tracks_ContactGeometryLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::iterator

        erase(Vehicles_Tracks_ContactGeometryLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::iterator first, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::iterator last) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::iterator
        last: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::iterator

        """
        return _VehiclesSwig.Vehicles_Tracks_ContactGeometryLinkDescription_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Vehicles_Tracks_ContactGeometryLinkDescription_Vector self) -> Vehicles_Tracks_ContactGeometryLinkDescription_Vector
        __init__(Vehicles_Tracks_ContactGeometryLinkDescription_Vector self, Vehicles_Tracks_ContactGeometryLinkDescription_Vector other) -> Vehicles_Tracks_ContactGeometryLinkDescription_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > > const &

        __init__(Vehicles_Tracks_ContactGeometryLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::size_type size) -> Vehicles_Tracks_ContactGeometryLinkDescription_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::size_type

        __init__(Vehicles_Tracks_ContactGeometryLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::size_type size, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::value_type const & value) -> Vehicles_Tracks_ContactGeometryLinkDescription_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::size_type
        value: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::value_type const &

        """
        _VehiclesSwig.Vehicles_Tracks_ContactGeometryLinkDescription_Vector_swiginit(self, _VehiclesSwig.new_Vehicles_Tracks_ContactGeometryLinkDescription_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Vehicles_Tracks_ContactGeometryLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_ContactGeometryLinkDescription_Vector_push_back(self, x)

    def front(self):
        r"""front(Vehicles_Tracks_ContactGeometryLinkDescription_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::value_type const &"""
        return _VehiclesSwig.Vehicles_Tracks_ContactGeometryLinkDescription_Vector_front(self)

    def back(self):
        r"""back(Vehicles_Tracks_ContactGeometryLinkDescription_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::value_type const &"""
        return _VehiclesSwig.Vehicles_Tracks_ContactGeometryLinkDescription_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Vehicles_Tracks_ContactGeometryLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::size_type n, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_ContactGeometryLinkDescription_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Vehicles_Tracks_ContactGeometryLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::size_type

        resize(Vehicles_Tracks_ContactGeometryLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::size_type new_size, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_ContactGeometryLinkDescription_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Vehicles_Tracks_ContactGeometryLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::iterator pos, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::iterator
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::value_type const &

        insert(Vehicles_Tracks_ContactGeometryLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::iterator pos, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::size_type n, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::iterator
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_ContactGeometryLinkDescription_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Vehicles_Tracks_ContactGeometryLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::size_type

        """
        return _VehiclesSwig.Vehicles_Tracks_ContactGeometryLinkDescription_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Vehicles_Tracks_ContactGeometryLinkDescription_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_ContactGeometryLinkDescription_Vector_capacity(self)
    __swig_destroy__ = _VehiclesSwig.delete_Vehicles_Tracks_ContactGeometryLinkDescription_Vector

# Register Vehicles_Tracks_ContactGeometryLinkDescription_Vector in _VehiclesSwig:
_VehiclesSwig.Vehicles_Tracks_ContactGeometryLinkDescription_Vector_swigregister(Vehicles_Tracks_ContactGeometryLinkDescription_Vector)

class Vehicles_Tracks_CyclicVariation_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Vehicles_Tracks_CyclicVariation_Vector self) -> SwigPyIterator"""
        return _VehiclesSwig.Vehicles_Tracks_CyclicVariation_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Vehicles_Tracks_CyclicVariation_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_CyclicVariation_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Vehicles_Tracks_CyclicVariation_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_CyclicVariation_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Vehicles_Tracks_CyclicVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_CyclicVariation_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Vehicles_Tracks_CyclicVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::difference_type j) -> Vehicles_Tracks_CyclicVariation_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_CyclicVariation_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Vehicles_Tracks_CyclicVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::difference_type

        __setslice__(Vehicles_Tracks_CyclicVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::difference_type j, Vehicles_Tracks_CyclicVariation_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation >,std::allocator< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > > > const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CyclicVariation_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Vehicles_Tracks_CyclicVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_CyclicVariation_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Vehicles_Tracks_CyclicVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::difference_type

        __delitem__(Vehicles_Tracks_CyclicVariation_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _VehiclesSwig.Vehicles_Tracks_CyclicVariation_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Vehicles_Tracks_CyclicVariation_Vector self, PySliceObject * slice) -> Vehicles_Tracks_CyclicVariation_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Vehicles_Tracks_CyclicVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_CyclicVariation_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Vehicles_Tracks_CyclicVariation_Vector self, PySliceObject * slice, Vehicles_Tracks_CyclicVariation_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation >,std::allocator< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > > > const &

        __setitem__(Vehicles_Tracks_CyclicVariation_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Vehicles_Tracks_CyclicVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CyclicVariation_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Vehicles_Tracks_CyclicVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::value_type"""
        return _VehiclesSwig.Vehicles_Tracks_CyclicVariation_Vector_pop(self)

    def append(self, x):
        r"""
        append(Vehicles_Tracks_CyclicVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CyclicVariation_Vector_append(self, x)

    def empty(self):
        r"""empty(Vehicles_Tracks_CyclicVariation_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_CyclicVariation_Vector_empty(self)

    def size(self):
        r"""size(Vehicles_Tracks_CyclicVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_CyclicVariation_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Vehicles_Tracks_CyclicVariation_Vector self, Vehicles_Tracks_CyclicVariation_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_CyclicVariation_Vector_swap(self, v)

    def begin(self):
        r"""begin(Vehicles_Tracks_CyclicVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::iterator"""
        return _VehiclesSwig.Vehicles_Tracks_CyclicVariation_Vector_begin(self)

    def end(self):
        r"""end(Vehicles_Tracks_CyclicVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::iterator"""
        return _VehiclesSwig.Vehicles_Tracks_CyclicVariation_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Vehicles_Tracks_CyclicVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::reverse_iterator"""
        return _VehiclesSwig.Vehicles_Tracks_CyclicVariation_Vector_rbegin(self)

    def rend(self):
        r"""rend(Vehicles_Tracks_CyclicVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::reverse_iterator"""
        return _VehiclesSwig.Vehicles_Tracks_CyclicVariation_Vector_rend(self)

    def clear(self):
        r"""clear(Vehicles_Tracks_CyclicVariation_Vector self)"""
        return _VehiclesSwig.Vehicles_Tracks_CyclicVariation_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Vehicles_Tracks_CyclicVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::allocator_type"""
        return _VehiclesSwig.Vehicles_Tracks_CyclicVariation_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Vehicles_Tracks_CyclicVariation_Vector self)"""
        return _VehiclesSwig.Vehicles_Tracks_CyclicVariation_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Vehicles_Tracks_CyclicVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::iterator

        erase(Vehicles_Tracks_CyclicVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::iterator first, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::iterator last) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::iterator
        last: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::iterator

        """
        return _VehiclesSwig.Vehicles_Tracks_CyclicVariation_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Vehicles_Tracks_CyclicVariation_Vector self) -> Vehicles_Tracks_CyclicVariation_Vector
        __init__(Vehicles_Tracks_CyclicVariation_Vector self, Vehicles_Tracks_CyclicVariation_Vector other) -> Vehicles_Tracks_CyclicVariation_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > > const &

        __init__(Vehicles_Tracks_CyclicVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::size_type size) -> Vehicles_Tracks_CyclicVariation_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::size_type

        __init__(Vehicles_Tracks_CyclicVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::size_type size, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::value_type const & value) -> Vehicles_Tracks_CyclicVariation_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::size_type
        value: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::value_type const &

        """
        _VehiclesSwig.Vehicles_Tracks_CyclicVariation_Vector_swiginit(self, _VehiclesSwig.new_Vehicles_Tracks_CyclicVariation_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Vehicles_Tracks_CyclicVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CyclicVariation_Vector_push_back(self, x)

    def front(self):
        r"""front(Vehicles_Tracks_CyclicVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::value_type const &"""
        return _VehiclesSwig.Vehicles_Tracks_CyclicVariation_Vector_front(self)

    def back(self):
        r"""back(Vehicles_Tracks_CyclicVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::value_type const &"""
        return _VehiclesSwig.Vehicles_Tracks_CyclicVariation_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Vehicles_Tracks_CyclicVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::size_type n, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CyclicVariation_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Vehicles_Tracks_CyclicVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::size_type

        resize(Vehicles_Tracks_CyclicVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::size_type new_size, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CyclicVariation_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Vehicles_Tracks_CyclicVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::iterator pos, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::iterator
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::value_type const &

        insert(Vehicles_Tracks_CyclicVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::iterator pos, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::size_type n, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::iterator
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CyclicVariation_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Vehicles_Tracks_CyclicVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::size_type

        """
        return _VehiclesSwig.Vehicles_Tracks_CyclicVariation_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Vehicles_Tracks_CyclicVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_CyclicVariation_Vector_capacity(self)
    __swig_destroy__ = _VehiclesSwig.delete_Vehicles_Tracks_CyclicVariation_Vector

# Register Vehicles_Tracks_CyclicVariation_Vector in _VehiclesSwig:
_VehiclesSwig.Vehicles_Tracks_CyclicVariation_Vector_swigregister(Vehicles_Tracks_CyclicVariation_Vector)

class Vehicles_Tracks_CylindricalIdler_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Vehicles_Tracks_CylindricalIdler_Vector self) -> SwigPyIterator"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalIdler_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Vehicles_Tracks_CylindricalIdler_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalIdler_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Vehicles_Tracks_CylindricalIdler_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalIdler_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Vehicles_Tracks_CylindricalIdler_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalIdler_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Vehicles_Tracks_CylindricalIdler_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::difference_type j) -> Vehicles_Tracks_CylindricalIdler_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalIdler_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Vehicles_Tracks_CylindricalIdler_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::difference_type

        __setslice__(Vehicles_Tracks_CylindricalIdler_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::difference_type j, Vehicles_Tracks_CylindricalIdler_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler >,std::allocator< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > > > const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalIdler_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Vehicles_Tracks_CylindricalIdler_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalIdler_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Vehicles_Tracks_CylindricalIdler_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::difference_type

        __delitem__(Vehicles_Tracks_CylindricalIdler_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalIdler_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Vehicles_Tracks_CylindricalIdler_Vector self, PySliceObject * slice) -> Vehicles_Tracks_CylindricalIdler_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Vehicles_Tracks_CylindricalIdler_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalIdler_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Vehicles_Tracks_CylindricalIdler_Vector self, PySliceObject * slice, Vehicles_Tracks_CylindricalIdler_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler >,std::allocator< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > > > const &

        __setitem__(Vehicles_Tracks_CylindricalIdler_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Vehicles_Tracks_CylindricalIdler_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalIdler_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Vehicles_Tracks_CylindricalIdler_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::value_type"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalIdler_Vector_pop(self)

    def append(self, x):
        r"""
        append(Vehicles_Tracks_CylindricalIdler_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalIdler_Vector_append(self, x)

    def empty(self):
        r"""empty(Vehicles_Tracks_CylindricalIdler_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalIdler_Vector_empty(self)

    def size(self):
        r"""size(Vehicles_Tracks_CylindricalIdler_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalIdler_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Vehicles_Tracks_CylindricalIdler_Vector self, Vehicles_Tracks_CylindricalIdler_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalIdler_Vector_swap(self, v)

    def begin(self):
        r"""begin(Vehicles_Tracks_CylindricalIdler_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::iterator"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalIdler_Vector_begin(self)

    def end(self):
        r"""end(Vehicles_Tracks_CylindricalIdler_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::iterator"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalIdler_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Vehicles_Tracks_CylindricalIdler_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::reverse_iterator"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalIdler_Vector_rbegin(self)

    def rend(self):
        r"""rend(Vehicles_Tracks_CylindricalIdler_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::reverse_iterator"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalIdler_Vector_rend(self)

    def clear(self):
        r"""clear(Vehicles_Tracks_CylindricalIdler_Vector self)"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalIdler_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Vehicles_Tracks_CylindricalIdler_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::allocator_type"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalIdler_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Vehicles_Tracks_CylindricalIdler_Vector self)"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalIdler_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Vehicles_Tracks_CylindricalIdler_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::iterator

        erase(Vehicles_Tracks_CylindricalIdler_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::iterator first, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::iterator last) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::iterator
        last: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::iterator

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalIdler_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Vehicles_Tracks_CylindricalIdler_Vector self) -> Vehicles_Tracks_CylindricalIdler_Vector
        __init__(Vehicles_Tracks_CylindricalIdler_Vector self, Vehicles_Tracks_CylindricalIdler_Vector other) -> Vehicles_Tracks_CylindricalIdler_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > > const &

        __init__(Vehicles_Tracks_CylindricalIdler_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::size_type size) -> Vehicles_Tracks_CylindricalIdler_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::size_type

        __init__(Vehicles_Tracks_CylindricalIdler_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::size_type size, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::value_type const & value) -> Vehicles_Tracks_CylindricalIdler_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::size_type
        value: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::value_type const &

        """
        _VehiclesSwig.Vehicles_Tracks_CylindricalIdler_Vector_swiginit(self, _VehiclesSwig.new_Vehicles_Tracks_CylindricalIdler_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Vehicles_Tracks_CylindricalIdler_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalIdler_Vector_push_back(self, x)

    def front(self):
        r"""front(Vehicles_Tracks_CylindricalIdler_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::value_type const &"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalIdler_Vector_front(self)

    def back(self):
        r"""back(Vehicles_Tracks_CylindricalIdler_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::value_type const &"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalIdler_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Vehicles_Tracks_CylindricalIdler_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::size_type n, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalIdler_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Vehicles_Tracks_CylindricalIdler_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::size_type

        resize(Vehicles_Tracks_CylindricalIdler_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::size_type new_size, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalIdler_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Vehicles_Tracks_CylindricalIdler_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::iterator pos, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::iterator
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::value_type const &

        insert(Vehicles_Tracks_CylindricalIdler_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::iterator pos, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::size_type n, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::iterator
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalIdler_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Vehicles_Tracks_CylindricalIdler_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::size_type

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalIdler_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Vehicles_Tracks_CylindricalIdler_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalIdler > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalIdler_Vector_capacity(self)
    __swig_destroy__ = _VehiclesSwig.delete_Vehicles_Tracks_CylindricalIdler_Vector

# Register Vehicles_Tracks_CylindricalIdler_Vector in _VehiclesSwig:
_VehiclesSwig.Vehicles_Tracks_CylindricalIdler_Vector_swigregister(Vehicles_Tracks_CylindricalIdler_Vector)

class Vehicles_Tracks_CylindricalRoadWheel_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Vehicles_Tracks_CylindricalRoadWheel_Vector self) -> SwigPyIterator"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoadWheel_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Vehicles_Tracks_CylindricalRoadWheel_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoadWheel_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Vehicles_Tracks_CylindricalRoadWheel_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoadWheel_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Vehicles_Tracks_CylindricalRoadWheel_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoadWheel_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Vehicles_Tracks_CylindricalRoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::difference_type j) -> Vehicles_Tracks_CylindricalRoadWheel_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoadWheel_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Vehicles_Tracks_CylindricalRoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::difference_type

        __setslice__(Vehicles_Tracks_CylindricalRoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::difference_type j, Vehicles_Tracks_CylindricalRoadWheel_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel >,std::allocator< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > > > const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoadWheel_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Vehicles_Tracks_CylindricalRoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoadWheel_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Vehicles_Tracks_CylindricalRoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::difference_type

        __delitem__(Vehicles_Tracks_CylindricalRoadWheel_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoadWheel_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Vehicles_Tracks_CylindricalRoadWheel_Vector self, PySliceObject * slice) -> Vehicles_Tracks_CylindricalRoadWheel_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Vehicles_Tracks_CylindricalRoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoadWheel_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Vehicles_Tracks_CylindricalRoadWheel_Vector self, PySliceObject * slice, Vehicles_Tracks_CylindricalRoadWheel_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel >,std::allocator< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > > > const &

        __setitem__(Vehicles_Tracks_CylindricalRoadWheel_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Vehicles_Tracks_CylindricalRoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoadWheel_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Vehicles_Tracks_CylindricalRoadWheel_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::value_type"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoadWheel_Vector_pop(self)

    def append(self, x):
        r"""
        append(Vehicles_Tracks_CylindricalRoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoadWheel_Vector_append(self, x)

    def empty(self):
        r"""empty(Vehicles_Tracks_CylindricalRoadWheel_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoadWheel_Vector_empty(self)

    def size(self):
        r"""size(Vehicles_Tracks_CylindricalRoadWheel_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoadWheel_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Vehicles_Tracks_CylindricalRoadWheel_Vector self, Vehicles_Tracks_CylindricalRoadWheel_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoadWheel_Vector_swap(self, v)

    def begin(self):
        r"""begin(Vehicles_Tracks_CylindricalRoadWheel_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::iterator"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoadWheel_Vector_begin(self)

    def end(self):
        r"""end(Vehicles_Tracks_CylindricalRoadWheel_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::iterator"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoadWheel_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Vehicles_Tracks_CylindricalRoadWheel_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::reverse_iterator"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoadWheel_Vector_rbegin(self)

    def rend(self):
        r"""rend(Vehicles_Tracks_CylindricalRoadWheel_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::reverse_iterator"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoadWheel_Vector_rend(self)

    def clear(self):
        r"""clear(Vehicles_Tracks_CylindricalRoadWheel_Vector self)"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoadWheel_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Vehicles_Tracks_CylindricalRoadWheel_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::allocator_type"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoadWheel_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Vehicles_Tracks_CylindricalRoadWheel_Vector self)"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoadWheel_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Vehicles_Tracks_CylindricalRoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::iterator

        erase(Vehicles_Tracks_CylindricalRoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::iterator first, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::iterator last) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::iterator
        last: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::iterator

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoadWheel_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Vehicles_Tracks_CylindricalRoadWheel_Vector self) -> Vehicles_Tracks_CylindricalRoadWheel_Vector
        __init__(Vehicles_Tracks_CylindricalRoadWheel_Vector self, Vehicles_Tracks_CylindricalRoadWheel_Vector other) -> Vehicles_Tracks_CylindricalRoadWheel_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > > const &

        __init__(Vehicles_Tracks_CylindricalRoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::size_type size) -> Vehicles_Tracks_CylindricalRoadWheel_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::size_type

        __init__(Vehicles_Tracks_CylindricalRoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::size_type size, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::value_type const & value) -> Vehicles_Tracks_CylindricalRoadWheel_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::size_type
        value: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::value_type const &

        """
        _VehiclesSwig.Vehicles_Tracks_CylindricalRoadWheel_Vector_swiginit(self, _VehiclesSwig.new_Vehicles_Tracks_CylindricalRoadWheel_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Vehicles_Tracks_CylindricalRoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoadWheel_Vector_push_back(self, x)

    def front(self):
        r"""front(Vehicles_Tracks_CylindricalRoadWheel_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::value_type const &"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoadWheel_Vector_front(self)

    def back(self):
        r"""back(Vehicles_Tracks_CylindricalRoadWheel_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::value_type const &"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoadWheel_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Vehicles_Tracks_CylindricalRoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::size_type n, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoadWheel_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Vehicles_Tracks_CylindricalRoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::size_type

        resize(Vehicles_Tracks_CylindricalRoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::size_type new_size, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoadWheel_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Vehicles_Tracks_CylindricalRoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::iterator pos, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::iterator
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::value_type const &

        insert(Vehicles_Tracks_CylindricalRoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::iterator pos, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::size_type n, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::iterator
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoadWheel_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Vehicles_Tracks_CylindricalRoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::size_type

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoadWheel_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Vehicles_Tracks_CylindricalRoadWheel_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoadWheel > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoadWheel_Vector_capacity(self)
    __swig_destroy__ = _VehiclesSwig.delete_Vehicles_Tracks_CylindricalRoadWheel_Vector

# Register Vehicles_Tracks_CylindricalRoadWheel_Vector in _VehiclesSwig:
_VehiclesSwig.Vehicles_Tracks_CylindricalRoadWheel_Vector_swigregister(Vehicles_Tracks_CylindricalRoadWheel_Vector)

class Vehicles_Tracks_CylindricalRoller_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Vehicles_Tracks_CylindricalRoller_Vector self) -> SwigPyIterator"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoller_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Vehicles_Tracks_CylindricalRoller_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoller_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Vehicles_Tracks_CylindricalRoller_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoller_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Vehicles_Tracks_CylindricalRoller_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoller_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Vehicles_Tracks_CylindricalRoller_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::difference_type j) -> Vehicles_Tracks_CylindricalRoller_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoller_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Vehicles_Tracks_CylindricalRoller_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::difference_type

        __setslice__(Vehicles_Tracks_CylindricalRoller_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::difference_type j, Vehicles_Tracks_CylindricalRoller_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller >,std::allocator< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > > > const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoller_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Vehicles_Tracks_CylindricalRoller_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoller_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Vehicles_Tracks_CylindricalRoller_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::difference_type

        __delitem__(Vehicles_Tracks_CylindricalRoller_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoller_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Vehicles_Tracks_CylindricalRoller_Vector self, PySliceObject * slice) -> Vehicles_Tracks_CylindricalRoller_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Vehicles_Tracks_CylindricalRoller_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoller_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Vehicles_Tracks_CylindricalRoller_Vector self, PySliceObject * slice, Vehicles_Tracks_CylindricalRoller_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller >,std::allocator< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > > > const &

        __setitem__(Vehicles_Tracks_CylindricalRoller_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Vehicles_Tracks_CylindricalRoller_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoller_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Vehicles_Tracks_CylindricalRoller_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::value_type"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoller_Vector_pop(self)

    def append(self, x):
        r"""
        append(Vehicles_Tracks_CylindricalRoller_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoller_Vector_append(self, x)

    def empty(self):
        r"""empty(Vehicles_Tracks_CylindricalRoller_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoller_Vector_empty(self)

    def size(self):
        r"""size(Vehicles_Tracks_CylindricalRoller_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoller_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Vehicles_Tracks_CylindricalRoller_Vector self, Vehicles_Tracks_CylindricalRoller_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoller_Vector_swap(self, v)

    def begin(self):
        r"""begin(Vehicles_Tracks_CylindricalRoller_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::iterator"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoller_Vector_begin(self)

    def end(self):
        r"""end(Vehicles_Tracks_CylindricalRoller_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::iterator"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoller_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Vehicles_Tracks_CylindricalRoller_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::reverse_iterator"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoller_Vector_rbegin(self)

    def rend(self):
        r"""rend(Vehicles_Tracks_CylindricalRoller_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::reverse_iterator"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoller_Vector_rend(self)

    def clear(self):
        r"""clear(Vehicles_Tracks_CylindricalRoller_Vector self)"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoller_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Vehicles_Tracks_CylindricalRoller_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::allocator_type"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoller_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Vehicles_Tracks_CylindricalRoller_Vector self)"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoller_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Vehicles_Tracks_CylindricalRoller_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::iterator

        erase(Vehicles_Tracks_CylindricalRoller_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::iterator first, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::iterator last) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::iterator
        last: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::iterator

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoller_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Vehicles_Tracks_CylindricalRoller_Vector self) -> Vehicles_Tracks_CylindricalRoller_Vector
        __init__(Vehicles_Tracks_CylindricalRoller_Vector self, Vehicles_Tracks_CylindricalRoller_Vector other) -> Vehicles_Tracks_CylindricalRoller_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > > const &

        __init__(Vehicles_Tracks_CylindricalRoller_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::size_type size) -> Vehicles_Tracks_CylindricalRoller_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::size_type

        __init__(Vehicles_Tracks_CylindricalRoller_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::size_type size, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::value_type const & value) -> Vehicles_Tracks_CylindricalRoller_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::size_type
        value: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::value_type const &

        """
        _VehiclesSwig.Vehicles_Tracks_CylindricalRoller_Vector_swiginit(self, _VehiclesSwig.new_Vehicles_Tracks_CylindricalRoller_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Vehicles_Tracks_CylindricalRoller_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoller_Vector_push_back(self, x)

    def front(self):
        r"""front(Vehicles_Tracks_CylindricalRoller_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::value_type const &"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoller_Vector_front(self)

    def back(self):
        r"""back(Vehicles_Tracks_CylindricalRoller_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::value_type const &"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoller_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Vehicles_Tracks_CylindricalRoller_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::size_type n, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoller_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Vehicles_Tracks_CylindricalRoller_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::size_type

        resize(Vehicles_Tracks_CylindricalRoller_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::size_type new_size, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoller_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Vehicles_Tracks_CylindricalRoller_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::iterator pos, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::iterator
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::value_type const &

        insert(Vehicles_Tracks_CylindricalRoller_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::iterator pos, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::size_type n, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::iterator
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoller_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Vehicles_Tracks_CylindricalRoller_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::size_type

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoller_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Vehicles_Tracks_CylindricalRoller_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalRoller > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoller_Vector_capacity(self)
    __swig_destroy__ = _VehiclesSwig.delete_Vehicles_Tracks_CylindricalRoller_Vector

# Register Vehicles_Tracks_CylindricalRoller_Vector in _VehiclesSwig:
_VehiclesSwig.Vehicles_Tracks_CylindricalRoller_Vector_swigregister(Vehicles_Tracks_CylindricalRoller_Vector)

class Vehicles_Tracks_CylindricalSprocket_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Vehicles_Tracks_CylindricalSprocket_Vector self) -> SwigPyIterator"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalSprocket_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Vehicles_Tracks_CylindricalSprocket_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalSprocket_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Vehicles_Tracks_CylindricalSprocket_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalSprocket_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Vehicles_Tracks_CylindricalSprocket_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalSprocket_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Vehicles_Tracks_CylindricalSprocket_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::difference_type j) -> Vehicles_Tracks_CylindricalSprocket_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalSprocket_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Vehicles_Tracks_CylindricalSprocket_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::difference_type

        __setslice__(Vehicles_Tracks_CylindricalSprocket_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::difference_type j, Vehicles_Tracks_CylindricalSprocket_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket >,std::allocator< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > > > const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalSprocket_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Vehicles_Tracks_CylindricalSprocket_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalSprocket_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Vehicles_Tracks_CylindricalSprocket_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::difference_type

        __delitem__(Vehicles_Tracks_CylindricalSprocket_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalSprocket_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Vehicles_Tracks_CylindricalSprocket_Vector self, PySliceObject * slice) -> Vehicles_Tracks_CylindricalSprocket_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Vehicles_Tracks_CylindricalSprocket_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalSprocket_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Vehicles_Tracks_CylindricalSprocket_Vector self, PySliceObject * slice, Vehicles_Tracks_CylindricalSprocket_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket >,std::allocator< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > > > const &

        __setitem__(Vehicles_Tracks_CylindricalSprocket_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Vehicles_Tracks_CylindricalSprocket_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalSprocket_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Vehicles_Tracks_CylindricalSprocket_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::value_type"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalSprocket_Vector_pop(self)

    def append(self, x):
        r"""
        append(Vehicles_Tracks_CylindricalSprocket_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalSprocket_Vector_append(self, x)

    def empty(self):
        r"""empty(Vehicles_Tracks_CylindricalSprocket_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalSprocket_Vector_empty(self)

    def size(self):
        r"""size(Vehicles_Tracks_CylindricalSprocket_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalSprocket_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Vehicles_Tracks_CylindricalSprocket_Vector self, Vehicles_Tracks_CylindricalSprocket_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalSprocket_Vector_swap(self, v)

    def begin(self):
        r"""begin(Vehicles_Tracks_CylindricalSprocket_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::iterator"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalSprocket_Vector_begin(self)

    def end(self):
        r"""end(Vehicles_Tracks_CylindricalSprocket_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::iterator"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalSprocket_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Vehicles_Tracks_CylindricalSprocket_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::reverse_iterator"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalSprocket_Vector_rbegin(self)

    def rend(self):
        r"""rend(Vehicles_Tracks_CylindricalSprocket_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::reverse_iterator"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalSprocket_Vector_rend(self)

    def clear(self):
        r"""clear(Vehicles_Tracks_CylindricalSprocket_Vector self)"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalSprocket_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Vehicles_Tracks_CylindricalSprocket_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::allocator_type"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalSprocket_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Vehicles_Tracks_CylindricalSprocket_Vector self)"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalSprocket_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Vehicles_Tracks_CylindricalSprocket_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::iterator

        erase(Vehicles_Tracks_CylindricalSprocket_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::iterator first, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::iterator last) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::iterator
        last: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::iterator

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalSprocket_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Vehicles_Tracks_CylindricalSprocket_Vector self) -> Vehicles_Tracks_CylindricalSprocket_Vector
        __init__(Vehicles_Tracks_CylindricalSprocket_Vector self, Vehicles_Tracks_CylindricalSprocket_Vector other) -> Vehicles_Tracks_CylindricalSprocket_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > > const &

        __init__(Vehicles_Tracks_CylindricalSprocket_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::size_type size) -> Vehicles_Tracks_CylindricalSprocket_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::size_type

        __init__(Vehicles_Tracks_CylindricalSprocket_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::size_type size, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::value_type const & value) -> Vehicles_Tracks_CylindricalSprocket_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::size_type
        value: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::value_type const &

        """
        _VehiclesSwig.Vehicles_Tracks_CylindricalSprocket_Vector_swiginit(self, _VehiclesSwig.new_Vehicles_Tracks_CylindricalSprocket_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Vehicles_Tracks_CylindricalSprocket_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalSprocket_Vector_push_back(self, x)

    def front(self):
        r"""front(Vehicles_Tracks_CylindricalSprocket_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::value_type const &"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalSprocket_Vector_front(self)

    def back(self):
        r"""back(Vehicles_Tracks_CylindricalSprocket_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::value_type const &"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalSprocket_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Vehicles_Tracks_CylindricalSprocket_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::size_type n, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalSprocket_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Vehicles_Tracks_CylindricalSprocket_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::size_type

        resize(Vehicles_Tracks_CylindricalSprocket_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::size_type new_size, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalSprocket_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Vehicles_Tracks_CylindricalSprocket_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::iterator pos, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::iterator
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::value_type const &

        insert(Vehicles_Tracks_CylindricalSprocket_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::iterator pos, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::size_type n, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::iterator
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalSprocket_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Vehicles_Tracks_CylindricalSprocket_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::size_type

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalSprocket_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Vehicles_Tracks_CylindricalSprocket_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::CylindricalSprocket > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalSprocket_Vector_capacity(self)
    __swig_destroy__ = _VehiclesSwig.delete_Vehicles_Tracks_CylindricalSprocket_Vector

# Register Vehicles_Tracks_CylindricalSprocket_Vector in _VehiclesSwig:
_VehiclesSwig.Vehicles_Tracks_CylindricalSprocket_Vector_swigregister(Vehicles_Tracks_CylindricalSprocket_Vector)

class Vehicles_Tracks_DefaultLinkDescription_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Vehicles_Tracks_DefaultLinkDescription_Vector self) -> SwigPyIterator"""
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkDescription_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Vehicles_Tracks_DefaultLinkDescription_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkDescription_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Vehicles_Tracks_DefaultLinkDescription_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkDescription_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Vehicles_Tracks_DefaultLinkDescription_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkDescription_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Vehicles_Tracks_DefaultLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::difference_type j) -> Vehicles_Tracks_DefaultLinkDescription_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkDescription_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Vehicles_Tracks_DefaultLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::difference_type

        __setslice__(Vehicles_Tracks_DefaultLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::difference_type j, Vehicles_Tracks_DefaultLinkDescription_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription >,std::allocator< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > > > const &

        """
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkDescription_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Vehicles_Tracks_DefaultLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkDescription_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Vehicles_Tracks_DefaultLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::difference_type

        __delitem__(Vehicles_Tracks_DefaultLinkDescription_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkDescription_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Vehicles_Tracks_DefaultLinkDescription_Vector self, PySliceObject * slice) -> Vehicles_Tracks_DefaultLinkDescription_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Vehicles_Tracks_DefaultLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkDescription_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Vehicles_Tracks_DefaultLinkDescription_Vector self, PySliceObject * slice, Vehicles_Tracks_DefaultLinkDescription_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription >,std::allocator< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > > > const &

        __setitem__(Vehicles_Tracks_DefaultLinkDescription_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Vehicles_Tracks_DefaultLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkDescription_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Vehicles_Tracks_DefaultLinkDescription_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::value_type"""
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkDescription_Vector_pop(self)

    def append(self, x):
        r"""
        append(Vehicles_Tracks_DefaultLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkDescription_Vector_append(self, x)

    def empty(self):
        r"""empty(Vehicles_Tracks_DefaultLinkDescription_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkDescription_Vector_empty(self)

    def size(self):
        r"""size(Vehicles_Tracks_DefaultLinkDescription_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkDescription_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Vehicles_Tracks_DefaultLinkDescription_Vector self, Vehicles_Tracks_DefaultLinkDescription_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkDescription_Vector_swap(self, v)

    def begin(self):
        r"""begin(Vehicles_Tracks_DefaultLinkDescription_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::iterator"""
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkDescription_Vector_begin(self)

    def end(self):
        r"""end(Vehicles_Tracks_DefaultLinkDescription_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::iterator"""
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkDescription_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Vehicles_Tracks_DefaultLinkDescription_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::reverse_iterator"""
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkDescription_Vector_rbegin(self)

    def rend(self):
        r"""rend(Vehicles_Tracks_DefaultLinkDescription_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::reverse_iterator"""
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkDescription_Vector_rend(self)

    def clear(self):
        r"""clear(Vehicles_Tracks_DefaultLinkDescription_Vector self)"""
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkDescription_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Vehicles_Tracks_DefaultLinkDescription_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::allocator_type"""
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkDescription_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Vehicles_Tracks_DefaultLinkDescription_Vector self)"""
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkDescription_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Vehicles_Tracks_DefaultLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::iterator

        erase(Vehicles_Tracks_DefaultLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::iterator first, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::iterator last) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::iterator
        last: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::iterator

        """
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkDescription_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Vehicles_Tracks_DefaultLinkDescription_Vector self) -> Vehicles_Tracks_DefaultLinkDescription_Vector
        __init__(Vehicles_Tracks_DefaultLinkDescription_Vector self, Vehicles_Tracks_DefaultLinkDescription_Vector other) -> Vehicles_Tracks_DefaultLinkDescription_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > > const &

        __init__(Vehicles_Tracks_DefaultLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::size_type size) -> Vehicles_Tracks_DefaultLinkDescription_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::size_type

        __init__(Vehicles_Tracks_DefaultLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::size_type size, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::value_type const & value) -> Vehicles_Tracks_DefaultLinkDescription_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::size_type
        value: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::value_type const &

        """
        _VehiclesSwig.Vehicles_Tracks_DefaultLinkDescription_Vector_swiginit(self, _VehiclesSwig.new_Vehicles_Tracks_DefaultLinkDescription_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Vehicles_Tracks_DefaultLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkDescription_Vector_push_back(self, x)

    def front(self):
        r"""front(Vehicles_Tracks_DefaultLinkDescription_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::value_type const &"""
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkDescription_Vector_front(self)

    def back(self):
        r"""back(Vehicles_Tracks_DefaultLinkDescription_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::value_type const &"""
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkDescription_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Vehicles_Tracks_DefaultLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::size_type n, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkDescription_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Vehicles_Tracks_DefaultLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::size_type

        resize(Vehicles_Tracks_DefaultLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::size_type new_size, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkDescription_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Vehicles_Tracks_DefaultLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::iterator pos, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::iterator
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::value_type const &

        insert(Vehicles_Tracks_DefaultLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::iterator pos, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::size_type n, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::iterator
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkDescription_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Vehicles_Tracks_DefaultLinkDescription_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::size_type

        """
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkDescription_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Vehicles_Tracks_DefaultLinkDescription_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkDescription_Vector_capacity(self)
    __swig_destroy__ = _VehiclesSwig.delete_Vehicles_Tracks_DefaultLinkDescription_Vector

# Register Vehicles_Tracks_DefaultLinkDescription_Vector in _VehiclesSwig:
_VehiclesSwig.Vehicles_Tracks_DefaultLinkDescription_Vector_swigregister(Vehicles_Tracks_DefaultLinkDescription_Vector)

class Vehicles_Tracks_DefaultLinkVariation_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Vehicles_Tracks_DefaultLinkVariation_Vector self) -> SwigPyIterator"""
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkVariation_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Vehicles_Tracks_DefaultLinkVariation_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkVariation_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Vehicles_Tracks_DefaultLinkVariation_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkVariation_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Vehicles_Tracks_DefaultLinkVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkVariation_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Vehicles_Tracks_DefaultLinkVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::difference_type j) -> Vehicles_Tracks_DefaultLinkVariation_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkVariation_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Vehicles_Tracks_DefaultLinkVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::difference_type

        __setslice__(Vehicles_Tracks_DefaultLinkVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::difference_type j, Vehicles_Tracks_DefaultLinkVariation_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation >,std::allocator< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > > > const &

        """
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkVariation_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Vehicles_Tracks_DefaultLinkVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkVariation_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Vehicles_Tracks_DefaultLinkVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::difference_type

        __delitem__(Vehicles_Tracks_DefaultLinkVariation_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkVariation_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Vehicles_Tracks_DefaultLinkVariation_Vector self, PySliceObject * slice) -> Vehicles_Tracks_DefaultLinkVariation_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Vehicles_Tracks_DefaultLinkVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkVariation_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Vehicles_Tracks_DefaultLinkVariation_Vector self, PySliceObject * slice, Vehicles_Tracks_DefaultLinkVariation_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation >,std::allocator< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > > > const &

        __setitem__(Vehicles_Tracks_DefaultLinkVariation_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Vehicles_Tracks_DefaultLinkVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkVariation_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Vehicles_Tracks_DefaultLinkVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::value_type"""
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkVariation_Vector_pop(self)

    def append(self, x):
        r"""
        append(Vehicles_Tracks_DefaultLinkVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkVariation_Vector_append(self, x)

    def empty(self):
        r"""empty(Vehicles_Tracks_DefaultLinkVariation_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkVariation_Vector_empty(self)

    def size(self):
        r"""size(Vehicles_Tracks_DefaultLinkVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkVariation_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Vehicles_Tracks_DefaultLinkVariation_Vector self, Vehicles_Tracks_DefaultLinkVariation_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkVariation_Vector_swap(self, v)

    def begin(self):
        r"""begin(Vehicles_Tracks_DefaultLinkVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::iterator"""
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkVariation_Vector_begin(self)

    def end(self):
        r"""end(Vehicles_Tracks_DefaultLinkVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::iterator"""
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkVariation_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Vehicles_Tracks_DefaultLinkVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::reverse_iterator"""
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkVariation_Vector_rbegin(self)

    def rend(self):
        r"""rend(Vehicles_Tracks_DefaultLinkVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::reverse_iterator"""
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkVariation_Vector_rend(self)

    def clear(self):
        r"""clear(Vehicles_Tracks_DefaultLinkVariation_Vector self)"""
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkVariation_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Vehicles_Tracks_DefaultLinkVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::allocator_type"""
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkVariation_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Vehicles_Tracks_DefaultLinkVariation_Vector self)"""
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkVariation_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Vehicles_Tracks_DefaultLinkVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::iterator

        erase(Vehicles_Tracks_DefaultLinkVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::iterator first, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::iterator last) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::iterator
        last: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::iterator

        """
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkVariation_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Vehicles_Tracks_DefaultLinkVariation_Vector self) -> Vehicles_Tracks_DefaultLinkVariation_Vector
        __init__(Vehicles_Tracks_DefaultLinkVariation_Vector self, Vehicles_Tracks_DefaultLinkVariation_Vector other) -> Vehicles_Tracks_DefaultLinkVariation_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > > const &

        __init__(Vehicles_Tracks_DefaultLinkVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::size_type size) -> Vehicles_Tracks_DefaultLinkVariation_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::size_type

        __init__(Vehicles_Tracks_DefaultLinkVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::size_type size, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::value_type const & value) -> Vehicles_Tracks_DefaultLinkVariation_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::size_type
        value: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::value_type const &

        """
        _VehiclesSwig.Vehicles_Tracks_DefaultLinkVariation_Vector_swiginit(self, _VehiclesSwig.new_Vehicles_Tracks_DefaultLinkVariation_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Vehicles_Tracks_DefaultLinkVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkVariation_Vector_push_back(self, x)

    def front(self):
        r"""front(Vehicles_Tracks_DefaultLinkVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::value_type const &"""
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkVariation_Vector_front(self)

    def back(self):
        r"""back(Vehicles_Tracks_DefaultLinkVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::value_type const &"""
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkVariation_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Vehicles_Tracks_DefaultLinkVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::size_type n, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkVariation_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Vehicles_Tracks_DefaultLinkVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::size_type

        resize(Vehicles_Tracks_DefaultLinkVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::size_type new_size, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkVariation_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Vehicles_Tracks_DefaultLinkVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::iterator pos, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::iterator
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::value_type const &

        insert(Vehicles_Tracks_DefaultLinkVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::iterator pos, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::size_type n, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::iterator
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkVariation_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Vehicles_Tracks_DefaultLinkVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::size_type

        """
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkVariation_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Vehicles_Tracks_DefaultLinkVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkVariation_Vector_capacity(self)
    __swig_destroy__ = _VehiclesSwig.delete_Vehicles_Tracks_DefaultLinkVariation_Vector

# Register Vehicles_Tracks_DefaultLinkVariation_Vector in _VehiclesSwig:
_VehiclesSwig.Vehicles_Tracks_DefaultLinkVariation_Vector_swigregister(Vehicles_Tracks_DefaultLinkVariation_Vector)

class Vehicles_Tracks_DiscretePulseVariation_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Vehicles_Tracks_DiscretePulseVariation_Vector self) -> SwigPyIterator"""
        return _VehiclesSwig.Vehicles_Tracks_DiscretePulseVariation_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Vehicles_Tracks_DiscretePulseVariation_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_DiscretePulseVariation_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Vehicles_Tracks_DiscretePulseVariation_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_DiscretePulseVariation_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Vehicles_Tracks_DiscretePulseVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_DiscretePulseVariation_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Vehicles_Tracks_DiscretePulseVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::difference_type j) -> Vehicles_Tracks_DiscretePulseVariation_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_DiscretePulseVariation_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Vehicles_Tracks_DiscretePulseVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::difference_type

        __setslice__(Vehicles_Tracks_DiscretePulseVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::difference_type j, Vehicles_Tracks_DiscretePulseVariation_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation >,std::allocator< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > > > const &

        """
        return _VehiclesSwig.Vehicles_Tracks_DiscretePulseVariation_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Vehicles_Tracks_DiscretePulseVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_DiscretePulseVariation_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Vehicles_Tracks_DiscretePulseVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::difference_type

        __delitem__(Vehicles_Tracks_DiscretePulseVariation_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _VehiclesSwig.Vehicles_Tracks_DiscretePulseVariation_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Vehicles_Tracks_DiscretePulseVariation_Vector self, PySliceObject * slice) -> Vehicles_Tracks_DiscretePulseVariation_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Vehicles_Tracks_DiscretePulseVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_DiscretePulseVariation_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Vehicles_Tracks_DiscretePulseVariation_Vector self, PySliceObject * slice, Vehicles_Tracks_DiscretePulseVariation_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation >,std::allocator< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > > > const &

        __setitem__(Vehicles_Tracks_DiscretePulseVariation_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Vehicles_Tracks_DiscretePulseVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_DiscretePulseVariation_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Vehicles_Tracks_DiscretePulseVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::value_type"""
        return _VehiclesSwig.Vehicles_Tracks_DiscretePulseVariation_Vector_pop(self)

    def append(self, x):
        r"""
        append(Vehicles_Tracks_DiscretePulseVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_DiscretePulseVariation_Vector_append(self, x)

    def empty(self):
        r"""empty(Vehicles_Tracks_DiscretePulseVariation_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_DiscretePulseVariation_Vector_empty(self)

    def size(self):
        r"""size(Vehicles_Tracks_DiscretePulseVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_DiscretePulseVariation_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Vehicles_Tracks_DiscretePulseVariation_Vector self, Vehicles_Tracks_DiscretePulseVariation_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_DiscretePulseVariation_Vector_swap(self, v)

    def begin(self):
        r"""begin(Vehicles_Tracks_DiscretePulseVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::iterator"""
        return _VehiclesSwig.Vehicles_Tracks_DiscretePulseVariation_Vector_begin(self)

    def end(self):
        r"""end(Vehicles_Tracks_DiscretePulseVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::iterator"""
        return _VehiclesSwig.Vehicles_Tracks_DiscretePulseVariation_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Vehicles_Tracks_DiscretePulseVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::reverse_iterator"""
        return _VehiclesSwig.Vehicles_Tracks_DiscretePulseVariation_Vector_rbegin(self)

    def rend(self):
        r"""rend(Vehicles_Tracks_DiscretePulseVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::reverse_iterator"""
        return _VehiclesSwig.Vehicles_Tracks_DiscretePulseVariation_Vector_rend(self)

    def clear(self):
        r"""clear(Vehicles_Tracks_DiscretePulseVariation_Vector self)"""
        return _VehiclesSwig.Vehicles_Tracks_DiscretePulseVariation_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Vehicles_Tracks_DiscretePulseVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::allocator_type"""
        return _VehiclesSwig.Vehicles_Tracks_DiscretePulseVariation_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Vehicles_Tracks_DiscretePulseVariation_Vector self)"""
        return _VehiclesSwig.Vehicles_Tracks_DiscretePulseVariation_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Vehicles_Tracks_DiscretePulseVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::iterator

        erase(Vehicles_Tracks_DiscretePulseVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::iterator first, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::iterator last) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::iterator
        last: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::iterator

        """
        return _VehiclesSwig.Vehicles_Tracks_DiscretePulseVariation_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Vehicles_Tracks_DiscretePulseVariation_Vector self) -> Vehicles_Tracks_DiscretePulseVariation_Vector
        __init__(Vehicles_Tracks_DiscretePulseVariation_Vector self, Vehicles_Tracks_DiscretePulseVariation_Vector other) -> Vehicles_Tracks_DiscretePulseVariation_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > > const &

        __init__(Vehicles_Tracks_DiscretePulseVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::size_type size) -> Vehicles_Tracks_DiscretePulseVariation_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::size_type

        __init__(Vehicles_Tracks_DiscretePulseVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::size_type size, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::value_type const & value) -> Vehicles_Tracks_DiscretePulseVariation_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::size_type
        value: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::value_type const &

        """
        _VehiclesSwig.Vehicles_Tracks_DiscretePulseVariation_Vector_swiginit(self, _VehiclesSwig.new_Vehicles_Tracks_DiscretePulseVariation_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Vehicles_Tracks_DiscretePulseVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_DiscretePulseVariation_Vector_push_back(self, x)

    def front(self):
        r"""front(Vehicles_Tracks_DiscretePulseVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::value_type const &"""
        return _VehiclesSwig.Vehicles_Tracks_DiscretePulseVariation_Vector_front(self)

    def back(self):
        r"""back(Vehicles_Tracks_DiscretePulseVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::value_type const &"""
        return _VehiclesSwig.Vehicles_Tracks_DiscretePulseVariation_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Vehicles_Tracks_DiscretePulseVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::size_type n, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_DiscretePulseVariation_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Vehicles_Tracks_DiscretePulseVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::size_type

        resize(Vehicles_Tracks_DiscretePulseVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::size_type new_size, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_DiscretePulseVariation_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Vehicles_Tracks_DiscretePulseVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::iterator pos, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::iterator
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::value_type const &

        insert(Vehicles_Tracks_DiscretePulseVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::iterator pos, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::size_type n, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::iterator
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_DiscretePulseVariation_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Vehicles_Tracks_DiscretePulseVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::size_type

        """
        return _VehiclesSwig.Vehicles_Tracks_DiscretePulseVariation_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Vehicles_Tracks_DiscretePulseVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::DiscretePulseVariation > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_DiscretePulseVariation_Vector_capacity(self)
    __swig_destroy__ = _VehiclesSwig.delete_Vehicles_Tracks_DiscretePulseVariation_Vector

# Register Vehicles_Tracks_DiscretePulseVariation_Vector in _VehiclesSwig:
_VehiclesSwig.Vehicles_Tracks_DiscretePulseVariation_Vector_swigregister(Vehicles_Tracks_DiscretePulseVariation_Vector)

class Vehicles_Tracks_FixedLinkCountBelt_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Vehicles_Tracks_FixedLinkCountBelt_Vector self) -> SwigPyIterator"""
        return _VehiclesSwig.Vehicles_Tracks_FixedLinkCountBelt_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Vehicles_Tracks_FixedLinkCountBelt_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_FixedLinkCountBelt_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Vehicles_Tracks_FixedLinkCountBelt_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_FixedLinkCountBelt_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Vehicles_Tracks_FixedLinkCountBelt_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_FixedLinkCountBelt_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Vehicles_Tracks_FixedLinkCountBelt_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::difference_type j) -> Vehicles_Tracks_FixedLinkCountBelt_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_FixedLinkCountBelt_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Vehicles_Tracks_FixedLinkCountBelt_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::difference_type

        __setslice__(Vehicles_Tracks_FixedLinkCountBelt_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::difference_type j, Vehicles_Tracks_FixedLinkCountBelt_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt >,std::allocator< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > > > const &

        """
        return _VehiclesSwig.Vehicles_Tracks_FixedLinkCountBelt_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Vehicles_Tracks_FixedLinkCountBelt_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_FixedLinkCountBelt_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Vehicles_Tracks_FixedLinkCountBelt_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::difference_type

        __delitem__(Vehicles_Tracks_FixedLinkCountBelt_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _VehiclesSwig.Vehicles_Tracks_FixedLinkCountBelt_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Vehicles_Tracks_FixedLinkCountBelt_Vector self, PySliceObject * slice) -> Vehicles_Tracks_FixedLinkCountBelt_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Vehicles_Tracks_FixedLinkCountBelt_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_FixedLinkCountBelt_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Vehicles_Tracks_FixedLinkCountBelt_Vector self, PySliceObject * slice, Vehicles_Tracks_FixedLinkCountBelt_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt >,std::allocator< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > > > const &

        __setitem__(Vehicles_Tracks_FixedLinkCountBelt_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Vehicles_Tracks_FixedLinkCountBelt_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_FixedLinkCountBelt_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Vehicles_Tracks_FixedLinkCountBelt_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::value_type"""
        return _VehiclesSwig.Vehicles_Tracks_FixedLinkCountBelt_Vector_pop(self)

    def append(self, x):
        r"""
        append(Vehicles_Tracks_FixedLinkCountBelt_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_FixedLinkCountBelt_Vector_append(self, x)

    def empty(self):
        r"""empty(Vehicles_Tracks_FixedLinkCountBelt_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_FixedLinkCountBelt_Vector_empty(self)

    def size(self):
        r"""size(Vehicles_Tracks_FixedLinkCountBelt_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_FixedLinkCountBelt_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Vehicles_Tracks_FixedLinkCountBelt_Vector self, Vehicles_Tracks_FixedLinkCountBelt_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_FixedLinkCountBelt_Vector_swap(self, v)

    def begin(self):
        r"""begin(Vehicles_Tracks_FixedLinkCountBelt_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::iterator"""
        return _VehiclesSwig.Vehicles_Tracks_FixedLinkCountBelt_Vector_begin(self)

    def end(self):
        r"""end(Vehicles_Tracks_FixedLinkCountBelt_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::iterator"""
        return _VehiclesSwig.Vehicles_Tracks_FixedLinkCountBelt_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Vehicles_Tracks_FixedLinkCountBelt_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::reverse_iterator"""
        return _VehiclesSwig.Vehicles_Tracks_FixedLinkCountBelt_Vector_rbegin(self)

    def rend(self):
        r"""rend(Vehicles_Tracks_FixedLinkCountBelt_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::reverse_iterator"""
        return _VehiclesSwig.Vehicles_Tracks_FixedLinkCountBelt_Vector_rend(self)

    def clear(self):
        r"""clear(Vehicles_Tracks_FixedLinkCountBelt_Vector self)"""
        return _VehiclesSwig.Vehicles_Tracks_FixedLinkCountBelt_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Vehicles_Tracks_FixedLinkCountBelt_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::allocator_type"""
        return _VehiclesSwig.Vehicles_Tracks_FixedLinkCountBelt_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Vehicles_Tracks_FixedLinkCountBelt_Vector self)"""
        return _VehiclesSwig.Vehicles_Tracks_FixedLinkCountBelt_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Vehicles_Tracks_FixedLinkCountBelt_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::iterator

        erase(Vehicles_Tracks_FixedLinkCountBelt_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::iterator first, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::iterator last) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::iterator
        last: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::iterator

        """
        return _VehiclesSwig.Vehicles_Tracks_FixedLinkCountBelt_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Vehicles_Tracks_FixedLinkCountBelt_Vector self) -> Vehicles_Tracks_FixedLinkCountBelt_Vector
        __init__(Vehicles_Tracks_FixedLinkCountBelt_Vector self, Vehicles_Tracks_FixedLinkCountBelt_Vector other) -> Vehicles_Tracks_FixedLinkCountBelt_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > > const &

        __init__(Vehicles_Tracks_FixedLinkCountBelt_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::size_type size) -> Vehicles_Tracks_FixedLinkCountBelt_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::size_type

        __init__(Vehicles_Tracks_FixedLinkCountBelt_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::size_type size, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::value_type const & value) -> Vehicles_Tracks_FixedLinkCountBelt_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::size_type
        value: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::value_type const &

        """
        _VehiclesSwig.Vehicles_Tracks_FixedLinkCountBelt_Vector_swiginit(self, _VehiclesSwig.new_Vehicles_Tracks_FixedLinkCountBelt_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Vehicles_Tracks_FixedLinkCountBelt_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_FixedLinkCountBelt_Vector_push_back(self, x)

    def front(self):
        r"""front(Vehicles_Tracks_FixedLinkCountBelt_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::value_type const &"""
        return _VehiclesSwig.Vehicles_Tracks_FixedLinkCountBelt_Vector_front(self)

    def back(self):
        r"""back(Vehicles_Tracks_FixedLinkCountBelt_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::value_type const &"""
        return _VehiclesSwig.Vehicles_Tracks_FixedLinkCountBelt_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Vehicles_Tracks_FixedLinkCountBelt_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::size_type n, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_FixedLinkCountBelt_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Vehicles_Tracks_FixedLinkCountBelt_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::size_type

        resize(Vehicles_Tracks_FixedLinkCountBelt_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::size_type new_size, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_FixedLinkCountBelt_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Vehicles_Tracks_FixedLinkCountBelt_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::iterator pos, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::iterator
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::value_type const &

        insert(Vehicles_Tracks_FixedLinkCountBelt_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::iterator pos, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::size_type n, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::iterator
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_FixedLinkCountBelt_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Vehicles_Tracks_FixedLinkCountBelt_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::size_type

        """
        return _VehiclesSwig.Vehicles_Tracks_FixedLinkCountBelt_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Vehicles_Tracks_FixedLinkCountBelt_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::FixedLinkCountBelt > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_FixedLinkCountBelt_Vector_capacity(self)
    __swig_destroy__ = _VehiclesSwig.delete_Vehicles_Tracks_FixedLinkCountBelt_Vector

# Register Vehicles_Tracks_FixedLinkCountBelt_Vector in _VehiclesSwig:
_VehiclesSwig.Vehicles_Tracks_FixedLinkCountBelt_Vector_swigregister(Vehicles_Tracks_FixedLinkCountBelt_Vector)

class Vehicles_Tracks_IntertialRoadWheel_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Vehicles_Tracks_IntertialRoadWheel_Vector self) -> SwigPyIterator"""
        return _VehiclesSwig.Vehicles_Tracks_IntertialRoadWheel_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Vehicles_Tracks_IntertialRoadWheel_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_IntertialRoadWheel_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Vehicles_Tracks_IntertialRoadWheel_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_IntertialRoadWheel_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Vehicles_Tracks_IntertialRoadWheel_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_IntertialRoadWheel_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Vehicles_Tracks_IntertialRoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::difference_type j) -> Vehicles_Tracks_IntertialRoadWheel_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_IntertialRoadWheel_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Vehicles_Tracks_IntertialRoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::difference_type

        __setslice__(Vehicles_Tracks_IntertialRoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::difference_type j, Vehicles_Tracks_IntertialRoadWheel_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel >,std::allocator< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > > > const &

        """
        return _VehiclesSwig.Vehicles_Tracks_IntertialRoadWheel_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Vehicles_Tracks_IntertialRoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_IntertialRoadWheel_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Vehicles_Tracks_IntertialRoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::difference_type

        __delitem__(Vehicles_Tracks_IntertialRoadWheel_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _VehiclesSwig.Vehicles_Tracks_IntertialRoadWheel_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Vehicles_Tracks_IntertialRoadWheel_Vector self, PySliceObject * slice) -> Vehicles_Tracks_IntertialRoadWheel_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Vehicles_Tracks_IntertialRoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_IntertialRoadWheel_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Vehicles_Tracks_IntertialRoadWheel_Vector self, PySliceObject * slice, Vehicles_Tracks_IntertialRoadWheel_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel >,std::allocator< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > > > const &

        __setitem__(Vehicles_Tracks_IntertialRoadWheel_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Vehicles_Tracks_IntertialRoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_IntertialRoadWheel_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Vehicles_Tracks_IntertialRoadWheel_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::value_type"""
        return _VehiclesSwig.Vehicles_Tracks_IntertialRoadWheel_Vector_pop(self)

    def append(self, x):
        r"""
        append(Vehicles_Tracks_IntertialRoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_IntertialRoadWheel_Vector_append(self, x)

    def empty(self):
        r"""empty(Vehicles_Tracks_IntertialRoadWheel_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_IntertialRoadWheel_Vector_empty(self)

    def size(self):
        r"""size(Vehicles_Tracks_IntertialRoadWheel_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_IntertialRoadWheel_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Vehicles_Tracks_IntertialRoadWheel_Vector self, Vehicles_Tracks_IntertialRoadWheel_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_IntertialRoadWheel_Vector_swap(self, v)

    def begin(self):
        r"""begin(Vehicles_Tracks_IntertialRoadWheel_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::iterator"""
        return _VehiclesSwig.Vehicles_Tracks_IntertialRoadWheel_Vector_begin(self)

    def end(self):
        r"""end(Vehicles_Tracks_IntertialRoadWheel_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::iterator"""
        return _VehiclesSwig.Vehicles_Tracks_IntertialRoadWheel_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Vehicles_Tracks_IntertialRoadWheel_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::reverse_iterator"""
        return _VehiclesSwig.Vehicles_Tracks_IntertialRoadWheel_Vector_rbegin(self)

    def rend(self):
        r"""rend(Vehicles_Tracks_IntertialRoadWheel_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::reverse_iterator"""
        return _VehiclesSwig.Vehicles_Tracks_IntertialRoadWheel_Vector_rend(self)

    def clear(self):
        r"""clear(Vehicles_Tracks_IntertialRoadWheel_Vector self)"""
        return _VehiclesSwig.Vehicles_Tracks_IntertialRoadWheel_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Vehicles_Tracks_IntertialRoadWheel_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::allocator_type"""
        return _VehiclesSwig.Vehicles_Tracks_IntertialRoadWheel_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Vehicles_Tracks_IntertialRoadWheel_Vector self)"""
        return _VehiclesSwig.Vehicles_Tracks_IntertialRoadWheel_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Vehicles_Tracks_IntertialRoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::iterator

        erase(Vehicles_Tracks_IntertialRoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::iterator first, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::iterator last) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::iterator
        last: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::iterator

        """
        return _VehiclesSwig.Vehicles_Tracks_IntertialRoadWheel_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Vehicles_Tracks_IntertialRoadWheel_Vector self) -> Vehicles_Tracks_IntertialRoadWheel_Vector
        __init__(Vehicles_Tracks_IntertialRoadWheel_Vector self, Vehicles_Tracks_IntertialRoadWheel_Vector other) -> Vehicles_Tracks_IntertialRoadWheel_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > > const &

        __init__(Vehicles_Tracks_IntertialRoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::size_type size) -> Vehicles_Tracks_IntertialRoadWheel_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::size_type

        __init__(Vehicles_Tracks_IntertialRoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::size_type size, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::value_type const & value) -> Vehicles_Tracks_IntertialRoadWheel_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::size_type
        value: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::value_type const &

        """
        _VehiclesSwig.Vehicles_Tracks_IntertialRoadWheel_Vector_swiginit(self, _VehiclesSwig.new_Vehicles_Tracks_IntertialRoadWheel_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Vehicles_Tracks_IntertialRoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_IntertialRoadWheel_Vector_push_back(self, x)

    def front(self):
        r"""front(Vehicles_Tracks_IntertialRoadWheel_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::value_type const &"""
        return _VehiclesSwig.Vehicles_Tracks_IntertialRoadWheel_Vector_front(self)

    def back(self):
        r"""back(Vehicles_Tracks_IntertialRoadWheel_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::value_type const &"""
        return _VehiclesSwig.Vehicles_Tracks_IntertialRoadWheel_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Vehicles_Tracks_IntertialRoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::size_type n, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_IntertialRoadWheel_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Vehicles_Tracks_IntertialRoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::size_type

        resize(Vehicles_Tracks_IntertialRoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::size_type new_size, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_IntertialRoadWheel_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Vehicles_Tracks_IntertialRoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::iterator pos, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::iterator
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::value_type const &

        insert(Vehicles_Tracks_IntertialRoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::iterator pos, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::size_type n, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::iterator
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_IntertialRoadWheel_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Vehicles_Tracks_IntertialRoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::size_type

        """
        return _VehiclesSwig.Vehicles_Tracks_IntertialRoadWheel_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Vehicles_Tracks_IntertialRoadWheel_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::IntertialRoadWheel > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_IntertialRoadWheel_Vector_capacity(self)
    __swig_destroy__ = _VehiclesSwig.delete_Vehicles_Tracks_IntertialRoadWheel_Vector

# Register Vehicles_Tracks_IntertialRoadWheel_Vector in _VehiclesSwig:
_VehiclesSwig.Vehicles_Tracks_IntertialRoadWheel_Vector_swigregister(Vehicles_Tracks_IntertialRoadWheel_Vector)

class Vehicles_Tracks_RigidCylindricalIdler_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Vehicles_Tracks_RigidCylindricalIdler_Vector self) -> SwigPyIterator"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalIdler_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Vehicles_Tracks_RigidCylindricalIdler_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalIdler_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Vehicles_Tracks_RigidCylindricalIdler_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalIdler_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Vehicles_Tracks_RigidCylindricalIdler_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalIdler_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Vehicles_Tracks_RigidCylindricalIdler_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::difference_type j) -> Vehicles_Tracks_RigidCylindricalIdler_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalIdler_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Vehicles_Tracks_RigidCylindricalIdler_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::difference_type

        __setslice__(Vehicles_Tracks_RigidCylindricalIdler_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::difference_type j, Vehicles_Tracks_RigidCylindricalIdler_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler >,std::allocator< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > > > const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalIdler_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Vehicles_Tracks_RigidCylindricalIdler_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalIdler_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Vehicles_Tracks_RigidCylindricalIdler_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::difference_type

        __delitem__(Vehicles_Tracks_RigidCylindricalIdler_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalIdler_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Vehicles_Tracks_RigidCylindricalIdler_Vector self, PySliceObject * slice) -> Vehicles_Tracks_RigidCylindricalIdler_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Vehicles_Tracks_RigidCylindricalIdler_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalIdler_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Vehicles_Tracks_RigidCylindricalIdler_Vector self, PySliceObject * slice, Vehicles_Tracks_RigidCylindricalIdler_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler >,std::allocator< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > > > const &

        __setitem__(Vehicles_Tracks_RigidCylindricalIdler_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Vehicles_Tracks_RigidCylindricalIdler_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalIdler_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Vehicles_Tracks_RigidCylindricalIdler_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::value_type"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalIdler_Vector_pop(self)

    def append(self, x):
        r"""
        append(Vehicles_Tracks_RigidCylindricalIdler_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalIdler_Vector_append(self, x)

    def empty(self):
        r"""empty(Vehicles_Tracks_RigidCylindricalIdler_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalIdler_Vector_empty(self)

    def size(self):
        r"""size(Vehicles_Tracks_RigidCylindricalIdler_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalIdler_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Vehicles_Tracks_RigidCylindricalIdler_Vector self, Vehicles_Tracks_RigidCylindricalIdler_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalIdler_Vector_swap(self, v)

    def begin(self):
        r"""begin(Vehicles_Tracks_RigidCylindricalIdler_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::iterator"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalIdler_Vector_begin(self)

    def end(self):
        r"""end(Vehicles_Tracks_RigidCylindricalIdler_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::iterator"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalIdler_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Vehicles_Tracks_RigidCylindricalIdler_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::reverse_iterator"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalIdler_Vector_rbegin(self)

    def rend(self):
        r"""rend(Vehicles_Tracks_RigidCylindricalIdler_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::reverse_iterator"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalIdler_Vector_rend(self)

    def clear(self):
        r"""clear(Vehicles_Tracks_RigidCylindricalIdler_Vector self)"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalIdler_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Vehicles_Tracks_RigidCylindricalIdler_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::allocator_type"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalIdler_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Vehicles_Tracks_RigidCylindricalIdler_Vector self)"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalIdler_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Vehicles_Tracks_RigidCylindricalIdler_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::iterator

        erase(Vehicles_Tracks_RigidCylindricalIdler_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::iterator first, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::iterator last) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::iterator
        last: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::iterator

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalIdler_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Vehicles_Tracks_RigidCylindricalIdler_Vector self) -> Vehicles_Tracks_RigidCylindricalIdler_Vector
        __init__(Vehicles_Tracks_RigidCylindricalIdler_Vector self, Vehicles_Tracks_RigidCylindricalIdler_Vector other) -> Vehicles_Tracks_RigidCylindricalIdler_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > > const &

        __init__(Vehicles_Tracks_RigidCylindricalIdler_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::size_type size) -> Vehicles_Tracks_RigidCylindricalIdler_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::size_type

        __init__(Vehicles_Tracks_RigidCylindricalIdler_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::size_type size, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::value_type const & value) -> Vehicles_Tracks_RigidCylindricalIdler_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::size_type
        value: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::value_type const &

        """
        _VehiclesSwig.Vehicles_Tracks_RigidCylindricalIdler_Vector_swiginit(self, _VehiclesSwig.new_Vehicles_Tracks_RigidCylindricalIdler_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Vehicles_Tracks_RigidCylindricalIdler_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalIdler_Vector_push_back(self, x)

    def front(self):
        r"""front(Vehicles_Tracks_RigidCylindricalIdler_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::value_type const &"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalIdler_Vector_front(self)

    def back(self):
        r"""back(Vehicles_Tracks_RigidCylindricalIdler_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::value_type const &"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalIdler_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Vehicles_Tracks_RigidCylindricalIdler_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::size_type n, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalIdler_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Vehicles_Tracks_RigidCylindricalIdler_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::size_type

        resize(Vehicles_Tracks_RigidCylindricalIdler_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::size_type new_size, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalIdler_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Vehicles_Tracks_RigidCylindricalIdler_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::iterator pos, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::iterator
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::value_type const &

        insert(Vehicles_Tracks_RigidCylindricalIdler_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::iterator pos, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::size_type n, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::iterator
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalIdler_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Vehicles_Tracks_RigidCylindricalIdler_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::size_type

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalIdler_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Vehicles_Tracks_RigidCylindricalIdler_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalIdler > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalIdler_Vector_capacity(self)
    __swig_destroy__ = _VehiclesSwig.delete_Vehicles_Tracks_RigidCylindricalIdler_Vector

# Register Vehicles_Tracks_RigidCylindricalIdler_Vector in _VehiclesSwig:
_VehiclesSwig.Vehicles_Tracks_RigidCylindricalIdler_Vector_swigregister(Vehicles_Tracks_RigidCylindricalIdler_Vector)

class Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector self) -> SwigPyIterator"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::difference_type j) -> Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::difference_type

        __setslice__(Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::difference_type j, Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody >,std::allocator< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > > > const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::difference_type

        __delitem__(Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector self, PySliceObject * slice) -> Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector self, PySliceObject * slice, Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody >,std::allocator< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > > > const &

        __setitem__(Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::value_type"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector_pop(self)

    def append(self, x):
        r"""
        append(Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector_append(self, x)

    def empty(self):
        r"""empty(Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector_empty(self)

    def size(self):
        r"""size(Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector self, Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector_swap(self, v)

    def begin(self):
        r"""begin(Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::iterator"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector_begin(self)

    def end(self):
        r"""end(Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::iterator"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::reverse_iterator"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector_rbegin(self)

    def rend(self):
        r"""rend(Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::reverse_iterator"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector_rend(self)

    def clear(self):
        r"""clear(Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector self)"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::allocator_type"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector self)"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::iterator

        erase(Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::iterator first, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::iterator last) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::iterator
        last: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::iterator

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector self) -> Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector
        __init__(Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector self, Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector other) -> Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > > const &

        __init__(Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::size_type size) -> Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::size_type

        __init__(Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::size_type size, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::value_type const & value) -> Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::size_type
        value: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::value_type const &

        """
        _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector_swiginit(self, _VehiclesSwig.new_Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector_push_back(self, x)

    def front(self):
        r"""front(Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::value_type const &"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector_front(self)

    def back(self):
        r"""back(Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::value_type const &"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::size_type n, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::size_type

        resize(Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::size_type new_size, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::iterator pos, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::iterator
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::value_type const &

        insert(Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::iterator pos, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::size_type n, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::iterator
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::size_type

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector_capacity(self)
    __swig_destroy__ = _VehiclesSwig.delete_Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector

# Register Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector in _VehiclesSwig:
_VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector_swigregister(Vehicles_Tracks_RigidCylindricalRoadWheelBody_Vector)

class Vehicles_Tracks_RigidCylindricalRoller_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Vehicles_Tracks_RigidCylindricalRoller_Vector self) -> SwigPyIterator"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoller_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Vehicles_Tracks_RigidCylindricalRoller_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoller_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Vehicles_Tracks_RigidCylindricalRoller_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoller_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Vehicles_Tracks_RigidCylindricalRoller_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoller_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Vehicles_Tracks_RigidCylindricalRoller_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::difference_type j) -> Vehicles_Tracks_RigidCylindricalRoller_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoller_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Vehicles_Tracks_RigidCylindricalRoller_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::difference_type

        __setslice__(Vehicles_Tracks_RigidCylindricalRoller_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::difference_type j, Vehicles_Tracks_RigidCylindricalRoller_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller >,std::allocator< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > > > const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoller_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Vehicles_Tracks_RigidCylindricalRoller_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoller_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Vehicles_Tracks_RigidCylindricalRoller_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::difference_type

        __delitem__(Vehicles_Tracks_RigidCylindricalRoller_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoller_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Vehicles_Tracks_RigidCylindricalRoller_Vector self, PySliceObject * slice) -> Vehicles_Tracks_RigidCylindricalRoller_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Vehicles_Tracks_RigidCylindricalRoller_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoller_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Vehicles_Tracks_RigidCylindricalRoller_Vector self, PySliceObject * slice, Vehicles_Tracks_RigidCylindricalRoller_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller >,std::allocator< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > > > const &

        __setitem__(Vehicles_Tracks_RigidCylindricalRoller_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Vehicles_Tracks_RigidCylindricalRoller_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoller_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Vehicles_Tracks_RigidCylindricalRoller_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::value_type"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoller_Vector_pop(self)

    def append(self, x):
        r"""
        append(Vehicles_Tracks_RigidCylindricalRoller_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoller_Vector_append(self, x)

    def empty(self):
        r"""empty(Vehicles_Tracks_RigidCylindricalRoller_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoller_Vector_empty(self)

    def size(self):
        r"""size(Vehicles_Tracks_RigidCylindricalRoller_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoller_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Vehicles_Tracks_RigidCylindricalRoller_Vector self, Vehicles_Tracks_RigidCylindricalRoller_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoller_Vector_swap(self, v)

    def begin(self):
        r"""begin(Vehicles_Tracks_RigidCylindricalRoller_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::iterator"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoller_Vector_begin(self)

    def end(self):
        r"""end(Vehicles_Tracks_RigidCylindricalRoller_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::iterator"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoller_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Vehicles_Tracks_RigidCylindricalRoller_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::reverse_iterator"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoller_Vector_rbegin(self)

    def rend(self):
        r"""rend(Vehicles_Tracks_RigidCylindricalRoller_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::reverse_iterator"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoller_Vector_rend(self)

    def clear(self):
        r"""clear(Vehicles_Tracks_RigidCylindricalRoller_Vector self)"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoller_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Vehicles_Tracks_RigidCylindricalRoller_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::allocator_type"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoller_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Vehicles_Tracks_RigidCylindricalRoller_Vector self)"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoller_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Vehicles_Tracks_RigidCylindricalRoller_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::iterator

        erase(Vehicles_Tracks_RigidCylindricalRoller_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::iterator first, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::iterator last) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::iterator
        last: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::iterator

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoller_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Vehicles_Tracks_RigidCylindricalRoller_Vector self) -> Vehicles_Tracks_RigidCylindricalRoller_Vector
        __init__(Vehicles_Tracks_RigidCylindricalRoller_Vector self, Vehicles_Tracks_RigidCylindricalRoller_Vector other) -> Vehicles_Tracks_RigidCylindricalRoller_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > > const &

        __init__(Vehicles_Tracks_RigidCylindricalRoller_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::size_type size) -> Vehicles_Tracks_RigidCylindricalRoller_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::size_type

        __init__(Vehicles_Tracks_RigidCylindricalRoller_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::size_type size, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::value_type const & value) -> Vehicles_Tracks_RigidCylindricalRoller_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::size_type
        value: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::value_type const &

        """
        _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoller_Vector_swiginit(self, _VehiclesSwig.new_Vehicles_Tracks_RigidCylindricalRoller_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Vehicles_Tracks_RigidCylindricalRoller_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoller_Vector_push_back(self, x)

    def front(self):
        r"""front(Vehicles_Tracks_RigidCylindricalRoller_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::value_type const &"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoller_Vector_front(self)

    def back(self):
        r"""back(Vehicles_Tracks_RigidCylindricalRoller_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::value_type const &"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoller_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Vehicles_Tracks_RigidCylindricalRoller_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::size_type n, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoller_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Vehicles_Tracks_RigidCylindricalRoller_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::size_type

        resize(Vehicles_Tracks_RigidCylindricalRoller_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::size_type new_size, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoller_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Vehicles_Tracks_RigidCylindricalRoller_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::iterator pos, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::iterator
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::value_type const &

        insert(Vehicles_Tracks_RigidCylindricalRoller_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::iterator pos, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::size_type n, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::iterator
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoller_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Vehicles_Tracks_RigidCylindricalRoller_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::size_type

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoller_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Vehicles_Tracks_RigidCylindricalRoller_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoller > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoller_Vector_capacity(self)
    __swig_destroy__ = _VehiclesSwig.delete_Vehicles_Tracks_RigidCylindricalRoller_Vector

# Register Vehicles_Tracks_RigidCylindricalRoller_Vector in _VehiclesSwig:
_VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoller_Vector_swigregister(Vehicles_Tracks_RigidCylindricalRoller_Vector)

class Vehicles_Tracks_RigidCylindricalSprocket_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Vehicles_Tracks_RigidCylindricalSprocket_Vector self) -> SwigPyIterator"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalSprocket_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Vehicles_Tracks_RigidCylindricalSprocket_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalSprocket_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Vehicles_Tracks_RigidCylindricalSprocket_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalSprocket_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Vehicles_Tracks_RigidCylindricalSprocket_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalSprocket_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Vehicles_Tracks_RigidCylindricalSprocket_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::difference_type j) -> Vehicles_Tracks_RigidCylindricalSprocket_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalSprocket_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Vehicles_Tracks_RigidCylindricalSprocket_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::difference_type

        __setslice__(Vehicles_Tracks_RigidCylindricalSprocket_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::difference_type j, Vehicles_Tracks_RigidCylindricalSprocket_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket >,std::allocator< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > > > const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalSprocket_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Vehicles_Tracks_RigidCylindricalSprocket_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalSprocket_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Vehicles_Tracks_RigidCylindricalSprocket_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::difference_type

        __delitem__(Vehicles_Tracks_RigidCylindricalSprocket_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalSprocket_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Vehicles_Tracks_RigidCylindricalSprocket_Vector self, PySliceObject * slice) -> Vehicles_Tracks_RigidCylindricalSprocket_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Vehicles_Tracks_RigidCylindricalSprocket_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalSprocket_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Vehicles_Tracks_RigidCylindricalSprocket_Vector self, PySliceObject * slice, Vehicles_Tracks_RigidCylindricalSprocket_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket >,std::allocator< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > > > const &

        __setitem__(Vehicles_Tracks_RigidCylindricalSprocket_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Vehicles_Tracks_RigidCylindricalSprocket_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalSprocket_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Vehicles_Tracks_RigidCylindricalSprocket_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::value_type"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalSprocket_Vector_pop(self)

    def append(self, x):
        r"""
        append(Vehicles_Tracks_RigidCylindricalSprocket_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalSprocket_Vector_append(self, x)

    def empty(self):
        r"""empty(Vehicles_Tracks_RigidCylindricalSprocket_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalSprocket_Vector_empty(self)

    def size(self):
        r"""size(Vehicles_Tracks_RigidCylindricalSprocket_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalSprocket_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Vehicles_Tracks_RigidCylindricalSprocket_Vector self, Vehicles_Tracks_RigidCylindricalSprocket_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalSprocket_Vector_swap(self, v)

    def begin(self):
        r"""begin(Vehicles_Tracks_RigidCylindricalSprocket_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::iterator"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalSprocket_Vector_begin(self)

    def end(self):
        r"""end(Vehicles_Tracks_RigidCylindricalSprocket_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::iterator"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalSprocket_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Vehicles_Tracks_RigidCylindricalSprocket_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::reverse_iterator"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalSprocket_Vector_rbegin(self)

    def rend(self):
        r"""rend(Vehicles_Tracks_RigidCylindricalSprocket_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::reverse_iterator"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalSprocket_Vector_rend(self)

    def clear(self):
        r"""clear(Vehicles_Tracks_RigidCylindricalSprocket_Vector self)"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalSprocket_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Vehicles_Tracks_RigidCylindricalSprocket_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::allocator_type"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalSprocket_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Vehicles_Tracks_RigidCylindricalSprocket_Vector self)"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalSprocket_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Vehicles_Tracks_RigidCylindricalSprocket_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::iterator

        erase(Vehicles_Tracks_RigidCylindricalSprocket_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::iterator first, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::iterator last) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::iterator
        last: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::iterator

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalSprocket_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Vehicles_Tracks_RigidCylindricalSprocket_Vector self) -> Vehicles_Tracks_RigidCylindricalSprocket_Vector
        __init__(Vehicles_Tracks_RigidCylindricalSprocket_Vector self, Vehicles_Tracks_RigidCylindricalSprocket_Vector other) -> Vehicles_Tracks_RigidCylindricalSprocket_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > > const &

        __init__(Vehicles_Tracks_RigidCylindricalSprocket_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::size_type size) -> Vehicles_Tracks_RigidCylindricalSprocket_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::size_type

        __init__(Vehicles_Tracks_RigidCylindricalSprocket_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::size_type size, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::value_type const & value) -> Vehicles_Tracks_RigidCylindricalSprocket_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::size_type
        value: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::value_type const &

        """
        _VehiclesSwig.Vehicles_Tracks_RigidCylindricalSprocket_Vector_swiginit(self, _VehiclesSwig.new_Vehicles_Tracks_RigidCylindricalSprocket_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Vehicles_Tracks_RigidCylindricalSprocket_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalSprocket_Vector_push_back(self, x)

    def front(self):
        r"""front(Vehicles_Tracks_RigidCylindricalSprocket_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::value_type const &"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalSprocket_Vector_front(self)

    def back(self):
        r"""back(Vehicles_Tracks_RigidCylindricalSprocket_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::value_type const &"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalSprocket_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Vehicles_Tracks_RigidCylindricalSprocket_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::size_type n, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalSprocket_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Vehicles_Tracks_RigidCylindricalSprocket_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::size_type

        resize(Vehicles_Tracks_RigidCylindricalSprocket_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::size_type new_size, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalSprocket_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Vehicles_Tracks_RigidCylindricalSprocket_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::iterator pos, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::iterator
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::value_type const &

        insert(Vehicles_Tracks_RigidCylindricalSprocket_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::iterator pos, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::size_type n, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::iterator
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalSprocket_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Vehicles_Tracks_RigidCylindricalSprocket_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::size_type

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalSprocket_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Vehicles_Tracks_RigidCylindricalSprocket_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalSprocket > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalSprocket_Vector_capacity(self)
    __swig_destroy__ = _VehiclesSwig.delete_Vehicles_Tracks_RigidCylindricalSprocket_Vector

# Register Vehicles_Tracks_RigidCylindricalSprocket_Vector in _VehiclesSwig:
_VehiclesSwig.Vehicles_Tracks_RigidCylindricalSprocket_Vector_swigregister(Vehicles_Tracks_RigidCylindricalSprocket_Vector)

class Vehicles_Tracks_RoadWheel_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Vehicles_Tracks_RoadWheel_Vector self) -> SwigPyIterator"""
        return _VehiclesSwig.Vehicles_Tracks_RoadWheel_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Vehicles_Tracks_RoadWheel_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_RoadWheel_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Vehicles_Tracks_RoadWheel_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_RoadWheel_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Vehicles_Tracks_RoadWheel_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_RoadWheel_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Vehicles_Tracks_RoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::difference_type j) -> Vehicles_Tracks_RoadWheel_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_RoadWheel_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Vehicles_Tracks_RoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::difference_type

        __setslice__(Vehicles_Tracks_RoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::difference_type j, Vehicles_Tracks_RoadWheel_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel >,std::allocator< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > > > const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RoadWheel_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Vehicles_Tracks_RoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_RoadWheel_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Vehicles_Tracks_RoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::difference_type

        __delitem__(Vehicles_Tracks_RoadWheel_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _VehiclesSwig.Vehicles_Tracks_RoadWheel_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Vehicles_Tracks_RoadWheel_Vector self, PySliceObject * slice) -> Vehicles_Tracks_RoadWheel_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Vehicles_Tracks_RoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_RoadWheel_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Vehicles_Tracks_RoadWheel_Vector self, PySliceObject * slice, Vehicles_Tracks_RoadWheel_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel >,std::allocator< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > > > const &

        __setitem__(Vehicles_Tracks_RoadWheel_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Vehicles_Tracks_RoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RoadWheel_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Vehicles_Tracks_RoadWheel_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::value_type"""
        return _VehiclesSwig.Vehicles_Tracks_RoadWheel_Vector_pop(self)

    def append(self, x):
        r"""
        append(Vehicles_Tracks_RoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RoadWheel_Vector_append(self, x)

    def empty(self):
        r"""empty(Vehicles_Tracks_RoadWheel_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_RoadWheel_Vector_empty(self)

    def size(self):
        r"""size(Vehicles_Tracks_RoadWheel_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_RoadWheel_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Vehicles_Tracks_RoadWheel_Vector self, Vehicles_Tracks_RoadWheel_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_RoadWheel_Vector_swap(self, v)

    def begin(self):
        r"""begin(Vehicles_Tracks_RoadWheel_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::iterator"""
        return _VehiclesSwig.Vehicles_Tracks_RoadWheel_Vector_begin(self)

    def end(self):
        r"""end(Vehicles_Tracks_RoadWheel_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::iterator"""
        return _VehiclesSwig.Vehicles_Tracks_RoadWheel_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Vehicles_Tracks_RoadWheel_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::reverse_iterator"""
        return _VehiclesSwig.Vehicles_Tracks_RoadWheel_Vector_rbegin(self)

    def rend(self):
        r"""rend(Vehicles_Tracks_RoadWheel_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::reverse_iterator"""
        return _VehiclesSwig.Vehicles_Tracks_RoadWheel_Vector_rend(self)

    def clear(self):
        r"""clear(Vehicles_Tracks_RoadWheel_Vector self)"""
        return _VehiclesSwig.Vehicles_Tracks_RoadWheel_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Vehicles_Tracks_RoadWheel_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::allocator_type"""
        return _VehiclesSwig.Vehicles_Tracks_RoadWheel_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Vehicles_Tracks_RoadWheel_Vector self)"""
        return _VehiclesSwig.Vehicles_Tracks_RoadWheel_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Vehicles_Tracks_RoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::iterator

        erase(Vehicles_Tracks_RoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::iterator first, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::iterator last) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::iterator
        last: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::iterator

        """
        return _VehiclesSwig.Vehicles_Tracks_RoadWheel_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Vehicles_Tracks_RoadWheel_Vector self) -> Vehicles_Tracks_RoadWheel_Vector
        __init__(Vehicles_Tracks_RoadWheel_Vector self, Vehicles_Tracks_RoadWheel_Vector other) -> Vehicles_Tracks_RoadWheel_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > > const &

        __init__(Vehicles_Tracks_RoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::size_type size) -> Vehicles_Tracks_RoadWheel_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::size_type

        __init__(Vehicles_Tracks_RoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::size_type size, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::value_type const & value) -> Vehicles_Tracks_RoadWheel_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::size_type
        value: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::value_type const &

        """
        _VehiclesSwig.Vehicles_Tracks_RoadWheel_Vector_swiginit(self, _VehiclesSwig.new_Vehicles_Tracks_RoadWheel_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Vehicles_Tracks_RoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RoadWheel_Vector_push_back(self, x)

    def front(self):
        r"""front(Vehicles_Tracks_RoadWheel_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::value_type const &"""
        return _VehiclesSwig.Vehicles_Tracks_RoadWheel_Vector_front(self)

    def back(self):
        r"""back(Vehicles_Tracks_RoadWheel_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::value_type const &"""
        return _VehiclesSwig.Vehicles_Tracks_RoadWheel_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Vehicles_Tracks_RoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::size_type n, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RoadWheel_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Vehicles_Tracks_RoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::size_type

        resize(Vehicles_Tracks_RoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::size_type new_size, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RoadWheel_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Vehicles_Tracks_RoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::iterator pos, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::iterator
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::value_type const &

        insert(Vehicles_Tracks_RoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::iterator pos, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::size_type n, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::iterator
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RoadWheel_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Vehicles_Tracks_RoadWheel_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::size_type

        """
        return _VehiclesSwig.Vehicles_Tracks_RoadWheel_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Vehicles_Tracks_RoadWheel_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::RoadWheel > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_RoadWheel_Vector_capacity(self)
    __swig_destroy__ = _VehiclesSwig.delete_Vehicles_Tracks_RoadWheel_Vector

# Register Vehicles_Tracks_RoadWheel_Vector in _VehiclesSwig:
_VehiclesSwig.Vehicles_Tracks_RoadWheel_Vector_swigregister(Vehicles_Tracks_RoadWheel_Vector)

class Vehicles_Tracks_SinusoidalVariation_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Vehicles_Tracks_SinusoidalVariation_Vector self) -> SwigPyIterator"""
        return _VehiclesSwig.Vehicles_Tracks_SinusoidalVariation_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Vehicles_Tracks_SinusoidalVariation_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_SinusoidalVariation_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Vehicles_Tracks_SinusoidalVariation_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_SinusoidalVariation_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Vehicles_Tracks_SinusoidalVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_SinusoidalVariation_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Vehicles_Tracks_SinusoidalVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::difference_type j) -> Vehicles_Tracks_SinusoidalVariation_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_SinusoidalVariation_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Vehicles_Tracks_SinusoidalVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::difference_type

        __setslice__(Vehicles_Tracks_SinusoidalVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::difference_type j, Vehicles_Tracks_SinusoidalVariation_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation >,std::allocator< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > > > const &

        """
        return _VehiclesSwig.Vehicles_Tracks_SinusoidalVariation_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Vehicles_Tracks_SinusoidalVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_SinusoidalVariation_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Vehicles_Tracks_SinusoidalVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::difference_type

        __delitem__(Vehicles_Tracks_SinusoidalVariation_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _VehiclesSwig.Vehicles_Tracks_SinusoidalVariation_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Vehicles_Tracks_SinusoidalVariation_Vector self, PySliceObject * slice) -> Vehicles_Tracks_SinusoidalVariation_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Vehicles_Tracks_SinusoidalVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_SinusoidalVariation_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Vehicles_Tracks_SinusoidalVariation_Vector self, PySliceObject * slice, Vehicles_Tracks_SinusoidalVariation_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation >,std::allocator< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > > > const &

        __setitem__(Vehicles_Tracks_SinusoidalVariation_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Vehicles_Tracks_SinusoidalVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_SinusoidalVariation_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Vehicles_Tracks_SinusoidalVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::value_type"""
        return _VehiclesSwig.Vehicles_Tracks_SinusoidalVariation_Vector_pop(self)

    def append(self, x):
        r"""
        append(Vehicles_Tracks_SinusoidalVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_SinusoidalVariation_Vector_append(self, x)

    def empty(self):
        r"""empty(Vehicles_Tracks_SinusoidalVariation_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_SinusoidalVariation_Vector_empty(self)

    def size(self):
        r"""size(Vehicles_Tracks_SinusoidalVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_SinusoidalVariation_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Vehicles_Tracks_SinusoidalVariation_Vector self, Vehicles_Tracks_SinusoidalVariation_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_SinusoidalVariation_Vector_swap(self, v)

    def begin(self):
        r"""begin(Vehicles_Tracks_SinusoidalVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::iterator"""
        return _VehiclesSwig.Vehicles_Tracks_SinusoidalVariation_Vector_begin(self)

    def end(self):
        r"""end(Vehicles_Tracks_SinusoidalVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::iterator"""
        return _VehiclesSwig.Vehicles_Tracks_SinusoidalVariation_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Vehicles_Tracks_SinusoidalVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::reverse_iterator"""
        return _VehiclesSwig.Vehicles_Tracks_SinusoidalVariation_Vector_rbegin(self)

    def rend(self):
        r"""rend(Vehicles_Tracks_SinusoidalVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::reverse_iterator"""
        return _VehiclesSwig.Vehicles_Tracks_SinusoidalVariation_Vector_rend(self)

    def clear(self):
        r"""clear(Vehicles_Tracks_SinusoidalVariation_Vector self)"""
        return _VehiclesSwig.Vehicles_Tracks_SinusoidalVariation_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Vehicles_Tracks_SinusoidalVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::allocator_type"""
        return _VehiclesSwig.Vehicles_Tracks_SinusoidalVariation_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Vehicles_Tracks_SinusoidalVariation_Vector self)"""
        return _VehiclesSwig.Vehicles_Tracks_SinusoidalVariation_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Vehicles_Tracks_SinusoidalVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::iterator

        erase(Vehicles_Tracks_SinusoidalVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::iterator first, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::iterator last) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::iterator
        last: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::iterator

        """
        return _VehiclesSwig.Vehicles_Tracks_SinusoidalVariation_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Vehicles_Tracks_SinusoidalVariation_Vector self) -> Vehicles_Tracks_SinusoidalVariation_Vector
        __init__(Vehicles_Tracks_SinusoidalVariation_Vector self, Vehicles_Tracks_SinusoidalVariation_Vector other) -> Vehicles_Tracks_SinusoidalVariation_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > > const &

        __init__(Vehicles_Tracks_SinusoidalVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::size_type size) -> Vehicles_Tracks_SinusoidalVariation_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::size_type

        __init__(Vehicles_Tracks_SinusoidalVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::size_type size, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::value_type const & value) -> Vehicles_Tracks_SinusoidalVariation_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::size_type
        value: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::value_type const &

        """
        _VehiclesSwig.Vehicles_Tracks_SinusoidalVariation_Vector_swiginit(self, _VehiclesSwig.new_Vehicles_Tracks_SinusoidalVariation_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Vehicles_Tracks_SinusoidalVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_SinusoidalVariation_Vector_push_back(self, x)

    def front(self):
        r"""front(Vehicles_Tracks_SinusoidalVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::value_type const &"""
        return _VehiclesSwig.Vehicles_Tracks_SinusoidalVariation_Vector_front(self)

    def back(self):
        r"""back(Vehicles_Tracks_SinusoidalVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::value_type const &"""
        return _VehiclesSwig.Vehicles_Tracks_SinusoidalVariation_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Vehicles_Tracks_SinusoidalVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::size_type n, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_SinusoidalVariation_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Vehicles_Tracks_SinusoidalVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::size_type

        resize(Vehicles_Tracks_SinusoidalVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::size_type new_size, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_SinusoidalVariation_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Vehicles_Tracks_SinusoidalVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::iterator pos, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::iterator
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::value_type const &

        insert(Vehicles_Tracks_SinusoidalVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::iterator pos, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::size_type n, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::iterator
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_SinusoidalVariation_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Vehicles_Tracks_SinusoidalVariation_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::size_type

        """
        return _VehiclesSwig.Vehicles_Tracks_SinusoidalVariation_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Vehicles_Tracks_SinusoidalVariation_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::SinusoidalVariation > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_SinusoidalVariation_Vector_capacity(self)
    __swig_destroy__ = _VehiclesSwig.delete_Vehicles_Tracks_SinusoidalVariation_Vector

# Register Vehicles_Tracks_SinusoidalVariation_Vector in _VehiclesSwig:
_VehiclesSwig.Vehicles_Tracks_SinusoidalVariation_Vector_swigregister(Vehicles_Tracks_SinusoidalVariation_Vector)

class Vehicles_Tracks_System_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Vehicles_Tracks_System_Vector self) -> SwigPyIterator"""
        return _VehiclesSwig.Vehicles_Tracks_System_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Vehicles_Tracks_System_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_System_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Vehicles_Tracks_System_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_System_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Vehicles_Tracks_System_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_System_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Vehicles_Tracks_System_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::difference_type j) -> Vehicles_Tracks_System_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_System_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Vehicles_Tracks_System_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::difference_type

        __setslice__(Vehicles_Tracks_System_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::difference_type j, Vehicles_Tracks_System_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System >,std::allocator< std::shared_ptr< openplx::Vehicles::Tracks::System > > > const &

        """
        return _VehiclesSwig.Vehicles_Tracks_System_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Vehicles_Tracks_System_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_System_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Vehicles_Tracks_System_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::difference_type

        __delitem__(Vehicles_Tracks_System_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _VehiclesSwig.Vehicles_Tracks_System_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Vehicles_Tracks_System_Vector self, PySliceObject * slice) -> Vehicles_Tracks_System_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Vehicles_Tracks_System_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::difference_type

        """
        return _VehiclesSwig.Vehicles_Tracks_System_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Vehicles_Tracks_System_Vector self, PySliceObject * slice, Vehicles_Tracks_System_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System >,std::allocator< std::shared_ptr< openplx::Vehicles::Tracks::System > > > const &

        __setitem__(Vehicles_Tracks_System_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Vehicles_Tracks_System_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::difference_type i, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_System_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Vehicles_Tracks_System_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::value_type"""
        return _VehiclesSwig.Vehicles_Tracks_System_Vector_pop(self)

    def append(self, x):
        r"""
        append(Vehicles_Tracks_System_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_System_Vector_append(self, x)

    def empty(self):
        r"""empty(Vehicles_Tracks_System_Vector self) -> bool"""
        return _VehiclesSwig.Vehicles_Tracks_System_Vector_empty(self)

    def size(self):
        r"""size(Vehicles_Tracks_System_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_System_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Vehicles_Tracks_System_Vector self, Vehicles_Tracks_System_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_System_Vector_swap(self, v)

    def begin(self):
        r"""begin(Vehicles_Tracks_System_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::iterator"""
        return _VehiclesSwig.Vehicles_Tracks_System_Vector_begin(self)

    def end(self):
        r"""end(Vehicles_Tracks_System_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::iterator"""
        return _VehiclesSwig.Vehicles_Tracks_System_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Vehicles_Tracks_System_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::reverse_iterator"""
        return _VehiclesSwig.Vehicles_Tracks_System_Vector_rbegin(self)

    def rend(self):
        r"""rend(Vehicles_Tracks_System_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::reverse_iterator"""
        return _VehiclesSwig.Vehicles_Tracks_System_Vector_rend(self)

    def clear(self):
        r"""clear(Vehicles_Tracks_System_Vector self)"""
        return _VehiclesSwig.Vehicles_Tracks_System_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Vehicles_Tracks_System_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::allocator_type"""
        return _VehiclesSwig.Vehicles_Tracks_System_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Vehicles_Tracks_System_Vector self)"""
        return _VehiclesSwig.Vehicles_Tracks_System_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Vehicles_Tracks_System_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::iterator

        erase(Vehicles_Tracks_System_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::iterator first, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::iterator last) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::iterator
        last: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::iterator

        """
        return _VehiclesSwig.Vehicles_Tracks_System_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Vehicles_Tracks_System_Vector self) -> Vehicles_Tracks_System_Vector
        __init__(Vehicles_Tracks_System_Vector self, Vehicles_Tracks_System_Vector other) -> Vehicles_Tracks_System_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > > const &

        __init__(Vehicles_Tracks_System_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::size_type size) -> Vehicles_Tracks_System_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::size_type

        __init__(Vehicles_Tracks_System_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::size_type size, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::value_type const & value) -> Vehicles_Tracks_System_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::size_type
        value: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::value_type const &

        """
        _VehiclesSwig.Vehicles_Tracks_System_Vector_swiginit(self, _VehiclesSwig.new_Vehicles_Tracks_System_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Vehicles_Tracks_System_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_System_Vector_push_back(self, x)

    def front(self):
        r"""front(Vehicles_Tracks_System_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::value_type const &"""
        return _VehiclesSwig.Vehicles_Tracks_System_Vector_front(self)

    def back(self):
        r"""back(Vehicles_Tracks_System_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::value_type const &"""
        return _VehiclesSwig.Vehicles_Tracks_System_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Vehicles_Tracks_System_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::size_type n, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_System_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Vehicles_Tracks_System_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::size_type

        resize(Vehicles_Tracks_System_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::size_type new_size, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_System_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Vehicles_Tracks_System_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::iterator pos, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::iterator
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::value_type const &

        insert(Vehicles_Tracks_System_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::iterator pos, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::size_type n, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::iterator
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::size_type
        x: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::value_type const &

        """
        return _VehiclesSwig.Vehicles_Tracks_System_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Vehicles_Tracks_System_Vector self, std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::size_type

        """
        return _VehiclesSwig.Vehicles_Tracks_System_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Vehicles_Tracks_System_Vector self) -> std::vector< std::shared_ptr< openplx::Vehicles::Tracks::System > >::size_type"""
        return _VehiclesSwig.Vehicles_Tracks_System_Vector_capacity(self)
    __swig_destroy__ = _VehiclesSwig.delete_Vehicles_Tracks_System_Vector

# Register Vehicles_Tracks_System_Vector in _VehiclesSwig:
_VehiclesSwig.Vehicles_Tracks_System_Vector_swigregister(Vehicles_Tracks_System_Vector)

class Vehicles_Tracks_Belt(openplx.Core.Object):
    r"""Proxy of C++ openplx::Vehicles::Tracks::Belt class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Vehicles_Tracks_Belt self) -> Vehicles_Tracks_Belt"""
        _VehiclesSwig.Vehicles_Tracks_Belt_swiginit(self, _VehiclesSwig.new_Vehicles_Tracks_Belt())

    def link_description(self):
        r"""link_description(Vehicles_Tracks_Belt self) -> std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkDescription >"""
        return _VehiclesSwig.Vehicles_Tracks_Belt_link_description(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Vehicles_Tracks_Belt self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _VehiclesSwig.Vehicles_Tracks_Belt_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Vehicles_Tracks_Belt self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _VehiclesSwig.Vehicles_Tracks_Belt_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Vehicles_Tracks_Belt self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _VehiclesSwig.Vehicles_Tracks_Belt_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Vehicles_Tracks_Belt self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_Belt_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Vehicles_Tracks_Belt self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_Belt_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Vehicles_Tracks_Belt self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _VehiclesSwig.Vehicles_Tracks_Belt_triggerOnInit(self, context)
    __swig_destroy__ = _VehiclesSwig.delete_Vehicles_Tracks_Belt

# Register Vehicles_Tracks_Belt in _VehiclesSwig:
_VehiclesSwig.Vehicles_Tracks_Belt_swigregister(Vehicles_Tracks_Belt)

class Vehicles_Tracks_DefaultLinkDescription(openplx.Core.Object):
    r"""Proxy of C++ openplx::Vehicles::Tracks::DefaultLinkDescription class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Vehicles_Tracks_DefaultLinkDescription self) -> Vehicles_Tracks_DefaultLinkDescription"""
        _VehiclesSwig.Vehicles_Tracks_DefaultLinkDescription_swiginit(self, _VehiclesSwig.new_Vehicles_Tracks_DefaultLinkDescription())

    def inertia(self):
        r"""inertia(Vehicles_Tracks_DefaultLinkDescription self) -> std::shared_ptr< openplx::Physics3D::Bodies::Inertia >"""
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkDescription_inertia(self)

    def local_cm_transform(self):
        r"""local_cm_transform(Vehicles_Tracks_DefaultLinkDescription self) -> std::shared_ptr< openplx::Math::AffineTransform >"""
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkDescription_local_cm_transform(self)

    def variation(self):
        r"""variation(Vehicles_Tracks_DefaultLinkDescription self) -> std::shared_ptr< openplx::Vehicles::Tracks::DefaultLinkVariation >"""
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkDescription_variation(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Vehicles_Tracks_DefaultLinkDescription self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkDescription_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Vehicles_Tracks_DefaultLinkDescription self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkDescription_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Vehicles_Tracks_DefaultLinkDescription self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkDescription_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Vehicles_Tracks_DefaultLinkDescription self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkDescription_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Vehicles_Tracks_DefaultLinkDescription self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkDescription_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Vehicles_Tracks_DefaultLinkDescription self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkDescription_triggerOnInit(self, context)
    __swig_destroy__ = _VehiclesSwig.delete_Vehicles_Tracks_DefaultLinkDescription

# Register Vehicles_Tracks_DefaultLinkDescription in _VehiclesSwig:
_VehiclesSwig.Vehicles_Tracks_DefaultLinkDescription_swigregister(Vehicles_Tracks_DefaultLinkDescription)

class Vehicles_Tracks_ContactGeometryLinkDescription(Vehicles_Tracks_DefaultLinkDescription):
    r"""Proxy of C++ openplx::Vehicles::Tracks::ContactGeometryLinkDescription class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Vehicles_Tracks_ContactGeometryLinkDescription self) -> Vehicles_Tracks_ContactGeometryLinkDescription"""
        _VehiclesSwig.Vehicles_Tracks_ContactGeometryLinkDescription_swiginit(self, _VehiclesSwig.new_Vehicles_Tracks_ContactGeometryLinkDescription())

    def contact_geometry(self):
        r"""contact_geometry(Vehicles_Tracks_ContactGeometryLinkDescription self) -> std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry >"""
        return _VehiclesSwig.Vehicles_Tracks_ContactGeometryLinkDescription_contact_geometry(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Vehicles_Tracks_ContactGeometryLinkDescription self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _VehiclesSwig.Vehicles_Tracks_ContactGeometryLinkDescription_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Vehicles_Tracks_ContactGeometryLinkDescription self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _VehiclesSwig.Vehicles_Tracks_ContactGeometryLinkDescription_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Vehicles_Tracks_ContactGeometryLinkDescription self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _VehiclesSwig.Vehicles_Tracks_ContactGeometryLinkDescription_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Vehicles_Tracks_ContactGeometryLinkDescription self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_ContactGeometryLinkDescription_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Vehicles_Tracks_ContactGeometryLinkDescription self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_ContactGeometryLinkDescription_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Vehicles_Tracks_ContactGeometryLinkDescription self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _VehiclesSwig.Vehicles_Tracks_ContactGeometryLinkDescription_triggerOnInit(self, context)
    __swig_destroy__ = _VehiclesSwig.delete_Vehicles_Tracks_ContactGeometryLinkDescription

# Register Vehicles_Tracks_ContactGeometryLinkDescription in _VehiclesSwig:
_VehiclesSwig.Vehicles_Tracks_ContactGeometryLinkDescription_swigregister(Vehicles_Tracks_ContactGeometryLinkDescription)

class Vehicles_Tracks_BoxLinkDescription(Vehicles_Tracks_ContactGeometryLinkDescription):
    r"""Proxy of C++ openplx::Vehicles::Tracks::BoxLinkDescription class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Vehicles_Tracks_BoxLinkDescription self) -> Vehicles_Tracks_BoxLinkDescription"""
        _VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_swiginit(self, _VehiclesSwig.new_Vehicles_Tracks_BoxLinkDescription())

    def width(self):
        r"""width(Vehicles_Tracks_BoxLinkDescription self) -> double"""
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_width(self)

    def height(self):
        r"""height(Vehicles_Tracks_BoxLinkDescription self) -> double"""
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_height(self)

    def contact_geometry(self):
        r"""contact_geometry(Vehicles_Tracks_BoxLinkDescription self) -> std::shared_ptr< openplx::Physics3D::Charges::Box >"""
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_contact_geometry(self)

    def variation(self):
        r"""variation(Vehicles_Tracks_BoxLinkDescription self) -> std::shared_ptr< openplx::Vehicles::Tracks::BoxLinkVariation >"""
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_variation(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Vehicles_Tracks_BoxLinkDescription self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Vehicles_Tracks_BoxLinkDescription self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Vehicles_Tracks_BoxLinkDescription self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Vehicles_Tracks_BoxLinkDescription self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Vehicles_Tracks_BoxLinkDescription self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Vehicles_Tracks_BoxLinkDescription self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_triggerOnInit(self, context)
    __swig_destroy__ = _VehiclesSwig.delete_Vehicles_Tracks_BoxLinkDescription

# Register Vehicles_Tracks_BoxLinkDescription in _VehiclesSwig:
_VehiclesSwig.Vehicles_Tracks_BoxLinkDescription_swigregister(Vehicles_Tracks_BoxLinkDescription)

class Vehicles_Tracks_DefaultLinkVariation(openplx.Core.Object):
    r"""Proxy of C++ openplx::Vehicles::Tracks::DefaultLinkVariation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Vehicles_Tracks_DefaultLinkVariation self) -> Vehicles_Tracks_DefaultLinkVariation"""
        _VehiclesSwig.Vehicles_Tracks_DefaultLinkVariation_swiginit(self, _VehiclesSwig.new_Vehicles_Tracks_DefaultLinkVariation())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Vehicles_Tracks_DefaultLinkVariation self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkVariation_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Vehicles_Tracks_DefaultLinkVariation self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkVariation_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Vehicles_Tracks_DefaultLinkVariation self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkVariation_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Vehicles_Tracks_DefaultLinkVariation self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkVariation_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Vehicles_Tracks_DefaultLinkVariation self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkVariation_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Vehicles_Tracks_DefaultLinkVariation self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _VehiclesSwig.Vehicles_Tracks_DefaultLinkVariation_triggerOnInit(self, context)
    __swig_destroy__ = _VehiclesSwig.delete_Vehicles_Tracks_DefaultLinkVariation

# Register Vehicles_Tracks_DefaultLinkVariation in _VehiclesSwig:
_VehiclesSwig.Vehicles_Tracks_DefaultLinkVariation_swigregister(Vehicles_Tracks_DefaultLinkVariation)

class Vehicles_Tracks_BoxLinkVariation(Vehicles_Tracks_DefaultLinkVariation):
    r"""Proxy of C++ openplx::Vehicles::Tracks::BoxLinkVariation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Vehicles_Tracks_BoxLinkVariation self) -> Vehicles_Tracks_BoxLinkVariation"""
        _VehiclesSwig.Vehicles_Tracks_BoxLinkVariation_swiginit(self, _VehiclesSwig.new_Vehicles_Tracks_BoxLinkVariation())

    def height_variation(self):
        r"""height_variation(Vehicles_Tracks_BoxLinkVariation self) -> std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation >"""
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkVariation_height_variation(self)

    def width_variation(self):
        r"""width_variation(Vehicles_Tracks_BoxLinkVariation self) -> std::shared_ptr< openplx::Vehicles::Tracks::CyclicVariation >"""
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkVariation_width_variation(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Vehicles_Tracks_BoxLinkVariation self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkVariation_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Vehicles_Tracks_BoxLinkVariation self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkVariation_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Vehicles_Tracks_BoxLinkVariation self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkVariation_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Vehicles_Tracks_BoxLinkVariation self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkVariation_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Vehicles_Tracks_BoxLinkVariation self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkVariation_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Vehicles_Tracks_BoxLinkVariation self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _VehiclesSwig.Vehicles_Tracks_BoxLinkVariation_triggerOnInit(self, context)
    __swig_destroy__ = _VehiclesSwig.delete_Vehicles_Tracks_BoxLinkVariation

# Register Vehicles_Tracks_BoxLinkVariation in _VehiclesSwig:
_VehiclesSwig.Vehicles_Tracks_BoxLinkVariation_swigregister(Vehicles_Tracks_BoxLinkVariation)

class Vehicles_Tracks_CyclicVariation(openplx.Core.Object):
    r"""Proxy of C++ openplx::Vehicles::Tracks::CyclicVariation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Vehicles_Tracks_CyclicVariation self) -> Vehicles_Tracks_CyclicVariation"""
        _VehiclesSwig.Vehicles_Tracks_CyclicVariation_swiginit(self, _VehiclesSwig.new_Vehicles_Tracks_CyclicVariation())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Vehicles_Tracks_CyclicVariation self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _VehiclesSwig.Vehicles_Tracks_CyclicVariation_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Vehicles_Tracks_CyclicVariation self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CyclicVariation_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Vehicles_Tracks_CyclicVariation self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CyclicVariation_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Vehicles_Tracks_CyclicVariation self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_CyclicVariation_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Vehicles_Tracks_CyclicVariation self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_CyclicVariation_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Vehicles_Tracks_CyclicVariation self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CyclicVariation_triggerOnInit(self, context)
    __swig_destroy__ = _VehiclesSwig.delete_Vehicles_Tracks_CyclicVariation

# Register Vehicles_Tracks_CyclicVariation in _VehiclesSwig:
_VehiclesSwig.Vehicles_Tracks_CyclicVariation_swigregister(Vehicles_Tracks_CyclicVariation)

class Vehicles_Tracks_RoadWheel(openplx.Physics3D.Physics3D_System):
    r"""Proxy of C++ openplx::Vehicles::Tracks::RoadWheel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Vehicles_Tracks_RoadWheel self) -> Vehicles_Tracks_RoadWheel"""
        _VehiclesSwig.Vehicles_Tracks_RoadWheel_swiginit(self, _VehiclesSwig.new_Vehicles_Tracks_RoadWheel())

    def local_center_axis(self):
        r"""local_center_axis(Vehicles_Tracks_RoadWheel self) -> std::shared_ptr< openplx::Math::Vec3 >"""
        return _VehiclesSwig.Vehicles_Tracks_RoadWheel_local_center_axis(self)

    def center_connector(self):
        r"""center_connector(Vehicles_Tracks_RoadWheel self) -> std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector >"""
        return _VehiclesSwig.Vehicles_Tracks_RoadWheel_center_connector(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Vehicles_Tracks_RoadWheel self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _VehiclesSwig.Vehicles_Tracks_RoadWheel_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Vehicles_Tracks_RoadWheel self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RoadWheel_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Vehicles_Tracks_RoadWheel self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RoadWheel_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Vehicles_Tracks_RoadWheel self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_RoadWheel_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Vehicles_Tracks_RoadWheel self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_RoadWheel_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Vehicles_Tracks_RoadWheel self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RoadWheel_triggerOnInit(self, context)
    __swig_destroy__ = _VehiclesSwig.delete_Vehicles_Tracks_RoadWheel

# Register Vehicles_Tracks_RoadWheel in _VehiclesSwig:
_VehiclesSwig.Vehicles_Tracks_RoadWheel_swigregister(Vehicles_Tracks_RoadWheel)

class Vehicles_Tracks_IntertialRoadWheel(Vehicles_Tracks_RoadWheel):
    r"""Proxy of C++ openplx::Vehicles::Tracks::IntertialRoadWheel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Vehicles_Tracks_IntertialRoadWheel self) -> Vehicles_Tracks_IntertialRoadWheel"""
        _VehiclesSwig.Vehicles_Tracks_IntertialRoadWheel_swiginit(self, _VehiclesSwig.new_Vehicles_Tracks_IntertialRoadWheel())

    def body(self):
        r"""body(Vehicles_Tracks_IntertialRoadWheel self) -> std::shared_ptr< openplx::Physics3D::Bodies::Body >"""
        return _VehiclesSwig.Vehicles_Tracks_IntertialRoadWheel_body(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Vehicles_Tracks_IntertialRoadWheel self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _VehiclesSwig.Vehicles_Tracks_IntertialRoadWheel_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Vehicles_Tracks_IntertialRoadWheel self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _VehiclesSwig.Vehicles_Tracks_IntertialRoadWheel_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Vehicles_Tracks_IntertialRoadWheel self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _VehiclesSwig.Vehicles_Tracks_IntertialRoadWheel_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Vehicles_Tracks_IntertialRoadWheel self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_IntertialRoadWheel_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Vehicles_Tracks_IntertialRoadWheel self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_IntertialRoadWheel_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Vehicles_Tracks_IntertialRoadWheel self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _VehiclesSwig.Vehicles_Tracks_IntertialRoadWheel_triggerOnInit(self, context)
    __swig_destroy__ = _VehiclesSwig.delete_Vehicles_Tracks_IntertialRoadWheel

# Register Vehicles_Tracks_IntertialRoadWheel in _VehiclesSwig:
_VehiclesSwig.Vehicles_Tracks_IntertialRoadWheel_swigregister(Vehicles_Tracks_IntertialRoadWheel)

class Vehicles_Tracks_CylindricalRoadWheel(Vehicles_Tracks_IntertialRoadWheel):
    r"""Proxy of C++ openplx::Vehicles::Tracks::CylindricalRoadWheel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Vehicles_Tracks_CylindricalRoadWheel self) -> Vehicles_Tracks_CylindricalRoadWheel"""
        _VehiclesSwig.Vehicles_Tracks_CylindricalRoadWheel_swiginit(self, _VehiclesSwig.new_Vehicles_Tracks_CylindricalRoadWheel())

    def radius(self):
        r"""radius(Vehicles_Tracks_CylindricalRoadWheel self) -> double"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoadWheel_radius(self)

    def width(self):
        r"""width(Vehicles_Tracks_CylindricalRoadWheel self) -> double"""
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoadWheel_width(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Vehicles_Tracks_CylindricalRoadWheel self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoadWheel_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Vehicles_Tracks_CylindricalRoadWheel self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoadWheel_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Vehicles_Tracks_CylindricalRoadWheel self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoadWheel_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Vehicles_Tracks_CylindricalRoadWheel self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoadWheel_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Vehicles_Tracks_CylindricalRoadWheel self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoadWheel_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Vehicles_Tracks_CylindricalRoadWheel self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoadWheel_triggerOnInit(self, context)
    __swig_destroy__ = _VehiclesSwig.delete_Vehicles_Tracks_CylindricalRoadWheel

# Register Vehicles_Tracks_CylindricalRoadWheel in _VehiclesSwig:
_VehiclesSwig.Vehicles_Tracks_CylindricalRoadWheel_swigregister(Vehicles_Tracks_CylindricalRoadWheel)

class Vehicles_Tracks_CylindricalIdler(Vehicles_Tracks_CylindricalRoadWheel):
    r"""Proxy of C++ openplx::Vehicles::Tracks::CylindricalIdler class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Vehicles_Tracks_CylindricalIdler self) -> Vehicles_Tracks_CylindricalIdler"""
        _VehiclesSwig.Vehicles_Tracks_CylindricalIdler_swiginit(self, _VehiclesSwig.new_Vehicles_Tracks_CylindricalIdler())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Vehicles_Tracks_CylindricalIdler self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalIdler_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Vehicles_Tracks_CylindricalIdler self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalIdler_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Vehicles_Tracks_CylindricalIdler self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalIdler_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Vehicles_Tracks_CylindricalIdler self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalIdler_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Vehicles_Tracks_CylindricalIdler self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalIdler_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Vehicles_Tracks_CylindricalIdler self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalIdler_triggerOnInit(self, context)
    __swig_destroy__ = _VehiclesSwig.delete_Vehicles_Tracks_CylindricalIdler

# Register Vehicles_Tracks_CylindricalIdler in _VehiclesSwig:
_VehiclesSwig.Vehicles_Tracks_CylindricalIdler_swigregister(Vehicles_Tracks_CylindricalIdler)

class Vehicles_Tracks_CylindricalRoller(Vehicles_Tracks_CylindricalRoadWheel):
    r"""Proxy of C++ openplx::Vehicles::Tracks::CylindricalRoller class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Vehicles_Tracks_CylindricalRoller self) -> Vehicles_Tracks_CylindricalRoller"""
        _VehiclesSwig.Vehicles_Tracks_CylindricalRoller_swiginit(self, _VehiclesSwig.new_Vehicles_Tracks_CylindricalRoller())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Vehicles_Tracks_CylindricalRoller self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoller_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Vehicles_Tracks_CylindricalRoller self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoller_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Vehicles_Tracks_CylindricalRoller self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoller_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Vehicles_Tracks_CylindricalRoller self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoller_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Vehicles_Tracks_CylindricalRoller self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoller_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Vehicles_Tracks_CylindricalRoller self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalRoller_triggerOnInit(self, context)
    __swig_destroy__ = _VehiclesSwig.delete_Vehicles_Tracks_CylindricalRoller

# Register Vehicles_Tracks_CylindricalRoller in _VehiclesSwig:
_VehiclesSwig.Vehicles_Tracks_CylindricalRoller_swigregister(Vehicles_Tracks_CylindricalRoller)

class Vehicles_Tracks_CylindricalSprocket(Vehicles_Tracks_CylindricalRoadWheel):
    r"""Proxy of C++ openplx::Vehicles::Tracks::CylindricalSprocket class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Vehicles_Tracks_CylindricalSprocket self) -> Vehicles_Tracks_CylindricalSprocket"""
        _VehiclesSwig.Vehicles_Tracks_CylindricalSprocket_swiginit(self, _VehiclesSwig.new_Vehicles_Tracks_CylindricalSprocket())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Vehicles_Tracks_CylindricalSprocket self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalSprocket_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Vehicles_Tracks_CylindricalSprocket self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalSprocket_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Vehicles_Tracks_CylindricalSprocket self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalSprocket_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Vehicles_Tracks_CylindricalSprocket self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalSprocket_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Vehicles_Tracks_CylindricalSprocket self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalSprocket_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Vehicles_Tracks_CylindricalSprocket self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _VehiclesSwig.Vehicles_Tracks_CylindricalSprocket_triggerOnInit(self, context)
    __swig_destroy__ = _VehiclesSwig.delete_Vehicles_Tracks_CylindricalSprocket

# Register Vehicles_Tracks_CylindricalSprocket in _VehiclesSwig:
_VehiclesSwig.Vehicles_Tracks_CylindricalSprocket_swigregister(Vehicles_Tracks_CylindricalSprocket)

class Vehicles_Tracks_DiscretePulseVariation(Vehicles_Tracks_CyclicVariation):
    r"""Proxy of C++ openplx::Vehicles::Tracks::DiscretePulseVariation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Vehicles_Tracks_DiscretePulseVariation self) -> Vehicles_Tracks_DiscretePulseVariation"""
        _VehiclesSwig.Vehicles_Tracks_DiscretePulseVariation_swiginit(self, _VehiclesSwig.new_Vehicles_Tracks_DiscretePulseVariation())

    def additional_amplitude(self):
        r"""additional_amplitude(Vehicles_Tracks_DiscretePulseVariation self) -> double"""
        return _VehiclesSwig.Vehicles_Tracks_DiscretePulseVariation_additional_amplitude(self)

    def discrete_period(self):
        r"""discrete_period(Vehicles_Tracks_DiscretePulseVariation self) -> int64_t"""
        return _VehiclesSwig.Vehicles_Tracks_DiscretePulseVariation_discrete_period(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Vehicles_Tracks_DiscretePulseVariation self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _VehiclesSwig.Vehicles_Tracks_DiscretePulseVariation_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Vehicles_Tracks_DiscretePulseVariation self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _VehiclesSwig.Vehicles_Tracks_DiscretePulseVariation_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Vehicles_Tracks_DiscretePulseVariation self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _VehiclesSwig.Vehicles_Tracks_DiscretePulseVariation_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Vehicles_Tracks_DiscretePulseVariation self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_DiscretePulseVariation_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Vehicles_Tracks_DiscretePulseVariation self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_DiscretePulseVariation_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Vehicles_Tracks_DiscretePulseVariation self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _VehiclesSwig.Vehicles_Tracks_DiscretePulseVariation_triggerOnInit(self, context)
    __swig_destroy__ = _VehiclesSwig.delete_Vehicles_Tracks_DiscretePulseVariation

# Register Vehicles_Tracks_DiscretePulseVariation in _VehiclesSwig:
_VehiclesSwig.Vehicles_Tracks_DiscretePulseVariation_swigregister(Vehicles_Tracks_DiscretePulseVariation)

class Vehicles_Tracks_FixedLinkCountBelt(Vehicles_Tracks_Belt):
    r"""Proxy of C++ openplx::Vehicles::Tracks::FixedLinkCountBelt class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Vehicles_Tracks_FixedLinkCountBelt self) -> Vehicles_Tracks_FixedLinkCountBelt"""
        _VehiclesSwig.Vehicles_Tracks_FixedLinkCountBelt_swiginit(self, _VehiclesSwig.new_Vehicles_Tracks_FixedLinkCountBelt())

    def link_count(self):
        r"""link_count(Vehicles_Tracks_FixedLinkCountBelt self) -> int64_t"""
        return _VehiclesSwig.Vehicles_Tracks_FixedLinkCountBelt_link_count(self)

    def link_description(self):
        r"""link_description(Vehicles_Tracks_FixedLinkCountBelt self) -> std::shared_ptr< openplx::Vehicles::Tracks::ContactGeometryLinkDescription >"""
        return _VehiclesSwig.Vehicles_Tracks_FixedLinkCountBelt_link_description(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Vehicles_Tracks_FixedLinkCountBelt self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _VehiclesSwig.Vehicles_Tracks_FixedLinkCountBelt_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Vehicles_Tracks_FixedLinkCountBelt self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _VehiclesSwig.Vehicles_Tracks_FixedLinkCountBelt_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Vehicles_Tracks_FixedLinkCountBelt self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _VehiclesSwig.Vehicles_Tracks_FixedLinkCountBelt_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Vehicles_Tracks_FixedLinkCountBelt self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_FixedLinkCountBelt_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Vehicles_Tracks_FixedLinkCountBelt self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_FixedLinkCountBelt_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Vehicles_Tracks_FixedLinkCountBelt self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _VehiclesSwig.Vehicles_Tracks_FixedLinkCountBelt_triggerOnInit(self, context)
    __swig_destroy__ = _VehiclesSwig.delete_Vehicles_Tracks_FixedLinkCountBelt

# Register Vehicles_Tracks_FixedLinkCountBelt in _VehiclesSwig:
_VehiclesSwig.Vehicles_Tracks_FixedLinkCountBelt_swigregister(Vehicles_Tracks_FixedLinkCountBelt)

class Vehicles_Tracks_RigidCylindricalIdler(Vehicles_Tracks_CylindricalIdler):
    r"""Proxy of C++ openplx::Vehicles::Tracks::RigidCylindricalIdler class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Vehicles_Tracks_RigidCylindricalIdler self) -> Vehicles_Tracks_RigidCylindricalIdler"""
        _VehiclesSwig.Vehicles_Tracks_RigidCylindricalIdler_swiginit(self, _VehiclesSwig.new_Vehicles_Tracks_RigidCylindricalIdler())

    def body(self):
        r"""body(Vehicles_Tracks_RigidCylindricalIdler self) -> std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody >"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalIdler_body(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Vehicles_Tracks_RigidCylindricalIdler self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalIdler_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Vehicles_Tracks_RigidCylindricalIdler self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalIdler_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Vehicles_Tracks_RigidCylindricalIdler self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalIdler_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Vehicles_Tracks_RigidCylindricalIdler self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalIdler_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Vehicles_Tracks_RigidCylindricalIdler self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalIdler_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Vehicles_Tracks_RigidCylindricalIdler self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalIdler_triggerOnInit(self, context)
    __swig_destroy__ = _VehiclesSwig.delete_Vehicles_Tracks_RigidCylindricalIdler

# Register Vehicles_Tracks_RigidCylindricalIdler in _VehiclesSwig:
_VehiclesSwig.Vehicles_Tracks_RigidCylindricalIdler_swigregister(Vehicles_Tracks_RigidCylindricalIdler)

class Vehicles_Tracks_RigidCylindricalRoadWheelBody(openplx.Physics3D.Physics3D_Bodies_RigidBody):
    r"""Proxy of C++ openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Vehicles_Tracks_RigidCylindricalRoadWheelBody self) -> Vehicles_Tracks_RigidCylindricalRoadWheelBody"""
        _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoadWheelBody_swiginit(self, _VehiclesSwig.new_Vehicles_Tracks_RigidCylindricalRoadWheelBody())

    def geometry(self):
        r"""geometry(Vehicles_Tracks_RigidCylindricalRoadWheelBody self) -> std::shared_ptr< openplx::Physics3D::Charges::Cylinder >"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoadWheelBody_geometry(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Vehicles_Tracks_RigidCylindricalRoadWheelBody self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoadWheelBody_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Vehicles_Tracks_RigidCylindricalRoadWheelBody self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoadWheelBody_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Vehicles_Tracks_RigidCylindricalRoadWheelBody self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoadWheelBody_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Vehicles_Tracks_RigidCylindricalRoadWheelBody self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoadWheelBody_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Vehicles_Tracks_RigidCylindricalRoadWheelBody self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoadWheelBody_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Vehicles_Tracks_RigidCylindricalRoadWheelBody self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoadWheelBody_triggerOnInit(self, context)
    __swig_destroy__ = _VehiclesSwig.delete_Vehicles_Tracks_RigidCylindricalRoadWheelBody

# Register Vehicles_Tracks_RigidCylindricalRoadWheelBody in _VehiclesSwig:
_VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoadWheelBody_swigregister(Vehicles_Tracks_RigidCylindricalRoadWheelBody)

class Vehicles_Tracks_RigidCylindricalRoller(Vehicles_Tracks_CylindricalRoller):
    r"""Proxy of C++ openplx::Vehicles::Tracks::RigidCylindricalRoller class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Vehicles_Tracks_RigidCylindricalRoller self) -> Vehicles_Tracks_RigidCylindricalRoller"""
        _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoller_swiginit(self, _VehiclesSwig.new_Vehicles_Tracks_RigidCylindricalRoller())

    def body(self):
        r"""body(Vehicles_Tracks_RigidCylindricalRoller self) -> std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody >"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoller_body(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Vehicles_Tracks_RigidCylindricalRoller self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoller_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Vehicles_Tracks_RigidCylindricalRoller self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoller_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Vehicles_Tracks_RigidCylindricalRoller self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoller_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Vehicles_Tracks_RigidCylindricalRoller self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoller_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Vehicles_Tracks_RigidCylindricalRoller self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoller_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Vehicles_Tracks_RigidCylindricalRoller self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoller_triggerOnInit(self, context)
    __swig_destroy__ = _VehiclesSwig.delete_Vehicles_Tracks_RigidCylindricalRoller

# Register Vehicles_Tracks_RigidCylindricalRoller in _VehiclesSwig:
_VehiclesSwig.Vehicles_Tracks_RigidCylindricalRoller_swigregister(Vehicles_Tracks_RigidCylindricalRoller)

class Vehicles_Tracks_RigidCylindricalSprocket(Vehicles_Tracks_CylindricalSprocket):
    r"""Proxy of C++ openplx::Vehicles::Tracks::RigidCylindricalSprocket class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Vehicles_Tracks_RigidCylindricalSprocket self) -> Vehicles_Tracks_RigidCylindricalSprocket"""
        _VehiclesSwig.Vehicles_Tracks_RigidCylindricalSprocket_swiginit(self, _VehiclesSwig.new_Vehicles_Tracks_RigidCylindricalSprocket())

    def body(self):
        r"""body(Vehicles_Tracks_RigidCylindricalSprocket self) -> std::shared_ptr< openplx::Vehicles::Tracks::RigidCylindricalRoadWheelBody >"""
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalSprocket_body(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Vehicles_Tracks_RigidCylindricalSprocket self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalSprocket_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Vehicles_Tracks_RigidCylindricalSprocket self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalSprocket_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Vehicles_Tracks_RigidCylindricalSprocket self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalSprocket_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Vehicles_Tracks_RigidCylindricalSprocket self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalSprocket_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Vehicles_Tracks_RigidCylindricalSprocket self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalSprocket_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Vehicles_Tracks_RigidCylindricalSprocket self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _VehiclesSwig.Vehicles_Tracks_RigidCylindricalSprocket_triggerOnInit(self, context)
    __swig_destroy__ = _VehiclesSwig.delete_Vehicles_Tracks_RigidCylindricalSprocket

# Register Vehicles_Tracks_RigidCylindricalSprocket in _VehiclesSwig:
_VehiclesSwig.Vehicles_Tracks_RigidCylindricalSprocket_swigregister(Vehicles_Tracks_RigidCylindricalSprocket)

class Vehicles_Tracks_SinusoidalVariation(Vehicles_Tracks_CyclicVariation):
    r"""Proxy of C++ openplx::Vehicles::Tracks::SinusoidalVariation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Vehicles_Tracks_SinusoidalVariation self) -> Vehicles_Tracks_SinusoidalVariation"""
        _VehiclesSwig.Vehicles_Tracks_SinusoidalVariation_swiginit(self, _VehiclesSwig.new_Vehicles_Tracks_SinusoidalVariation())

    def additional_amplitude(self):
        r"""additional_amplitude(Vehicles_Tracks_SinusoidalVariation self) -> double"""
        return _VehiclesSwig.Vehicles_Tracks_SinusoidalVariation_additional_amplitude(self)

    def period(self):
        r"""period(Vehicles_Tracks_SinusoidalVariation self) -> double"""
        return _VehiclesSwig.Vehicles_Tracks_SinusoidalVariation_period(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Vehicles_Tracks_SinusoidalVariation self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _VehiclesSwig.Vehicles_Tracks_SinusoidalVariation_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Vehicles_Tracks_SinusoidalVariation self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _VehiclesSwig.Vehicles_Tracks_SinusoidalVariation_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Vehicles_Tracks_SinusoidalVariation self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _VehiclesSwig.Vehicles_Tracks_SinusoidalVariation_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Vehicles_Tracks_SinusoidalVariation self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_SinusoidalVariation_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Vehicles_Tracks_SinusoidalVariation self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_SinusoidalVariation_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Vehicles_Tracks_SinusoidalVariation self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _VehiclesSwig.Vehicles_Tracks_SinusoidalVariation_triggerOnInit(self, context)
    __swig_destroy__ = _VehiclesSwig.delete_Vehicles_Tracks_SinusoidalVariation

# Register Vehicles_Tracks_SinusoidalVariation in _VehiclesSwig:
_VehiclesSwig.Vehicles_Tracks_SinusoidalVariation_swigregister(Vehicles_Tracks_SinusoidalVariation)

class Vehicles_Tracks_System(openplx.Physics3D.Physics3D_StructuralPlane):
    r"""Proxy of C++ openplx::Vehicles::Tracks::System class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Vehicles_Tracks_System self) -> Vehicles_Tracks_System"""
        _VehiclesSwig.Vehicles_Tracks_System_swiginit(self, _VehiclesSwig.new_Vehicles_Tracks_System())

    def belt(self):
        r"""belt(Vehicles_Tracks_System self) -> std::shared_ptr< openplx::Vehicles::Tracks::Belt >"""
        return _VehiclesSwig.Vehicles_Tracks_System_belt(self)

    def road_wheels(self):
        r"""road_wheels(Vehicles_Tracks_System self) -> Vehicles_Tracks_RoadWheel_Vector"""
        return _VehiclesSwig.Vehicles_Tracks_System_road_wheels(self)

    def initial_distance_tension(self):
        r"""initial_distance_tension(Vehicles_Tracks_System self) -> double"""
        return _VehiclesSwig.Vehicles_Tracks_System_initial_distance_tension(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Vehicles_Tracks_System self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _VehiclesSwig.Vehicles_Tracks_System_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Vehicles_Tracks_System self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _VehiclesSwig.Vehicles_Tracks_System_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Vehicles_Tracks_System self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _VehiclesSwig.Vehicles_Tracks_System_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Vehicles_Tracks_System self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_System_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Vehicles_Tracks_System self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _VehiclesSwig.Vehicles_Tracks_System_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Vehicles_Tracks_System self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _VehiclesSwig.Vehicles_Tracks_System_triggerOnInit(self, context)
    __swig_destroy__ = _VehiclesSwig.delete_Vehicles_Tracks_System

# Register Vehicles_Tracks_System in _VehiclesSwig:
_VehiclesSwig.Vehicles_Tracks_System_swigregister(Vehicles_Tracks_System)



