# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Physics3DSwig
else:
    import _Physics3DSwig

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SHARED_PTR_DISOWN = _Physics3DSwig.SHARED_PTR_DISOWN

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Physics3DSwig.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _Physics3DSwig.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _Physics3DSwig.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _Physics3DSwig.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _Physics3DSwig.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _Physics3DSwig.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _Physics3DSwig.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _Physics3DSwig.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _Physics3DSwig.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _Physics3DSwig.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _Physics3DSwig.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _Physics3DSwig.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _Physics3DSwig.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _Physics3DSwig.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _Physics3DSwig.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _Physics3DSwig.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _Physics3DSwig.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Physics3DSwig:
_Physics3DSwig.SwigPyIterator_swigregister(SwigPyIterator)

import openplx.Core
import openplx.Math
import openplx.Physics
class Physics3D_Bodies_Body_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Bodies_Body_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Bodies_Body_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Bodies_Body_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::size_type"""
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::difference_type j) -> Physics3D_Bodies_Body_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::difference_type

        __setslice__(Physics3D_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::difference_type j, Physics3D_Bodies_Body_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body >,std::allocator< std::shared_ptr< openplx::Physics3D::Bodies::Body > > > const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::difference_type

        __delitem__(Physics3D_Bodies_Body_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Bodies_Body_Vector self, PySliceObject * slice) -> Physics3D_Bodies_Body_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Bodies_Body_Vector self, PySliceObject * slice, Physics3D_Bodies_Body_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body >,std::allocator< std::shared_ptr< openplx::Physics3D::Bodies::Body > > > const &

        __setitem__(Physics3D_Bodies_Body_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::value_type"""
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Bodies_Body_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::size_type"""
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Bodies_Body_Vector self, Physics3D_Bodies_Body_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > > &

        """
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::iterator"""
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::iterator"""
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Bodies_Body_Vector self)"""
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Bodies_Body_Vector self)"""
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::iterator

        erase(Physics3D_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::iterator

        """
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Bodies_Body_Vector self) -> Physics3D_Bodies_Body_Vector
        __init__(Physics3D_Bodies_Body_Vector self, Physics3D_Bodies_Body_Vector other) -> Physics3D_Bodies_Body_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > > const &

        __init__(Physics3D_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::size_type size) -> Physics3D_Bodies_Body_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::size_type

        __init__(Physics3D_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::value_type const & value) -> Physics3D_Bodies_Body_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Bodies_Body_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Bodies_Body_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::size_type

        resize(Physics3D_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::value_type const &

        insert(Physics3D_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::size_type

        """
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Body > >::size_type"""
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Bodies_Body_Vector

# Register Physics3D_Bodies_Body_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Bodies_Body_Vector_swigregister(Physics3D_Bodies_Body_Vector)

class Physics3D_Bodies_Inertia_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Bodies_Inertia_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Bodies_Inertia_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Bodies_Inertia_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::size_type"""
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::difference_type j) -> Physics3D_Bodies_Inertia_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::difference_type

        __setslice__(Physics3D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::difference_type j, Physics3D_Bodies_Inertia_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia >,std::allocator< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > > > const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::difference_type

        __delitem__(Physics3D_Bodies_Inertia_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Bodies_Inertia_Vector self, PySliceObject * slice) -> Physics3D_Bodies_Inertia_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Bodies_Inertia_Vector self, PySliceObject * slice, Physics3D_Bodies_Inertia_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia >,std::allocator< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > > > const &

        __setitem__(Physics3D_Bodies_Inertia_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::value_type"""
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Bodies_Inertia_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::size_type"""
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Bodies_Inertia_Vector self, Physics3D_Bodies_Inertia_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > > &

        """
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::iterator"""
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::iterator"""
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Bodies_Inertia_Vector self)"""
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Bodies_Inertia_Vector self)"""
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::iterator

        erase(Physics3D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::iterator

        """
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Bodies_Inertia_Vector self) -> Physics3D_Bodies_Inertia_Vector
        __init__(Physics3D_Bodies_Inertia_Vector self, Physics3D_Bodies_Inertia_Vector other) -> Physics3D_Bodies_Inertia_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > > const &

        __init__(Physics3D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::size_type size) -> Physics3D_Bodies_Inertia_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::size_type

        __init__(Physics3D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::value_type const & value) -> Physics3D_Bodies_Inertia_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Bodies_Inertia_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::size_type

        resize(Physics3D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::value_type const &

        insert(Physics3D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::size_type

        """
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Inertia > >::size_type"""
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Bodies_Inertia_Vector

# Register Physics3D_Bodies_Inertia_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Bodies_Inertia_Vector_swigregister(Physics3D_Bodies_Inertia_Vector)

class Physics3D_Bodies_Kinematics_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Bodies_Kinematics_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Bodies_Kinematics_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Bodies_Kinematics_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::size_type"""
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::difference_type j) -> Physics3D_Bodies_Kinematics_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::difference_type

        __setslice__(Physics3D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::difference_type j, Physics3D_Bodies_Kinematics_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics >,std::allocator< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > > > const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::difference_type

        __delitem__(Physics3D_Bodies_Kinematics_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Bodies_Kinematics_Vector self, PySliceObject * slice) -> Physics3D_Bodies_Kinematics_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Bodies_Kinematics_Vector self, PySliceObject * slice, Physics3D_Bodies_Kinematics_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics >,std::allocator< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > > > const &

        __setitem__(Physics3D_Bodies_Kinematics_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::value_type"""
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Bodies_Kinematics_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::size_type"""
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Bodies_Kinematics_Vector self, Physics3D_Bodies_Kinematics_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > > &

        """
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::iterator"""
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::iterator"""
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Bodies_Kinematics_Vector self)"""
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Bodies_Kinematics_Vector self)"""
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::iterator

        erase(Physics3D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::iterator

        """
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Bodies_Kinematics_Vector self) -> Physics3D_Bodies_Kinematics_Vector
        __init__(Physics3D_Bodies_Kinematics_Vector self, Physics3D_Bodies_Kinematics_Vector other) -> Physics3D_Bodies_Kinematics_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > > const &

        __init__(Physics3D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::size_type size) -> Physics3D_Bodies_Kinematics_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::size_type

        __init__(Physics3D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::value_type const & value) -> Physics3D_Bodies_Kinematics_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Bodies_Kinematics_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::size_type

        resize(Physics3D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::value_type const &

        insert(Physics3D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::size_type

        """
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::Kinematics > >::size_type"""
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Bodies_Kinematics_Vector

# Register Physics3D_Bodies_Kinematics_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_swigregister(Physics3D_Bodies_Kinematics_Vector)

class Physics3D_Bodies_RigidBody_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Bodies_RigidBody_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Bodies_RigidBody_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Bodies_RigidBody_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Bodies_RigidBody_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::size_type"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Bodies_RigidBody_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::difference_type j) -> Physics3D_Bodies_RigidBody_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Bodies_RigidBody_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::difference_type

        __setslice__(Physics3D_Bodies_RigidBody_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::difference_type j, Physics3D_Bodies_RigidBody_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody >,std::allocator< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > > > const &

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Bodies_RigidBody_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Bodies_RigidBody_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::difference_type

        __delitem__(Physics3D_Bodies_RigidBody_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Bodies_RigidBody_Vector self, PySliceObject * slice) -> Physics3D_Bodies_RigidBody_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Bodies_RigidBody_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Bodies_RigidBody_Vector self, PySliceObject * slice, Physics3D_Bodies_RigidBody_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody >,std::allocator< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > > > const &

        __setitem__(Physics3D_Bodies_RigidBody_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Bodies_RigidBody_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Bodies_RigidBody_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::value_type"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Bodies_RigidBody_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Bodies_RigidBody_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Bodies_RigidBody_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::size_type"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Bodies_RigidBody_Vector self, Physics3D_Bodies_RigidBody_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > > &

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Bodies_RigidBody_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::iterator"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Bodies_RigidBody_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::iterator"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Bodies_RigidBody_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Bodies_RigidBody_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Bodies_RigidBody_Vector self)"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Bodies_RigidBody_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Bodies_RigidBody_Vector self)"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Bodies_RigidBody_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::iterator

        erase(Physics3D_Bodies_RigidBody_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::iterator

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Bodies_RigidBody_Vector self) -> Physics3D_Bodies_RigidBody_Vector
        __init__(Physics3D_Bodies_RigidBody_Vector self, Physics3D_Bodies_RigidBody_Vector other) -> Physics3D_Bodies_RigidBody_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > > const &

        __init__(Physics3D_Bodies_RigidBody_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::size_type size) -> Physics3D_Bodies_RigidBody_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::size_type

        __init__(Physics3D_Bodies_RigidBody_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::value_type const & value) -> Physics3D_Bodies_RigidBody_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Bodies_RigidBody_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Bodies_RigidBody_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Bodies_RigidBody_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Bodies_RigidBody_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Bodies_RigidBody_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Bodies_RigidBody_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::size_type

        resize(Physics3D_Bodies_RigidBody_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Bodies_RigidBody_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::value_type const &

        insert(Physics3D_Bodies_RigidBody_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Bodies_RigidBody_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::size_type

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Bodies_RigidBody_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > >::size_type"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Bodies_RigidBody_Vector

# Register Physics3D_Bodies_RigidBody_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_swigregister(Physics3D_Bodies_RigidBody_Vector)

class Physics3D_Bodies_RigidBodyKinematics_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Bodies_RigidBodyKinematics_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Bodies_RigidBodyKinematics_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Bodies_RigidBodyKinematics_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Bodies_RigidBodyKinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::size_type"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Bodies_RigidBodyKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::difference_type j) -> Physics3D_Bodies_RigidBodyKinematics_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Bodies_RigidBodyKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::difference_type

        __setslice__(Physics3D_Bodies_RigidBodyKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::difference_type j, Physics3D_Bodies_RigidBodyKinematics_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics >,std::allocator< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > > > const &

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Bodies_RigidBodyKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Bodies_RigidBodyKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::difference_type

        __delitem__(Physics3D_Bodies_RigidBodyKinematics_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Bodies_RigidBodyKinematics_Vector self, PySliceObject * slice) -> Physics3D_Bodies_RigidBodyKinematics_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Bodies_RigidBodyKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Bodies_RigidBodyKinematics_Vector self, PySliceObject * slice, Physics3D_Bodies_RigidBodyKinematics_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics >,std::allocator< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > > > const &

        __setitem__(Physics3D_Bodies_RigidBodyKinematics_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Bodies_RigidBodyKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Bodies_RigidBodyKinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::value_type"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Bodies_RigidBodyKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Bodies_RigidBodyKinematics_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Bodies_RigidBodyKinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::size_type"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Bodies_RigidBodyKinematics_Vector self, Physics3D_Bodies_RigidBodyKinematics_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > > &

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Bodies_RigidBodyKinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::iterator"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Bodies_RigidBodyKinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::iterator"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Bodies_RigidBodyKinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Bodies_RigidBodyKinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Bodies_RigidBodyKinematics_Vector self)"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Bodies_RigidBodyKinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Bodies_RigidBodyKinematics_Vector self)"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Bodies_RigidBodyKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::iterator

        erase(Physics3D_Bodies_RigidBodyKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::iterator

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Bodies_RigidBodyKinematics_Vector self) -> Physics3D_Bodies_RigidBodyKinematics_Vector
        __init__(Physics3D_Bodies_RigidBodyKinematics_Vector self, Physics3D_Bodies_RigidBodyKinematics_Vector other) -> Physics3D_Bodies_RigidBodyKinematics_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > > const &

        __init__(Physics3D_Bodies_RigidBodyKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::size_type size) -> Physics3D_Bodies_RigidBodyKinematics_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::size_type

        __init__(Physics3D_Bodies_RigidBodyKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::value_type const & value) -> Physics3D_Bodies_RigidBodyKinematics_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Bodies_RigidBodyKinematics_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Bodies_RigidBodyKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Bodies_RigidBodyKinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Bodies_RigidBodyKinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Bodies_RigidBodyKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Bodies_RigidBodyKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::size_type

        resize(Physics3D_Bodies_RigidBodyKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Bodies_RigidBodyKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::value_type const &

        insert(Physics3D_Bodies_RigidBodyKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Bodies_RigidBodyKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::size_type

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Bodies_RigidBodyKinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics > >::size_type"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Bodies_RigidBodyKinematics_Vector

# Register Physics3D_Bodies_RigidBodyKinematics_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_swigregister(Physics3D_Bodies_RigidBodyKinematics_Vector)

class Physics3D_Charges_AdaptiveMateConnector_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Charges_AdaptiveMateConnector_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Charges_AdaptiveMateConnector_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Charges_AdaptiveMateConnector_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_AdaptiveMateConnector_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Charges_AdaptiveMateConnector_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_AdaptiveMateConnector_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Charges_AdaptiveMateConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_AdaptiveMateConnector_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Charges_AdaptiveMateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::difference_type j) -> Physics3D_Charges_AdaptiveMateConnector_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_AdaptiveMateConnector_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Charges_AdaptiveMateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::difference_type

        __setslice__(Physics3D_Charges_AdaptiveMateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::difference_type j, Physics3D_Charges_AdaptiveMateConnector_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector >,std::allocator< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > > > const &

        """
        return _Physics3DSwig.Physics3D_Charges_AdaptiveMateConnector_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Charges_AdaptiveMateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_AdaptiveMateConnector_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Charges_AdaptiveMateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::difference_type

        __delitem__(Physics3D_Charges_AdaptiveMateConnector_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Charges_AdaptiveMateConnector_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Charges_AdaptiveMateConnector_Vector self, PySliceObject * slice) -> Physics3D_Charges_AdaptiveMateConnector_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Charges_AdaptiveMateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_AdaptiveMateConnector_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Charges_AdaptiveMateConnector_Vector self, PySliceObject * slice, Physics3D_Charges_AdaptiveMateConnector_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector >,std::allocator< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > > > const &

        __setitem__(Physics3D_Charges_AdaptiveMateConnector_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Charges_AdaptiveMateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_AdaptiveMateConnector_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Charges_AdaptiveMateConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::value_type"""
        return _Physics3DSwig.Physics3D_Charges_AdaptiveMateConnector_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Charges_AdaptiveMateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_AdaptiveMateConnector_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Charges_AdaptiveMateConnector_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_AdaptiveMateConnector_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Charges_AdaptiveMateConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_AdaptiveMateConnector_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Charges_AdaptiveMateConnector_Vector self, Physics3D_Charges_AdaptiveMateConnector_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > > &

        """
        return _Physics3DSwig.Physics3D_Charges_AdaptiveMateConnector_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Charges_AdaptiveMateConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_AdaptiveMateConnector_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Charges_AdaptiveMateConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_AdaptiveMateConnector_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Charges_AdaptiveMateConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_AdaptiveMateConnector_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Charges_AdaptiveMateConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_AdaptiveMateConnector_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Charges_AdaptiveMateConnector_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_AdaptiveMateConnector_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Charges_AdaptiveMateConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Charges_AdaptiveMateConnector_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Charges_AdaptiveMateConnector_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_AdaptiveMateConnector_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Charges_AdaptiveMateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::iterator

        erase(Physics3D_Charges_AdaptiveMateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::iterator

        """
        return _Physics3DSwig.Physics3D_Charges_AdaptiveMateConnector_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Charges_AdaptiveMateConnector_Vector self) -> Physics3D_Charges_AdaptiveMateConnector_Vector
        __init__(Physics3D_Charges_AdaptiveMateConnector_Vector self, Physics3D_Charges_AdaptiveMateConnector_Vector other) -> Physics3D_Charges_AdaptiveMateConnector_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > > const &

        __init__(Physics3D_Charges_AdaptiveMateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::size_type size) -> Physics3D_Charges_AdaptiveMateConnector_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::size_type

        __init__(Physics3D_Charges_AdaptiveMateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::value_type const & value) -> Physics3D_Charges_AdaptiveMateConnector_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Charges_AdaptiveMateConnector_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Charges_AdaptiveMateConnector_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Charges_AdaptiveMateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_AdaptiveMateConnector_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Charges_AdaptiveMateConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_AdaptiveMateConnector_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Charges_AdaptiveMateConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_AdaptiveMateConnector_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Charges_AdaptiveMateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_AdaptiveMateConnector_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Charges_AdaptiveMateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::size_type

        resize(Physics3D_Charges_AdaptiveMateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_AdaptiveMateConnector_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Charges_AdaptiveMateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::value_type const &

        insert(Physics3D_Charges_AdaptiveMateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_AdaptiveMateConnector_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Charges_AdaptiveMateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::size_type

        """
        return _Physics3DSwig.Physics3D_Charges_AdaptiveMateConnector_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Charges_AdaptiveMateConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::AdaptiveMateConnector > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_AdaptiveMateConnector_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Charges_AdaptiveMateConnector_Vector

# Register Physics3D_Charges_AdaptiveMateConnector_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Charges_AdaptiveMateConnector_Vector_swigregister(Physics3D_Charges_AdaptiveMateConnector_Vector)

class Physics3D_Charges_Box_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Charges_Box_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Charges_Box_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Charges_Box_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_Box_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Charges_Box_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_Box_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Charges_Box_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_Box_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Charges_Box_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::difference_type j) -> Physics3D_Charges_Box_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_Box_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Charges_Box_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::difference_type

        __setslice__(Physics3D_Charges_Box_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::difference_type j, Physics3D_Charges_Box_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box >,std::allocator< std::shared_ptr< openplx::Physics3D::Charges::Box > > > const &

        """
        return _Physics3DSwig.Physics3D_Charges_Box_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Charges_Box_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_Box_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Charges_Box_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::difference_type

        __delitem__(Physics3D_Charges_Box_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Charges_Box_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Charges_Box_Vector self, PySliceObject * slice) -> Physics3D_Charges_Box_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Charges_Box_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_Box_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Charges_Box_Vector self, PySliceObject * slice, Physics3D_Charges_Box_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box >,std::allocator< std::shared_ptr< openplx::Physics3D::Charges::Box > > > const &

        __setitem__(Physics3D_Charges_Box_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Charges_Box_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Box_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Charges_Box_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::value_type"""
        return _Physics3DSwig.Physics3D_Charges_Box_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Charges_Box_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Box_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Charges_Box_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_Box_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Charges_Box_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_Box_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Charges_Box_Vector self, Physics3D_Charges_Box_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > > &

        """
        return _Physics3DSwig.Physics3D_Charges_Box_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Charges_Box_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_Box_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Charges_Box_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_Box_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Charges_Box_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_Box_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Charges_Box_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_Box_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Charges_Box_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_Box_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Charges_Box_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Charges_Box_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Charges_Box_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_Box_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Charges_Box_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::iterator

        erase(Physics3D_Charges_Box_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::iterator

        """
        return _Physics3DSwig.Physics3D_Charges_Box_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Charges_Box_Vector self) -> Physics3D_Charges_Box_Vector
        __init__(Physics3D_Charges_Box_Vector self, Physics3D_Charges_Box_Vector other) -> Physics3D_Charges_Box_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > > const &

        __init__(Physics3D_Charges_Box_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::size_type size) -> Physics3D_Charges_Box_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::size_type

        __init__(Physics3D_Charges_Box_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::value_type const & value) -> Physics3D_Charges_Box_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Charges_Box_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Charges_Box_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Charges_Box_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Box_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Charges_Box_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_Box_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Charges_Box_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_Box_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Charges_Box_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Box_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Charges_Box_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::size_type

        resize(Physics3D_Charges_Box_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Box_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Charges_Box_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::value_type const &

        insert(Physics3D_Charges_Box_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Box_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Charges_Box_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::size_type

        """
        return _Physics3DSwig.Physics3D_Charges_Box_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Charges_Box_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Box > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_Box_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Charges_Box_Vector

# Register Physics3D_Charges_Box_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Charges_Box_Vector_swigregister(Physics3D_Charges_Box_Vector)

class Physics3D_Charges_Capsule_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Charges_Capsule_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Charges_Capsule_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Charges_Capsule_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Charges_Capsule_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Charges_Capsule_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::difference_type j) -> Physics3D_Charges_Capsule_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Charges_Capsule_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::difference_type

        __setslice__(Physics3D_Charges_Capsule_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::difference_type j, Physics3D_Charges_Capsule_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule >,std::allocator< std::shared_ptr< openplx::Physics3D::Charges::Capsule > > > const &

        """
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Charges_Capsule_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Charges_Capsule_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::difference_type

        __delitem__(Physics3D_Charges_Capsule_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Charges_Capsule_Vector self, PySliceObject * slice) -> Physics3D_Charges_Capsule_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Charges_Capsule_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Charges_Capsule_Vector self, PySliceObject * slice, Physics3D_Charges_Capsule_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule >,std::allocator< std::shared_ptr< openplx::Physics3D::Charges::Capsule > > > const &

        __setitem__(Physics3D_Charges_Capsule_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Charges_Capsule_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Charges_Capsule_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::value_type"""
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Charges_Capsule_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Charges_Capsule_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Charges_Capsule_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Charges_Capsule_Vector self, Physics3D_Charges_Capsule_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > > &

        """
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Charges_Capsule_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Charges_Capsule_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Charges_Capsule_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Charges_Capsule_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Charges_Capsule_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Charges_Capsule_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Charges_Capsule_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Charges_Capsule_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::iterator

        erase(Physics3D_Charges_Capsule_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::iterator

        """
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Charges_Capsule_Vector self) -> Physics3D_Charges_Capsule_Vector
        __init__(Physics3D_Charges_Capsule_Vector self, Physics3D_Charges_Capsule_Vector other) -> Physics3D_Charges_Capsule_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > > const &

        __init__(Physics3D_Charges_Capsule_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::size_type size) -> Physics3D_Charges_Capsule_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::size_type

        __init__(Physics3D_Charges_Capsule_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::value_type const & value) -> Physics3D_Charges_Capsule_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Charges_Capsule_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Charges_Capsule_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Charges_Capsule_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Charges_Capsule_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Charges_Capsule_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Charges_Capsule_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Charges_Capsule_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::size_type

        resize(Physics3D_Charges_Capsule_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Charges_Capsule_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::value_type const &

        insert(Physics3D_Charges_Capsule_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Charges_Capsule_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::size_type

        """
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Charges_Capsule_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Capsule > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Charges_Capsule_Vector

# Register Physics3D_Charges_Capsule_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Charges_Capsule_Vector_swigregister(Physics3D_Charges_Capsule_Vector)

class Physics3D_Charges_ContactGeometry_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Charges_ContactGeometry_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Charges_ContactGeometry_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Charges_ContactGeometry_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Charges_ContactGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::difference_type j) -> Physics3D_Charges_ContactGeometry_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::difference_type

        __setslice__(Physics3D_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::difference_type j, Physics3D_Charges_ContactGeometry_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry >,std::allocator< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > > > const &

        """
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::difference_type

        __delitem__(Physics3D_Charges_ContactGeometry_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Charges_ContactGeometry_Vector self, PySliceObject * slice) -> Physics3D_Charges_ContactGeometry_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Charges_ContactGeometry_Vector self, PySliceObject * slice, Physics3D_Charges_ContactGeometry_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry >,std::allocator< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > > > const &

        __setitem__(Physics3D_Charges_ContactGeometry_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Charges_ContactGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::value_type"""
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Charges_ContactGeometry_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Charges_ContactGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Charges_ContactGeometry_Vector self, Physics3D_Charges_ContactGeometry_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > > &

        """
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Charges_ContactGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Charges_ContactGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Charges_ContactGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Charges_ContactGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Charges_ContactGeometry_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Charges_ContactGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Charges_ContactGeometry_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::iterator

        erase(Physics3D_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::iterator

        """
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Charges_ContactGeometry_Vector self) -> Physics3D_Charges_ContactGeometry_Vector
        __init__(Physics3D_Charges_ContactGeometry_Vector self, Physics3D_Charges_ContactGeometry_Vector other) -> Physics3D_Charges_ContactGeometry_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > > const &

        __init__(Physics3D_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::size_type size) -> Physics3D_Charges_ContactGeometry_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::size_type

        __init__(Physics3D_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::value_type const & value) -> Physics3D_Charges_ContactGeometry_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Charges_ContactGeometry_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Charges_ContactGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Charges_ContactGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::size_type

        resize(Physics3D_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::value_type const &

        insert(Physics3D_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::size_type

        """
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Charges_ContactGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ContactGeometry > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Charges_ContactGeometry_Vector

# Register Physics3D_Charges_ContactGeometry_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_swigregister(Physics3D_Charges_ContactGeometry_Vector)

class Physics3D_Charges_ConvexMesh_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Charges_ConvexMesh_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Charges_ConvexMesh_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Charges_ConvexMesh_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Charges_ConvexMesh_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Charges_ConvexMesh_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::difference_type j) -> Physics3D_Charges_ConvexMesh_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Charges_ConvexMesh_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::difference_type

        __setslice__(Physics3D_Charges_ConvexMesh_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::difference_type j, Physics3D_Charges_ConvexMesh_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh >,std::allocator< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > > > const &

        """
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Charges_ConvexMesh_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Charges_ConvexMesh_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::difference_type

        __delitem__(Physics3D_Charges_ConvexMesh_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Charges_ConvexMesh_Vector self, PySliceObject * slice) -> Physics3D_Charges_ConvexMesh_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Charges_ConvexMesh_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Charges_ConvexMesh_Vector self, PySliceObject * slice, Physics3D_Charges_ConvexMesh_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh >,std::allocator< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > > > const &

        __setitem__(Physics3D_Charges_ConvexMesh_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Charges_ConvexMesh_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Charges_ConvexMesh_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::value_type"""
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Charges_ConvexMesh_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Charges_ConvexMesh_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Charges_ConvexMesh_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Charges_ConvexMesh_Vector self, Physics3D_Charges_ConvexMesh_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > > &

        """
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Charges_ConvexMesh_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Charges_ConvexMesh_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Charges_ConvexMesh_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Charges_ConvexMesh_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Charges_ConvexMesh_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Charges_ConvexMesh_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Charges_ConvexMesh_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Charges_ConvexMesh_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::iterator

        erase(Physics3D_Charges_ConvexMesh_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::iterator

        """
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Charges_ConvexMesh_Vector self) -> Physics3D_Charges_ConvexMesh_Vector
        __init__(Physics3D_Charges_ConvexMesh_Vector self, Physics3D_Charges_ConvexMesh_Vector other) -> Physics3D_Charges_ConvexMesh_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > > const &

        __init__(Physics3D_Charges_ConvexMesh_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::size_type size) -> Physics3D_Charges_ConvexMesh_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::size_type

        __init__(Physics3D_Charges_ConvexMesh_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::value_type const & value) -> Physics3D_Charges_ConvexMesh_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Charges_ConvexMesh_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Charges_ConvexMesh_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Charges_ConvexMesh_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Charges_ConvexMesh_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Charges_ConvexMesh_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Charges_ConvexMesh_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::size_type

        resize(Physics3D_Charges_ConvexMesh_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Charges_ConvexMesh_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::value_type const &

        insert(Physics3D_Charges_ConvexMesh_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Charges_ConvexMesh_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::size_type

        """
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Charges_ConvexMesh_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ConvexMesh > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Charges_ConvexMesh_Vector

# Register Physics3D_Charges_ConvexMesh_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_swigregister(Physics3D_Charges_ConvexMesh_Vector)

class Physics3D_Charges_Cylinder_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Charges_Cylinder_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Charges_Cylinder_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Charges_Cylinder_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Charges_Cylinder_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Charges_Cylinder_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::difference_type j) -> Physics3D_Charges_Cylinder_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Charges_Cylinder_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::difference_type

        __setslice__(Physics3D_Charges_Cylinder_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::difference_type j, Physics3D_Charges_Cylinder_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder >,std::allocator< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > > > const &

        """
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Charges_Cylinder_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Charges_Cylinder_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::difference_type

        __delitem__(Physics3D_Charges_Cylinder_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Charges_Cylinder_Vector self, PySliceObject * slice) -> Physics3D_Charges_Cylinder_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Charges_Cylinder_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Charges_Cylinder_Vector self, PySliceObject * slice, Physics3D_Charges_Cylinder_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder >,std::allocator< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > > > const &

        __setitem__(Physics3D_Charges_Cylinder_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Charges_Cylinder_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Charges_Cylinder_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::value_type"""
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Charges_Cylinder_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Charges_Cylinder_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Charges_Cylinder_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Charges_Cylinder_Vector self, Physics3D_Charges_Cylinder_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > > &

        """
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Charges_Cylinder_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Charges_Cylinder_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Charges_Cylinder_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Charges_Cylinder_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Charges_Cylinder_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Charges_Cylinder_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Charges_Cylinder_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Charges_Cylinder_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::iterator

        erase(Physics3D_Charges_Cylinder_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::iterator

        """
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Charges_Cylinder_Vector self) -> Physics3D_Charges_Cylinder_Vector
        __init__(Physics3D_Charges_Cylinder_Vector self, Physics3D_Charges_Cylinder_Vector other) -> Physics3D_Charges_Cylinder_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > > const &

        __init__(Physics3D_Charges_Cylinder_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::size_type size) -> Physics3D_Charges_Cylinder_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::size_type

        __init__(Physics3D_Charges_Cylinder_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::value_type const & value) -> Physics3D_Charges_Cylinder_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Charges_Cylinder_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Charges_Cylinder_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Charges_Cylinder_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Charges_Cylinder_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Charges_Cylinder_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Charges_Cylinder_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::size_type

        resize(Physics3D_Charges_Cylinder_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Charges_Cylinder_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::value_type const &

        insert(Physics3D_Charges_Cylinder_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Charges_Cylinder_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::size_type

        """
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Charges_Cylinder_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Cylinder > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Charges_Cylinder_Vector

# Register Physics3D_Charges_Cylinder_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Charges_Cylinder_Vector_swigregister(Physics3D_Charges_Cylinder_Vector)

class Physics3D_Charges_ExternalTriMeshGeometry_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Charges_ExternalTriMeshGeometry_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Charges_ExternalTriMeshGeometry_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Charges_ExternalTriMeshGeometry_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_ExternalTriMeshGeometry_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Charges_ExternalTriMeshGeometry_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_ExternalTriMeshGeometry_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Charges_ExternalTriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_ExternalTriMeshGeometry_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Charges_ExternalTriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::difference_type j) -> Physics3D_Charges_ExternalTriMeshGeometry_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_ExternalTriMeshGeometry_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Charges_ExternalTriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::difference_type

        __setslice__(Physics3D_Charges_ExternalTriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::difference_type j, Physics3D_Charges_ExternalTriMeshGeometry_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry >,std::allocator< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > > > const &

        """
        return _Physics3DSwig.Physics3D_Charges_ExternalTriMeshGeometry_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Charges_ExternalTriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_ExternalTriMeshGeometry_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Charges_ExternalTriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::difference_type

        __delitem__(Physics3D_Charges_ExternalTriMeshGeometry_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Charges_ExternalTriMeshGeometry_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Charges_ExternalTriMeshGeometry_Vector self, PySliceObject * slice) -> Physics3D_Charges_ExternalTriMeshGeometry_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Charges_ExternalTriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_ExternalTriMeshGeometry_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Charges_ExternalTriMeshGeometry_Vector self, PySliceObject * slice, Physics3D_Charges_ExternalTriMeshGeometry_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry >,std::allocator< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > > > const &

        __setitem__(Physics3D_Charges_ExternalTriMeshGeometry_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Charges_ExternalTriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_ExternalTriMeshGeometry_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Charges_ExternalTriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::value_type"""
        return _Physics3DSwig.Physics3D_Charges_ExternalTriMeshGeometry_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Charges_ExternalTriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_ExternalTriMeshGeometry_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Charges_ExternalTriMeshGeometry_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_ExternalTriMeshGeometry_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Charges_ExternalTriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_ExternalTriMeshGeometry_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Charges_ExternalTriMeshGeometry_Vector self, Physics3D_Charges_ExternalTriMeshGeometry_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > > &

        """
        return _Physics3DSwig.Physics3D_Charges_ExternalTriMeshGeometry_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Charges_ExternalTriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_ExternalTriMeshGeometry_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Charges_ExternalTriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_ExternalTriMeshGeometry_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Charges_ExternalTriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_ExternalTriMeshGeometry_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Charges_ExternalTriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_ExternalTriMeshGeometry_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Charges_ExternalTriMeshGeometry_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_ExternalTriMeshGeometry_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Charges_ExternalTriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Charges_ExternalTriMeshGeometry_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Charges_ExternalTriMeshGeometry_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_ExternalTriMeshGeometry_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Charges_ExternalTriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::iterator

        erase(Physics3D_Charges_ExternalTriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::iterator

        """
        return _Physics3DSwig.Physics3D_Charges_ExternalTriMeshGeometry_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Charges_ExternalTriMeshGeometry_Vector self) -> Physics3D_Charges_ExternalTriMeshGeometry_Vector
        __init__(Physics3D_Charges_ExternalTriMeshGeometry_Vector self, Physics3D_Charges_ExternalTriMeshGeometry_Vector other) -> Physics3D_Charges_ExternalTriMeshGeometry_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > > const &

        __init__(Physics3D_Charges_ExternalTriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::size_type size) -> Physics3D_Charges_ExternalTriMeshGeometry_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::size_type

        __init__(Physics3D_Charges_ExternalTriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::value_type const & value) -> Physics3D_Charges_ExternalTriMeshGeometry_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Charges_ExternalTriMeshGeometry_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Charges_ExternalTriMeshGeometry_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Charges_ExternalTriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_ExternalTriMeshGeometry_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Charges_ExternalTriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_ExternalTriMeshGeometry_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Charges_ExternalTriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_ExternalTriMeshGeometry_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Charges_ExternalTriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_ExternalTriMeshGeometry_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Charges_ExternalTriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::size_type

        resize(Physics3D_Charges_ExternalTriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_ExternalTriMeshGeometry_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Charges_ExternalTriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::value_type const &

        insert(Physics3D_Charges_ExternalTriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_ExternalTriMeshGeometry_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Charges_ExternalTriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::size_type

        """
        return _Physics3DSwig.Physics3D_Charges_ExternalTriMeshGeometry_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Charges_ExternalTriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::ExternalTriMeshGeometry > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_ExternalTriMeshGeometry_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Charges_ExternalTriMeshGeometry_Vector

# Register Physics3D_Charges_ExternalTriMeshGeometry_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Charges_ExternalTriMeshGeometry_Vector_swigregister(Physics3D_Charges_ExternalTriMeshGeometry_Vector)

class Physics3D_Charges_MateConnector_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Charges_MateConnector_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Charges_MateConnector_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Charges_MateConnector_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Charges_MateConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::difference_type j) -> Physics3D_Charges_MateConnector_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::difference_type

        __setslice__(Physics3D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::difference_type j, Physics3D_Charges_MateConnector_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector >,std::allocator< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > > > const &

        """
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::difference_type

        __delitem__(Physics3D_Charges_MateConnector_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Charges_MateConnector_Vector self, PySliceObject * slice) -> Physics3D_Charges_MateConnector_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Charges_MateConnector_Vector self, PySliceObject * slice, Physics3D_Charges_MateConnector_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector >,std::allocator< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > > > const &

        __setitem__(Physics3D_Charges_MateConnector_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Charges_MateConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::value_type"""
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Charges_MateConnector_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Charges_MateConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Charges_MateConnector_Vector self, Physics3D_Charges_MateConnector_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > > &

        """
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Charges_MateConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Charges_MateConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Charges_MateConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Charges_MateConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Charges_MateConnector_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Charges_MateConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Charges_MateConnector_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::iterator

        erase(Physics3D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::iterator

        """
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Charges_MateConnector_Vector self) -> Physics3D_Charges_MateConnector_Vector
        __init__(Physics3D_Charges_MateConnector_Vector self, Physics3D_Charges_MateConnector_Vector other) -> Physics3D_Charges_MateConnector_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > > const &

        __init__(Physics3D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::size_type size) -> Physics3D_Charges_MateConnector_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::size_type

        __init__(Physics3D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::value_type const & value) -> Physics3D_Charges_MateConnector_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Charges_MateConnector_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Charges_MateConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Charges_MateConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::size_type

        resize(Physics3D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::value_type const &

        insert(Physics3D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::size_type

        """
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Charges_MateConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::MateConnector > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Charges_MateConnector_Vector

# Register Physics3D_Charges_MateConnector_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Charges_MateConnector_Vector_swigregister(Physics3D_Charges_MateConnector_Vector)

class Physics3D_Charges_RedirectedMateConnector_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Charges_RedirectedMateConnector_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Charges_RedirectedMateConnector_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Charges_RedirectedMateConnector_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_RedirectedMateConnector_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Charges_RedirectedMateConnector_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_RedirectedMateConnector_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Charges_RedirectedMateConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_RedirectedMateConnector_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Charges_RedirectedMateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::difference_type j) -> Physics3D_Charges_RedirectedMateConnector_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_RedirectedMateConnector_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Charges_RedirectedMateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::difference_type

        __setslice__(Physics3D_Charges_RedirectedMateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::difference_type j, Physics3D_Charges_RedirectedMateConnector_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector >,std::allocator< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > > > const &

        """
        return _Physics3DSwig.Physics3D_Charges_RedirectedMateConnector_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Charges_RedirectedMateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_RedirectedMateConnector_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Charges_RedirectedMateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::difference_type

        __delitem__(Physics3D_Charges_RedirectedMateConnector_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Charges_RedirectedMateConnector_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Charges_RedirectedMateConnector_Vector self, PySliceObject * slice) -> Physics3D_Charges_RedirectedMateConnector_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Charges_RedirectedMateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_RedirectedMateConnector_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Charges_RedirectedMateConnector_Vector self, PySliceObject * slice, Physics3D_Charges_RedirectedMateConnector_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector >,std::allocator< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > > > const &

        __setitem__(Physics3D_Charges_RedirectedMateConnector_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Charges_RedirectedMateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_RedirectedMateConnector_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Charges_RedirectedMateConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::value_type"""
        return _Physics3DSwig.Physics3D_Charges_RedirectedMateConnector_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Charges_RedirectedMateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_RedirectedMateConnector_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Charges_RedirectedMateConnector_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_RedirectedMateConnector_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Charges_RedirectedMateConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_RedirectedMateConnector_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Charges_RedirectedMateConnector_Vector self, Physics3D_Charges_RedirectedMateConnector_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > > &

        """
        return _Physics3DSwig.Physics3D_Charges_RedirectedMateConnector_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Charges_RedirectedMateConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_RedirectedMateConnector_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Charges_RedirectedMateConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_RedirectedMateConnector_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Charges_RedirectedMateConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_RedirectedMateConnector_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Charges_RedirectedMateConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_RedirectedMateConnector_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Charges_RedirectedMateConnector_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_RedirectedMateConnector_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Charges_RedirectedMateConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Charges_RedirectedMateConnector_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Charges_RedirectedMateConnector_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_RedirectedMateConnector_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Charges_RedirectedMateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::iterator

        erase(Physics3D_Charges_RedirectedMateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::iterator

        """
        return _Physics3DSwig.Physics3D_Charges_RedirectedMateConnector_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Charges_RedirectedMateConnector_Vector self) -> Physics3D_Charges_RedirectedMateConnector_Vector
        __init__(Physics3D_Charges_RedirectedMateConnector_Vector self, Physics3D_Charges_RedirectedMateConnector_Vector other) -> Physics3D_Charges_RedirectedMateConnector_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > > const &

        __init__(Physics3D_Charges_RedirectedMateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::size_type size) -> Physics3D_Charges_RedirectedMateConnector_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::size_type

        __init__(Physics3D_Charges_RedirectedMateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::value_type const & value) -> Physics3D_Charges_RedirectedMateConnector_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Charges_RedirectedMateConnector_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Charges_RedirectedMateConnector_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Charges_RedirectedMateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_RedirectedMateConnector_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Charges_RedirectedMateConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_RedirectedMateConnector_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Charges_RedirectedMateConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_RedirectedMateConnector_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Charges_RedirectedMateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_RedirectedMateConnector_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Charges_RedirectedMateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::size_type

        resize(Physics3D_Charges_RedirectedMateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_RedirectedMateConnector_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Charges_RedirectedMateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::value_type const &

        insert(Physics3D_Charges_RedirectedMateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_RedirectedMateConnector_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Charges_RedirectedMateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::size_type

        """
        return _Physics3DSwig.Physics3D_Charges_RedirectedMateConnector_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Charges_RedirectedMateConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::RedirectedMateConnector > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_RedirectedMateConnector_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Charges_RedirectedMateConnector_Vector

# Register Physics3D_Charges_RedirectedMateConnector_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Charges_RedirectedMateConnector_Vector_swigregister(Physics3D_Charges_RedirectedMateConnector_Vector)

class Physics3D_Charges_Sphere_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Charges_Sphere_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Charges_Sphere_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Charges_Sphere_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Charges_Sphere_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Charges_Sphere_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::difference_type j) -> Physics3D_Charges_Sphere_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Charges_Sphere_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::difference_type

        __setslice__(Physics3D_Charges_Sphere_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::difference_type j, Physics3D_Charges_Sphere_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere >,std::allocator< std::shared_ptr< openplx::Physics3D::Charges::Sphere > > > const &

        """
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Charges_Sphere_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Charges_Sphere_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::difference_type

        __delitem__(Physics3D_Charges_Sphere_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Charges_Sphere_Vector self, PySliceObject * slice) -> Physics3D_Charges_Sphere_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Charges_Sphere_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Charges_Sphere_Vector self, PySliceObject * slice, Physics3D_Charges_Sphere_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere >,std::allocator< std::shared_ptr< openplx::Physics3D::Charges::Sphere > > > const &

        __setitem__(Physics3D_Charges_Sphere_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Charges_Sphere_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Charges_Sphere_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::value_type"""
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Charges_Sphere_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Charges_Sphere_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Charges_Sphere_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Charges_Sphere_Vector self, Physics3D_Charges_Sphere_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > > &

        """
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Charges_Sphere_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Charges_Sphere_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Charges_Sphere_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Charges_Sphere_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Charges_Sphere_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Charges_Sphere_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Charges_Sphere_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Charges_Sphere_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::iterator

        erase(Physics3D_Charges_Sphere_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::iterator

        """
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Charges_Sphere_Vector self) -> Physics3D_Charges_Sphere_Vector
        __init__(Physics3D_Charges_Sphere_Vector self, Physics3D_Charges_Sphere_Vector other) -> Physics3D_Charges_Sphere_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > > const &

        __init__(Physics3D_Charges_Sphere_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::size_type size) -> Physics3D_Charges_Sphere_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::size_type

        __init__(Physics3D_Charges_Sphere_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::value_type const & value) -> Physics3D_Charges_Sphere_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Charges_Sphere_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Charges_Sphere_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Charges_Sphere_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Charges_Sphere_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Charges_Sphere_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Charges_Sphere_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Charges_Sphere_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::size_type

        resize(Physics3D_Charges_Sphere_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Charges_Sphere_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::value_type const &

        insert(Physics3D_Charges_Sphere_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Charges_Sphere_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::size_type

        """
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Charges_Sphere_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::Sphere > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Charges_Sphere_Vector

# Register Physics3D_Charges_Sphere_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Charges_Sphere_Vector_swigregister(Physics3D_Charges_Sphere_Vector)

class Physics3D_Charges_StructuralPlanarConnector_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Charges_StructuralPlanarConnector_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Charges_StructuralPlanarConnector_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Charges_StructuralPlanarConnector_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_StructuralPlanarConnector_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Charges_StructuralPlanarConnector_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_StructuralPlanarConnector_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Charges_StructuralPlanarConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_StructuralPlanarConnector_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Charges_StructuralPlanarConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::difference_type j) -> Physics3D_Charges_StructuralPlanarConnector_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_StructuralPlanarConnector_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Charges_StructuralPlanarConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::difference_type

        __setslice__(Physics3D_Charges_StructuralPlanarConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::difference_type j, Physics3D_Charges_StructuralPlanarConnector_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector >,std::allocator< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > > > const &

        """
        return _Physics3DSwig.Physics3D_Charges_StructuralPlanarConnector_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Charges_StructuralPlanarConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_StructuralPlanarConnector_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Charges_StructuralPlanarConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::difference_type

        __delitem__(Physics3D_Charges_StructuralPlanarConnector_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Charges_StructuralPlanarConnector_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Charges_StructuralPlanarConnector_Vector self, PySliceObject * slice) -> Physics3D_Charges_StructuralPlanarConnector_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Charges_StructuralPlanarConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_StructuralPlanarConnector_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Charges_StructuralPlanarConnector_Vector self, PySliceObject * slice, Physics3D_Charges_StructuralPlanarConnector_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector >,std::allocator< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > > > const &

        __setitem__(Physics3D_Charges_StructuralPlanarConnector_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Charges_StructuralPlanarConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_StructuralPlanarConnector_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Charges_StructuralPlanarConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::value_type"""
        return _Physics3DSwig.Physics3D_Charges_StructuralPlanarConnector_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Charges_StructuralPlanarConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_StructuralPlanarConnector_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Charges_StructuralPlanarConnector_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_StructuralPlanarConnector_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Charges_StructuralPlanarConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_StructuralPlanarConnector_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Charges_StructuralPlanarConnector_Vector self, Physics3D_Charges_StructuralPlanarConnector_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > > &

        """
        return _Physics3DSwig.Physics3D_Charges_StructuralPlanarConnector_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Charges_StructuralPlanarConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_StructuralPlanarConnector_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Charges_StructuralPlanarConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_StructuralPlanarConnector_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Charges_StructuralPlanarConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_StructuralPlanarConnector_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Charges_StructuralPlanarConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_StructuralPlanarConnector_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Charges_StructuralPlanarConnector_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_StructuralPlanarConnector_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Charges_StructuralPlanarConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Charges_StructuralPlanarConnector_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Charges_StructuralPlanarConnector_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_StructuralPlanarConnector_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Charges_StructuralPlanarConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::iterator

        erase(Physics3D_Charges_StructuralPlanarConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::iterator

        """
        return _Physics3DSwig.Physics3D_Charges_StructuralPlanarConnector_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Charges_StructuralPlanarConnector_Vector self) -> Physics3D_Charges_StructuralPlanarConnector_Vector
        __init__(Physics3D_Charges_StructuralPlanarConnector_Vector self, Physics3D_Charges_StructuralPlanarConnector_Vector other) -> Physics3D_Charges_StructuralPlanarConnector_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > > const &

        __init__(Physics3D_Charges_StructuralPlanarConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::size_type size) -> Physics3D_Charges_StructuralPlanarConnector_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::size_type

        __init__(Physics3D_Charges_StructuralPlanarConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::value_type const & value) -> Physics3D_Charges_StructuralPlanarConnector_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Charges_StructuralPlanarConnector_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Charges_StructuralPlanarConnector_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Charges_StructuralPlanarConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_StructuralPlanarConnector_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Charges_StructuralPlanarConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_StructuralPlanarConnector_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Charges_StructuralPlanarConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_StructuralPlanarConnector_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Charges_StructuralPlanarConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_StructuralPlanarConnector_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Charges_StructuralPlanarConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::size_type

        resize(Physics3D_Charges_StructuralPlanarConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_StructuralPlanarConnector_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Charges_StructuralPlanarConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::value_type const &

        insert(Physics3D_Charges_StructuralPlanarConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_StructuralPlanarConnector_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Charges_StructuralPlanarConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::size_type

        """
        return _Physics3DSwig.Physics3D_Charges_StructuralPlanarConnector_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Charges_StructuralPlanarConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::StructuralPlanarConnector > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_StructuralPlanarConnector_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Charges_StructuralPlanarConnector_Vector

# Register Physics3D_Charges_StructuralPlanarConnector_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Charges_StructuralPlanarConnector_Vector_swigregister(Physics3D_Charges_StructuralPlanarConnector_Vector)

class Physics3D_Charges_TriMesh_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Charges_TriMesh_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Charges_TriMesh_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Charges_TriMesh_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Charges_TriMesh_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Charges_TriMesh_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::difference_type j) -> Physics3D_Charges_TriMesh_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Charges_TriMesh_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::difference_type

        __setslice__(Physics3D_Charges_TriMesh_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::difference_type j, Physics3D_Charges_TriMesh_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh >,std::allocator< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > > > const &

        """
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Charges_TriMesh_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Charges_TriMesh_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::difference_type

        __delitem__(Physics3D_Charges_TriMesh_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Charges_TriMesh_Vector self, PySliceObject * slice) -> Physics3D_Charges_TriMesh_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Charges_TriMesh_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Charges_TriMesh_Vector self, PySliceObject * slice, Physics3D_Charges_TriMesh_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh >,std::allocator< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > > > const &

        __setitem__(Physics3D_Charges_TriMesh_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Charges_TriMesh_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Charges_TriMesh_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::value_type"""
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Charges_TriMesh_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Charges_TriMesh_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Charges_TriMesh_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Charges_TriMesh_Vector self, Physics3D_Charges_TriMesh_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > > &

        """
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Charges_TriMesh_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Charges_TriMesh_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Charges_TriMesh_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Charges_TriMesh_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Charges_TriMesh_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Charges_TriMesh_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Charges_TriMesh_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Charges_TriMesh_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::iterator

        erase(Physics3D_Charges_TriMesh_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::iterator

        """
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Charges_TriMesh_Vector self) -> Physics3D_Charges_TriMesh_Vector
        __init__(Physics3D_Charges_TriMesh_Vector self, Physics3D_Charges_TriMesh_Vector other) -> Physics3D_Charges_TriMesh_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > > const &

        __init__(Physics3D_Charges_TriMesh_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::size_type size) -> Physics3D_Charges_TriMesh_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::size_type

        __init__(Physics3D_Charges_TriMesh_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::value_type const & value) -> Physics3D_Charges_TriMesh_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Charges_TriMesh_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Charges_TriMesh_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Charges_TriMesh_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Charges_TriMesh_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Charges_TriMesh_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Charges_TriMesh_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::size_type

        resize(Physics3D_Charges_TriMesh_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Charges_TriMesh_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::value_type const &

        insert(Physics3D_Charges_TriMesh_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Charges_TriMesh_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::size_type

        """
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Charges_TriMesh_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMesh > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Charges_TriMesh_Vector

# Register Physics3D_Charges_TriMesh_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Charges_TriMesh_Vector_swigregister(Physics3D_Charges_TriMesh_Vector)

class Physics3D_Charges_TriMeshGeometry_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Charges_TriMeshGeometry_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Charges_TriMeshGeometry_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Charges_TriMeshGeometry_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Charges_TriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Charges_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::difference_type j) -> Physics3D_Charges_TriMeshGeometry_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Charges_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::difference_type

        __setslice__(Physics3D_Charges_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::difference_type j, Physics3D_Charges_TriMeshGeometry_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry >,std::allocator< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > > > const &

        """
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Charges_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Charges_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::difference_type

        __delitem__(Physics3D_Charges_TriMeshGeometry_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Charges_TriMeshGeometry_Vector self, PySliceObject * slice) -> Physics3D_Charges_TriMeshGeometry_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Charges_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Charges_TriMeshGeometry_Vector self, PySliceObject * slice, Physics3D_Charges_TriMeshGeometry_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry >,std::allocator< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > > > const &

        __setitem__(Physics3D_Charges_TriMeshGeometry_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Charges_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Charges_TriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::value_type"""
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Charges_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Charges_TriMeshGeometry_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Charges_TriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Charges_TriMeshGeometry_Vector self, Physics3D_Charges_TriMeshGeometry_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > > &

        """
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Charges_TriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Charges_TriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Charges_TriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Charges_TriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Charges_TriMeshGeometry_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Charges_TriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Charges_TriMeshGeometry_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Charges_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::iterator

        erase(Physics3D_Charges_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::iterator

        """
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Charges_TriMeshGeometry_Vector self) -> Physics3D_Charges_TriMeshGeometry_Vector
        __init__(Physics3D_Charges_TriMeshGeometry_Vector self, Physics3D_Charges_TriMeshGeometry_Vector other) -> Physics3D_Charges_TriMeshGeometry_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > > const &

        __init__(Physics3D_Charges_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::size_type size) -> Physics3D_Charges_TriMeshGeometry_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::size_type

        __init__(Physics3D_Charges_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::value_type const & value) -> Physics3D_Charges_TriMeshGeometry_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Charges_TriMeshGeometry_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Charges_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Charges_TriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Charges_TriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Charges_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Charges_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::size_type

        resize(Physics3D_Charges_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Charges_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::value_type const &

        insert(Physics3D_Charges_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Charges_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::size_type

        """
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Charges_TriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::TriMeshGeometry > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Charges_TriMeshGeometry_Vector

# Register Physics3D_Charges_TriMeshGeometry_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_swigregister(Physics3D_Charges_TriMeshGeometry_Vector)

class Physics3D_Charges_World_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Charges_World_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Charges_World_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Charges_World_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_World_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Charges_World_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_World_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Charges_World_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_World_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Charges_World_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::difference_type j) -> Physics3D_Charges_World_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_World_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Charges_World_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::difference_type

        __setslice__(Physics3D_Charges_World_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::difference_type j, Physics3D_Charges_World_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Charges::World >,std::allocator< std::shared_ptr< openplx::Physics3D::Charges::World > > > const &

        """
        return _Physics3DSwig.Physics3D_Charges_World_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Charges_World_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_World_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Charges_World_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::difference_type

        __delitem__(Physics3D_Charges_World_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Charges_World_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Charges_World_Vector self, PySliceObject * slice) -> Physics3D_Charges_World_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Charges_World_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_World_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Charges_World_Vector self, PySliceObject * slice, Physics3D_Charges_World_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Charges::World >,std::allocator< std::shared_ptr< openplx::Physics3D::Charges::World > > > const &

        __setitem__(Physics3D_Charges_World_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Charges_World_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_World_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Charges_World_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::value_type"""
        return _Physics3DSwig.Physics3D_Charges_World_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Charges_World_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_World_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Charges_World_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_World_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Charges_World_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_World_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Charges_World_Vector self, Physics3D_Charges_World_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > > &

        """
        return _Physics3DSwig.Physics3D_Charges_World_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Charges_World_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_World_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Charges_World_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_World_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Charges_World_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_World_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Charges_World_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_World_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Charges_World_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_World_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Charges_World_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Charges_World_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Charges_World_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_World_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Charges_World_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::iterator

        erase(Physics3D_Charges_World_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::iterator

        """
        return _Physics3DSwig.Physics3D_Charges_World_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Charges_World_Vector self) -> Physics3D_Charges_World_Vector
        __init__(Physics3D_Charges_World_Vector self, Physics3D_Charges_World_Vector other) -> Physics3D_Charges_World_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > > const &

        __init__(Physics3D_Charges_World_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::size_type size) -> Physics3D_Charges_World_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::size_type

        __init__(Physics3D_Charges_World_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::value_type const & value) -> Physics3D_Charges_World_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Charges_World_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Charges_World_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Charges_World_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_World_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Charges_World_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_World_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Charges_World_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_World_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Charges_World_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_World_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Charges_World_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::size_type

        resize(Physics3D_Charges_World_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_World_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Charges_World_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::value_type const &

        insert(Physics3D_Charges_World_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_World_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Charges_World_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::size_type

        """
        return _Physics3DSwig.Physics3D_Charges_World_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Charges_World_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Charges::World > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_World_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Charges_World_Vector

# Register Physics3D_Charges_World_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Charges_World_Vector_swigregister(Physics3D_Charges_World_Vector)

class Physics3D_Interactions_Ball_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Ball_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Ball_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Ball_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Ball_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Ball_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Ball_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Ball_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Ball_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Ball_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::difference_type j) -> Physics3D_Interactions_Ball_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Ball_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Ball_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::difference_type

        __setslice__(Physics3D_Interactions_Ball_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::difference_type j, Physics3D_Interactions_Ball_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Ball > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Ball_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Ball_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Ball_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Ball_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::difference_type

        __delitem__(Physics3D_Interactions_Ball_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Ball_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Ball_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Ball_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Ball_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Ball_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Ball_Vector self, PySliceObject * slice, Physics3D_Interactions_Ball_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Ball > > > const &

        __setitem__(Physics3D_Interactions_Ball_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Ball_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Ball_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Ball_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Ball_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Ball_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Ball_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Ball_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Ball_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Ball_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Ball_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Ball_Vector self, Physics3D_Interactions_Ball_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Ball_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Ball_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Ball_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Ball_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Ball_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Ball_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Ball_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Ball_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Ball_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Ball_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Ball_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Ball_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Ball_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Ball_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Ball_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Ball_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::iterator

        erase(Physics3D_Interactions_Ball_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Ball_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Ball_Vector self) -> Physics3D_Interactions_Ball_Vector
        __init__(Physics3D_Interactions_Ball_Vector self, Physics3D_Interactions_Ball_Vector other) -> Physics3D_Interactions_Ball_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > > const &

        __init__(Physics3D_Interactions_Ball_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::size_type size) -> Physics3D_Interactions_Ball_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::size_type

        __init__(Physics3D_Interactions_Ball_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::value_type const & value) -> Physics3D_Interactions_Ball_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Ball_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Ball_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Ball_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Ball_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Ball_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Ball_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Ball_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Ball_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Ball_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Ball_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Ball_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::size_type

        resize(Physics3D_Interactions_Ball_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Ball_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Ball_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::value_type const &

        insert(Physics3D_Interactions_Ball_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Ball_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Ball_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Ball_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Ball_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Ball > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Ball_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Ball_Vector

# Register Physics3D_Interactions_Ball_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Ball_Vector_swigregister(Physics3D_Interactions_Ball_Vector)

class Physics3D_Interactions_Clearance_ConstantBallClearance_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Clearance_ConstantBallClearance_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantBallClearance_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Clearance_ConstantBallClearance_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantBallClearance_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Clearance_ConstantBallClearance_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantBallClearance_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Clearance_ConstantBallClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantBallClearance_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Clearance_ConstantBallClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::difference_type j) -> Physics3D_Interactions_Clearance_ConstantBallClearance_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantBallClearance_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Clearance_ConstantBallClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::difference_type

        __setslice__(Physics3D_Interactions_Clearance_ConstantBallClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::difference_type j, Physics3D_Interactions_Clearance_ConstantBallClearance_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantBallClearance_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Clearance_ConstantBallClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantBallClearance_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Clearance_ConstantBallClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::difference_type

        __delitem__(Physics3D_Interactions_Clearance_ConstantBallClearance_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantBallClearance_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Clearance_ConstantBallClearance_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Clearance_ConstantBallClearance_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Clearance_ConstantBallClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantBallClearance_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Clearance_ConstantBallClearance_Vector self, PySliceObject * slice, Physics3D_Interactions_Clearance_ConstantBallClearance_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > > > const &

        __setitem__(Physics3D_Interactions_Clearance_ConstantBallClearance_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Clearance_ConstantBallClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantBallClearance_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Clearance_ConstantBallClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantBallClearance_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Clearance_ConstantBallClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantBallClearance_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Clearance_ConstantBallClearance_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantBallClearance_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Clearance_ConstantBallClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantBallClearance_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Clearance_ConstantBallClearance_Vector self, Physics3D_Interactions_Clearance_ConstantBallClearance_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantBallClearance_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Clearance_ConstantBallClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantBallClearance_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Clearance_ConstantBallClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantBallClearance_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Clearance_ConstantBallClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantBallClearance_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Clearance_ConstantBallClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantBallClearance_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Clearance_ConstantBallClearance_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantBallClearance_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Clearance_ConstantBallClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantBallClearance_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Clearance_ConstantBallClearance_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantBallClearance_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Clearance_ConstantBallClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::iterator

        erase(Physics3D_Interactions_Clearance_ConstantBallClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantBallClearance_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Clearance_ConstantBallClearance_Vector self) -> Physics3D_Interactions_Clearance_ConstantBallClearance_Vector
        __init__(Physics3D_Interactions_Clearance_ConstantBallClearance_Vector self, Physics3D_Interactions_Clearance_ConstantBallClearance_Vector other) -> Physics3D_Interactions_Clearance_ConstantBallClearance_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > > const &

        __init__(Physics3D_Interactions_Clearance_ConstantBallClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::size_type size) -> Physics3D_Interactions_Clearance_ConstantBallClearance_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::size_type

        __init__(Physics3D_Interactions_Clearance_ConstantBallClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::value_type const & value) -> Physics3D_Interactions_Clearance_ConstantBallClearance_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantBallClearance_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Clearance_ConstantBallClearance_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Clearance_ConstantBallClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantBallClearance_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Clearance_ConstantBallClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantBallClearance_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Clearance_ConstantBallClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantBallClearance_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Clearance_ConstantBallClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantBallClearance_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Clearance_ConstantBallClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::size_type

        resize(Physics3D_Interactions_Clearance_ConstantBallClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantBallClearance_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Clearance_ConstantBallClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::value_type const &

        insert(Physics3D_Interactions_Clearance_ConstantBallClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantBallClearance_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Clearance_ConstantBallClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantBallClearance_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Clearance_ConstantBallClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantBallClearance > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantBallClearance_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Clearance_ConstantBallClearance_Vector

# Register Physics3D_Interactions_Clearance_ConstantBallClearance_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Clearance_ConstantBallClearance_Vector_swigregister(Physics3D_Interactions_Clearance_ConstantBallClearance_Vector)

class Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::difference_type j) -> Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::difference_type

        __setslice__(Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::difference_type j, Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::difference_type

        __delitem__(Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector self, PySliceObject * slice, Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > > > const &

        __setitem__(Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector self, Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::iterator

        erase(Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector self) -> Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector
        __init__(Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector self, Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector other) -> Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > > const &

        __init__(Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::size_type size) -> Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::size_type

        __init__(Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::value_type const & value) -> Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::size_type

        resize(Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::value_type const &

        insert(Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector

# Register Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector_swigregister(Physics3D_Interactions_Clearance_ConstantCylindricalClearance_Vector)

class Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::difference_type j) -> Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::difference_type

        __setslice__(Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::difference_type j, Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::difference_type

        __delitem__(Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector self, PySliceObject * slice, Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > > > const &

        __setitem__(Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector self, Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::iterator

        erase(Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector self) -> Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector
        __init__(Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector self, Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector other) -> Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > > const &

        __init__(Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::size_type size) -> Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::size_type

        __init__(Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::value_type const & value) -> Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::size_type

        resize(Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::value_type const &

        insert(Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector

# Register Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector_swigregister(Physics3D_Interactions_Clearance_ConstantHingeClearance_Vector)

class Physics3D_Interactions_Clearance_ConstantLockClearance_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Clearance_ConstantLockClearance_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Clearance_ConstantLockClearance_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Clearance_ConstantLockClearance_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Clearance_ConstantLockClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Clearance_ConstantLockClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::difference_type j) -> Physics3D_Interactions_Clearance_ConstantLockClearance_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Clearance_ConstantLockClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::difference_type

        __setslice__(Physics3D_Interactions_Clearance_ConstantLockClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::difference_type j, Physics3D_Interactions_Clearance_ConstantLockClearance_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Clearance_ConstantLockClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Clearance_ConstantLockClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::difference_type

        __delitem__(Physics3D_Interactions_Clearance_ConstantLockClearance_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Clearance_ConstantLockClearance_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Clearance_ConstantLockClearance_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Clearance_ConstantLockClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Clearance_ConstantLockClearance_Vector self, PySliceObject * slice, Physics3D_Interactions_Clearance_ConstantLockClearance_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > > > const &

        __setitem__(Physics3D_Interactions_Clearance_ConstantLockClearance_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Clearance_ConstantLockClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Clearance_ConstantLockClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Clearance_ConstantLockClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Clearance_ConstantLockClearance_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Clearance_ConstantLockClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Clearance_ConstantLockClearance_Vector self, Physics3D_Interactions_Clearance_ConstantLockClearance_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Clearance_ConstantLockClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Clearance_ConstantLockClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Clearance_ConstantLockClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Clearance_ConstantLockClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Clearance_ConstantLockClearance_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Clearance_ConstantLockClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Clearance_ConstantLockClearance_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Clearance_ConstantLockClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::iterator

        erase(Physics3D_Interactions_Clearance_ConstantLockClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Clearance_ConstantLockClearance_Vector self) -> Physics3D_Interactions_Clearance_ConstantLockClearance_Vector
        __init__(Physics3D_Interactions_Clearance_ConstantLockClearance_Vector self, Physics3D_Interactions_Clearance_ConstantLockClearance_Vector other) -> Physics3D_Interactions_Clearance_ConstantLockClearance_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > > const &

        __init__(Physics3D_Interactions_Clearance_ConstantLockClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::size_type size) -> Physics3D_Interactions_Clearance_ConstantLockClearance_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::size_type

        __init__(Physics3D_Interactions_Clearance_ConstantLockClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::value_type const & value) -> Physics3D_Interactions_Clearance_ConstantLockClearance_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Clearance_ConstantLockClearance_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Clearance_ConstantLockClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Clearance_ConstantLockClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Clearance_ConstantLockClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Clearance_ConstantLockClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Clearance_ConstantLockClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::size_type

        resize(Physics3D_Interactions_Clearance_ConstantLockClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Clearance_ConstantLockClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::value_type const &

        insert(Physics3D_Interactions_Clearance_ConstantLockClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Clearance_ConstantLockClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Clearance_ConstantLockClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantLockClearance > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Clearance_ConstantLockClearance_Vector

# Register Physics3D_Interactions_Clearance_ConstantLockClearance_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_Vector_swigregister(Physics3D_Interactions_Clearance_ConstantLockClearance_Vector)

class Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::difference_type j) -> Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::difference_type

        __setslice__(Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::difference_type j, Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::difference_type

        __delitem__(Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector self, PySliceObject * slice, Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > > > const &

        __setitem__(Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector self, Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::iterator

        erase(Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector self) -> Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector
        __init__(Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector self, Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector other) -> Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > > const &

        __init__(Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::size_type size) -> Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::size_type

        __init__(Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::value_type const & value) -> Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::size_type

        resize(Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::value_type const &

        insert(Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector

# Register Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector_swigregister(Physics3D_Interactions_Clearance_ConstantPrismaticClearance_Vector)

class Physics3D_Interactions_Clearance_DefaultMateClearance_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Clearance_DefaultMateClearance_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_DefaultMateClearance_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Clearance_DefaultMateClearance_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_DefaultMateClearance_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Clearance_DefaultMateClearance_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_DefaultMateClearance_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Clearance_DefaultMateClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_DefaultMateClearance_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Clearance_DefaultMateClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::difference_type j) -> Physics3D_Interactions_Clearance_DefaultMateClearance_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_DefaultMateClearance_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Clearance_DefaultMateClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::difference_type

        __setslice__(Physics3D_Interactions_Clearance_DefaultMateClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::difference_type j, Physics3D_Interactions_Clearance_DefaultMateClearance_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_DefaultMateClearance_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Clearance_DefaultMateClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_DefaultMateClearance_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Clearance_DefaultMateClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::difference_type

        __delitem__(Physics3D_Interactions_Clearance_DefaultMateClearance_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_DefaultMateClearance_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Clearance_DefaultMateClearance_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Clearance_DefaultMateClearance_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Clearance_DefaultMateClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_DefaultMateClearance_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Clearance_DefaultMateClearance_Vector self, PySliceObject * slice, Physics3D_Interactions_Clearance_DefaultMateClearance_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > > > const &

        __setitem__(Physics3D_Interactions_Clearance_DefaultMateClearance_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Clearance_DefaultMateClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_DefaultMateClearance_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Clearance_DefaultMateClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_DefaultMateClearance_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Clearance_DefaultMateClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_DefaultMateClearance_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Clearance_DefaultMateClearance_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_DefaultMateClearance_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Clearance_DefaultMateClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_DefaultMateClearance_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Clearance_DefaultMateClearance_Vector self, Physics3D_Interactions_Clearance_DefaultMateClearance_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_DefaultMateClearance_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Clearance_DefaultMateClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_DefaultMateClearance_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Clearance_DefaultMateClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_DefaultMateClearance_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Clearance_DefaultMateClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_DefaultMateClearance_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Clearance_DefaultMateClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_DefaultMateClearance_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Clearance_DefaultMateClearance_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_DefaultMateClearance_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Clearance_DefaultMateClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_DefaultMateClearance_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Clearance_DefaultMateClearance_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_DefaultMateClearance_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Clearance_DefaultMateClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::iterator

        erase(Physics3D_Interactions_Clearance_DefaultMateClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_DefaultMateClearance_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Clearance_DefaultMateClearance_Vector self) -> Physics3D_Interactions_Clearance_DefaultMateClearance_Vector
        __init__(Physics3D_Interactions_Clearance_DefaultMateClearance_Vector self, Physics3D_Interactions_Clearance_DefaultMateClearance_Vector other) -> Physics3D_Interactions_Clearance_DefaultMateClearance_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > > const &

        __init__(Physics3D_Interactions_Clearance_DefaultMateClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::size_type size) -> Physics3D_Interactions_Clearance_DefaultMateClearance_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::size_type

        __init__(Physics3D_Interactions_Clearance_DefaultMateClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::value_type const & value) -> Physics3D_Interactions_Clearance_DefaultMateClearance_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Clearance_DefaultMateClearance_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Clearance_DefaultMateClearance_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Clearance_DefaultMateClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_DefaultMateClearance_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Clearance_DefaultMateClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_DefaultMateClearance_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Clearance_DefaultMateClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_DefaultMateClearance_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Clearance_DefaultMateClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_DefaultMateClearance_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Clearance_DefaultMateClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::size_type

        resize(Physics3D_Interactions_Clearance_DefaultMateClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_DefaultMateClearance_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Clearance_DefaultMateClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::value_type const &

        insert(Physics3D_Interactions_Clearance_DefaultMateClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_DefaultMateClearance_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Clearance_DefaultMateClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_DefaultMateClearance_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Clearance_DefaultMateClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_DefaultMateClearance_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Clearance_DefaultMateClearance_Vector

# Register Physics3D_Interactions_Clearance_DefaultMateClearance_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Clearance_DefaultMateClearance_Vector_swigregister(Physics3D_Interactions_Clearance_DefaultMateClearance_Vector)

class Physics3D_Interactions_Cylindrical_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Cylindrical_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Cylindrical_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Cylindrical_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Cylindrical_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Cylindrical_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::difference_type j) -> Physics3D_Interactions_Cylindrical_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Cylindrical_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::difference_type

        __setslice__(Physics3D_Interactions_Cylindrical_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::difference_type j, Physics3D_Interactions_Cylindrical_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Cylindrical_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Cylindrical_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::difference_type

        __delitem__(Physics3D_Interactions_Cylindrical_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Cylindrical_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Cylindrical_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Cylindrical_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Cylindrical_Vector self, PySliceObject * slice, Physics3D_Interactions_Cylindrical_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > > > const &

        __setitem__(Physics3D_Interactions_Cylindrical_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Cylindrical_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Cylindrical_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Cylindrical_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Cylindrical_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Cylindrical_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Cylindrical_Vector self, Physics3D_Interactions_Cylindrical_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Cylindrical_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Cylindrical_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Cylindrical_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Cylindrical_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Cylindrical_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Cylindrical_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Cylindrical_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Cylindrical_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::iterator

        erase(Physics3D_Interactions_Cylindrical_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Cylindrical_Vector self) -> Physics3D_Interactions_Cylindrical_Vector
        __init__(Physics3D_Interactions_Cylindrical_Vector self, Physics3D_Interactions_Cylindrical_Vector other) -> Physics3D_Interactions_Cylindrical_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > > const &

        __init__(Physics3D_Interactions_Cylindrical_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::size_type size) -> Physics3D_Interactions_Cylindrical_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::size_type

        __init__(Physics3D_Interactions_Cylindrical_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::value_type const & value) -> Physics3D_Interactions_Cylindrical_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Cylindrical_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Cylindrical_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Cylindrical_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Cylindrical_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Cylindrical_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Cylindrical_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::size_type

        resize(Physics3D_Interactions_Cylindrical_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Cylindrical_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::value_type const &

        insert(Physics3D_Interactions_Cylindrical_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Cylindrical_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Cylindrical_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Cylindrical > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Cylindrical_Vector

# Register Physics3D_Interactions_Cylindrical_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_swigregister(Physics3D_Interactions_Cylindrical_Vector)

class Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::difference_type j) -> Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::difference_type

        __setslice__(Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::difference_type j, Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::difference_type

        __delitem__(Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector self, PySliceObject * slice, Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > > > const &

        __setitem__(Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector self, Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::iterator

        erase(Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector self) -> Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector
        __init__(Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector self, Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector other) -> Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > > const &

        __init__(Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::size_type size) -> Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::size_type

        __init__(Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::value_type const & value) -> Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::size_type

        resize(Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::value_type const &

        insert(Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector

# Register Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector_swigregister(Physics3D_Interactions_Dissipation_BallMechanicalDamping_Vector)

class Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::difference_type j) -> Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::difference_type

        __setslice__(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::difference_type j, Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::difference_type

        __delitem__(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector self, PySliceObject * slice, Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > > > const &

        __setitem__(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector self, Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::iterator

        erase(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector self) -> Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector
        __init__(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector self, Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector other) -> Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > > const &

        __init__(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::size_type size) -> Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::size_type

        __init__(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::value_type const & value) -> Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::size_type

        resize(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::value_type const &

        insert(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector

# Register Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector_swigregister(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_Vector)

class Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::difference_type j) -> Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::difference_type

        __setslice__(Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::difference_type j, Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::difference_type

        __delitem__(Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector self, PySliceObject * slice, Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > > > const &

        __setitem__(Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector self, Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::iterator

        erase(Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector self) -> Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector
        __init__(Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector self, Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector other) -> Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > > const &

        __init__(Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::size_type size) -> Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::size_type

        __init__(Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::value_type const & value) -> Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::size_type

        resize(Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::value_type const &

        insert(Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector

# Register Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector_swigregister(Physics3D_Interactions_Dissipation_DefaultBallDissipation_Vector)

class Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::difference_type j) -> Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::difference_type

        __setslice__(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::difference_type j, Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::difference_type

        __delitem__(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector self, PySliceObject * slice, Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > > > const &

        __setitem__(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector self, Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::iterator

        erase(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector self) -> Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector
        __init__(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector self, Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector other) -> Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > > const &

        __init__(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::size_type size) -> Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::size_type

        __init__(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::value_type const & value) -> Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::size_type

        resize(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::value_type const &

        insert(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector

# Register Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector_swigregister(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_Vector)

class Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::difference_type j) -> Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::difference_type

        __setslice__(Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::difference_type j, Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::difference_type

        __delitem__(Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector self, PySliceObject * slice, Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > > > const &

        __setitem__(Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector self, Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::iterator

        erase(Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector self) -> Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector
        __init__(Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector self, Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector other) -> Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > > const &

        __init__(Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::size_type size) -> Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::size_type

        __init__(Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::value_type const & value) -> Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::size_type

        resize(Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::value_type const &

        insert(Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector

# Register Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector_swigregister(Physics3D_Interactions_Dissipation_DefaultHingeDissipation_Vector)

class Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::difference_type j) -> Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::difference_type

        __setslice__(Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::difference_type j, Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::difference_type

        __delitem__(Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector self, PySliceObject * slice, Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > > > const &

        __setitem__(Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector self, Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::iterator

        erase(Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector self) -> Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector
        __init__(Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector self, Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector other) -> Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > > const &

        __init__(Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::size_type size) -> Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::size_type

        __init__(Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::value_type const & value) -> Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::size_type

        resize(Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::value_type const &

        insert(Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector

# Register Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector_swigregister(Physics3D_Interactions_Dissipation_DefaultLockDissipation_Vector)

class Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::difference_type j) -> Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::difference_type

        __setslice__(Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::difference_type j, Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::difference_type

        __delitem__(Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector self, PySliceObject * slice, Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > > > const &

        __setitem__(Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector self, Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::iterator

        erase(Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector self) -> Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector
        __init__(Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector self, Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector other) -> Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > > const &

        __init__(Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::size_type size) -> Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::size_type

        __init__(Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::value_type const & value) -> Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::size_type

        resize(Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::value_type const &

        insert(Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector

# Register Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector_swigregister(Physics3D_Interactions_Dissipation_DefaultMateDissipation_Vector)

class Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::difference_type j) -> Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::difference_type

        __setslice__(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::difference_type j, Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::difference_type

        __delitem__(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector self, PySliceObject * slice, Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > > > const &

        __setitem__(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector self, Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::iterator

        erase(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector self) -> Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector
        __init__(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector self, Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector other) -> Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > > const &

        __init__(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::size_type size) -> Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::size_type

        __init__(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::value_type const & value) -> Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::size_type

        resize(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::value_type const &

        insert(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector

# Register Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector_swigregister(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_Vector)

class Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::difference_type j) -> Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::difference_type

        __setslice__(Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::difference_type j, Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::difference_type

        __delitem__(Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector self, PySliceObject * slice, Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > > > const &

        __setitem__(Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector self, Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::iterator

        erase(Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector self) -> Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector
        __init__(Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector self, Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector other) -> Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > > const &

        __init__(Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::size_type size) -> Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::size_type

        __init__(Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::value_type const & value) -> Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::size_type

        resize(Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::value_type const &

        insert(Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector

# Register Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector_swigregister(Physics3D_Interactions_Dissipation_HingeMechanicalDamping_Vector)

class Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::difference_type j) -> Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::difference_type

        __setslice__(Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::difference_type j, Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::difference_type

        __delitem__(Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector self, PySliceObject * slice, Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > > > const &

        __setitem__(Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector self, Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::iterator

        erase(Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector self) -> Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector
        __init__(Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector self, Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector other) -> Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > > const &

        __init__(Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::size_type size) -> Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::size_type

        __init__(Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::value_type const & value) -> Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::size_type

        resize(Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::value_type const &

        insert(Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector

# Register Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector_swigregister(Physics3D_Interactions_Dissipation_LockMechanicalDamping_Vector)

class Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::difference_type j) -> Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::difference_type

        __setslice__(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::difference_type j, Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::difference_type

        __delitem__(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector self, PySliceObject * slice, Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > > > const &

        __setitem__(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector self, Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::iterator

        erase(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector self) -> Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector
        __init__(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector self, Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector other) -> Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > > const &

        __init__(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::size_type size) -> Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::size_type

        __init__(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::value_type const & value) -> Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::size_type

        resize(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::value_type const &

        insert(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector

# Register Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector_swigregister(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_Vector)

class Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::difference_type j) -> Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::difference_type

        __setslice__(Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::difference_type j, Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::difference_type

        __delitem__(Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector self, PySliceObject * slice, Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > > > const &

        __setitem__(Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector self, Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::iterator

        erase(Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector self) -> Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector
        __init__(Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector self, Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector other) -> Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > > const &

        __init__(Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::size_type size) -> Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::size_type

        __init__(Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::value_type const & value) -> Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::size_type

        resize(Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::value_type const &

        insert(Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector

# Register Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector_swigregister(Physics3D_Interactions_Flexibility_DefaultBallFlexibility_Vector)

class Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::difference_type j) -> Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::difference_type

        __setslice__(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::difference_type j, Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::difference_type

        __delitem__(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector self, PySliceObject * slice, Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > > > const &

        __setitem__(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector self, Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::iterator

        erase(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector self) -> Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector
        __init__(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector self, Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector other) -> Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > > const &

        __init__(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::size_type size) -> Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::size_type

        __init__(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::value_type const & value) -> Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::size_type

        resize(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::value_type const &

        insert(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector

# Register Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector_swigregister(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_Vector)

class Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::difference_type j) -> Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::difference_type

        __setslice__(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::difference_type j, Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::difference_type

        __delitem__(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector self, PySliceObject * slice, Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > > > const &

        __setitem__(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector self, Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::iterator

        erase(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector self) -> Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector
        __init__(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector self, Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector other) -> Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > > const &

        __init__(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::size_type size) -> Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::size_type

        __init__(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::value_type const & value) -> Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::size_type

        resize(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::value_type const &

        insert(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector

# Register Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector_swigregister(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_Vector)

class Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::difference_type j) -> Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::difference_type

        __setslice__(Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::difference_type j, Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::difference_type

        __delitem__(Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector self, PySliceObject * slice, Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > > > const &

        __setitem__(Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector self, Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::iterator

        erase(Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector self) -> Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector
        __init__(Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector self, Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector other) -> Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > > const &

        __init__(Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::size_type size) -> Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::size_type

        __init__(Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::value_type const & value) -> Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::size_type

        resize(Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::value_type const &

        insert(Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector

# Register Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector_swigregister(Physics3D_Interactions_Flexibility_DefaultLockFlexibility_Vector)

class Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::difference_type j) -> Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::difference_type

        __setslice__(Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::difference_type j, Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::difference_type

        __delitem__(Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector self, PySliceObject * slice, Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > > > const &

        __setitem__(Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector self, Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::iterator

        erase(Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector self) -> Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector
        __init__(Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector self, Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector other) -> Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > > const &

        __init__(Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::size_type size) -> Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::size_type

        __init__(Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::value_type const & value) -> Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::size_type

        resize(Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::value_type const &

        insert(Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector

# Register Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector_swigregister(Physics3D_Interactions_Flexibility_DefaultMateFlexibility_Vector)

class Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::difference_type j) -> Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::difference_type

        __setslice__(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::difference_type j, Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::difference_type

        __delitem__(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector self, PySliceObject * slice, Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > > > const &

        __setitem__(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector self, Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::iterator

        erase(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector self) -> Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector
        __init__(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector self, Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector other) -> Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > > const &

        __init__(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::size_type size) -> Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::size_type

        __init__(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::value_type const & value) -> Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::size_type

        resize(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::value_type const &

        insert(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector

# Register Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector_swigregister(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_Vector)

class Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::difference_type j) -> Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::difference_type

        __setslice__(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::difference_type j, Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::difference_type

        __delitem__(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector self, PySliceObject * slice, Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > > > const &

        __setitem__(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector self, Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::iterator

        erase(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector self) -> Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector
        __init__(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector self, Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector other) -> Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > > const &

        __init__(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::size_type size) -> Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::size_type

        __init__(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::value_type const & value) -> Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::size_type

        resize(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::value_type const &

        insert(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector

# Register Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector_swigregister(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_Vector)

class Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::difference_type j) -> Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::difference_type

        __setslice__(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::difference_type j, Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::difference_type

        __delitem__(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector self, PySliceObject * slice, Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > > > const &

        __setitem__(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector self, Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::iterator

        erase(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector self) -> Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector
        __init__(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector self, Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector other) -> Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > > const &

        __init__(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::size_type size) -> Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::size_type

        __init__(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::value_type const & value) -> Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::size_type

        resize(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::value_type const &

        insert(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector

# Register Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector_swigregister(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_Vector)

class Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::difference_type j) -> Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::difference_type

        __setslice__(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::difference_type j, Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::difference_type

        __delitem__(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector self, PySliceObject * slice, Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > > > const &

        __setitem__(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector self, Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::iterator

        erase(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector self) -> Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector
        __init__(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector self, Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector other) -> Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > > const &

        __init__(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::size_type size) -> Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::size_type

        __init__(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::value_type const & value) -> Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::size_type

        resize(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::value_type const &

        insert(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector

# Register Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector_swigregister(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_Vector)

class Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::difference_type j) -> Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::difference_type

        __setslice__(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::difference_type j, Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::difference_type

        __delitem__(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector self, PySliceObject * slice, Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > > > const &

        __setitem__(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector self, Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::iterator

        erase(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector self) -> Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector
        __init__(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector self, Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector other) -> Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > > const &

        __init__(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::size_type size) -> Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::size_type

        __init__(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::value_type const & value) -> Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::size_type

        resize(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::value_type const &

        insert(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector

# Register Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector_swigregister(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_Vector)

class Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::difference_type j) -> Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::difference_type

        __setslice__(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::difference_type j, Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::difference_type

        __delitem__(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector self, PySliceObject * slice, Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > > > const &

        __setitem__(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector self, Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::iterator

        erase(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector self) -> Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector
        __init__(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector self, Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector other) -> Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > > const &

        __init__(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::size_type size) -> Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::size_type

        __init__(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::value_type const & value) -> Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::size_type

        resize(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::value_type const &

        insert(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector

# Register Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector_swigregister(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_Vector)

class Physics3D_Interactions_ForceMotor_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_ForceMotor_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_ForceMotor_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_ForceMotor_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_ForceMotor_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_ForceMotor_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_ForceMotor_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_ForceMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_ForceMotor_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_ForceMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::difference_type j) -> Physics3D_Interactions_ForceMotor_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_ForceMotor_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_ForceMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::difference_type

        __setslice__(Physics3D_Interactions_ForceMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::difference_type j, Physics3D_Interactions_ForceMotor_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_ForceMotor_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_ForceMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_ForceMotor_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_ForceMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::difference_type

        __delitem__(Physics3D_Interactions_ForceMotor_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_ForceMotor_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_ForceMotor_Vector self, PySliceObject * slice) -> Physics3D_Interactions_ForceMotor_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_ForceMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_ForceMotor_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_ForceMotor_Vector self, PySliceObject * slice, Physics3D_Interactions_ForceMotor_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > > > const &

        __setitem__(Physics3D_Interactions_ForceMotor_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_ForceMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_ForceMotor_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_ForceMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_ForceMotor_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_ForceMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_ForceMotor_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_ForceMotor_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_ForceMotor_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_ForceMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_ForceMotor_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_ForceMotor_Vector self, Physics3D_Interactions_ForceMotor_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_ForceMotor_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_ForceMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_ForceMotor_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_ForceMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_ForceMotor_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_ForceMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_ForceMotor_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_ForceMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_ForceMotor_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_ForceMotor_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_ForceMotor_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_ForceMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_ForceMotor_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_ForceMotor_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_ForceMotor_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_ForceMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::iterator

        erase(Physics3D_Interactions_ForceMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_ForceMotor_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_ForceMotor_Vector self) -> Physics3D_Interactions_ForceMotor_Vector
        __init__(Physics3D_Interactions_ForceMotor_Vector self, Physics3D_Interactions_ForceMotor_Vector other) -> Physics3D_Interactions_ForceMotor_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > > const &

        __init__(Physics3D_Interactions_ForceMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::size_type size) -> Physics3D_Interactions_ForceMotor_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::size_type

        __init__(Physics3D_Interactions_ForceMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::value_type const & value) -> Physics3D_Interactions_ForceMotor_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_ForceMotor_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_ForceMotor_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_ForceMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_ForceMotor_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_ForceMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_ForceMotor_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_ForceMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_ForceMotor_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_ForceMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_ForceMotor_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_ForceMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::size_type

        resize(Physics3D_Interactions_ForceMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_ForceMotor_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_ForceMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::value_type const &

        insert(Physics3D_Interactions_ForceMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_ForceMotor_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_ForceMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_ForceMotor_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_ForceMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::ForceMotor > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_ForceMotor_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_ForceMotor_Vector

# Register Physics3D_Interactions_ForceMotor_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_ForceMotor_Vector_swigregister(Physics3D_Interactions_ForceMotor_Vector)

class Physics3D_Interactions_Hinge_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Hinge_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Hinge_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Hinge_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Hinge_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Hinge_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::difference_type j) -> Physics3D_Interactions_Hinge_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Hinge_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::difference_type

        __setslice__(Physics3D_Interactions_Hinge_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::difference_type j, Physics3D_Interactions_Hinge_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Hinge_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Hinge_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::difference_type

        __delitem__(Physics3D_Interactions_Hinge_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Hinge_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Hinge_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Hinge_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Hinge_Vector self, PySliceObject * slice, Physics3D_Interactions_Hinge_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > > > const &

        __setitem__(Physics3D_Interactions_Hinge_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Hinge_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Hinge_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Hinge_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Hinge_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Hinge_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Hinge_Vector self, Physics3D_Interactions_Hinge_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Hinge_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Hinge_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Hinge_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Hinge_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Hinge_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Hinge_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Hinge_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Hinge_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::iterator

        erase(Physics3D_Interactions_Hinge_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Hinge_Vector self) -> Physics3D_Interactions_Hinge_Vector
        __init__(Physics3D_Interactions_Hinge_Vector self, Physics3D_Interactions_Hinge_Vector other) -> Physics3D_Interactions_Hinge_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > > const &

        __init__(Physics3D_Interactions_Hinge_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::size_type size) -> Physics3D_Interactions_Hinge_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::size_type

        __init__(Physics3D_Interactions_Hinge_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::value_type const & value) -> Physics3D_Interactions_Hinge_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Hinge_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Hinge_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Hinge_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Hinge_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Hinge_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Hinge_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::size_type

        resize(Physics3D_Interactions_Hinge_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Hinge_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::value_type const &

        insert(Physics3D_Interactions_Hinge_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Hinge_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Hinge_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Hinge > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Hinge_Vector

# Register Physics3D_Interactions_Hinge_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Hinge_Vector_swigregister(Physics3D_Interactions_Hinge_Vector)

class Physics3D_Interactions_LinearRange_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_LinearRange_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_LinearRange_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_LinearRange_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_LinearRange_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_LinearRange_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::difference_type j) -> Physics3D_Interactions_LinearRange_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_LinearRange_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::difference_type

        __setslice__(Physics3D_Interactions_LinearRange_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::difference_type j, Physics3D_Interactions_LinearRange_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_LinearRange_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_LinearRange_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::difference_type

        __delitem__(Physics3D_Interactions_LinearRange_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_LinearRange_Vector self, PySliceObject * slice) -> Physics3D_Interactions_LinearRange_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_LinearRange_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_LinearRange_Vector self, PySliceObject * slice, Physics3D_Interactions_LinearRange_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > > > const &

        __setitem__(Physics3D_Interactions_LinearRange_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_LinearRange_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_LinearRange_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_LinearRange_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_LinearRange_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_LinearRange_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_LinearRange_Vector self, Physics3D_Interactions_LinearRange_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_LinearRange_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_LinearRange_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_LinearRange_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_LinearRange_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_LinearRange_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_LinearRange_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_LinearRange_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_LinearRange_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::iterator

        erase(Physics3D_Interactions_LinearRange_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_LinearRange_Vector self) -> Physics3D_Interactions_LinearRange_Vector
        __init__(Physics3D_Interactions_LinearRange_Vector self, Physics3D_Interactions_LinearRange_Vector other) -> Physics3D_Interactions_LinearRange_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > > const &

        __init__(Physics3D_Interactions_LinearRange_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::size_type size) -> Physics3D_Interactions_LinearRange_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::size_type

        __init__(Physics3D_Interactions_LinearRange_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::value_type const & value) -> Physics3D_Interactions_LinearRange_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_LinearRange_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_LinearRange_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_LinearRange_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_LinearRange_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_LinearRange_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_LinearRange_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::size_type

        resize(Physics3D_Interactions_LinearRange_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_LinearRange_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::value_type const &

        insert(Physics3D_Interactions_LinearRange_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_LinearRange_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_LinearRange_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearRange > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_LinearRange_Vector

# Register Physics3D_Interactions_LinearRange_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_swigregister(Physics3D_Interactions_LinearRange_Vector)

class Physics3D_Interactions_LinearSpring_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_LinearSpring_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_LinearSpring_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_LinearSpring_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_LinearSpring_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_LinearSpring_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::difference_type j) -> Physics3D_Interactions_LinearSpring_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_LinearSpring_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::difference_type

        __setslice__(Physics3D_Interactions_LinearSpring_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::difference_type j, Physics3D_Interactions_LinearSpring_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_LinearSpring_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_LinearSpring_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::difference_type

        __delitem__(Physics3D_Interactions_LinearSpring_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_LinearSpring_Vector self, PySliceObject * slice) -> Physics3D_Interactions_LinearSpring_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_LinearSpring_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_LinearSpring_Vector self, PySliceObject * slice, Physics3D_Interactions_LinearSpring_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > > > const &

        __setitem__(Physics3D_Interactions_LinearSpring_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_LinearSpring_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_LinearSpring_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_LinearSpring_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_LinearSpring_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_LinearSpring_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_LinearSpring_Vector self, Physics3D_Interactions_LinearSpring_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_LinearSpring_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_LinearSpring_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_LinearSpring_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_LinearSpring_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_LinearSpring_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_LinearSpring_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_LinearSpring_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_LinearSpring_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::iterator

        erase(Physics3D_Interactions_LinearSpring_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_LinearSpring_Vector self) -> Physics3D_Interactions_LinearSpring_Vector
        __init__(Physics3D_Interactions_LinearSpring_Vector self, Physics3D_Interactions_LinearSpring_Vector other) -> Physics3D_Interactions_LinearSpring_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > > const &

        __init__(Physics3D_Interactions_LinearSpring_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::size_type size) -> Physics3D_Interactions_LinearSpring_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::size_type

        __init__(Physics3D_Interactions_LinearSpring_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::value_type const & value) -> Physics3D_Interactions_LinearSpring_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_LinearSpring_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_LinearSpring_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_LinearSpring_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_LinearSpring_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_LinearSpring_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_LinearSpring_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::size_type

        resize(Physics3D_Interactions_LinearSpring_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_LinearSpring_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::value_type const &

        insert(Physics3D_Interactions_LinearSpring_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_LinearSpring_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_LinearSpring_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearSpring > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_LinearSpring_Vector

# Register Physics3D_Interactions_LinearSpring_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_swigregister(Physics3D_Interactions_LinearSpring_Vector)

class Physics3D_Interactions_LinearVelocityMotor_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_LinearVelocityMotor_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_LinearVelocityMotor_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_LinearVelocityMotor_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_LinearVelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::difference_type j) -> Physics3D_Interactions_LinearVelocityMotor_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::difference_type

        __setslice__(Physics3D_Interactions_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::difference_type j, Physics3D_Interactions_LinearVelocityMotor_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::difference_type

        __delitem__(Physics3D_Interactions_LinearVelocityMotor_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_LinearVelocityMotor_Vector self, PySliceObject * slice) -> Physics3D_Interactions_LinearVelocityMotor_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_LinearVelocityMotor_Vector self, PySliceObject * slice, Physics3D_Interactions_LinearVelocityMotor_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > > > const &

        __setitem__(Physics3D_Interactions_LinearVelocityMotor_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_LinearVelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_LinearVelocityMotor_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_LinearVelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_LinearVelocityMotor_Vector self, Physics3D_Interactions_LinearVelocityMotor_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_LinearVelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_LinearVelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_LinearVelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_LinearVelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_LinearVelocityMotor_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_LinearVelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_LinearVelocityMotor_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::iterator

        erase(Physics3D_Interactions_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_LinearVelocityMotor_Vector self) -> Physics3D_Interactions_LinearVelocityMotor_Vector
        __init__(Physics3D_Interactions_LinearVelocityMotor_Vector self, Physics3D_Interactions_LinearVelocityMotor_Vector other) -> Physics3D_Interactions_LinearVelocityMotor_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > > const &

        __init__(Physics3D_Interactions_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::size_type size) -> Physics3D_Interactions_LinearVelocityMotor_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::size_type

        __init__(Physics3D_Interactions_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::value_type const & value) -> Physics3D_Interactions_LinearVelocityMotor_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_LinearVelocityMotor_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_LinearVelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_LinearVelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::size_type

        resize(Physics3D_Interactions_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::value_type const &

        insert(Physics3D_Interactions_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_LinearVelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::LinearVelocityMotor > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_LinearVelocityMotor_Vector

# Register Physics3D_Interactions_LinearVelocityMotor_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_swigregister(Physics3D_Interactions_LinearVelocityMotor_Vector)

class Physics3D_Interactions_Lock_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Lock_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Lock_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Lock_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Lock_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Lock_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::difference_type j) -> Physics3D_Interactions_Lock_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Lock_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::difference_type

        __setslice__(Physics3D_Interactions_Lock_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::difference_type j, Physics3D_Interactions_Lock_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Lock > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Lock_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Lock_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::difference_type

        __delitem__(Physics3D_Interactions_Lock_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Lock_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Lock_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Lock_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Lock_Vector self, PySliceObject * slice, Physics3D_Interactions_Lock_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Lock > > > const &

        __setitem__(Physics3D_Interactions_Lock_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Lock_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Lock_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Lock_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Lock_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Lock_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Lock_Vector self, Physics3D_Interactions_Lock_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Lock_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Lock_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Lock_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Lock_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Lock_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Lock_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Lock_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Lock_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::iterator

        erase(Physics3D_Interactions_Lock_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Lock_Vector self) -> Physics3D_Interactions_Lock_Vector
        __init__(Physics3D_Interactions_Lock_Vector self, Physics3D_Interactions_Lock_Vector other) -> Physics3D_Interactions_Lock_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > > const &

        __init__(Physics3D_Interactions_Lock_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::size_type size) -> Physics3D_Interactions_Lock_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::size_type

        __init__(Physics3D_Interactions_Lock_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::value_type const & value) -> Physics3D_Interactions_Lock_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Lock_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Lock_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Lock_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Lock_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Lock_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Lock_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Lock_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::size_type

        resize(Physics3D_Interactions_Lock_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Lock_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::value_type const &

        insert(Physics3D_Interactions_Lock_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Lock_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Lock_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Lock > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Lock_Vector

# Register Physics3D_Interactions_Lock_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Lock_Vector_swigregister(Physics3D_Interactions_Lock_Vector)

class Physics3D_Interactions_Mate_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Mate_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Mate_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Mate_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Mate_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::difference_type j) -> Physics3D_Interactions_Mate_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::difference_type

        __setslice__(Physics3D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::difference_type j, Physics3D_Interactions_Mate_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Mate > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::difference_type

        __delitem__(Physics3D_Interactions_Mate_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Mate_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Mate_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Mate_Vector self, PySliceObject * slice, Physics3D_Interactions_Mate_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Mate > > > const &

        __setitem__(Physics3D_Interactions_Mate_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Mate_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Mate_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Mate_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Mate_Vector self, Physics3D_Interactions_Mate_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Mate_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Mate_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Mate_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Mate_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Mate_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Mate_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Mate_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::iterator

        erase(Physics3D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Mate_Vector self) -> Physics3D_Interactions_Mate_Vector
        __init__(Physics3D_Interactions_Mate_Vector self, Physics3D_Interactions_Mate_Vector other) -> Physics3D_Interactions_Mate_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > > const &

        __init__(Physics3D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::size_type size) -> Physics3D_Interactions_Mate_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::size_type

        __init__(Physics3D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::value_type const & value) -> Physics3D_Interactions_Mate_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Mate_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Mate_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Mate_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Mate_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::size_type

        resize(Physics3D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::value_type const &

        insert(Physics3D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Mate_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Mate > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Mate_Vector

# Register Physics3D_Interactions_Mate_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Mate_Vector_swigregister(Physics3D_Interactions_Mate_Vector)

class Physics3D_Interactions_Prismatic_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Prismatic_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Prismatic_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Prismatic_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Prismatic_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Prismatic_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::difference_type j) -> Physics3D_Interactions_Prismatic_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Prismatic_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::difference_type

        __setslice__(Physics3D_Interactions_Prismatic_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::difference_type j, Physics3D_Interactions_Prismatic_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Prismatic_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Prismatic_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::difference_type

        __delitem__(Physics3D_Interactions_Prismatic_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Prismatic_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Prismatic_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Prismatic_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Prismatic_Vector self, PySliceObject * slice, Physics3D_Interactions_Prismatic_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > > > const &

        __setitem__(Physics3D_Interactions_Prismatic_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Prismatic_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Prismatic_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Prismatic_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Prismatic_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Prismatic_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Prismatic_Vector self, Physics3D_Interactions_Prismatic_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Prismatic_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Prismatic_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Prismatic_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Prismatic_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Prismatic_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Prismatic_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Prismatic_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Prismatic_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::iterator

        erase(Physics3D_Interactions_Prismatic_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Prismatic_Vector self) -> Physics3D_Interactions_Prismatic_Vector
        __init__(Physics3D_Interactions_Prismatic_Vector self, Physics3D_Interactions_Prismatic_Vector other) -> Physics3D_Interactions_Prismatic_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > > const &

        __init__(Physics3D_Interactions_Prismatic_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::size_type size) -> Physics3D_Interactions_Prismatic_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::size_type

        __init__(Physics3D_Interactions_Prismatic_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::value_type const & value) -> Physics3D_Interactions_Prismatic_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Prismatic_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Prismatic_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Prismatic_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Prismatic_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Prismatic_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Prismatic_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::size_type

        resize(Physics3D_Interactions_Prismatic_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Prismatic_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::value_type const &

        insert(Physics3D_Interactions_Prismatic_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Prismatic_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Prismatic_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Prismatic > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Prismatic_Vector

# Register Physics3D_Interactions_Prismatic_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_swigregister(Physics3D_Interactions_Prismatic_Vector)

class Physics3D_Interactions_RangeInteraction1DOF_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_RangeInteraction1DOF_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_RangeInteraction1DOF_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_RangeInteraction1DOF_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_RangeInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_RangeInteraction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::difference_type j) -> Physics3D_Interactions_RangeInteraction1DOF_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_RangeInteraction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::difference_type

        __setslice__(Physics3D_Interactions_RangeInteraction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::difference_type j, Physics3D_Interactions_RangeInteraction1DOF_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_RangeInteraction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_RangeInteraction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::difference_type

        __delitem__(Physics3D_Interactions_RangeInteraction1DOF_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_RangeInteraction1DOF_Vector self, PySliceObject * slice) -> Physics3D_Interactions_RangeInteraction1DOF_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_RangeInteraction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_RangeInteraction1DOF_Vector self, PySliceObject * slice, Physics3D_Interactions_RangeInteraction1DOF_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > > > const &

        __setitem__(Physics3D_Interactions_RangeInteraction1DOF_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_RangeInteraction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_RangeInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_RangeInteraction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_RangeInteraction1DOF_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_RangeInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_RangeInteraction1DOF_Vector self, Physics3D_Interactions_RangeInteraction1DOF_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_RangeInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_RangeInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_RangeInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_RangeInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_RangeInteraction1DOF_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_RangeInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_RangeInteraction1DOF_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_RangeInteraction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::iterator

        erase(Physics3D_Interactions_RangeInteraction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_RangeInteraction1DOF_Vector self) -> Physics3D_Interactions_RangeInteraction1DOF_Vector
        __init__(Physics3D_Interactions_RangeInteraction1DOF_Vector self, Physics3D_Interactions_RangeInteraction1DOF_Vector other) -> Physics3D_Interactions_RangeInteraction1DOF_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > > const &

        __init__(Physics3D_Interactions_RangeInteraction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::size_type size) -> Physics3D_Interactions_RangeInteraction1DOF_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::size_type

        __init__(Physics3D_Interactions_RangeInteraction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::value_type const & value) -> Physics3D_Interactions_RangeInteraction1DOF_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_RangeInteraction1DOF_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_RangeInteraction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_RangeInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_RangeInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_RangeInteraction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_RangeInteraction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::size_type

        resize(Physics3D_Interactions_RangeInteraction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_RangeInteraction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::value_type const &

        insert(Physics3D_Interactions_RangeInteraction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_RangeInteraction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_RangeInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RangeInteraction1DOF > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_RangeInteraction1DOF_Vector

# Register Physics3D_Interactions_RangeInteraction1DOF_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_swigregister(Physics3D_Interactions_RangeInteraction1DOF_Vector)

class Physics3D_Interactions_RotationalRange_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_RotationalRange_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_RotationalRange_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_RotationalRange_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_RotationalRange_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_RotationalRange_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::difference_type j) -> Physics3D_Interactions_RotationalRange_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_RotationalRange_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::difference_type

        __setslice__(Physics3D_Interactions_RotationalRange_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::difference_type j, Physics3D_Interactions_RotationalRange_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_RotationalRange_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_RotationalRange_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::difference_type

        __delitem__(Physics3D_Interactions_RotationalRange_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_RotationalRange_Vector self, PySliceObject * slice) -> Physics3D_Interactions_RotationalRange_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_RotationalRange_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_RotationalRange_Vector self, PySliceObject * slice, Physics3D_Interactions_RotationalRange_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > > > const &

        __setitem__(Physics3D_Interactions_RotationalRange_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_RotationalRange_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_RotationalRange_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_RotationalRange_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_RotationalRange_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_RotationalRange_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_RotationalRange_Vector self, Physics3D_Interactions_RotationalRange_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_RotationalRange_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_RotationalRange_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_RotationalRange_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_RotationalRange_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_RotationalRange_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_RotationalRange_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_RotationalRange_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_RotationalRange_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::iterator

        erase(Physics3D_Interactions_RotationalRange_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_RotationalRange_Vector self) -> Physics3D_Interactions_RotationalRange_Vector
        __init__(Physics3D_Interactions_RotationalRange_Vector self, Physics3D_Interactions_RotationalRange_Vector other) -> Physics3D_Interactions_RotationalRange_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > > const &

        __init__(Physics3D_Interactions_RotationalRange_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::size_type size) -> Physics3D_Interactions_RotationalRange_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::size_type

        __init__(Physics3D_Interactions_RotationalRange_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::value_type const & value) -> Physics3D_Interactions_RotationalRange_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_RotationalRange_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_RotationalRange_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_RotationalRange_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_RotationalRange_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_RotationalRange_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_RotationalRange_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::size_type

        resize(Physics3D_Interactions_RotationalRange_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_RotationalRange_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::value_type const &

        insert(Physics3D_Interactions_RotationalRange_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_RotationalRange_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_RotationalRange_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalRange > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_RotationalRange_Vector

# Register Physics3D_Interactions_RotationalRange_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_swigregister(Physics3D_Interactions_RotationalRange_Vector)

class Physics3D_Interactions_RotationalVelocityMotor_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_RotationalVelocityMotor_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_RotationalVelocityMotor_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_RotationalVelocityMotor_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_RotationalVelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::difference_type j) -> Physics3D_Interactions_RotationalVelocityMotor_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::difference_type

        __setslice__(Physics3D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::difference_type j, Physics3D_Interactions_RotationalVelocityMotor_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::difference_type

        __delitem__(Physics3D_Interactions_RotationalVelocityMotor_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_RotationalVelocityMotor_Vector self, PySliceObject * slice) -> Physics3D_Interactions_RotationalVelocityMotor_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_RotationalVelocityMotor_Vector self, PySliceObject * slice, Physics3D_Interactions_RotationalVelocityMotor_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > > > const &

        __setitem__(Physics3D_Interactions_RotationalVelocityMotor_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_RotationalVelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_RotationalVelocityMotor_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_RotationalVelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_RotationalVelocityMotor_Vector self, Physics3D_Interactions_RotationalVelocityMotor_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_RotationalVelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_RotationalVelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_RotationalVelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_RotationalVelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_RotationalVelocityMotor_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_RotationalVelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_RotationalVelocityMotor_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::iterator

        erase(Physics3D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_RotationalVelocityMotor_Vector self) -> Physics3D_Interactions_RotationalVelocityMotor_Vector
        __init__(Physics3D_Interactions_RotationalVelocityMotor_Vector self, Physics3D_Interactions_RotationalVelocityMotor_Vector other) -> Physics3D_Interactions_RotationalVelocityMotor_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > > const &

        __init__(Physics3D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::size_type size) -> Physics3D_Interactions_RotationalVelocityMotor_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::size_type

        __init__(Physics3D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::value_type const & value) -> Physics3D_Interactions_RotationalVelocityMotor_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_RotationalVelocityMotor_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_RotationalVelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_RotationalVelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::size_type

        resize(Physics3D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::value_type const &

        insert(Physics3D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_RotationalVelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::RotationalVelocityMotor > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_RotationalVelocityMotor_Vector

# Register Physics3D_Interactions_RotationalVelocityMotor_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_swigregister(Physics3D_Interactions_RotationalVelocityMotor_Vector)

class Physics3D_Interactions_SpringInteraction1DOF_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_SpringInteraction1DOF_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_SpringInteraction1DOF_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_SpringInteraction1DOF_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_SpringInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::difference_type j) -> Physics3D_Interactions_SpringInteraction1DOF_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::difference_type

        __setslice__(Physics3D_Interactions_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::difference_type j, Physics3D_Interactions_SpringInteraction1DOF_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::difference_type

        __delitem__(Physics3D_Interactions_SpringInteraction1DOF_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_SpringInteraction1DOF_Vector self, PySliceObject * slice) -> Physics3D_Interactions_SpringInteraction1DOF_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_SpringInteraction1DOF_Vector self, PySliceObject * slice, Physics3D_Interactions_SpringInteraction1DOF_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > > > const &

        __setitem__(Physics3D_Interactions_SpringInteraction1DOF_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_SpringInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_SpringInteraction1DOF_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_SpringInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_SpringInteraction1DOF_Vector self, Physics3D_Interactions_SpringInteraction1DOF_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_SpringInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_SpringInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_SpringInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_SpringInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_SpringInteraction1DOF_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_SpringInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_SpringInteraction1DOF_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::iterator

        erase(Physics3D_Interactions_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_SpringInteraction1DOF_Vector self) -> Physics3D_Interactions_SpringInteraction1DOF_Vector
        __init__(Physics3D_Interactions_SpringInteraction1DOF_Vector self, Physics3D_Interactions_SpringInteraction1DOF_Vector other) -> Physics3D_Interactions_SpringInteraction1DOF_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > > const &

        __init__(Physics3D_Interactions_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::size_type size) -> Physics3D_Interactions_SpringInteraction1DOF_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::size_type

        __init__(Physics3D_Interactions_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::value_type const & value) -> Physics3D_Interactions_SpringInteraction1DOF_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_SpringInteraction1DOF_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_SpringInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_SpringInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::size_type

        resize(Physics3D_Interactions_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::value_type const &

        insert(Physics3D_Interactions_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_SpringInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SpringInteraction1DOF > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_SpringInteraction1DOF_Vector

# Register Physics3D_Interactions_SpringInteraction1DOF_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_swigregister(Physics3D_Interactions_SpringInteraction1DOF_Vector)

class Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::difference_type j) -> Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::difference_type

        __setslice__(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::difference_type j, Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::difference_type

        __delitem__(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector self, PySliceObject * slice) -> Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector self, PySliceObject * slice, Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > > > const &

        __setitem__(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector self, Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::iterator

        erase(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector self) -> Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector
        __init__(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector self, Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector other) -> Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > > const &

        __init__(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::size_type size) -> Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::size_type

        __init__(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::value_type const & value) -> Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::size_type

        resize(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::value_type const &

        insert(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector

# Register Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector_swigregister(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_Vector)

class Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::difference_type j) -> Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::difference_type

        __setslice__(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::difference_type j, Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::difference_type

        __delitem__(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, PySliceObject * slice) -> Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, PySliceObject * slice, Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > > > const &

        __setitem__(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::iterator

        erase(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self) -> Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector
        __init__(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector other) -> Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > > const &

        __init__(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::size_type size) -> Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::size_type

        __init__(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::value_type const & value) -> Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::size_type

        resize(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::value_type const &

        insert(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector

# Register Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_swigregister(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector)

class Physics3D_Interactions_TorqueMotor_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_TorqueMotor_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_TorqueMotor_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_TorqueMotor_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_TorqueMotor_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_TorqueMotor_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_TorqueMotor_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_TorqueMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_TorqueMotor_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_TorqueMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::difference_type j) -> Physics3D_Interactions_TorqueMotor_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_TorqueMotor_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_TorqueMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::difference_type

        __setslice__(Physics3D_Interactions_TorqueMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::difference_type j, Physics3D_Interactions_TorqueMotor_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_TorqueMotor_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_TorqueMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_TorqueMotor_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_TorqueMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::difference_type

        __delitem__(Physics3D_Interactions_TorqueMotor_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_TorqueMotor_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_TorqueMotor_Vector self, PySliceObject * slice) -> Physics3D_Interactions_TorqueMotor_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_TorqueMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_TorqueMotor_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_TorqueMotor_Vector self, PySliceObject * slice, Physics3D_Interactions_TorqueMotor_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > > > const &

        __setitem__(Physics3D_Interactions_TorqueMotor_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_TorqueMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_TorqueMotor_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_TorqueMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_TorqueMotor_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_TorqueMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_TorqueMotor_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_TorqueMotor_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_TorqueMotor_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_TorqueMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_TorqueMotor_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_TorqueMotor_Vector self, Physics3D_Interactions_TorqueMotor_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_TorqueMotor_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_TorqueMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_TorqueMotor_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_TorqueMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_TorqueMotor_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_TorqueMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_TorqueMotor_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_TorqueMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_TorqueMotor_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_TorqueMotor_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_TorqueMotor_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_TorqueMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_TorqueMotor_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_TorqueMotor_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_TorqueMotor_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_TorqueMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::iterator

        erase(Physics3D_Interactions_TorqueMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_TorqueMotor_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_TorqueMotor_Vector self) -> Physics3D_Interactions_TorqueMotor_Vector
        __init__(Physics3D_Interactions_TorqueMotor_Vector self, Physics3D_Interactions_TorqueMotor_Vector other) -> Physics3D_Interactions_TorqueMotor_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > > const &

        __init__(Physics3D_Interactions_TorqueMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::size_type size) -> Physics3D_Interactions_TorqueMotor_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::size_type

        __init__(Physics3D_Interactions_TorqueMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::value_type const & value) -> Physics3D_Interactions_TorqueMotor_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_TorqueMotor_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_TorqueMotor_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_TorqueMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_TorqueMotor_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_TorqueMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_TorqueMotor_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_TorqueMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_TorqueMotor_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_TorqueMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_TorqueMotor_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_TorqueMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::size_type

        resize(Physics3D_Interactions_TorqueMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_TorqueMotor_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_TorqueMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::value_type const &

        insert(Physics3D_Interactions_TorqueMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_TorqueMotor_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_TorqueMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_TorqueMotor_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_TorqueMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorqueMotor > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_TorqueMotor_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_TorqueMotor_Vector

# Register Physics3D_Interactions_TorqueMotor_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_TorqueMotor_Vector_swigregister(Physics3D_Interactions_TorqueMotor_Vector)

class Physics3D_Interactions_TorsionSpring_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_TorsionSpring_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_TorsionSpring_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_TorsionSpring_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_TorsionSpring_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_TorsionSpring_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::difference_type j) -> Physics3D_Interactions_TorsionSpring_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_TorsionSpring_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::difference_type

        __setslice__(Physics3D_Interactions_TorsionSpring_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::difference_type j, Physics3D_Interactions_TorsionSpring_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_TorsionSpring_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_TorsionSpring_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::difference_type

        __delitem__(Physics3D_Interactions_TorsionSpring_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_TorsionSpring_Vector self, PySliceObject * slice) -> Physics3D_Interactions_TorsionSpring_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_TorsionSpring_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_TorsionSpring_Vector self, PySliceObject * slice, Physics3D_Interactions_TorsionSpring_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > > > const &

        __setitem__(Physics3D_Interactions_TorsionSpring_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_TorsionSpring_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_TorsionSpring_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_TorsionSpring_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_TorsionSpring_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_TorsionSpring_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_TorsionSpring_Vector self, Physics3D_Interactions_TorsionSpring_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_TorsionSpring_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_TorsionSpring_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_TorsionSpring_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_TorsionSpring_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_TorsionSpring_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_TorsionSpring_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_TorsionSpring_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_TorsionSpring_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::iterator

        erase(Physics3D_Interactions_TorsionSpring_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_TorsionSpring_Vector self) -> Physics3D_Interactions_TorsionSpring_Vector
        __init__(Physics3D_Interactions_TorsionSpring_Vector self, Physics3D_Interactions_TorsionSpring_Vector other) -> Physics3D_Interactions_TorsionSpring_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > > const &

        __init__(Physics3D_Interactions_TorsionSpring_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::size_type size) -> Physics3D_Interactions_TorsionSpring_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::size_type

        __init__(Physics3D_Interactions_TorsionSpring_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::value_type const & value) -> Physics3D_Interactions_TorsionSpring_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_TorsionSpring_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_TorsionSpring_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_TorsionSpring_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_TorsionSpring_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_TorsionSpring_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_TorsionSpring_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::size_type

        resize(Physics3D_Interactions_TorsionSpring_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_TorsionSpring_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::value_type const &

        insert(Physics3D_Interactions_TorsionSpring_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_TorsionSpring_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_TorsionSpring_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::TorsionSpring > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_TorsionSpring_Vector

# Register Physics3D_Interactions_TorsionSpring_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_swigregister(Physics3D_Interactions_TorsionSpring_Vector)

class Physics3D_Interactions_Toughness_BallThresholdFracture_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Toughness_BallThresholdFracture_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Toughness_BallThresholdFracture_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Toughness_BallThresholdFracture_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Toughness_BallThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Toughness_BallThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::difference_type j) -> Physics3D_Interactions_Toughness_BallThresholdFracture_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Toughness_BallThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::difference_type

        __setslice__(Physics3D_Interactions_Toughness_BallThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::difference_type j, Physics3D_Interactions_Toughness_BallThresholdFracture_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Toughness_BallThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Toughness_BallThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::difference_type

        __delitem__(Physics3D_Interactions_Toughness_BallThresholdFracture_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Toughness_BallThresholdFracture_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Toughness_BallThresholdFracture_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Toughness_BallThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Toughness_BallThresholdFracture_Vector self, PySliceObject * slice, Physics3D_Interactions_Toughness_BallThresholdFracture_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > > > const &

        __setitem__(Physics3D_Interactions_Toughness_BallThresholdFracture_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Toughness_BallThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Toughness_BallThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Toughness_BallThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Toughness_BallThresholdFracture_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Toughness_BallThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Toughness_BallThresholdFracture_Vector self, Physics3D_Interactions_Toughness_BallThresholdFracture_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Toughness_BallThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Toughness_BallThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Toughness_BallThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Toughness_BallThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Toughness_BallThresholdFracture_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Toughness_BallThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Toughness_BallThresholdFracture_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Toughness_BallThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::iterator

        erase(Physics3D_Interactions_Toughness_BallThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Toughness_BallThresholdFracture_Vector self) -> Physics3D_Interactions_Toughness_BallThresholdFracture_Vector
        __init__(Physics3D_Interactions_Toughness_BallThresholdFracture_Vector self, Physics3D_Interactions_Toughness_BallThresholdFracture_Vector other) -> Physics3D_Interactions_Toughness_BallThresholdFracture_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > > const &

        __init__(Physics3D_Interactions_Toughness_BallThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::size_type size) -> Physics3D_Interactions_Toughness_BallThresholdFracture_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::size_type

        __init__(Physics3D_Interactions_Toughness_BallThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::value_type const & value) -> Physics3D_Interactions_Toughness_BallThresholdFracture_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Toughness_BallThresholdFracture_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Toughness_BallThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Toughness_BallThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Toughness_BallThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Toughness_BallThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Toughness_BallThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::size_type

        resize(Physics3D_Interactions_Toughness_BallThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Toughness_BallThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::value_type const &

        insert(Physics3D_Interactions_Toughness_BallThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Toughness_BallThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Toughness_BallThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::BallThresholdFracture > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Toughness_BallThresholdFracture_Vector

# Register Physics3D_Interactions_Toughness_BallThresholdFracture_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_Vector_swigregister(Physics3D_Interactions_Toughness_BallThresholdFracture_Vector)

class Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::difference_type j) -> Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::difference_type

        __setslice__(Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::difference_type j, Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::difference_type

        __delitem__(Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector self, PySliceObject * slice, Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > > > const &

        __setitem__(Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector self, Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::iterator

        erase(Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector self) -> Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector
        __init__(Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector self, Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector other) -> Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > > const &

        __init__(Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::size_type size) -> Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::size_type

        __init__(Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::value_type const & value) -> Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::size_type

        resize(Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::value_type const &

        insert(Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector

# Register Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector_swigregister(Physics3D_Interactions_Toughness_CylindricalThresholdFracture_Vector)

class Physics3D_Interactions_Toughness_DefaultBallToughness_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Toughness_DefaultBallToughness_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultBallToughness_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Toughness_DefaultBallToughness_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultBallToughness_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Toughness_DefaultBallToughness_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultBallToughness_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Toughness_DefaultBallToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultBallToughness_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Toughness_DefaultBallToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::difference_type j) -> Physics3D_Interactions_Toughness_DefaultBallToughness_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultBallToughness_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Toughness_DefaultBallToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::difference_type

        __setslice__(Physics3D_Interactions_Toughness_DefaultBallToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::difference_type j, Physics3D_Interactions_Toughness_DefaultBallToughness_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultBallToughness_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Toughness_DefaultBallToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultBallToughness_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Toughness_DefaultBallToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::difference_type

        __delitem__(Physics3D_Interactions_Toughness_DefaultBallToughness_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultBallToughness_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Toughness_DefaultBallToughness_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Toughness_DefaultBallToughness_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Toughness_DefaultBallToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultBallToughness_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Toughness_DefaultBallToughness_Vector self, PySliceObject * slice, Physics3D_Interactions_Toughness_DefaultBallToughness_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > > > const &

        __setitem__(Physics3D_Interactions_Toughness_DefaultBallToughness_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Toughness_DefaultBallToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultBallToughness_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Toughness_DefaultBallToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultBallToughness_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Toughness_DefaultBallToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultBallToughness_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Toughness_DefaultBallToughness_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultBallToughness_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Toughness_DefaultBallToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultBallToughness_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Toughness_DefaultBallToughness_Vector self, Physics3D_Interactions_Toughness_DefaultBallToughness_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultBallToughness_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Toughness_DefaultBallToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultBallToughness_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Toughness_DefaultBallToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultBallToughness_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Toughness_DefaultBallToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultBallToughness_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Toughness_DefaultBallToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultBallToughness_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Toughness_DefaultBallToughness_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultBallToughness_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Toughness_DefaultBallToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultBallToughness_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Toughness_DefaultBallToughness_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultBallToughness_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Toughness_DefaultBallToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::iterator

        erase(Physics3D_Interactions_Toughness_DefaultBallToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultBallToughness_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Toughness_DefaultBallToughness_Vector self) -> Physics3D_Interactions_Toughness_DefaultBallToughness_Vector
        __init__(Physics3D_Interactions_Toughness_DefaultBallToughness_Vector self, Physics3D_Interactions_Toughness_DefaultBallToughness_Vector other) -> Physics3D_Interactions_Toughness_DefaultBallToughness_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > > const &

        __init__(Physics3D_Interactions_Toughness_DefaultBallToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::size_type size) -> Physics3D_Interactions_Toughness_DefaultBallToughness_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::size_type

        __init__(Physics3D_Interactions_Toughness_DefaultBallToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::value_type const & value) -> Physics3D_Interactions_Toughness_DefaultBallToughness_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultBallToughness_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Toughness_DefaultBallToughness_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Toughness_DefaultBallToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultBallToughness_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Toughness_DefaultBallToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultBallToughness_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Toughness_DefaultBallToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultBallToughness_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Toughness_DefaultBallToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultBallToughness_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Toughness_DefaultBallToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::size_type

        resize(Physics3D_Interactions_Toughness_DefaultBallToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultBallToughness_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Toughness_DefaultBallToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::value_type const &

        insert(Physics3D_Interactions_Toughness_DefaultBallToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultBallToughness_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Toughness_DefaultBallToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultBallToughness_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Toughness_DefaultBallToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultBallToughness_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Toughness_DefaultBallToughness_Vector

# Register Physics3D_Interactions_Toughness_DefaultBallToughness_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Toughness_DefaultBallToughness_Vector_swigregister(Physics3D_Interactions_Toughness_DefaultBallToughness_Vector)

class Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::difference_type j) -> Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::difference_type

        __setslice__(Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::difference_type j, Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::difference_type

        __delitem__(Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector self, PySliceObject * slice, Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > > > const &

        __setitem__(Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector self, Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::iterator

        erase(Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector self) -> Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector
        __init__(Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector self, Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector other) -> Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > > const &

        __init__(Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::size_type size) -> Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::size_type

        __init__(Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::value_type const & value) -> Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::size_type

        resize(Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::value_type const &

        insert(Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector

# Register Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector_swigregister(Physics3D_Interactions_Toughness_DefaultCylindricalToughness_Vector)

class Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::difference_type j) -> Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::difference_type

        __setslice__(Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::difference_type j, Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::difference_type

        __delitem__(Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector self, PySliceObject * slice, Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > > > const &

        __setitem__(Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector self, Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::iterator

        erase(Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector self) -> Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector
        __init__(Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector self, Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector other) -> Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > > const &

        __init__(Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::size_type size) -> Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::size_type

        __init__(Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::value_type const & value) -> Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::size_type

        resize(Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::value_type const &

        insert(Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector

# Register Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector_swigregister(Physics3D_Interactions_Toughness_DefaultHingeToughness_Vector)

class Physics3D_Interactions_Toughness_DefaultLockToughness_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Toughness_DefaultLockToughness_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Toughness_DefaultLockToughness_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Toughness_DefaultLockToughness_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Toughness_DefaultLockToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Toughness_DefaultLockToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::difference_type j) -> Physics3D_Interactions_Toughness_DefaultLockToughness_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Toughness_DefaultLockToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::difference_type

        __setslice__(Physics3D_Interactions_Toughness_DefaultLockToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::difference_type j, Physics3D_Interactions_Toughness_DefaultLockToughness_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Toughness_DefaultLockToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Toughness_DefaultLockToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::difference_type

        __delitem__(Physics3D_Interactions_Toughness_DefaultLockToughness_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Toughness_DefaultLockToughness_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Toughness_DefaultLockToughness_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Toughness_DefaultLockToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Toughness_DefaultLockToughness_Vector self, PySliceObject * slice, Physics3D_Interactions_Toughness_DefaultLockToughness_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > > > const &

        __setitem__(Physics3D_Interactions_Toughness_DefaultLockToughness_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Toughness_DefaultLockToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Toughness_DefaultLockToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Toughness_DefaultLockToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Toughness_DefaultLockToughness_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Toughness_DefaultLockToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Toughness_DefaultLockToughness_Vector self, Physics3D_Interactions_Toughness_DefaultLockToughness_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Toughness_DefaultLockToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Toughness_DefaultLockToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Toughness_DefaultLockToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Toughness_DefaultLockToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Toughness_DefaultLockToughness_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Toughness_DefaultLockToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Toughness_DefaultLockToughness_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Toughness_DefaultLockToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::iterator

        erase(Physics3D_Interactions_Toughness_DefaultLockToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Toughness_DefaultLockToughness_Vector self) -> Physics3D_Interactions_Toughness_DefaultLockToughness_Vector
        __init__(Physics3D_Interactions_Toughness_DefaultLockToughness_Vector self, Physics3D_Interactions_Toughness_DefaultLockToughness_Vector other) -> Physics3D_Interactions_Toughness_DefaultLockToughness_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > > const &

        __init__(Physics3D_Interactions_Toughness_DefaultLockToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::size_type size) -> Physics3D_Interactions_Toughness_DefaultLockToughness_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::size_type

        __init__(Physics3D_Interactions_Toughness_DefaultLockToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::value_type const & value) -> Physics3D_Interactions_Toughness_DefaultLockToughness_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Toughness_DefaultLockToughness_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Toughness_DefaultLockToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Toughness_DefaultLockToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Toughness_DefaultLockToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Toughness_DefaultLockToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Toughness_DefaultLockToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::size_type

        resize(Physics3D_Interactions_Toughness_DefaultLockToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Toughness_DefaultLockToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::value_type const &

        insert(Physics3D_Interactions_Toughness_DefaultLockToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Toughness_DefaultLockToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Toughness_DefaultLockToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Toughness_DefaultLockToughness_Vector

# Register Physics3D_Interactions_Toughness_DefaultLockToughness_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_Vector_swigregister(Physics3D_Interactions_Toughness_DefaultLockToughness_Vector)

class Physics3D_Interactions_Toughness_DefaultMateToughness_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Toughness_DefaultMateToughness_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultMateToughness_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Toughness_DefaultMateToughness_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultMateToughness_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Toughness_DefaultMateToughness_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultMateToughness_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Toughness_DefaultMateToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultMateToughness_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Toughness_DefaultMateToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::difference_type j) -> Physics3D_Interactions_Toughness_DefaultMateToughness_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultMateToughness_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Toughness_DefaultMateToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::difference_type

        __setslice__(Physics3D_Interactions_Toughness_DefaultMateToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::difference_type j, Physics3D_Interactions_Toughness_DefaultMateToughness_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultMateToughness_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Toughness_DefaultMateToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultMateToughness_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Toughness_DefaultMateToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::difference_type

        __delitem__(Physics3D_Interactions_Toughness_DefaultMateToughness_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultMateToughness_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Toughness_DefaultMateToughness_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Toughness_DefaultMateToughness_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Toughness_DefaultMateToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultMateToughness_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Toughness_DefaultMateToughness_Vector self, PySliceObject * slice, Physics3D_Interactions_Toughness_DefaultMateToughness_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > > > const &

        __setitem__(Physics3D_Interactions_Toughness_DefaultMateToughness_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Toughness_DefaultMateToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultMateToughness_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Toughness_DefaultMateToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultMateToughness_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Toughness_DefaultMateToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultMateToughness_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Toughness_DefaultMateToughness_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultMateToughness_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Toughness_DefaultMateToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultMateToughness_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Toughness_DefaultMateToughness_Vector self, Physics3D_Interactions_Toughness_DefaultMateToughness_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultMateToughness_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Toughness_DefaultMateToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultMateToughness_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Toughness_DefaultMateToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultMateToughness_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Toughness_DefaultMateToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultMateToughness_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Toughness_DefaultMateToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultMateToughness_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Toughness_DefaultMateToughness_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultMateToughness_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Toughness_DefaultMateToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultMateToughness_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Toughness_DefaultMateToughness_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultMateToughness_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Toughness_DefaultMateToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::iterator

        erase(Physics3D_Interactions_Toughness_DefaultMateToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultMateToughness_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Toughness_DefaultMateToughness_Vector self) -> Physics3D_Interactions_Toughness_DefaultMateToughness_Vector
        __init__(Physics3D_Interactions_Toughness_DefaultMateToughness_Vector self, Physics3D_Interactions_Toughness_DefaultMateToughness_Vector other) -> Physics3D_Interactions_Toughness_DefaultMateToughness_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > > const &

        __init__(Physics3D_Interactions_Toughness_DefaultMateToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::size_type size) -> Physics3D_Interactions_Toughness_DefaultMateToughness_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::size_type

        __init__(Physics3D_Interactions_Toughness_DefaultMateToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::value_type const & value) -> Physics3D_Interactions_Toughness_DefaultMateToughness_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultMateToughness_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Toughness_DefaultMateToughness_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Toughness_DefaultMateToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultMateToughness_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Toughness_DefaultMateToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultMateToughness_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Toughness_DefaultMateToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultMateToughness_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Toughness_DefaultMateToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultMateToughness_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Toughness_DefaultMateToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::size_type

        resize(Physics3D_Interactions_Toughness_DefaultMateToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultMateToughness_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Toughness_DefaultMateToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::value_type const &

        insert(Physics3D_Interactions_Toughness_DefaultMateToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultMateToughness_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Toughness_DefaultMateToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultMateToughness_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Toughness_DefaultMateToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultMateToughness_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Toughness_DefaultMateToughness_Vector

# Register Physics3D_Interactions_Toughness_DefaultMateToughness_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Toughness_DefaultMateToughness_Vector_swigregister(Physics3D_Interactions_Toughness_DefaultMateToughness_Vector)

class Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::difference_type j) -> Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::difference_type

        __setslice__(Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::difference_type j, Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::difference_type

        __delitem__(Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector self, PySliceObject * slice, Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > > > const &

        __setitem__(Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector self, Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::iterator

        erase(Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector self) -> Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector
        __init__(Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector self, Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector other) -> Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > > const &

        __init__(Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::size_type size) -> Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::size_type

        __init__(Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::value_type const & value) -> Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::size_type

        resize(Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::value_type const &

        insert(Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector

# Register Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector_swigregister(Physics3D_Interactions_Toughness_DefaultPrismaticToughness_Vector)

class Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::difference_type j) -> Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::difference_type

        __setslice__(Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::difference_type j, Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::difference_type

        __delitem__(Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector self, PySliceObject * slice, Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > > > const &

        __setitem__(Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector self, Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::iterator

        erase(Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector self) -> Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector
        __init__(Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector self, Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector other) -> Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > > const &

        __init__(Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::size_type size) -> Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::size_type

        __init__(Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::value_type const & value) -> Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::size_type

        resize(Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::value_type const &

        insert(Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector

# Register Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector_swigregister(Physics3D_Interactions_Toughness_HingeThresholdFracture_Vector)

class Physics3D_Interactions_Toughness_LockThresholdFracture_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Toughness_LockThresholdFracture_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Toughness_LockThresholdFracture_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Toughness_LockThresholdFracture_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Toughness_LockThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Toughness_LockThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::difference_type j) -> Physics3D_Interactions_Toughness_LockThresholdFracture_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Toughness_LockThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::difference_type

        __setslice__(Physics3D_Interactions_Toughness_LockThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::difference_type j, Physics3D_Interactions_Toughness_LockThresholdFracture_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Toughness_LockThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Toughness_LockThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::difference_type

        __delitem__(Physics3D_Interactions_Toughness_LockThresholdFracture_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Toughness_LockThresholdFracture_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Toughness_LockThresholdFracture_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Toughness_LockThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Toughness_LockThresholdFracture_Vector self, PySliceObject * slice, Physics3D_Interactions_Toughness_LockThresholdFracture_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > > > const &

        __setitem__(Physics3D_Interactions_Toughness_LockThresholdFracture_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Toughness_LockThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Toughness_LockThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Toughness_LockThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Toughness_LockThresholdFracture_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Toughness_LockThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Toughness_LockThresholdFracture_Vector self, Physics3D_Interactions_Toughness_LockThresholdFracture_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Toughness_LockThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Toughness_LockThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Toughness_LockThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Toughness_LockThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Toughness_LockThresholdFracture_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Toughness_LockThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Toughness_LockThresholdFracture_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Toughness_LockThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::iterator

        erase(Physics3D_Interactions_Toughness_LockThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Toughness_LockThresholdFracture_Vector self) -> Physics3D_Interactions_Toughness_LockThresholdFracture_Vector
        __init__(Physics3D_Interactions_Toughness_LockThresholdFracture_Vector self, Physics3D_Interactions_Toughness_LockThresholdFracture_Vector other) -> Physics3D_Interactions_Toughness_LockThresholdFracture_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > > const &

        __init__(Physics3D_Interactions_Toughness_LockThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::size_type size) -> Physics3D_Interactions_Toughness_LockThresholdFracture_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::size_type

        __init__(Physics3D_Interactions_Toughness_LockThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::value_type const & value) -> Physics3D_Interactions_Toughness_LockThresholdFracture_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Toughness_LockThresholdFracture_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Toughness_LockThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Toughness_LockThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Toughness_LockThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Toughness_LockThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Toughness_LockThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::size_type

        resize(Physics3D_Interactions_Toughness_LockThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Toughness_LockThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::value_type const &

        insert(Physics3D_Interactions_Toughness_LockThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Toughness_LockThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Toughness_LockThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::LockThresholdFracture > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Toughness_LockThresholdFracture_Vector

# Register Physics3D_Interactions_Toughness_LockThresholdFracture_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_Vector_swigregister(Physics3D_Interactions_Toughness_LockThresholdFracture_Vector)

class Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::difference_type j) -> Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::difference_type

        __setslice__(Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::difference_type j, Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::difference_type

        __delitem__(Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector self, PySliceObject * slice, Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > > > const &

        __setitem__(Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector self, Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::iterator

        erase(Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector self) -> Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector
        __init__(Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector self, Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector other) -> Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > > const &

        __init__(Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::size_type size) -> Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::size_type

        __init__(Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::value_type const & value) -> Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::size_type

        resize(Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::value_type const &

        insert(Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector

# Register Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector_swigregister(Physics3D_Interactions_Toughness_PrismaticThresholdFracture_Vector)

class Physics3D_Interactions_VelocityMotor_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_VelocityMotor_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_VelocityMotor_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_VelocityMotor_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_VelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::difference_type j) -> Physics3D_Interactions_VelocityMotor_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::difference_type

        __setslice__(Physics3D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::difference_type j, Physics3D_Interactions_VelocityMotor_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::difference_type

        __delitem__(Physics3D_Interactions_VelocityMotor_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_VelocityMotor_Vector self, PySliceObject * slice) -> Physics3D_Interactions_VelocityMotor_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_VelocityMotor_Vector self, PySliceObject * slice, Physics3D_Interactions_VelocityMotor_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor >,std::allocator< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > > > const &

        __setitem__(Physics3D_Interactions_VelocityMotor_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_VelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_VelocityMotor_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_VelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_VelocityMotor_Vector self, Physics3D_Interactions_VelocityMotor_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_VelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_VelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_VelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_VelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_VelocityMotor_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_VelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_VelocityMotor_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::iterator

        erase(Physics3D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_VelocityMotor_Vector self) -> Physics3D_Interactions_VelocityMotor_Vector
        __init__(Physics3D_Interactions_VelocityMotor_Vector self, Physics3D_Interactions_VelocityMotor_Vector other) -> Physics3D_Interactions_VelocityMotor_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > > const &

        __init__(Physics3D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::size_type size) -> Physics3D_Interactions_VelocityMotor_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::size_type

        __init__(Physics3D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::value_type const & value) -> Physics3D_Interactions_VelocityMotor_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_VelocityMotor_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_VelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_VelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::size_type

        resize(Physics3D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::value_type const &

        insert(Physics3D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_VelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Interactions::VelocityMotor > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_VelocityMotor_Vector

# Register Physics3D_Interactions_VelocityMotor_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_swigregister(Physics3D_Interactions_VelocityMotor_Vector)

class Physics3D_Signals_AngularVelocity3DInput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Signals_AngularVelocity3DInput_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DInput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Signals_AngularVelocity3DInput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DInput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Signals_AngularVelocity3DInput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DInput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Signals_AngularVelocity3DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DInput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Signals_AngularVelocity3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::difference_type j) -> Physics3D_Signals_AngularVelocity3DInput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DInput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Signals_AngularVelocity3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::difference_type

        __setslice__(Physics3D_Signals_AngularVelocity3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::difference_type j, Physics3D_Signals_AngularVelocity3DInput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput >,std::allocator< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > > > const &

        """
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DInput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Signals_AngularVelocity3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DInput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Signals_AngularVelocity3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::difference_type

        __delitem__(Physics3D_Signals_AngularVelocity3DInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DInput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Signals_AngularVelocity3DInput_Vector self, PySliceObject * slice) -> Physics3D_Signals_AngularVelocity3DInput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Signals_AngularVelocity3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DInput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Signals_AngularVelocity3DInput_Vector self, PySliceObject * slice, Physics3D_Signals_AngularVelocity3DInput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput >,std::allocator< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > > > const &

        __setitem__(Physics3D_Signals_AngularVelocity3DInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Signals_AngularVelocity3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DInput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Signals_AngularVelocity3DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::value_type"""
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DInput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Signals_AngularVelocity3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DInput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Signals_AngularVelocity3DInput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DInput_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Signals_AngularVelocity3DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DInput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Signals_AngularVelocity3DInput_Vector self, Physics3D_Signals_AngularVelocity3DInput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > > &

        """
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DInput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Signals_AngularVelocity3DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DInput_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Signals_AngularVelocity3DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DInput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Signals_AngularVelocity3DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DInput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Signals_AngularVelocity3DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DInput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Signals_AngularVelocity3DInput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DInput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Signals_AngularVelocity3DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DInput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Signals_AngularVelocity3DInput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DInput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Signals_AngularVelocity3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::iterator

        erase(Physics3D_Signals_AngularVelocity3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::iterator

        """
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DInput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Signals_AngularVelocity3DInput_Vector self) -> Physics3D_Signals_AngularVelocity3DInput_Vector
        __init__(Physics3D_Signals_AngularVelocity3DInput_Vector self, Physics3D_Signals_AngularVelocity3DInput_Vector other) -> Physics3D_Signals_AngularVelocity3DInput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > > const &

        __init__(Physics3D_Signals_AngularVelocity3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::size_type size) -> Physics3D_Signals_AngularVelocity3DInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::size_type

        __init__(Physics3D_Signals_AngularVelocity3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::value_type const & value) -> Physics3D_Signals_AngularVelocity3DInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Signals_AngularVelocity3DInput_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Signals_AngularVelocity3DInput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Signals_AngularVelocity3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DInput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Signals_AngularVelocity3DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DInput_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Signals_AngularVelocity3DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DInput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Signals_AngularVelocity3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DInput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Signals_AngularVelocity3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::size_type

        resize(Physics3D_Signals_AngularVelocity3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DInput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Signals_AngularVelocity3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::value_type const &

        insert(Physics3D_Signals_AngularVelocity3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DInput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Signals_AngularVelocity3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::size_type

        """
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DInput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Signals_AngularVelocity3DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DInput_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Signals_AngularVelocity3DInput_Vector

# Register Physics3D_Signals_AngularVelocity3DInput_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Signals_AngularVelocity3DInput_Vector_swigregister(Physics3D_Signals_AngularVelocity3DInput_Vector)

class Physics3D_Signals_AngularVelocity3DOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Signals_AngularVelocity3DOutput_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Signals_AngularVelocity3DOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Signals_AngularVelocity3DOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Signals_AngularVelocity3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Signals_AngularVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::difference_type j) -> Physics3D_Signals_AngularVelocity3DOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Signals_AngularVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::difference_type

        __setslice__(Physics3D_Signals_AngularVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::difference_type j, Physics3D_Signals_AngularVelocity3DOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput >,std::allocator< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > > > const &

        """
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Signals_AngularVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Signals_AngularVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::difference_type

        __delitem__(Physics3D_Signals_AngularVelocity3DOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Signals_AngularVelocity3DOutput_Vector self, PySliceObject * slice) -> Physics3D_Signals_AngularVelocity3DOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Signals_AngularVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Signals_AngularVelocity3DOutput_Vector self, PySliceObject * slice, Physics3D_Signals_AngularVelocity3DOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput >,std::allocator< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > > > const &

        __setitem__(Physics3D_Signals_AngularVelocity3DOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Signals_AngularVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Signals_AngularVelocity3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::value_type"""
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Signals_AngularVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Signals_AngularVelocity3DOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DOutput_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Signals_AngularVelocity3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Signals_AngularVelocity3DOutput_Vector self, Physics3D_Signals_AngularVelocity3DOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > > &

        """
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Signals_AngularVelocity3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DOutput_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Signals_AngularVelocity3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Signals_AngularVelocity3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Signals_AngularVelocity3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DOutput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Signals_AngularVelocity3DOutput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Signals_AngularVelocity3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Signals_AngularVelocity3DOutput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Signals_AngularVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::iterator

        erase(Physics3D_Signals_AngularVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::iterator

        """
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Signals_AngularVelocity3DOutput_Vector self) -> Physics3D_Signals_AngularVelocity3DOutput_Vector
        __init__(Physics3D_Signals_AngularVelocity3DOutput_Vector self, Physics3D_Signals_AngularVelocity3DOutput_Vector other) -> Physics3D_Signals_AngularVelocity3DOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > > const &

        __init__(Physics3D_Signals_AngularVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::size_type size) -> Physics3D_Signals_AngularVelocity3DOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::size_type

        __init__(Physics3D_Signals_AngularVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::value_type const & value) -> Physics3D_Signals_AngularVelocity3DOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Signals_AngularVelocity3DOutput_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Signals_AngularVelocity3DOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Signals_AngularVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Signals_AngularVelocity3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DOutput_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Signals_AngularVelocity3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Signals_AngularVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Signals_AngularVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::size_type

        resize(Physics3D_Signals_AngularVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Signals_AngularVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::value_type const &

        insert(Physics3D_Signals_AngularVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Signals_AngularVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::size_type

        """
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Signals_AngularVelocity3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DOutput_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Signals_AngularVelocity3DOutput_Vector

# Register Physics3D_Signals_AngularVelocity3DOutput_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Signals_AngularVelocity3DOutput_Vector_swigregister(Physics3D_Signals_AngularVelocity3DOutput_Vector)

class Physics3D_Signals_LinearVelocity3DInput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Signals_LinearVelocity3DInput_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DInput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Signals_LinearVelocity3DInput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DInput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Signals_LinearVelocity3DInput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DInput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Signals_LinearVelocity3DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DInput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Signals_LinearVelocity3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::difference_type j) -> Physics3D_Signals_LinearVelocity3DInput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DInput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Signals_LinearVelocity3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::difference_type

        __setslice__(Physics3D_Signals_LinearVelocity3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::difference_type j, Physics3D_Signals_LinearVelocity3DInput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput >,std::allocator< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > > > const &

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DInput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Signals_LinearVelocity3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DInput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Signals_LinearVelocity3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::difference_type

        __delitem__(Physics3D_Signals_LinearVelocity3DInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DInput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Signals_LinearVelocity3DInput_Vector self, PySliceObject * slice) -> Physics3D_Signals_LinearVelocity3DInput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Signals_LinearVelocity3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DInput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Signals_LinearVelocity3DInput_Vector self, PySliceObject * slice, Physics3D_Signals_LinearVelocity3DInput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput >,std::allocator< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > > > const &

        __setitem__(Physics3D_Signals_LinearVelocity3DInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Signals_LinearVelocity3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DInput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Signals_LinearVelocity3DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::value_type"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DInput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Signals_LinearVelocity3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DInput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Signals_LinearVelocity3DInput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DInput_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Signals_LinearVelocity3DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DInput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Signals_LinearVelocity3DInput_Vector self, Physics3D_Signals_LinearVelocity3DInput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > > &

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DInput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Signals_LinearVelocity3DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DInput_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Signals_LinearVelocity3DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DInput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Signals_LinearVelocity3DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DInput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Signals_LinearVelocity3DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DInput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Signals_LinearVelocity3DInput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DInput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Signals_LinearVelocity3DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DInput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Signals_LinearVelocity3DInput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DInput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Signals_LinearVelocity3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::iterator

        erase(Physics3D_Signals_LinearVelocity3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::iterator

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DInput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Signals_LinearVelocity3DInput_Vector self) -> Physics3D_Signals_LinearVelocity3DInput_Vector
        __init__(Physics3D_Signals_LinearVelocity3DInput_Vector self, Physics3D_Signals_LinearVelocity3DInput_Vector other) -> Physics3D_Signals_LinearVelocity3DInput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > > const &

        __init__(Physics3D_Signals_LinearVelocity3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::size_type size) -> Physics3D_Signals_LinearVelocity3DInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::size_type

        __init__(Physics3D_Signals_LinearVelocity3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::value_type const & value) -> Physics3D_Signals_LinearVelocity3DInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Signals_LinearVelocity3DInput_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Signals_LinearVelocity3DInput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Signals_LinearVelocity3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DInput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Signals_LinearVelocity3DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DInput_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Signals_LinearVelocity3DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DInput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Signals_LinearVelocity3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DInput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Signals_LinearVelocity3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::size_type

        resize(Physics3D_Signals_LinearVelocity3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DInput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Signals_LinearVelocity3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::value_type const &

        insert(Physics3D_Signals_LinearVelocity3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DInput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Signals_LinearVelocity3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::size_type

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DInput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Signals_LinearVelocity3DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DInput_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Signals_LinearVelocity3DInput_Vector

# Register Physics3D_Signals_LinearVelocity3DInput_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Signals_LinearVelocity3DInput_Vector_swigregister(Physics3D_Signals_LinearVelocity3DInput_Vector)

class Physics3D_Signals_LinearVelocity3DOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Signals_LinearVelocity3DOutput_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Signals_LinearVelocity3DOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Signals_LinearVelocity3DOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Signals_LinearVelocity3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Signals_LinearVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::difference_type j) -> Physics3D_Signals_LinearVelocity3DOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Signals_LinearVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::difference_type

        __setslice__(Physics3D_Signals_LinearVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::difference_type j, Physics3D_Signals_LinearVelocity3DOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput >,std::allocator< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > > > const &

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Signals_LinearVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Signals_LinearVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::difference_type

        __delitem__(Physics3D_Signals_LinearVelocity3DOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Signals_LinearVelocity3DOutput_Vector self, PySliceObject * slice) -> Physics3D_Signals_LinearVelocity3DOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Signals_LinearVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Signals_LinearVelocity3DOutput_Vector self, PySliceObject * slice, Physics3D_Signals_LinearVelocity3DOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput >,std::allocator< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > > > const &

        __setitem__(Physics3D_Signals_LinearVelocity3DOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Signals_LinearVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Signals_LinearVelocity3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::value_type"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Signals_LinearVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Signals_LinearVelocity3DOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DOutput_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Signals_LinearVelocity3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Signals_LinearVelocity3DOutput_Vector self, Physics3D_Signals_LinearVelocity3DOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > > &

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Signals_LinearVelocity3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DOutput_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Signals_LinearVelocity3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Signals_LinearVelocity3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Signals_LinearVelocity3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DOutput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Signals_LinearVelocity3DOutput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Signals_LinearVelocity3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Signals_LinearVelocity3DOutput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Signals_LinearVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::iterator

        erase(Physics3D_Signals_LinearVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::iterator

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Signals_LinearVelocity3DOutput_Vector self) -> Physics3D_Signals_LinearVelocity3DOutput_Vector
        __init__(Physics3D_Signals_LinearVelocity3DOutput_Vector self, Physics3D_Signals_LinearVelocity3DOutput_Vector other) -> Physics3D_Signals_LinearVelocity3DOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > > const &

        __init__(Physics3D_Signals_LinearVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::size_type size) -> Physics3D_Signals_LinearVelocity3DOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::size_type

        __init__(Physics3D_Signals_LinearVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::value_type const & value) -> Physics3D_Signals_LinearVelocity3DOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Signals_LinearVelocity3DOutput_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Signals_LinearVelocity3DOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Signals_LinearVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Signals_LinearVelocity3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DOutput_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Signals_LinearVelocity3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Signals_LinearVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Signals_LinearVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::size_type

        resize(Physics3D_Signals_LinearVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Signals_LinearVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::value_type const &

        insert(Physics3D_Signals_LinearVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Signals_LinearVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::size_type

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Signals_LinearVelocity3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DOutput_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Signals_LinearVelocity3DOutput_Vector

# Register Physics3D_Signals_LinearVelocity3DOutput_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Signals_LinearVelocity3DOutput_Vector_swigregister(Physics3D_Signals_LinearVelocity3DOutput_Vector)

class Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::difference_type j) -> Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::difference_type

        __setslice__(Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::difference_type j, Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput >,std::allocator< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > > > const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::difference_type

        __delitem__(Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector self, PySliceObject * slice) -> Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector self, PySliceObject * slice, Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput >,std::allocator< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > > > const &

        __setitem__(Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::value_type"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector self, Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > > &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::iterator

        erase(Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::iterator

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector self) -> Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector
        __init__(Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector self, Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector other) -> Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > > const &

        __init__(Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::size_type size) -> Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::size_type

        __init__(Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::value_type const & value) -> Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::size_type

        resize(Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::value_type const &

        insert(Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::size_type

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector

# Register Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector_swigregister(Physics3D_Signals_MateConnector_Acceleration3DOutput_Vector)

class Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::difference_type j) -> Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::difference_type

        __setslice__(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::difference_type j, Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput >,std::allocator< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > > > const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::difference_type

        __delitem__(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector self, PySliceObject * slice) -> Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector self, PySliceObject * slice, Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput >,std::allocator< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > > > const &

        __setitem__(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::value_type"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector self, Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > > &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::iterator

        erase(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::iterator

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector self) -> Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector
        __init__(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector self, Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector other) -> Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > > const &

        __init__(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::size_type size) -> Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::size_type

        __init__(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::value_type const & value) -> Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::size_type

        resize(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::value_type const &

        insert(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::size_type

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector

# Register Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector_swigregister(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_Vector)

class Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::difference_type j) -> Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::difference_type

        __setslice__(Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::difference_type j, Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput >,std::allocator< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > > > const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::difference_type

        __delitem__(Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector self, PySliceObject * slice) -> Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector self, PySliceObject * slice, Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput >,std::allocator< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > > > const &

        __setitem__(Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::value_type"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector self, Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > > &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::iterator

        erase(Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::iterator

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector self) -> Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector
        __init__(Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector self, Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector other) -> Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > > const &

        __init__(Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::size_type size) -> Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::size_type

        __init__(Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::value_type const & value) -> Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::size_type

        resize(Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::value_type const &

        insert(Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::size_type

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector

# Register Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector_swigregister(Physics3D_Signals_MateConnector_AngularVelocity3DOutput_Vector)

class Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::difference_type j) -> Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::difference_type

        __setslice__(Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::difference_type j, Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput >,std::allocator< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > > > const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::difference_type

        __delitem__(Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector self, PySliceObject * slice) -> Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector self, PySliceObject * slice, Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput >,std::allocator< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > > > const &

        __setitem__(Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::value_type"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector self, Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > > &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::iterator

        erase(Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::iterator

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector self) -> Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector
        __init__(Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector self, Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector other) -> Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > > const &

        __init__(Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::size_type size) -> Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::size_type

        __init__(Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::value_type const & value) -> Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::size_type

        resize(Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::value_type const &

        insert(Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::size_type

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector

# Register Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector_swigregister(Physics3D_Signals_MateConnector_LinearVelocity3DOutput_Vector)

class Physics3D_Signals_MateConnector_Output_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Signals_MateConnector_Output_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Output_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Signals_MateConnector_Output_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Output_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Signals_MateConnector_Output_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Output_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Signals_MateConnector_Output_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Output_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Signals_MateConnector_Output_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::difference_type j) -> Physics3D_Signals_MateConnector_Output_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Output_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Signals_MateConnector_Output_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::difference_type

        __setslice__(Physics3D_Signals_MateConnector_Output_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::difference_type j, Physics3D_Signals_MateConnector_Output_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output >,std::allocator< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > > > const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Output_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Signals_MateConnector_Output_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Output_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Signals_MateConnector_Output_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::difference_type

        __delitem__(Physics3D_Signals_MateConnector_Output_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Output_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Signals_MateConnector_Output_Vector self, PySliceObject * slice) -> Physics3D_Signals_MateConnector_Output_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Signals_MateConnector_Output_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Output_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Signals_MateConnector_Output_Vector self, PySliceObject * slice, Physics3D_Signals_MateConnector_Output_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output >,std::allocator< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > > > const &

        __setitem__(Physics3D_Signals_MateConnector_Output_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Signals_MateConnector_Output_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Output_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Signals_MateConnector_Output_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::value_type"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Output_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Signals_MateConnector_Output_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Output_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Signals_MateConnector_Output_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Output_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Signals_MateConnector_Output_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Output_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Signals_MateConnector_Output_Vector self, Physics3D_Signals_MateConnector_Output_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > > &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Output_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Signals_MateConnector_Output_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Output_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Signals_MateConnector_Output_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Output_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Signals_MateConnector_Output_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Output_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Signals_MateConnector_Output_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Output_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Signals_MateConnector_Output_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Output_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Signals_MateConnector_Output_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Output_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Signals_MateConnector_Output_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Output_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Signals_MateConnector_Output_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::iterator

        erase(Physics3D_Signals_MateConnector_Output_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::iterator

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Output_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Signals_MateConnector_Output_Vector self) -> Physics3D_Signals_MateConnector_Output_Vector
        __init__(Physics3D_Signals_MateConnector_Output_Vector self, Physics3D_Signals_MateConnector_Output_Vector other) -> Physics3D_Signals_MateConnector_Output_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > > const &

        __init__(Physics3D_Signals_MateConnector_Output_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::size_type size) -> Physics3D_Signals_MateConnector_Output_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::size_type

        __init__(Physics3D_Signals_MateConnector_Output_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::value_type const & value) -> Physics3D_Signals_MateConnector_Output_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Signals_MateConnector_Output_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Signals_MateConnector_Output_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Signals_MateConnector_Output_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Output_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Signals_MateConnector_Output_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Output_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Signals_MateConnector_Output_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Output_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Signals_MateConnector_Output_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Output_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Signals_MateConnector_Output_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::size_type

        resize(Physics3D_Signals_MateConnector_Output_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Output_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Signals_MateConnector_Output_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::value_type const &

        insert(Physics3D_Signals_MateConnector_Output_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Output_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Signals_MateConnector_Output_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::size_type

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Output_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Signals_MateConnector_Output_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::Output > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Output_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Signals_MateConnector_Output_Vector

# Register Physics3D_Signals_MateConnector_Output_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Signals_MateConnector_Output_Vector_swigregister(Physics3D_Signals_MateConnector_Output_Vector)

class Physics3D_Signals_MateConnector_PositionOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Signals_MateConnector_PositionOutput_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_PositionOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Signals_MateConnector_PositionOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_PositionOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Signals_MateConnector_PositionOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_PositionOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Signals_MateConnector_PositionOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_PositionOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Signals_MateConnector_PositionOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::difference_type j) -> Physics3D_Signals_MateConnector_PositionOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_PositionOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Signals_MateConnector_PositionOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::difference_type

        __setslice__(Physics3D_Signals_MateConnector_PositionOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::difference_type j, Physics3D_Signals_MateConnector_PositionOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput >,std::allocator< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > > > const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_PositionOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Signals_MateConnector_PositionOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_PositionOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Signals_MateConnector_PositionOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::difference_type

        __delitem__(Physics3D_Signals_MateConnector_PositionOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_PositionOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Signals_MateConnector_PositionOutput_Vector self, PySliceObject * slice) -> Physics3D_Signals_MateConnector_PositionOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Signals_MateConnector_PositionOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_PositionOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Signals_MateConnector_PositionOutput_Vector self, PySliceObject * slice, Physics3D_Signals_MateConnector_PositionOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput >,std::allocator< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > > > const &

        __setitem__(Physics3D_Signals_MateConnector_PositionOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Signals_MateConnector_PositionOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_PositionOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Signals_MateConnector_PositionOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::value_type"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_PositionOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Signals_MateConnector_PositionOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_PositionOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Signals_MateConnector_PositionOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_PositionOutput_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Signals_MateConnector_PositionOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_PositionOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Signals_MateConnector_PositionOutput_Vector self, Physics3D_Signals_MateConnector_PositionOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > > &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_PositionOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Signals_MateConnector_PositionOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_PositionOutput_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Signals_MateConnector_PositionOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_PositionOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Signals_MateConnector_PositionOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_PositionOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Signals_MateConnector_PositionOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_PositionOutput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Signals_MateConnector_PositionOutput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_PositionOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Signals_MateConnector_PositionOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_PositionOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Signals_MateConnector_PositionOutput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_PositionOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Signals_MateConnector_PositionOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::iterator

        erase(Physics3D_Signals_MateConnector_PositionOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::iterator

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_PositionOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Signals_MateConnector_PositionOutput_Vector self) -> Physics3D_Signals_MateConnector_PositionOutput_Vector
        __init__(Physics3D_Signals_MateConnector_PositionOutput_Vector self, Physics3D_Signals_MateConnector_PositionOutput_Vector other) -> Physics3D_Signals_MateConnector_PositionOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > > const &

        __init__(Physics3D_Signals_MateConnector_PositionOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::size_type size) -> Physics3D_Signals_MateConnector_PositionOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::size_type

        __init__(Physics3D_Signals_MateConnector_PositionOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::value_type const & value) -> Physics3D_Signals_MateConnector_PositionOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Signals_MateConnector_PositionOutput_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Signals_MateConnector_PositionOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Signals_MateConnector_PositionOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_PositionOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Signals_MateConnector_PositionOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_PositionOutput_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Signals_MateConnector_PositionOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_PositionOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Signals_MateConnector_PositionOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_PositionOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Signals_MateConnector_PositionOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::size_type

        resize(Physics3D_Signals_MateConnector_PositionOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_PositionOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Signals_MateConnector_PositionOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::value_type const &

        insert(Physics3D_Signals_MateConnector_PositionOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_PositionOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Signals_MateConnector_PositionOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::size_type

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_PositionOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Signals_MateConnector_PositionOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::PositionOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_PositionOutput_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Signals_MateConnector_PositionOutput_Vector

# Register Physics3D_Signals_MateConnector_PositionOutput_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Signals_MateConnector_PositionOutput_Vector_swigregister(Physics3D_Signals_MateConnector_PositionOutput_Vector)

class Physics3D_Signals_MateConnector_RPYOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Signals_MateConnector_RPYOutput_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_RPYOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Signals_MateConnector_RPYOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_RPYOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Signals_MateConnector_RPYOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_RPYOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Signals_MateConnector_RPYOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_RPYOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Signals_MateConnector_RPYOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::difference_type j) -> Physics3D_Signals_MateConnector_RPYOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_RPYOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Signals_MateConnector_RPYOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::difference_type

        __setslice__(Physics3D_Signals_MateConnector_RPYOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::difference_type j, Physics3D_Signals_MateConnector_RPYOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput >,std::allocator< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > > > const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_RPYOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Signals_MateConnector_RPYOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_RPYOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Signals_MateConnector_RPYOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::difference_type

        __delitem__(Physics3D_Signals_MateConnector_RPYOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_RPYOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Signals_MateConnector_RPYOutput_Vector self, PySliceObject * slice) -> Physics3D_Signals_MateConnector_RPYOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Signals_MateConnector_RPYOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_RPYOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Signals_MateConnector_RPYOutput_Vector self, PySliceObject * slice, Physics3D_Signals_MateConnector_RPYOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput >,std::allocator< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > > > const &

        __setitem__(Physics3D_Signals_MateConnector_RPYOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Signals_MateConnector_RPYOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_RPYOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Signals_MateConnector_RPYOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::value_type"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_RPYOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Signals_MateConnector_RPYOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_RPYOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Signals_MateConnector_RPYOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_RPYOutput_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Signals_MateConnector_RPYOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_RPYOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Signals_MateConnector_RPYOutput_Vector self, Physics3D_Signals_MateConnector_RPYOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > > &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_RPYOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Signals_MateConnector_RPYOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_RPYOutput_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Signals_MateConnector_RPYOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_RPYOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Signals_MateConnector_RPYOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_RPYOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Signals_MateConnector_RPYOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_RPYOutput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Signals_MateConnector_RPYOutput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_RPYOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Signals_MateConnector_RPYOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_RPYOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Signals_MateConnector_RPYOutput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_RPYOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Signals_MateConnector_RPYOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::iterator

        erase(Physics3D_Signals_MateConnector_RPYOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::iterator

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_RPYOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Signals_MateConnector_RPYOutput_Vector self) -> Physics3D_Signals_MateConnector_RPYOutput_Vector
        __init__(Physics3D_Signals_MateConnector_RPYOutput_Vector self, Physics3D_Signals_MateConnector_RPYOutput_Vector other) -> Physics3D_Signals_MateConnector_RPYOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > > const &

        __init__(Physics3D_Signals_MateConnector_RPYOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::size_type size) -> Physics3D_Signals_MateConnector_RPYOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::size_type

        __init__(Physics3D_Signals_MateConnector_RPYOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::value_type const & value) -> Physics3D_Signals_MateConnector_RPYOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Signals_MateConnector_RPYOutput_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Signals_MateConnector_RPYOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Signals_MateConnector_RPYOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_RPYOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Signals_MateConnector_RPYOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_RPYOutput_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Signals_MateConnector_RPYOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_RPYOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Signals_MateConnector_RPYOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_RPYOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Signals_MateConnector_RPYOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::size_type

        resize(Physics3D_Signals_MateConnector_RPYOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_RPYOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Signals_MateConnector_RPYOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::value_type const &

        insert(Physics3D_Signals_MateConnector_RPYOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_RPYOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Signals_MateConnector_RPYOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::size_type

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_RPYOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Signals_MateConnector_RPYOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::MateConnector::RPYOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_RPYOutput_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Signals_MateConnector_RPYOutput_Vector

# Register Physics3D_Signals_MateConnector_RPYOutput_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Signals_MateConnector_RPYOutput_Vector_swigregister(Physics3D_Signals_MateConnector_RPYOutput_Vector)

class Physics3D_Signals_Position3DOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Signals_Position3DOutput_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Signals_Position3DOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Signals_Position3DOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_Position3DOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Signals_Position3DOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_Position3DOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Signals_Position3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_Position3DOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Signals_Position3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::difference_type j) -> Physics3D_Signals_Position3DOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_Position3DOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Signals_Position3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::difference_type

        __setslice__(Physics3D_Signals_Position3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::difference_type j, Physics3D_Signals_Position3DOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput >,std::allocator< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > > > const &

        """
        return _Physics3DSwig.Physics3D_Signals_Position3DOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Signals_Position3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_Position3DOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Signals_Position3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::difference_type

        __delitem__(Physics3D_Signals_Position3DOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Signals_Position3DOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Signals_Position3DOutput_Vector self, PySliceObject * slice) -> Physics3D_Signals_Position3DOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Signals_Position3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_Position3DOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Signals_Position3DOutput_Vector self, PySliceObject * slice, Physics3D_Signals_Position3DOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput >,std::allocator< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > > > const &

        __setitem__(Physics3D_Signals_Position3DOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Signals_Position3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_Position3DOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Signals_Position3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::value_type"""
        return _Physics3DSwig.Physics3D_Signals_Position3DOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Signals_Position3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_Position3DOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Signals_Position3DOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_Position3DOutput_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Signals_Position3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_Position3DOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Signals_Position3DOutput_Vector self, Physics3D_Signals_Position3DOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > > &

        """
        return _Physics3DSwig.Physics3D_Signals_Position3DOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Signals_Position3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_Position3DOutput_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Signals_Position3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_Position3DOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Signals_Position3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_Position3DOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Signals_Position3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_Position3DOutput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Signals_Position3DOutput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_Position3DOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Signals_Position3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Signals_Position3DOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Signals_Position3DOutput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_Position3DOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Signals_Position3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::iterator

        erase(Physics3D_Signals_Position3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::iterator

        """
        return _Physics3DSwig.Physics3D_Signals_Position3DOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Signals_Position3DOutput_Vector self) -> Physics3D_Signals_Position3DOutput_Vector
        __init__(Physics3D_Signals_Position3DOutput_Vector self, Physics3D_Signals_Position3DOutput_Vector other) -> Physics3D_Signals_Position3DOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > > const &

        __init__(Physics3D_Signals_Position3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::size_type size) -> Physics3D_Signals_Position3DOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::size_type

        __init__(Physics3D_Signals_Position3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::value_type const & value) -> Physics3D_Signals_Position3DOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Signals_Position3DOutput_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Signals_Position3DOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Signals_Position3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_Position3DOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Signals_Position3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_Position3DOutput_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Signals_Position3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_Position3DOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Signals_Position3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_Position3DOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Signals_Position3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::size_type

        resize(Physics3D_Signals_Position3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_Position3DOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Signals_Position3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::value_type const &

        insert(Physics3D_Signals_Position3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_Position3DOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Signals_Position3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::size_type

        """
        return _Physics3DSwig.Physics3D_Signals_Position3DOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Signals_Position3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_Position3DOutput_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Signals_Position3DOutput_Vector

# Register Physics3D_Signals_Position3DOutput_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Signals_Position3DOutput_Vector_swigregister(Physics3D_Signals_Position3DOutput_Vector)

class Physics3D_Signals_RPYOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Signals_RPYOutput_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Signals_RPYOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Signals_RPYOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_RPYOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Signals_RPYOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_RPYOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Signals_RPYOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_RPYOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Signals_RPYOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::difference_type j) -> Physics3D_Signals_RPYOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_RPYOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Signals_RPYOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::difference_type

        __setslice__(Physics3D_Signals_RPYOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::difference_type j, Physics3D_Signals_RPYOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput >,std::allocator< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > > > const &

        """
        return _Physics3DSwig.Physics3D_Signals_RPYOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Signals_RPYOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_RPYOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Signals_RPYOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::difference_type

        __delitem__(Physics3D_Signals_RPYOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Signals_RPYOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Signals_RPYOutput_Vector self, PySliceObject * slice) -> Physics3D_Signals_RPYOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Signals_RPYOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_RPYOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Signals_RPYOutput_Vector self, PySliceObject * slice, Physics3D_Signals_RPYOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput >,std::allocator< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > > > const &

        __setitem__(Physics3D_Signals_RPYOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Signals_RPYOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_RPYOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Signals_RPYOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::value_type"""
        return _Physics3DSwig.Physics3D_Signals_RPYOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Signals_RPYOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_RPYOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Signals_RPYOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_RPYOutput_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Signals_RPYOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_RPYOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Signals_RPYOutput_Vector self, Physics3D_Signals_RPYOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > > &

        """
        return _Physics3DSwig.Physics3D_Signals_RPYOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Signals_RPYOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_RPYOutput_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Signals_RPYOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_RPYOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Signals_RPYOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_RPYOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Signals_RPYOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_RPYOutput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Signals_RPYOutput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_RPYOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Signals_RPYOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Signals_RPYOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Signals_RPYOutput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_RPYOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Signals_RPYOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::iterator

        erase(Physics3D_Signals_RPYOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::iterator

        """
        return _Physics3DSwig.Physics3D_Signals_RPYOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Signals_RPYOutput_Vector self) -> Physics3D_Signals_RPYOutput_Vector
        __init__(Physics3D_Signals_RPYOutput_Vector self, Physics3D_Signals_RPYOutput_Vector other) -> Physics3D_Signals_RPYOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > > const &

        __init__(Physics3D_Signals_RPYOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::size_type size) -> Physics3D_Signals_RPYOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::size_type

        __init__(Physics3D_Signals_RPYOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::value_type const & value) -> Physics3D_Signals_RPYOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Signals_RPYOutput_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Signals_RPYOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Signals_RPYOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_RPYOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Signals_RPYOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_RPYOutput_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Signals_RPYOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_RPYOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Signals_RPYOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_RPYOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Signals_RPYOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::size_type

        resize(Physics3D_Signals_RPYOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_RPYOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Signals_RPYOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::value_type const &

        insert(Physics3D_Signals_RPYOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_RPYOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Signals_RPYOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::size_type

        """
        return _Physics3DSwig.Physics3D_Signals_RPYOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Signals_RPYOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::RPYOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_RPYOutput_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Signals_RPYOutput_Vector

# Register Physics3D_Signals_RPYOutput_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Signals_RPYOutput_Vector_swigregister(Physics3D_Signals_RPYOutput_Vector)

class Physics3D_Signals_Torque3DInput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Signals_Torque3DInput_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Signals_Torque3DInput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Signals_Torque3DInput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_Torque3DInput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Signals_Torque3DInput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_Torque3DInput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Signals_Torque3DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_Torque3DInput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Signals_Torque3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::difference_type j) -> Physics3D_Signals_Torque3DInput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_Torque3DInput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Signals_Torque3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::difference_type

        __setslice__(Physics3D_Signals_Torque3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::difference_type j, Physics3D_Signals_Torque3DInput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput >,std::allocator< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > > > const &

        """
        return _Physics3DSwig.Physics3D_Signals_Torque3DInput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Signals_Torque3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_Torque3DInput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Signals_Torque3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::difference_type

        __delitem__(Physics3D_Signals_Torque3DInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Signals_Torque3DInput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Signals_Torque3DInput_Vector self, PySliceObject * slice) -> Physics3D_Signals_Torque3DInput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Signals_Torque3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_Torque3DInput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Signals_Torque3DInput_Vector self, PySliceObject * slice, Physics3D_Signals_Torque3DInput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput >,std::allocator< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > > > const &

        __setitem__(Physics3D_Signals_Torque3DInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Signals_Torque3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_Torque3DInput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Signals_Torque3DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::value_type"""
        return _Physics3DSwig.Physics3D_Signals_Torque3DInput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Signals_Torque3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_Torque3DInput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Signals_Torque3DInput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_Torque3DInput_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Signals_Torque3DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_Torque3DInput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Signals_Torque3DInput_Vector self, Physics3D_Signals_Torque3DInput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > > &

        """
        return _Physics3DSwig.Physics3D_Signals_Torque3DInput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Signals_Torque3DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_Torque3DInput_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Signals_Torque3DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_Torque3DInput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Signals_Torque3DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_Torque3DInput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Signals_Torque3DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_Torque3DInput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Signals_Torque3DInput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_Torque3DInput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Signals_Torque3DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Signals_Torque3DInput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Signals_Torque3DInput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_Torque3DInput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Signals_Torque3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::iterator

        erase(Physics3D_Signals_Torque3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::iterator

        """
        return _Physics3DSwig.Physics3D_Signals_Torque3DInput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Signals_Torque3DInput_Vector self) -> Physics3D_Signals_Torque3DInput_Vector
        __init__(Physics3D_Signals_Torque3DInput_Vector self, Physics3D_Signals_Torque3DInput_Vector other) -> Physics3D_Signals_Torque3DInput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > > const &

        __init__(Physics3D_Signals_Torque3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::size_type size) -> Physics3D_Signals_Torque3DInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::size_type

        __init__(Physics3D_Signals_Torque3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::value_type const & value) -> Physics3D_Signals_Torque3DInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Signals_Torque3DInput_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Signals_Torque3DInput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Signals_Torque3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_Torque3DInput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Signals_Torque3DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_Torque3DInput_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Signals_Torque3DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_Torque3DInput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Signals_Torque3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_Torque3DInput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Signals_Torque3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::size_type

        resize(Physics3D_Signals_Torque3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_Torque3DInput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Signals_Torque3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::value_type const &

        insert(Physics3D_Signals_Torque3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_Torque3DInput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Signals_Torque3DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::size_type

        """
        return _Physics3DSwig.Physics3D_Signals_Torque3DInput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Signals_Torque3DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DInput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_Torque3DInput_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Signals_Torque3DInput_Vector

# Register Physics3D_Signals_Torque3DInput_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Signals_Torque3DInput_Vector_swigregister(Physics3D_Signals_Torque3DInput_Vector)

class Physics3D_Signals_Torque3DOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Signals_Torque3DOutput_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Signals_Torque3DOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Signals_Torque3DOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_Torque3DOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Signals_Torque3DOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_Torque3DOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Signals_Torque3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_Torque3DOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Signals_Torque3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::difference_type j) -> Physics3D_Signals_Torque3DOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_Torque3DOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Signals_Torque3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::difference_type

        __setslice__(Physics3D_Signals_Torque3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::difference_type j, Physics3D_Signals_Torque3DOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput >,std::allocator< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > > > const &

        """
        return _Physics3DSwig.Physics3D_Signals_Torque3DOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Signals_Torque3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_Torque3DOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Signals_Torque3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::difference_type

        __delitem__(Physics3D_Signals_Torque3DOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Signals_Torque3DOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Signals_Torque3DOutput_Vector self, PySliceObject * slice) -> Physics3D_Signals_Torque3DOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Signals_Torque3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_Torque3DOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Signals_Torque3DOutput_Vector self, PySliceObject * slice, Physics3D_Signals_Torque3DOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput >,std::allocator< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > > > const &

        __setitem__(Physics3D_Signals_Torque3DOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Signals_Torque3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_Torque3DOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Signals_Torque3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::value_type"""
        return _Physics3DSwig.Physics3D_Signals_Torque3DOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Signals_Torque3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_Torque3DOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Signals_Torque3DOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_Torque3DOutput_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Signals_Torque3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_Torque3DOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Signals_Torque3DOutput_Vector self, Physics3D_Signals_Torque3DOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > > &

        """
        return _Physics3DSwig.Physics3D_Signals_Torque3DOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Signals_Torque3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_Torque3DOutput_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Signals_Torque3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_Torque3DOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Signals_Torque3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_Torque3DOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Signals_Torque3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_Torque3DOutput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Signals_Torque3DOutput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_Torque3DOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Signals_Torque3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Signals_Torque3DOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Signals_Torque3DOutput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_Torque3DOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Signals_Torque3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::iterator

        erase(Physics3D_Signals_Torque3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::iterator

        """
        return _Physics3DSwig.Physics3D_Signals_Torque3DOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Signals_Torque3DOutput_Vector self) -> Physics3D_Signals_Torque3DOutput_Vector
        __init__(Physics3D_Signals_Torque3DOutput_Vector self, Physics3D_Signals_Torque3DOutput_Vector other) -> Physics3D_Signals_Torque3DOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > > const &

        __init__(Physics3D_Signals_Torque3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::size_type size) -> Physics3D_Signals_Torque3DOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::size_type

        __init__(Physics3D_Signals_Torque3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::value_type const & value) -> Physics3D_Signals_Torque3DOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Signals_Torque3DOutput_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Signals_Torque3DOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Signals_Torque3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_Torque3DOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Signals_Torque3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_Torque3DOutput_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Signals_Torque3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_Torque3DOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Signals_Torque3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_Torque3DOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Signals_Torque3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::size_type

        resize(Physics3D_Signals_Torque3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_Torque3DOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Signals_Torque3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::value_type const &

        insert(Physics3D_Signals_Torque3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_Torque3DOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Signals_Torque3DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::size_type

        """
        return _Physics3DSwig.Physics3D_Signals_Torque3DOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Signals_Torque3DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_Torque3DOutput_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Signals_Torque3DOutput_Vector

# Register Physics3D_Signals_Torque3DOutput_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Signals_Torque3DOutput_Vector_swigregister(Physics3D_Signals_Torque3DOutput_Vector)

class Physics3D_StructuralComponent_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_StructuralComponent_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_StructuralComponent_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_StructuralComponent_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_StructuralComponent_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_StructuralComponent_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_StructuralComponent_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_StructuralComponent_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::size_type"""
        return _Physics3DSwig.Physics3D_StructuralComponent_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_StructuralComponent_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::difference_type j) -> Physics3D_StructuralComponent_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::difference_type

        """
        return _Physics3DSwig.Physics3D_StructuralComponent_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_StructuralComponent_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::difference_type

        __setslice__(Physics3D_StructuralComponent_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::difference_type j, Physics3D_StructuralComponent_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent >,std::allocator< std::shared_ptr< openplx::Physics3D::StructuralComponent > > > const &

        """
        return _Physics3DSwig.Physics3D_StructuralComponent_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_StructuralComponent_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::difference_type

        """
        return _Physics3DSwig.Physics3D_StructuralComponent_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_StructuralComponent_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::difference_type

        __delitem__(Physics3D_StructuralComponent_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_StructuralComponent_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_StructuralComponent_Vector self, PySliceObject * slice) -> Physics3D_StructuralComponent_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_StructuralComponent_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::difference_type

        """
        return _Physics3DSwig.Physics3D_StructuralComponent_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_StructuralComponent_Vector self, PySliceObject * slice, Physics3D_StructuralComponent_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent >,std::allocator< std::shared_ptr< openplx::Physics3D::StructuralComponent > > > const &

        __setitem__(Physics3D_StructuralComponent_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_StructuralComponent_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_StructuralComponent_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_StructuralComponent_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::value_type"""
        return _Physics3DSwig.Physics3D_StructuralComponent_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_StructuralComponent_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_StructuralComponent_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_StructuralComponent_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_StructuralComponent_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_StructuralComponent_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::size_type"""
        return _Physics3DSwig.Physics3D_StructuralComponent_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_StructuralComponent_Vector self, Physics3D_StructuralComponent_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > > &

        """
        return _Physics3DSwig.Physics3D_StructuralComponent_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_StructuralComponent_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::iterator"""
        return _Physics3DSwig.Physics3D_StructuralComponent_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_StructuralComponent_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::iterator"""
        return _Physics3DSwig.Physics3D_StructuralComponent_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_StructuralComponent_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_StructuralComponent_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_StructuralComponent_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_StructuralComponent_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_StructuralComponent_Vector self)"""
        return _Physics3DSwig.Physics3D_StructuralComponent_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_StructuralComponent_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::allocator_type"""
        return _Physics3DSwig.Physics3D_StructuralComponent_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_StructuralComponent_Vector self)"""
        return _Physics3DSwig.Physics3D_StructuralComponent_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_StructuralComponent_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::iterator

        erase(Physics3D_StructuralComponent_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::iterator

        """
        return _Physics3DSwig.Physics3D_StructuralComponent_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_StructuralComponent_Vector self) -> Physics3D_StructuralComponent_Vector
        __init__(Physics3D_StructuralComponent_Vector self, Physics3D_StructuralComponent_Vector other) -> Physics3D_StructuralComponent_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > > const &

        __init__(Physics3D_StructuralComponent_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::size_type size) -> Physics3D_StructuralComponent_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::size_type

        __init__(Physics3D_StructuralComponent_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::value_type const & value) -> Physics3D_StructuralComponent_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::value_type const &

        """
        _Physics3DSwig.Physics3D_StructuralComponent_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_StructuralComponent_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_StructuralComponent_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_StructuralComponent_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_StructuralComponent_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::value_type const &"""
        return _Physics3DSwig.Physics3D_StructuralComponent_Vector_front(self)

    def back(self):
        r"""back(Physics3D_StructuralComponent_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::value_type const &"""
        return _Physics3DSwig.Physics3D_StructuralComponent_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_StructuralComponent_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_StructuralComponent_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_StructuralComponent_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::size_type

        resize(Physics3D_StructuralComponent_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_StructuralComponent_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_StructuralComponent_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::value_type const &

        insert(Physics3D_StructuralComponent_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_StructuralComponent_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_StructuralComponent_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::size_type

        """
        return _Physics3DSwig.Physics3D_StructuralComponent_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_StructuralComponent_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::StructuralComponent > >::size_type"""
        return _Physics3DSwig.Physics3D_StructuralComponent_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_StructuralComponent_Vector

# Register Physics3D_StructuralComponent_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_StructuralComponent_Vector_swigregister(Physics3D_StructuralComponent_Vector)

class Physics3D_StructuralPlane_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_StructuralPlane_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_StructuralPlane_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_StructuralPlane_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_StructuralPlane_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_StructuralPlane_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_StructuralPlane_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_StructuralPlane_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::size_type"""
        return _Physics3DSwig.Physics3D_StructuralPlane_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_StructuralPlane_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::difference_type j) -> Physics3D_StructuralPlane_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::difference_type

        """
        return _Physics3DSwig.Physics3D_StructuralPlane_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_StructuralPlane_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::difference_type

        __setslice__(Physics3D_StructuralPlane_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::difference_type j, Physics3D_StructuralPlane_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane >,std::allocator< std::shared_ptr< openplx::Physics3D::StructuralPlane > > > const &

        """
        return _Physics3DSwig.Physics3D_StructuralPlane_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_StructuralPlane_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::difference_type

        """
        return _Physics3DSwig.Physics3D_StructuralPlane_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_StructuralPlane_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::difference_type

        __delitem__(Physics3D_StructuralPlane_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_StructuralPlane_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_StructuralPlane_Vector self, PySliceObject * slice) -> Physics3D_StructuralPlane_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_StructuralPlane_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::difference_type

        """
        return _Physics3DSwig.Physics3D_StructuralPlane_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_StructuralPlane_Vector self, PySliceObject * slice, Physics3D_StructuralPlane_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane >,std::allocator< std::shared_ptr< openplx::Physics3D::StructuralPlane > > > const &

        __setitem__(Physics3D_StructuralPlane_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_StructuralPlane_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_StructuralPlane_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_StructuralPlane_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::value_type"""
        return _Physics3DSwig.Physics3D_StructuralPlane_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_StructuralPlane_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_StructuralPlane_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_StructuralPlane_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_StructuralPlane_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_StructuralPlane_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::size_type"""
        return _Physics3DSwig.Physics3D_StructuralPlane_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_StructuralPlane_Vector self, Physics3D_StructuralPlane_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > > &

        """
        return _Physics3DSwig.Physics3D_StructuralPlane_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_StructuralPlane_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::iterator"""
        return _Physics3DSwig.Physics3D_StructuralPlane_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_StructuralPlane_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::iterator"""
        return _Physics3DSwig.Physics3D_StructuralPlane_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_StructuralPlane_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_StructuralPlane_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_StructuralPlane_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_StructuralPlane_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_StructuralPlane_Vector self)"""
        return _Physics3DSwig.Physics3D_StructuralPlane_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_StructuralPlane_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::allocator_type"""
        return _Physics3DSwig.Physics3D_StructuralPlane_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_StructuralPlane_Vector self)"""
        return _Physics3DSwig.Physics3D_StructuralPlane_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_StructuralPlane_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::iterator

        erase(Physics3D_StructuralPlane_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::iterator

        """
        return _Physics3DSwig.Physics3D_StructuralPlane_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_StructuralPlane_Vector self) -> Physics3D_StructuralPlane_Vector
        __init__(Physics3D_StructuralPlane_Vector self, Physics3D_StructuralPlane_Vector other) -> Physics3D_StructuralPlane_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > > const &

        __init__(Physics3D_StructuralPlane_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::size_type size) -> Physics3D_StructuralPlane_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::size_type

        __init__(Physics3D_StructuralPlane_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::value_type const & value) -> Physics3D_StructuralPlane_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::value_type const &

        """
        _Physics3DSwig.Physics3D_StructuralPlane_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_StructuralPlane_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_StructuralPlane_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_StructuralPlane_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_StructuralPlane_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::value_type const &"""
        return _Physics3DSwig.Physics3D_StructuralPlane_Vector_front(self)

    def back(self):
        r"""back(Physics3D_StructuralPlane_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::value_type const &"""
        return _Physics3DSwig.Physics3D_StructuralPlane_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_StructuralPlane_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_StructuralPlane_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_StructuralPlane_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::size_type

        resize(Physics3D_StructuralPlane_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_StructuralPlane_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_StructuralPlane_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::value_type const &

        insert(Physics3D_StructuralPlane_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_StructuralPlane_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_StructuralPlane_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::size_type

        """
        return _Physics3DSwig.Physics3D_StructuralPlane_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_StructuralPlane_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::StructuralPlane > >::size_type"""
        return _Physics3DSwig.Physics3D_StructuralPlane_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_StructuralPlane_Vector

# Register Physics3D_StructuralPlane_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_StructuralPlane_Vector_swigregister(Physics3D_StructuralPlane_Vector)

class Physics3D_System_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics3D::System > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_System_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_System_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_System_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_System_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_System_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_System_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_System_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::System > >::size_type"""
        return _Physics3DSwig.Physics3D_System_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_System_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::System > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::System > >::difference_type j) -> Physics3D_System_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::System > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::System > >::difference_type

        """
        return _Physics3DSwig.Physics3D_System_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_System_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::System > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::System > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::System > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::System > >::difference_type

        __setslice__(Physics3D_System_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::System > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::System > >::difference_type j, Physics3D_System_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::System > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::System > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics3D::System >,std::allocator< std::shared_ptr< openplx::Physics3D::System > > > const &

        """
        return _Physics3DSwig.Physics3D_System_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_System_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::System > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::System > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::System > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics3D::System > >::difference_type

        """
        return _Physics3DSwig.Physics3D_System_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_System_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::System > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::System > >::difference_type

        __delitem__(Physics3D_System_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_System_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_System_Vector self, PySliceObject * slice) -> Physics3D_System_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_System_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::System > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics3D::System > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::System > >::difference_type

        """
        return _Physics3DSwig.Physics3D_System_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_System_Vector self, PySliceObject * slice, Physics3D_System_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics3D::System >,std::allocator< std::shared_ptr< openplx::Physics3D::System > > > const &

        __setitem__(Physics3D_System_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_System_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::System > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics3D::System > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics3D::System > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::System > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_System_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_System_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::System > >::value_type"""
        return _Physics3DSwig.Physics3D_System_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_System_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::System > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::System > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_System_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_System_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_System_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_System_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::System > >::size_type"""
        return _Physics3DSwig.Physics3D_System_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_System_Vector self, Physics3D_System_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics3D::System > > &

        """
        return _Physics3DSwig.Physics3D_System_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_System_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::System > >::iterator"""
        return _Physics3DSwig.Physics3D_System_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_System_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::System > >::iterator"""
        return _Physics3DSwig.Physics3D_System_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_System_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::System > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_System_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_System_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::System > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_System_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_System_Vector self)"""
        return _Physics3DSwig.Physics3D_System_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_System_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::System > >::allocator_type"""
        return _Physics3DSwig.Physics3D_System_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_System_Vector self)"""
        return _Physics3DSwig.Physics3D_System_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_System_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::System > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics3D::System > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::System > >::iterator

        erase(Physics3D_System_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::System > >::iterator first, std::vector< std::shared_ptr< openplx::Physics3D::System > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics3D::System > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics3D::System > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics3D::System > >::iterator

        """
        return _Physics3DSwig.Physics3D_System_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_System_Vector self) -> Physics3D_System_Vector
        __init__(Physics3D_System_Vector self, Physics3D_System_Vector other) -> Physics3D_System_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics3D::System > > const &

        __init__(Physics3D_System_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::System > >::size_type size) -> Physics3D_System_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::System > >::size_type

        __init__(Physics3D_System_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::System > >::size_type size, std::vector< std::shared_ptr< openplx::Physics3D::System > >::value_type const & value) -> Physics3D_System_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics3D::System > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics3D::System > >::value_type const &

        """
        _Physics3DSwig.Physics3D_System_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_System_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_System_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::System > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics3D::System > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_System_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_System_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::System > >::value_type const &"""
        return _Physics3DSwig.Physics3D_System_Vector_front(self)

    def back(self):
        r"""back(Physics3D_System_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::System > >::value_type const &"""
        return _Physics3DSwig.Physics3D_System_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_System_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::System > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::System > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::System > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::System > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_System_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_System_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::System > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::System > >::size_type

        resize(Physics3D_System_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::System > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics3D::System > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics3D::System > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::System > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_System_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_System_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::System > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::System > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics3D::System > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::System > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics3D::System > >::value_type const &

        insert(Physics3D_System_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::System > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics3D::System > >::size_type n, std::vector< std::shared_ptr< openplx::Physics3D::System > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics3D::System > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics3D::System > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics3D::System > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_System_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_System_Vector self, std::vector< std::shared_ptr< openplx::Physics3D::System > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics3D::System > >::size_type

        """
        return _Physics3DSwig.Physics3D_System_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_System_Vector self) -> std::vector< std::shared_ptr< openplx::Physics3D::System > >::size_type"""
        return _Physics3DSwig.Physics3D_System_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_System_Vector

# Register Physics3D_System_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_System_Vector_swigregister(Physics3D_System_Vector)

class Physics3D_Bodies_Body(openplx.Physics.Physics_Bodies_Body):
    r"""Proxy of C++ openplx::Physics3D::Bodies::Body class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Bodies_Body self) -> Physics3D_Bodies_Body"""
        _Physics3DSwig.Physics3D_Bodies_Body_swiginit(self, _Physics3DSwig.new_Physics3D_Bodies_Body())

    def kinematics(self):
        r"""kinematics(Physics3D_Bodies_Body self) -> std::shared_ptr< openplx::Physics3D::Bodies::Kinematics >"""
        return _Physics3DSwig.Physics3D_Bodies_Body_kinematics(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Bodies_Body self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Bodies_Body_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Bodies_Body self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Body_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Bodies_Body self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Body_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Bodies_Body self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Bodies_Body_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Bodies_Body self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Bodies_Body_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Bodies_Body self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Body_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Bodies_Body

# Register Physics3D_Bodies_Body in _Physics3DSwig:
_Physics3DSwig.Physics3D_Bodies_Body_swigregister(Physics3D_Bodies_Body)

class Physics3D_Bodies_Inertia(openplx.Physics.Physics_Bodies_Inertia):
    r"""Proxy of C++ openplx::Physics3D::Bodies::Inertia class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Bodies_Inertia self) -> Physics3D_Bodies_Inertia"""
        _Physics3DSwig.Physics3D_Bodies_Inertia_swiginit(self, _Physics3DSwig.new_Physics3D_Bodies_Inertia())

    def mass(self):
        r"""mass(Physics3D_Bodies_Inertia self) -> double"""
        return _Physics3DSwig.Physics3D_Bodies_Inertia_mass(self)

    def tensor(self):
        r"""tensor(Physics3D_Bodies_Inertia self) -> std::shared_ptr< openplx::Math::Matrix3x3 >"""
        return _Physics3DSwig.Physics3D_Bodies_Inertia_tensor(self)

    @staticmethod
    def symmetric_tensor(diag, e01_10, e02_20, e12_21):
        r"""
        symmetric_tensor(std::shared_ptr< openplx::Math::Vec3 > diag, double e01_10, double e02_20, double e12_21) -> std::shared_ptr< openplx::Math::Matrix3x3 >

        Parameters
        ----------
        diag: std::shared_ptr< openplx::Math::Vec3 >
        e01_10: double
        e02_20: double
        e12_21: double

        """
        return _Physics3DSwig.Physics3D_Bodies_Inertia_symmetric_tensor(diag, e01_10, e02_20, e12_21)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Bodies_Inertia self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Bodies_Inertia_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Bodies_Inertia self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Inertia_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Bodies_Inertia self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Inertia_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Bodies_Inertia self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Bodies_Inertia_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Bodies_Inertia self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Bodies_Inertia_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Bodies_Inertia self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Inertia_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Bodies_Inertia

# Register Physics3D_Bodies_Inertia in _Physics3DSwig:
_Physics3DSwig.Physics3D_Bodies_Inertia_swigregister(Physics3D_Bodies_Inertia)

def Physics3D_Bodies_Inertia_symmetric_tensor(diag, e01_10, e02_20, e12_21):
    r"""
    Physics3D_Bodies_Inertia_symmetric_tensor(std::shared_ptr< openplx::Math::Vec3 > diag, double e01_10, double e02_20, double e12_21) -> std::shared_ptr< openplx::Math::Matrix3x3 >

    Parameters
    ----------
    diag: std::shared_ptr< openplx::Math::Vec3 >
    e01_10: double
    e02_20: double
    e12_21: double

    """
    return _Physics3DSwig.Physics3D_Bodies_Inertia_symmetric_tensor(diag, e01_10, e02_20, e12_21)

class Physics3D_Bodies_Kinematics(openplx.Physics.Physics_Bodies_Kinematics):
    r"""Proxy of C++ openplx::Physics3D::Bodies::Kinematics class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Bodies_Kinematics self) -> Physics3D_Bodies_Kinematics"""
        _Physics3DSwig.Physics3D_Bodies_Kinematics_swiginit(self, _Physics3DSwig.new_Physics3D_Bodies_Kinematics())

    def local_transform(self):
        r"""local_transform(Physics3D_Bodies_Kinematics self) -> std::shared_ptr< openplx::Math::AffineTransform >"""
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_local_transform(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Bodies_Kinematics self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Bodies_Kinematics self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Bodies_Kinematics self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Bodies_Kinematics self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Bodies_Kinematics self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Bodies_Kinematics self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Bodies_Kinematics

# Register Physics3D_Bodies_Kinematics in _Physics3DSwig:
_Physics3DSwig.Physics3D_Bodies_Kinematics_swigregister(Physics3D_Bodies_Kinematics)

class LinearVelocity3DInputTrait(object):
    r"""Proxy of C++ openplx::Physics3D::Signals::LinearVelocity3DInputTrait class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Physics3DSwig.delete_LinearVelocity3DInputTrait

    def __init__(self):
        r"""__init__(LinearVelocity3DInputTrait self) -> LinearVelocity3DInputTrait"""
        _Physics3DSwig.LinearVelocity3DInputTrait_swiginit(self, _Physics3DSwig.new_LinearVelocity3DInputTrait())

# Register LinearVelocity3DInputTrait in _Physics3DSwig:
_Physics3DSwig.LinearVelocity3DInputTrait_swigregister(LinearVelocity3DInputTrait)

class AngularVelocity3DInputTrait(object):
    r"""Proxy of C++ openplx::Physics3D::Signals::AngularVelocity3DInputTrait class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Physics3DSwig.delete_AngularVelocity3DInputTrait

    def __init__(self):
        r"""__init__(AngularVelocity3DInputTrait self) -> AngularVelocity3DInputTrait"""
        _Physics3DSwig.AngularVelocity3DInputTrait_swiginit(self, _Physics3DSwig.new_AngularVelocity3DInputTrait())

# Register AngularVelocity3DInputTrait in _Physics3DSwig:
_Physics3DSwig.AngularVelocity3DInputTrait_swigregister(AngularVelocity3DInputTrait)

class LinearVelocity3DOutputTrait(object):
    r"""Proxy of C++ openplx::Physics3D::Signals::LinearVelocity3DOutputTrait class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Physics3DSwig.delete_LinearVelocity3DOutputTrait

    def __init__(self):
        r"""__init__(LinearVelocity3DOutputTrait self) -> LinearVelocity3DOutputTrait"""
        _Physics3DSwig.LinearVelocity3DOutputTrait_swiginit(self, _Physics3DSwig.new_LinearVelocity3DOutputTrait())

# Register LinearVelocity3DOutputTrait in _Physics3DSwig:
_Physics3DSwig.LinearVelocity3DOutputTrait_swigregister(LinearVelocity3DOutputTrait)

class AngularVelocity3DOutputTrait(object):
    r"""Proxy of C++ openplx::Physics3D::Signals::AngularVelocity3DOutputTrait class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Physics3DSwig.delete_AngularVelocity3DOutputTrait

    def __init__(self):
        r"""__init__(AngularVelocity3DOutputTrait self) -> AngularVelocity3DOutputTrait"""
        _Physics3DSwig.AngularVelocity3DOutputTrait_swiginit(self, _Physics3DSwig.new_AngularVelocity3DOutputTrait())

# Register AngularVelocity3DOutputTrait in _Physics3DSwig:
_Physics3DSwig.AngularVelocity3DOutputTrait_swigregister(AngularVelocity3DOutputTrait)

class Position3DOutputTrait(object):
    r"""Proxy of C++ openplx::Physics3D::Signals::Position3DOutputTrait class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Physics3DSwig.delete_Position3DOutputTrait

    def __init__(self):
        r"""__init__(Position3DOutputTrait self) -> Position3DOutputTrait"""
        _Physics3DSwig.Position3DOutputTrait_swiginit(self, _Physics3DSwig.new_Position3DOutputTrait())

# Register Position3DOutputTrait in _Physics3DSwig:
_Physics3DSwig.Position3DOutputTrait_swigregister(Position3DOutputTrait)

class RPYOutputTrait(object):
    r"""Proxy of C++ openplx::Physics3D::Signals::RPYOutputTrait class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Physics3DSwig.delete_RPYOutputTrait

    def __init__(self):
        r"""__init__(RPYOutputTrait self) -> RPYOutputTrait"""
        _Physics3DSwig.RPYOutputTrait_swiginit(self, _Physics3DSwig.new_RPYOutputTrait())

# Register RPYOutputTrait in _Physics3DSwig:
_Physics3DSwig.RPYOutputTrait_swigregister(RPYOutputTrait)

class Physics3D_Bodies_RigidBody(Physics3D_Bodies_Body, LinearVelocity3DInputTrait, AngularVelocity3DInputTrait, LinearVelocity3DOutputTrait, AngularVelocity3DOutputTrait, Position3DOutputTrait, RPYOutputTrait):
    r"""Proxy of C++ openplx::Physics3D::Bodies::RigidBody class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Bodies_RigidBody self) -> Physics3D_Bodies_RigidBody"""
        _Physics3DSwig.Physics3D_Bodies_RigidBody_swiginit(self, _Physics3DSwig.new_Physics3D_Bodies_RigidBody())

    def inertia(self):
        r"""inertia(Physics3D_Bodies_RigidBody self) -> std::shared_ptr< openplx::Physics3D::Bodies::Inertia >"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_inertia(self)

    def kinematics(self):
        r"""kinematics(Physics3D_Bodies_RigidBody self) -> std::shared_ptr< openplx::Physics3D::Bodies::RigidBodyKinematics >"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_kinematics(self)

    def is_dynamic(self):
        r"""is_dynamic(Physics3D_Bodies_RigidBody self) -> bool"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_is_dynamic(self)

    def linear_velocity_world_output(self):
        r"""linear_velocity_world_output(Physics3D_Bodies_RigidBody self) -> std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutput >"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_linear_velocity_world_output(self)

    def angular_velocity_world_output(self):
        r"""angular_velocity_world_output(Physics3D_Bodies_RigidBody self) -> std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutput >"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_angular_velocity_world_output(self)

    def linear_velocity_world_input(self):
        r"""linear_velocity_world_input(Physics3D_Bodies_RigidBody self) -> std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInput >"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_linear_velocity_world_input(self)

    def angular_velocity_world_input(self):
        r"""angular_velocity_world_input(Physics3D_Bodies_RigidBody self) -> std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInput >"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_angular_velocity_world_input(self)

    def position_output(self):
        r"""position_output(Physics3D_Bodies_RigidBody self) -> std::shared_ptr< openplx::Physics3D::Signals::Position3DOutput >"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_position_output(self)

    def rpy_output(self):
        r"""rpy_output(Physics3D_Bodies_RigidBody self) -> std::shared_ptr< openplx::Physics3D::Signals::RPYOutput >"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_rpy_output(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Bodies_RigidBody self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Bodies_RigidBody self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Bodies_RigidBody self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Bodies_RigidBody self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Bodies_RigidBody self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Bodies_RigidBody self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Bodies_RigidBody

# Register Physics3D_Bodies_RigidBody in _Physics3DSwig:
_Physics3DSwig.Physics3D_Bodies_RigidBody_swigregister(Physics3D_Bodies_RigidBody)

class Physics3D_Bodies_RigidBodyKinematics(Physics3D_Bodies_Kinematics):
    r"""Proxy of C++ openplx::Physics3D::Bodies::RigidBodyKinematics class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Bodies_RigidBodyKinematics self) -> Physics3D_Bodies_RigidBodyKinematics"""
        _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_swiginit(self, _Physics3DSwig.new_Physics3D_Bodies_RigidBodyKinematics())

    def local_cm_transform(self):
        r"""local_cm_transform(Physics3D_Bodies_RigidBodyKinematics self) -> std::shared_ptr< openplx::Math::AffineTransform >"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_local_cm_transform(self)

    def initial_local_linear_velocity(self):
        r"""initial_local_linear_velocity(Physics3D_Bodies_RigidBodyKinematics self) -> std::shared_ptr< openplx::Math::Vec3 >"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_initial_local_linear_velocity(self)

    def initial_local_angular_velocity(self):
        r"""initial_local_angular_velocity(Physics3D_Bodies_RigidBodyKinematics self) -> std::shared_ptr< openplx::Math::Vec3 >"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_initial_local_angular_velocity(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Bodies_RigidBodyKinematics self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Bodies_RigidBodyKinematics self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Bodies_RigidBodyKinematics self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Bodies_RigidBodyKinematics self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Bodies_RigidBodyKinematics self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Bodies_RigidBodyKinematics self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Bodies_RigidBodyKinematics

# Register Physics3D_Bodies_RigidBodyKinematics in _Physics3DSwig:
_Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_swigregister(Physics3D_Bodies_RigidBodyKinematics)

class MCLinearVelocity3DOutputTrait(LinearVelocity3DOutputTrait):
    r"""Proxy of C++ openplx::Physics3D::Signals::MateConnector::MCLinearVelocity3DOutputTrait class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Physics3DSwig.delete_MCLinearVelocity3DOutputTrait

    def __init__(self):
        r"""__init__(MCLinearVelocity3DOutputTrait self) -> MCLinearVelocity3DOutputTrait"""
        _Physics3DSwig.MCLinearVelocity3DOutputTrait_swiginit(self, _Physics3DSwig.new_MCLinearVelocity3DOutputTrait())

# Register MCLinearVelocity3DOutputTrait in _Physics3DSwig:
_Physics3DSwig.MCLinearVelocity3DOutputTrait_swigregister(MCLinearVelocity3DOutputTrait)

class MCAngularVelocity3DOutputTrait(AngularVelocity3DOutputTrait):
    r"""Proxy of C++ openplx::Physics3D::Signals::MateConnector::MCAngularVelocity3DOutputTrait class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Physics3DSwig.delete_MCAngularVelocity3DOutputTrait

    def __init__(self):
        r"""__init__(MCAngularVelocity3DOutputTrait self) -> MCAngularVelocity3DOutputTrait"""
        _Physics3DSwig.MCAngularVelocity3DOutputTrait_swiginit(self, _Physics3DSwig.new_MCAngularVelocity3DOutputTrait())

# Register MCAngularVelocity3DOutputTrait in _Physics3DSwig:
_Physics3DSwig.MCAngularVelocity3DOutputTrait_swigregister(MCAngularVelocity3DOutputTrait)

class Physics3D_Charges_MateConnector(openplx.Physics.Physics_Charges_Charge, MCLinearVelocity3DOutputTrait, MCAngularVelocity3DOutputTrait):
    r"""Proxy of C++ openplx::Physics3D::Charges::MateConnector class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Charges_MateConnector self) -> Physics3D_Charges_MateConnector"""
        _Physics3DSwig.Physics3D_Charges_MateConnector_swiginit(self, _Physics3DSwig.new_Physics3D_Charges_MateConnector())

    def position(self):
        r"""position(Physics3D_Charges_MateConnector self) -> std::shared_ptr< openplx::Math::Vec3 >"""
        return _Physics3DSwig.Physics3D_Charges_MateConnector_position(self)

    def main_axis(self):
        r"""main_axis(Physics3D_Charges_MateConnector self) -> std::shared_ptr< openplx::Math::Vec3 >"""
        return _Physics3DSwig.Physics3D_Charges_MateConnector_main_axis(self)

    def normal(self):
        r"""normal(Physics3D_Charges_MateConnector self) -> std::shared_ptr< openplx::Math::Vec3 >"""
        return _Physics3DSwig.Physics3D_Charges_MateConnector_normal(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Charges_MateConnector self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Charges_MateConnector_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Charges_MateConnector self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Charges_MateConnector_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Charges_MateConnector self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Charges_MateConnector_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Charges_MateConnector self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Charges_MateConnector_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Charges_MateConnector self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Charges_MateConnector_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Charges_MateConnector self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Charges_MateConnector_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Charges_MateConnector

# Register Physics3D_Charges_MateConnector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Charges_MateConnector_swigregister(Physics3D_Charges_MateConnector)

class Physics3D_Charges_AdaptiveMateConnector(Physics3D_Charges_MateConnector):
    r"""Proxy of C++ openplx::Physics3D::Charges::AdaptiveMateConnector class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Charges_AdaptiveMateConnector self) -> Physics3D_Charges_AdaptiveMateConnector"""
        _Physics3DSwig.Physics3D_Charges_AdaptiveMateConnector_swiginit(self, _Physics3DSwig.new_Physics3D_Charges_AdaptiveMateConnector())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Charges_AdaptiveMateConnector self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Charges_AdaptiveMateConnector_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Charges_AdaptiveMateConnector self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Charges_AdaptiveMateConnector_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Charges_AdaptiveMateConnector self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Charges_AdaptiveMateConnector_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Charges_AdaptiveMateConnector self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Charges_AdaptiveMateConnector_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Charges_AdaptiveMateConnector self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Charges_AdaptiveMateConnector_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Charges_AdaptiveMateConnector self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Charges_AdaptiveMateConnector_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Charges_AdaptiveMateConnector

# Register Physics3D_Charges_AdaptiveMateConnector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Charges_AdaptiveMateConnector_swigregister(Physics3D_Charges_AdaptiveMateConnector)

class Physics3D_Charges_ContactGeometry(openplx.Physics.Physics_Charges_ContactGeometry):
    r"""Proxy of C++ openplx::Physics3D::Charges::ContactGeometry class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Charges_ContactGeometry self) -> Physics3D_Charges_ContactGeometry"""
        _Physics3DSwig.Physics3D_Charges_ContactGeometry_swiginit(self, _Physics3DSwig.new_Physics3D_Charges_ContactGeometry())

    def local_transform(self):
        r"""local_transform(Physics3D_Charges_ContactGeometry self) -> std::shared_ptr< openplx::Math::AffineTransform >"""
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_local_transform(self)

    def enable_collisions(self):
        r"""enable_collisions(Physics3D_Charges_ContactGeometry self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_enable_collisions(self)

    def include_in_mass_properties(self):
        r"""include_in_mass_properties(Physics3D_Charges_ContactGeometry self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_include_in_mass_properties(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Charges_ContactGeometry self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Charges_ContactGeometry self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Charges_ContactGeometry self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Charges_ContactGeometry self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Charges_ContactGeometry self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Charges_ContactGeometry self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Charges_ContactGeometry

# Register Physics3D_Charges_ContactGeometry in _Physics3DSwig:
_Physics3DSwig.Physics3D_Charges_ContactGeometry_swigregister(Physics3D_Charges_ContactGeometry)

class Physics3D_Charges_Box(Physics3D_Charges_ContactGeometry):
    r"""Proxy of C++ openplx::Physics3D::Charges::Box class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Charges_Box self) -> Physics3D_Charges_Box"""
        _Physics3DSwig.Physics3D_Charges_Box_swiginit(self, _Physics3DSwig.new_Physics3D_Charges_Box())

    def size(self):
        r"""size(Physics3D_Charges_Box self) -> std::shared_ptr< openplx::Math::Vec3 >"""
        return _Physics3DSwig.Physics3D_Charges_Box_size(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Charges_Box self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Charges_Box_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Charges_Box self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Charges_Box_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Charges_Box self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Charges_Box_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Charges_Box self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Charges_Box_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Charges_Box self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Charges_Box_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Charges_Box self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Charges_Box_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Charges_Box

# Register Physics3D_Charges_Box in _Physics3DSwig:
_Physics3DSwig.Physics3D_Charges_Box_swigregister(Physics3D_Charges_Box)

class Physics3D_Charges_Capsule(Physics3D_Charges_ContactGeometry):
    r"""Proxy of C++ openplx::Physics3D::Charges::Capsule class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Charges_Capsule self) -> Physics3D_Charges_Capsule"""
        _Physics3DSwig.Physics3D_Charges_Capsule_swiginit(self, _Physics3DSwig.new_Physics3D_Charges_Capsule())

    def radius(self):
        r"""radius(Physics3D_Charges_Capsule self) -> double"""
        return _Physics3DSwig.Physics3D_Charges_Capsule_radius(self)

    def height(self):
        r"""height(Physics3D_Charges_Capsule self) -> double"""
        return _Physics3DSwig.Physics3D_Charges_Capsule_height(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Charges_Capsule self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Charges_Capsule_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Charges_Capsule self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Charges_Capsule_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Charges_Capsule self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Charges_Capsule_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Charges_Capsule self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Charges_Capsule_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Charges_Capsule self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Charges_Capsule_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Charges_Capsule self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Charges_Capsule_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Charges_Capsule

# Register Physics3D_Charges_Capsule in _Physics3DSwig:
_Physics3DSwig.Physics3D_Charges_Capsule_swigregister(Physics3D_Charges_Capsule)

class Physics3D_Charges_TriMeshGeometry(Physics3D_Charges_ContactGeometry):
    r"""Proxy of C++ openplx::Physics3D::Charges::TriMeshGeometry class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Charges_TriMeshGeometry self) -> Physics3D_Charges_TriMeshGeometry"""
        _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_swiginit(self, _Physics3DSwig.new_Physics3D_Charges_TriMeshGeometry())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Charges_TriMeshGeometry self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Charges_TriMeshGeometry self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Charges_TriMeshGeometry self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Charges_TriMeshGeometry self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Charges_TriMeshGeometry self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Charges_TriMeshGeometry self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Charges_TriMeshGeometry

# Register Physics3D_Charges_TriMeshGeometry in _Physics3DSwig:
_Physics3DSwig.Physics3D_Charges_TriMeshGeometry_swigregister(Physics3D_Charges_TriMeshGeometry)

class Physics3D_Charges_ConvexMesh(Physics3D_Charges_TriMeshGeometry):
    r"""Proxy of C++ openplx::Physics3D::Charges::ConvexMesh class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Charges_ConvexMesh self) -> Physics3D_Charges_ConvexMesh"""
        _Physics3DSwig.Physics3D_Charges_ConvexMesh_swiginit(self, _Physics3DSwig.new_Physics3D_Charges_ConvexMesh())

    def vertices(self):
        r"""vertices(Physics3D_Charges_ConvexMesh self) -> Math_Vec3_Vector"""
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_vertices(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Charges_ConvexMesh self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Charges_ConvexMesh self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Charges_ConvexMesh self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Charges_ConvexMesh self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Charges_ConvexMesh self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Charges_ConvexMesh self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Charges_ConvexMesh

# Register Physics3D_Charges_ConvexMesh in _Physics3DSwig:
_Physics3DSwig.Physics3D_Charges_ConvexMesh_swigregister(Physics3D_Charges_ConvexMesh)

class Physics3D_Charges_Cylinder(Physics3D_Charges_ContactGeometry):
    r"""Proxy of C++ openplx::Physics3D::Charges::Cylinder class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Charges_Cylinder self) -> Physics3D_Charges_Cylinder"""
        _Physics3DSwig.Physics3D_Charges_Cylinder_swiginit(self, _Physics3DSwig.new_Physics3D_Charges_Cylinder())

    def radius(self):
        r"""radius(Physics3D_Charges_Cylinder self) -> double"""
        return _Physics3DSwig.Physics3D_Charges_Cylinder_radius(self)

    def height(self):
        r"""height(Physics3D_Charges_Cylinder self) -> double"""
        return _Physics3DSwig.Physics3D_Charges_Cylinder_height(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Charges_Cylinder self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Charges_Cylinder_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Charges_Cylinder self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Charges_Cylinder_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Charges_Cylinder self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Charges_Cylinder_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Charges_Cylinder self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Charges_Cylinder_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Charges_Cylinder self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Charges_Cylinder_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Charges_Cylinder self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Charges_Cylinder_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Charges_Cylinder

# Register Physics3D_Charges_Cylinder in _Physics3DSwig:
_Physics3DSwig.Physics3D_Charges_Cylinder_swigregister(Physics3D_Charges_Cylinder)

class Physics3D_Charges_ExternalTriMeshGeometry(Physics3D_Charges_TriMeshGeometry):
    r"""Proxy of C++ openplx::Physics3D::Charges::ExternalTriMeshGeometry class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Charges_ExternalTriMeshGeometry self) -> Physics3D_Charges_ExternalTriMeshGeometry"""
        _Physics3DSwig.Physics3D_Charges_ExternalTriMeshGeometry_swiginit(self, _Physics3DSwig.new_Physics3D_Charges_ExternalTriMeshGeometry())

    def path(self):
        r"""path(Physics3D_Charges_ExternalTriMeshGeometry self) -> std::string"""
        return _Physics3DSwig.Physics3D_Charges_ExternalTriMeshGeometry_path(self)

    def scale(self):
        r"""scale(Physics3D_Charges_ExternalTriMeshGeometry self) -> std::shared_ptr< openplx::Math::Vec3 >"""
        return _Physics3DSwig.Physics3D_Charges_ExternalTriMeshGeometry_scale(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Charges_ExternalTriMeshGeometry self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Charges_ExternalTriMeshGeometry_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Charges_ExternalTriMeshGeometry self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Charges_ExternalTriMeshGeometry_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Charges_ExternalTriMeshGeometry self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Charges_ExternalTriMeshGeometry_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Charges_ExternalTriMeshGeometry self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Charges_ExternalTriMeshGeometry_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Charges_ExternalTriMeshGeometry self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Charges_ExternalTriMeshGeometry_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Charges_ExternalTriMeshGeometry self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Charges_ExternalTriMeshGeometry_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Charges_ExternalTriMeshGeometry

# Register Physics3D_Charges_ExternalTriMeshGeometry in _Physics3DSwig:
_Physics3DSwig.Physics3D_Charges_ExternalTriMeshGeometry_swigregister(Physics3D_Charges_ExternalTriMeshGeometry)

class Physics3D_Charges_RedirectedMateConnector(Physics3D_Charges_MateConnector):
    r"""Proxy of C++ openplx::Physics3D::Charges::RedirectedMateConnector class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Charges_RedirectedMateConnector self) -> Physics3D_Charges_RedirectedMateConnector"""
        _Physics3DSwig.Physics3D_Charges_RedirectedMateConnector_swiginit(self, _Physics3DSwig.new_Physics3D_Charges_RedirectedMateConnector())

    def redirected_parent(self):
        r"""redirected_parent(Physics3D_Charges_RedirectedMateConnector self) -> std::shared_ptr< openplx::Physics3D::Bodies::Body >"""
        return _Physics3DSwig.Physics3D_Charges_RedirectedMateConnector_redirected_parent(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Charges_RedirectedMateConnector self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Charges_RedirectedMateConnector_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Charges_RedirectedMateConnector self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Charges_RedirectedMateConnector_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Charges_RedirectedMateConnector self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Charges_RedirectedMateConnector_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Charges_RedirectedMateConnector self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Charges_RedirectedMateConnector_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Charges_RedirectedMateConnector self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Charges_RedirectedMateConnector_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Charges_RedirectedMateConnector self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Charges_RedirectedMateConnector_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Charges_RedirectedMateConnector

# Register Physics3D_Charges_RedirectedMateConnector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Charges_RedirectedMateConnector_swigregister(Physics3D_Charges_RedirectedMateConnector)

class Physics3D_Charges_Sphere(Physics3D_Charges_ContactGeometry):
    r"""Proxy of C++ openplx::Physics3D::Charges::Sphere class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Charges_Sphere self) -> Physics3D_Charges_Sphere"""
        _Physics3DSwig.Physics3D_Charges_Sphere_swiginit(self, _Physics3DSwig.new_Physics3D_Charges_Sphere())

    def radius(self):
        r"""radius(Physics3D_Charges_Sphere self) -> double"""
        return _Physics3DSwig.Physics3D_Charges_Sphere_radius(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Charges_Sphere self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Charges_Sphere_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Charges_Sphere self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Charges_Sphere_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Charges_Sphere self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Charges_Sphere_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Charges_Sphere self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Charges_Sphere_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Charges_Sphere self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Charges_Sphere_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Charges_Sphere self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Charges_Sphere_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Charges_Sphere

# Register Physics3D_Charges_Sphere in _Physics3DSwig:
_Physics3DSwig.Physics3D_Charges_Sphere_swigregister(Physics3D_Charges_Sphere)

class Physics3D_Charges_StructuralPlanarConnector(Physics3D_Charges_RedirectedMateConnector):
    r"""Proxy of C++ openplx::Physics3D::Charges::StructuralPlanarConnector class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Charges_StructuralPlanarConnector self) -> Physics3D_Charges_StructuralPlanarConnector"""
        _Physics3DSwig.Physics3D_Charges_StructuralPlanarConnector_swiginit(self, _Physics3DSwig.new_Physics3D_Charges_StructuralPlanarConnector())

    def angle(self):
        r"""angle(Physics3D_Charges_StructuralPlanarConnector self) -> double"""
        return _Physics3DSwig.Physics3D_Charges_StructuralPlanarConnector_angle(self)

    def x(self):
        r"""x(Physics3D_Charges_StructuralPlanarConnector self) -> double"""
        return _Physics3DSwig.Physics3D_Charges_StructuralPlanarConnector_x(self)

    def y(self):
        r"""y(Physics3D_Charges_StructuralPlanarConnector self) -> double"""
        return _Physics3DSwig.Physics3D_Charges_StructuralPlanarConnector_y(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Charges_StructuralPlanarConnector self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Charges_StructuralPlanarConnector_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Charges_StructuralPlanarConnector self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Charges_StructuralPlanarConnector_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Charges_StructuralPlanarConnector self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Charges_StructuralPlanarConnector_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Charges_StructuralPlanarConnector self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Charges_StructuralPlanarConnector_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Charges_StructuralPlanarConnector self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Charges_StructuralPlanarConnector_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Charges_StructuralPlanarConnector self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Charges_StructuralPlanarConnector_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Charges_StructuralPlanarConnector

# Register Physics3D_Charges_StructuralPlanarConnector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Charges_StructuralPlanarConnector_swigregister(Physics3D_Charges_StructuralPlanarConnector)

class Physics3D_Charges_TriMesh(Physics3D_Charges_TriMeshGeometry):
    r"""Proxy of C++ openplx::Physics3D::Charges::TriMesh class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Charges_TriMesh self) -> Physics3D_Charges_TriMesh"""
        _Physics3DSwig.Physics3D_Charges_TriMesh_swiginit(self, _Physics3DSwig.new_Physics3D_Charges_TriMesh())

    def vertices(self):
        r"""vertices(Physics3D_Charges_TriMesh self) -> Math_Vec3_Vector"""
        return _Physics3DSwig.Physics3D_Charges_TriMesh_vertices(self)

    def indices(self):
        r"""indices(Physics3D_Charges_TriMesh self) -> IntVector"""
        return _Physics3DSwig.Physics3D_Charges_TriMesh_indices(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Charges_TriMesh self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Charges_TriMesh_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Charges_TriMesh self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Charges_TriMesh_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Charges_TriMesh self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Charges_TriMesh_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Charges_TriMesh self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Charges_TriMesh_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Charges_TriMesh self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Charges_TriMesh_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Charges_TriMesh self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Charges_TriMesh_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Charges_TriMesh

# Register Physics3D_Charges_TriMesh in _Physics3DSwig:
_Physics3DSwig.Physics3D_Charges_TriMesh_swigregister(Physics3D_Charges_TriMesh)

class Physics3D_Charges_World(Physics3D_Charges_MateConnector):
    r"""Proxy of C++ openplx::Physics3D::Charges::World class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Charges_World self) -> Physics3D_Charges_World"""
        _Physics3DSwig.Physics3D_Charges_World_swiginit(self, _Physics3DSwig.new_Physics3D_Charges_World())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Charges_World self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Charges_World_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Charges_World self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Charges_World_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Charges_World self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Charges_World_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Charges_World self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Charges_World_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Charges_World self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Charges_World_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Charges_World self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Charges_World_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Charges_World

# Register Physics3D_Charges_World in _Physics3DSwig:
_Physics3DSwig.Physics3D_Charges_World_swigregister(Physics3D_Charges_World)

class Physics3D_Interactions_Mate(openplx.Physics.Physics_Interactions_Interaction):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Mate class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Mate self) -> Physics3D_Interactions_Mate"""
        _Physics3DSwig.Physics3D_Interactions_Mate_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Mate())

    def charges(self):
        r"""charges(Physics3D_Interactions_Mate self) -> Physics3D_Charges_MateConnector_Vector"""
        return _Physics3DSwig.Physics3D_Interactions_Mate_charges(self)

    def dissipation(self):
        r"""dissipation(Physics3D_Interactions_Mate self) -> std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation >"""
        return _Physics3DSwig.Physics3D_Interactions_Mate_dissipation(self)

    def flexibility(self):
        r"""flexibility(Physics3D_Interactions_Mate self) -> std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility >"""
        return _Physics3DSwig.Physics3D_Interactions_Mate_flexibility(self)

    def toughness(self):
        r"""toughness(Physics3D_Interactions_Mate self) -> std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultMateToughness >"""
        return _Physics3DSwig.Physics3D_Interactions_Mate_toughness(self)

    def clearance(self):
        r"""clearance(Physics3D_Interactions_Mate self) -> std::shared_ptr< openplx::Physics3D::Interactions::Clearance::DefaultMateClearance >"""
        return _Physics3DSwig.Physics3D_Interactions_Mate_clearance(self)

    def enable_snap(self):
        r"""enable_snap(Physics3D_Interactions_Mate self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Mate_enable_snap(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Mate self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Mate_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Mate self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Mate_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Mate self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Mate_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Mate self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Mate_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Mate self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Mate_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Mate self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Mate_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Mate

# Register Physics3D_Interactions_Mate in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Mate_swigregister(Physics3D_Interactions_Mate)

class Physics3D_Interactions_Ball(Physics3D_Interactions_Mate):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Ball class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Ball self) -> Physics3D_Interactions_Ball"""
        _Physics3DSwig.Physics3D_Interactions_Ball_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Ball())

    def dissipation(self):
        r"""dissipation(Physics3D_Interactions_Ball self) -> std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation >"""
        return _Physics3DSwig.Physics3D_Interactions_Ball_dissipation(self)

    def flexibility(self):
        r"""flexibility(Physics3D_Interactions_Ball self) -> std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility >"""
        return _Physics3DSwig.Physics3D_Interactions_Ball_flexibility(self)

    def toughness(self):
        r"""toughness(Physics3D_Interactions_Ball self) -> std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultBallToughness >"""
        return _Physics3DSwig.Physics3D_Interactions_Ball_toughness(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Ball self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Ball_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Ball self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Ball_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Ball self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Ball_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Ball self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Ball_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Ball self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Ball_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Ball self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Ball_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Ball

# Register Physics3D_Interactions_Ball in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Ball_swigregister(Physics3D_Interactions_Ball)

class Physics3D_Interactions_Clearance_DefaultMateClearance(openplx.Core.Object):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Clearance::DefaultMateClearance class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Clearance_DefaultMateClearance self) -> Physics3D_Interactions_Clearance_DefaultMateClearance"""
        _Physics3DSwig.Physics3D_Interactions_Clearance_DefaultMateClearance_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Clearance_DefaultMateClearance())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Clearance_DefaultMateClearance self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_DefaultMateClearance_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Clearance_DefaultMateClearance self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_DefaultMateClearance_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Clearance_DefaultMateClearance self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_DefaultMateClearance_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Clearance_DefaultMateClearance self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_DefaultMateClearance_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Clearance_DefaultMateClearance self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_DefaultMateClearance_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Clearance_DefaultMateClearance self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_DefaultMateClearance_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Clearance_DefaultMateClearance

# Register Physics3D_Interactions_Clearance_DefaultMateClearance in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Clearance_DefaultMateClearance_swigregister(Physics3D_Interactions_Clearance_DefaultMateClearance)

class Physics3D_Interactions_Clearance_ConstantBallClearance(Physics3D_Interactions_Clearance_DefaultMateClearance):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Clearance::ConstantBallClearance class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Clearance_ConstantBallClearance self) -> Physics3D_Interactions_Clearance_ConstantBallClearance"""
        _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantBallClearance_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Clearance_ConstantBallClearance())

    def along_main(self):
        r"""along_main(Physics3D_Interactions_Clearance_ConstantBallClearance self) -> std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance >"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantBallClearance_along_main(self)

    def along_normal(self):
        r"""along_normal(Physics3D_Interactions_Clearance_ConstantBallClearance self) -> std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance >"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantBallClearance_along_normal(self)

    def along_cross(self):
        r"""along_cross(Physics3D_Interactions_Clearance_ConstantBallClearance self) -> std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance >"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantBallClearance_along_cross(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Clearance_ConstantBallClearance self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantBallClearance_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Clearance_ConstantBallClearance self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantBallClearance_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Clearance_ConstantBallClearance self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantBallClearance_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Clearance_ConstantBallClearance self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantBallClearance_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Clearance_ConstantBallClearance self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantBallClearance_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Clearance_ConstantBallClearance self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantBallClearance_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Clearance_ConstantBallClearance

# Register Physics3D_Interactions_Clearance_ConstantBallClearance in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Clearance_ConstantBallClearance_swigregister(Physics3D_Interactions_Clearance_ConstantBallClearance)

class Physics3D_Interactions_Clearance_ConstantCylindricalClearance(Physics3D_Interactions_Clearance_DefaultMateClearance):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Clearance::ConstantCylindricalClearance class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Clearance_ConstantCylindricalClearance self) -> Physics3D_Interactions_Clearance_ConstantCylindricalClearance"""
        _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantCylindricalClearance_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Clearance_ConstantCylindricalClearance())

    def along_normal(self):
        r"""along_normal(Physics3D_Interactions_Clearance_ConstantCylindricalClearance self) -> std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance >"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantCylindricalClearance_along_normal(self)

    def along_cross(self):
        r"""along_cross(Physics3D_Interactions_Clearance_ConstantCylindricalClearance self) -> std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance >"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantCylindricalClearance_along_cross(self)

    def around_all_axes(self):
        r"""around_all_axes(Physics3D_Interactions_Clearance_ConstantCylindricalClearance self) -> std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance >"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantCylindricalClearance_around_all_axes(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Clearance_ConstantCylindricalClearance self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantCylindricalClearance_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Clearance_ConstantCylindricalClearance self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantCylindricalClearance_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Clearance_ConstantCylindricalClearance self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantCylindricalClearance_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Clearance_ConstantCylindricalClearance self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantCylindricalClearance_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Clearance_ConstantCylindricalClearance self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantCylindricalClearance_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Clearance_ConstantCylindricalClearance self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantCylindricalClearance_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Clearance_ConstantCylindricalClearance

# Register Physics3D_Interactions_Clearance_ConstantCylindricalClearance in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Clearance_ConstantCylindricalClearance_swigregister(Physics3D_Interactions_Clearance_ConstantCylindricalClearance)

class Physics3D_Interactions_Clearance_ConstantHingeClearance(Physics3D_Interactions_Clearance_DefaultMateClearance):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Clearance::ConstantHingeClearance class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Clearance_ConstantHingeClearance self) -> Physics3D_Interactions_Clearance_ConstantHingeClearance"""
        _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Clearance_ConstantHingeClearance())

    def along_main(self):
        r"""along_main(Physics3D_Interactions_Clearance_ConstantHingeClearance self) -> std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance >"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_along_main(self)

    def along_normal(self):
        r"""along_normal(Physics3D_Interactions_Clearance_ConstantHingeClearance self) -> std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance >"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_along_normal(self)

    def along_cross(self):
        r"""along_cross(Physics3D_Interactions_Clearance_ConstantHingeClearance self) -> std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance >"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_along_cross(self)

    def around_all_axes(self):
        r"""around_all_axes(Physics3D_Interactions_Clearance_ConstantHingeClearance self) -> std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance >"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_around_all_axes(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Clearance_ConstantHingeClearance self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Clearance_ConstantHingeClearance self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Clearance_ConstantHingeClearance self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Clearance_ConstantHingeClearance self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Clearance_ConstantHingeClearance self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Clearance_ConstantHingeClearance self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Clearance_ConstantHingeClearance

# Register Physics3D_Interactions_Clearance_ConstantHingeClearance in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Clearance_ConstantHingeClearance_swigregister(Physics3D_Interactions_Clearance_ConstantHingeClearance)

class Physics3D_Interactions_Clearance_ConstantLockClearance(Physics3D_Interactions_Clearance_DefaultMateClearance):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Clearance::ConstantLockClearance class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Clearance_ConstantLockClearance self) -> Physics3D_Interactions_Clearance_ConstantLockClearance"""
        _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Clearance_ConstantLockClearance())

    def along_main(self):
        r"""along_main(Physics3D_Interactions_Clearance_ConstantLockClearance self) -> std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance >"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_along_main(self)

    def along_normal(self):
        r"""along_normal(Physics3D_Interactions_Clearance_ConstantLockClearance self) -> std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance >"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_along_normal(self)

    def along_cross(self):
        r"""along_cross(Physics3D_Interactions_Clearance_ConstantLockClearance self) -> std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance >"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_along_cross(self)

    def around_all_axes(self):
        r"""around_all_axes(Physics3D_Interactions_Clearance_ConstantLockClearance self) -> std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance >"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_around_all_axes(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Clearance_ConstantLockClearance self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Clearance_ConstantLockClearance self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Clearance_ConstantLockClearance self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Clearance_ConstantLockClearance self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Clearance_ConstantLockClearance self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Clearance_ConstantLockClearance self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Clearance_ConstantLockClearance

# Register Physics3D_Interactions_Clearance_ConstantLockClearance in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Clearance_ConstantLockClearance_swigregister(Physics3D_Interactions_Clearance_ConstantLockClearance)

class Physics3D_Interactions_Clearance_ConstantPrismaticClearance(Physics3D_Interactions_Clearance_DefaultMateClearance):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Clearance::ConstantPrismaticClearance class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Clearance_ConstantPrismaticClearance self) -> Physics3D_Interactions_Clearance_ConstantPrismaticClearance"""
        _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantPrismaticClearance_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Clearance_ConstantPrismaticClearance())

    def along_normal(self):
        r"""along_normal(Physics3D_Interactions_Clearance_ConstantPrismaticClearance self) -> std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance >"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantPrismaticClearance_along_normal(self)

    def along_cross(self):
        r"""along_cross(Physics3D_Interactions_Clearance_ConstantPrismaticClearance self) -> std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance >"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantPrismaticClearance_along_cross(self)

    def around_all_axes(self):
        r"""around_all_axes(Physics3D_Interactions_Clearance_ConstantPrismaticClearance self) -> std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance >"""
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantPrismaticClearance_around_all_axes(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Clearance_ConstantPrismaticClearance self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantPrismaticClearance_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Clearance_ConstantPrismaticClearance self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantPrismaticClearance_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Clearance_ConstantPrismaticClearance self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantPrismaticClearance_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Clearance_ConstantPrismaticClearance self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantPrismaticClearance_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Clearance_ConstantPrismaticClearance self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantPrismaticClearance_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Clearance_ConstantPrismaticClearance self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Clearance_ConstantPrismaticClearance_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Clearance_ConstantPrismaticClearance

# Register Physics3D_Interactions_Clearance_ConstantPrismaticClearance in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Clearance_ConstantPrismaticClearance_swigregister(Physics3D_Interactions_Clearance_ConstantPrismaticClearance)

class Physics3D_Interactions_Cylindrical(Physics3D_Interactions_Mate):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Cylindrical class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Cylindrical self) -> Physics3D_Interactions_Cylindrical"""
        _Physics3DSwig.Physics3D_Interactions_Cylindrical_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Cylindrical())

    def initial_angle(self):
        r"""initial_angle(Physics3D_Interactions_Cylindrical self) -> double"""
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_initial_angle(self)

    def initial_position(self):
        r"""initial_position(Physics3D_Interactions_Cylindrical self) -> double"""
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_initial_position(self)

    def dissipation(self):
        r"""dissipation(Physics3D_Interactions_Cylindrical self) -> std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation >"""
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_dissipation(self)

    def flexibility(self):
        r"""flexibility(Physics3D_Interactions_Cylindrical self) -> std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility >"""
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_flexibility(self)

    def toughness(self):
        r"""toughness(Physics3D_Interactions_Cylindrical self) -> std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness >"""
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_toughness(self)

    def friction_translational(self):
        r"""friction_translational(Physics3D_Interactions_Cylindrical self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction >"""
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_friction_translational(self)

    def friction_rotational(self):
        r"""friction_rotational(Physics3D_Interactions_Cylindrical self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction >"""
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_friction_rotational(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Cylindrical self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Cylindrical self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Cylindrical self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Cylindrical self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Cylindrical self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Cylindrical self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Cylindrical

# Register Physics3D_Interactions_Cylindrical in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Cylindrical_swigregister(Physics3D_Interactions_Cylindrical)

class Physics3D_Interactions_Dissipation_DefaultMateDissipation(openplx.Core.Object):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Dissipation::DefaultMateDissipation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Dissipation_DefaultMateDissipation self) -> Physics3D_Interactions_Dissipation_DefaultMateDissipation"""
        _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultMateDissipation_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Dissipation_DefaultMateDissipation())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Dissipation_DefaultMateDissipation self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultMateDissipation_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Dissipation_DefaultMateDissipation self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultMateDissipation_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Dissipation_DefaultMateDissipation self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultMateDissipation_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Dissipation_DefaultMateDissipation self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultMateDissipation_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Dissipation_DefaultMateDissipation self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultMateDissipation_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Dissipation_DefaultMateDissipation self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultMateDissipation_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Dissipation_DefaultMateDissipation

# Register Physics3D_Interactions_Dissipation_DefaultMateDissipation in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultMateDissipation_swigregister(Physics3D_Interactions_Dissipation_DefaultMateDissipation)

class Physics3D_Interactions_Dissipation_DefaultBallDissipation(Physics3D_Interactions_Dissipation_DefaultMateDissipation):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Dissipation::DefaultBallDissipation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Dissipation_DefaultBallDissipation self) -> Physics3D_Interactions_Dissipation_DefaultBallDissipation"""
        _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultBallDissipation_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Dissipation_DefaultBallDissipation())

    def along_main(self):
        r"""along_main(Physics3D_Interactions_Dissipation_DefaultBallDissipation self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultBallDissipation_along_main(self)

    def along_normal(self):
        r"""along_normal(Physics3D_Interactions_Dissipation_DefaultBallDissipation self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultBallDissipation_along_normal(self)

    def along_cross(self):
        r"""along_cross(Physics3D_Interactions_Dissipation_DefaultBallDissipation self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultBallDissipation_along_cross(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Dissipation_DefaultBallDissipation self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultBallDissipation_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Dissipation_DefaultBallDissipation self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultBallDissipation_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Dissipation_DefaultBallDissipation self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultBallDissipation_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Dissipation_DefaultBallDissipation self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultBallDissipation_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Dissipation_DefaultBallDissipation self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultBallDissipation_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Dissipation_DefaultBallDissipation self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultBallDissipation_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Dissipation_DefaultBallDissipation

# Register Physics3D_Interactions_Dissipation_DefaultBallDissipation in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultBallDissipation_swigregister(Physics3D_Interactions_Dissipation_DefaultBallDissipation)

class Physics3D_Interactions_Dissipation_BallMechanicalDamping(Physics3D_Interactions_Dissipation_DefaultBallDissipation):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Dissipation::BallMechanicalDamping class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Dissipation_BallMechanicalDamping self) -> Physics3D_Interactions_Dissipation_BallMechanicalDamping"""
        _Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Dissipation_BallMechanicalDamping())

    def default_damping(self):
        r"""default_damping(Physics3D_Interactions_Dissipation_BallMechanicalDamping self) -> double"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_default_damping(self)

    def along_main(self):
        r"""along_main(Physics3D_Interactions_Dissipation_BallMechanicalDamping self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_along_main(self)

    def along_normal(self):
        r"""along_normal(Physics3D_Interactions_Dissipation_BallMechanicalDamping self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_along_normal(self)

    def along_cross(self):
        r"""along_cross(Physics3D_Interactions_Dissipation_BallMechanicalDamping self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_along_cross(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Dissipation_BallMechanicalDamping self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Dissipation_BallMechanicalDamping self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Dissipation_BallMechanicalDamping self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Dissipation_BallMechanicalDamping self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Dissipation_BallMechanicalDamping self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Dissipation_BallMechanicalDamping self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Dissipation_BallMechanicalDamping

# Register Physics3D_Interactions_Dissipation_BallMechanicalDamping in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Dissipation_BallMechanicalDamping_swigregister(Physics3D_Interactions_Dissipation_BallMechanicalDamping)

class Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation(Physics3D_Interactions_Dissipation_DefaultMateDissipation):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Dissipation::DefaultCylindricalDissipation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation self) -> Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation"""
        _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation())

    def along_normal(self):
        r"""along_normal(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_along_normal(self)

    def along_cross(self):
        r"""along_cross(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_along_cross(self)

    def around_normal(self):
        r"""around_normal(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_around_normal(self)

    def around_cross(self):
        r"""around_cross(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_around_cross(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation

# Register Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation_swigregister(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation)

class Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping(Physics3D_Interactions_Dissipation_DefaultCylindricalDissipation):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Dissipation::CylindricalMechanicalDamping class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping self) -> Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping"""
        _Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping())

    def default_damping(self):
        r"""default_damping(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping self) -> double"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_default_damping(self)

    def along_normal(self):
        r"""along_normal(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_along_normal(self)

    def along_cross(self):
        r"""along_cross(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_along_cross(self)

    def around_normal(self):
        r"""around_normal(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_around_normal(self)

    def around_cross(self):
        r"""around_cross(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_around_cross(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping

# Register Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping_swigregister(Physics3D_Interactions_Dissipation_CylindricalMechanicalDamping)

class Physics3D_Interactions_Dissipation_DefaultHingeDissipation(Physics3D_Interactions_Dissipation_DefaultMateDissipation):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Dissipation_DefaultHingeDissipation self) -> Physics3D_Interactions_Dissipation_DefaultHingeDissipation"""
        _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Dissipation_DefaultHingeDissipation())

    def along_main(self):
        r"""along_main(Physics3D_Interactions_Dissipation_DefaultHingeDissipation self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_along_main(self)

    def along_normal(self):
        r"""along_normal(Physics3D_Interactions_Dissipation_DefaultHingeDissipation self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_along_normal(self)

    def along_cross(self):
        r"""along_cross(Physics3D_Interactions_Dissipation_DefaultHingeDissipation self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_along_cross(self)

    def around_normal(self):
        r"""around_normal(Physics3D_Interactions_Dissipation_DefaultHingeDissipation self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_around_normal(self)

    def around_cross(self):
        r"""around_cross(Physics3D_Interactions_Dissipation_DefaultHingeDissipation self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_around_cross(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Dissipation_DefaultHingeDissipation self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Dissipation_DefaultHingeDissipation self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Dissipation_DefaultHingeDissipation self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Dissipation_DefaultHingeDissipation self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Dissipation_DefaultHingeDissipation self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Dissipation_DefaultHingeDissipation self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Dissipation_DefaultHingeDissipation

# Register Physics3D_Interactions_Dissipation_DefaultHingeDissipation in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultHingeDissipation_swigregister(Physics3D_Interactions_Dissipation_DefaultHingeDissipation)

class Physics3D_Interactions_Dissipation_DefaultLockDissipation(Physics3D_Interactions_Dissipation_DefaultMateDissipation):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Dissipation_DefaultLockDissipation self) -> Physics3D_Interactions_Dissipation_DefaultLockDissipation"""
        _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Dissipation_DefaultLockDissipation())

    def along_main(self):
        r"""along_main(Physics3D_Interactions_Dissipation_DefaultLockDissipation self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_along_main(self)

    def along_normal(self):
        r"""along_normal(Physics3D_Interactions_Dissipation_DefaultLockDissipation self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_along_normal(self)

    def along_cross(self):
        r"""along_cross(Physics3D_Interactions_Dissipation_DefaultLockDissipation self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_along_cross(self)

    def around_main(self):
        r"""around_main(Physics3D_Interactions_Dissipation_DefaultLockDissipation self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_around_main(self)

    def around_normal(self):
        r"""around_normal(Physics3D_Interactions_Dissipation_DefaultLockDissipation self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_around_normal(self)

    def around_cross(self):
        r"""around_cross(Physics3D_Interactions_Dissipation_DefaultLockDissipation self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_around_cross(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Dissipation_DefaultLockDissipation self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Dissipation_DefaultLockDissipation self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Dissipation_DefaultLockDissipation self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Dissipation_DefaultLockDissipation self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Dissipation_DefaultLockDissipation self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Dissipation_DefaultLockDissipation self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Dissipation_DefaultLockDissipation

# Register Physics3D_Interactions_Dissipation_DefaultLockDissipation in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultLockDissipation_swigregister(Physics3D_Interactions_Dissipation_DefaultLockDissipation)

class Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation(Physics3D_Interactions_Dissipation_DefaultMateDissipation):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation self) -> Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation"""
        _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation())

    def along_normal(self):
        r"""along_normal(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_along_normal(self)

    def along_cross(self):
        r"""along_cross(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_along_cross(self)

    def around_main(self):
        r"""around_main(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_around_main(self)

    def around_normal(self):
        r"""around_normal(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_around_normal(self)

    def around_cross(self):
        r"""around_cross(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_around_cross(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation

# Register Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation_swigregister(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation)

class Physics3D_Interactions_Dissipation_HingeMechanicalDamping(Physics3D_Interactions_Dissipation_DefaultHingeDissipation):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Dissipation::HingeMechanicalDamping class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Dissipation_HingeMechanicalDamping self) -> Physics3D_Interactions_Dissipation_HingeMechanicalDamping"""
        _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Dissipation_HingeMechanicalDamping())

    def default_damping(self):
        r"""default_damping(Physics3D_Interactions_Dissipation_HingeMechanicalDamping self) -> double"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_default_damping(self)

    def along_main(self):
        r"""along_main(Physics3D_Interactions_Dissipation_HingeMechanicalDamping self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_along_main(self)

    def along_normal(self):
        r"""along_normal(Physics3D_Interactions_Dissipation_HingeMechanicalDamping self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_along_normal(self)

    def along_cross(self):
        r"""along_cross(Physics3D_Interactions_Dissipation_HingeMechanicalDamping self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_along_cross(self)

    def around_normal(self):
        r"""around_normal(Physics3D_Interactions_Dissipation_HingeMechanicalDamping self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_around_normal(self)

    def around_cross(self):
        r"""around_cross(Physics3D_Interactions_Dissipation_HingeMechanicalDamping self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_around_cross(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Dissipation_HingeMechanicalDamping self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Dissipation_HingeMechanicalDamping self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Dissipation_HingeMechanicalDamping self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Dissipation_HingeMechanicalDamping self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Dissipation_HingeMechanicalDamping self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Dissipation_HingeMechanicalDamping self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Dissipation_HingeMechanicalDamping

# Register Physics3D_Interactions_Dissipation_HingeMechanicalDamping in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Dissipation_HingeMechanicalDamping_swigregister(Physics3D_Interactions_Dissipation_HingeMechanicalDamping)

class Physics3D_Interactions_Dissipation_LockMechanicalDamping(Physics3D_Interactions_Dissipation_DefaultLockDissipation):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Dissipation::LockMechanicalDamping class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Dissipation_LockMechanicalDamping self) -> Physics3D_Interactions_Dissipation_LockMechanicalDamping"""
        _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Dissipation_LockMechanicalDamping())

    def default_damping(self):
        r"""default_damping(Physics3D_Interactions_Dissipation_LockMechanicalDamping self) -> double"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_default_damping(self)

    def along_main(self):
        r"""along_main(Physics3D_Interactions_Dissipation_LockMechanicalDamping self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_along_main(self)

    def along_normal(self):
        r"""along_normal(Physics3D_Interactions_Dissipation_LockMechanicalDamping self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_along_normal(self)

    def along_cross(self):
        r"""along_cross(Physics3D_Interactions_Dissipation_LockMechanicalDamping self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_along_cross(self)

    def around_main(self):
        r"""around_main(Physics3D_Interactions_Dissipation_LockMechanicalDamping self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_around_main(self)

    def around_normal(self):
        r"""around_normal(Physics3D_Interactions_Dissipation_LockMechanicalDamping self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_around_normal(self)

    def around_cross(self):
        r"""around_cross(Physics3D_Interactions_Dissipation_LockMechanicalDamping self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_around_cross(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Dissipation_LockMechanicalDamping self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Dissipation_LockMechanicalDamping self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Dissipation_LockMechanicalDamping self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Dissipation_LockMechanicalDamping self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Dissipation_LockMechanicalDamping self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Dissipation_LockMechanicalDamping self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Dissipation_LockMechanicalDamping

# Register Physics3D_Interactions_Dissipation_LockMechanicalDamping in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Dissipation_LockMechanicalDamping_swigregister(Physics3D_Interactions_Dissipation_LockMechanicalDamping)

class Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping(Physics3D_Interactions_Dissipation_DefaultPrismaticDissipation):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Dissipation::PrismaticMechanicalDamping class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping self) -> Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping"""
        _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping())

    def default_damping(self):
        r"""default_damping(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping self) -> double"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_default_damping(self)

    def along_normal(self):
        r"""along_normal(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_along_normal(self)

    def along_cross(self):
        r"""along_cross(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_along_cross(self)

    def around_main(self):
        r"""around_main(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_around_main(self)

    def around_normal(self):
        r"""around_normal(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_around_normal(self)

    def around_cross(self):
        r"""around_cross(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping >"""
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_around_cross(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping

# Register Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping_swigregister(Physics3D_Interactions_Dissipation_PrismaticMechanicalDamping)

class Physics3D_Interactions_Flexibility_DefaultMateFlexibility(openplx.Core.Object):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Flexibility::DefaultMateFlexibility class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Flexibility_DefaultMateFlexibility self) -> Physics3D_Interactions_Flexibility_DefaultMateFlexibility"""
        _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultMateFlexibility_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Flexibility_DefaultMateFlexibility())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Flexibility_DefaultMateFlexibility self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultMateFlexibility_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Flexibility_DefaultMateFlexibility self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultMateFlexibility_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Flexibility_DefaultMateFlexibility self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultMateFlexibility_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Flexibility_DefaultMateFlexibility self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultMateFlexibility_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Flexibility_DefaultMateFlexibility self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultMateFlexibility_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Flexibility_DefaultMateFlexibility self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultMateFlexibility_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Flexibility_DefaultMateFlexibility

# Register Physics3D_Interactions_Flexibility_DefaultMateFlexibility in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultMateFlexibility_swigregister(Physics3D_Interactions_Flexibility_DefaultMateFlexibility)

class Physics3D_Interactions_Flexibility_DefaultBallFlexibility(Physics3D_Interactions_Flexibility_DefaultMateFlexibility):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Flexibility::DefaultBallFlexibility class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Flexibility_DefaultBallFlexibility self) -> Physics3D_Interactions_Flexibility_DefaultBallFlexibility"""
        _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultBallFlexibility_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Flexibility_DefaultBallFlexibility())

    def along_main(self):
        r"""along_main(Physics3D_Interactions_Flexibility_DefaultBallFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultBallFlexibility_along_main(self)

    def along_normal(self):
        r"""along_normal(Physics3D_Interactions_Flexibility_DefaultBallFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultBallFlexibility_along_normal(self)

    def along_cross(self):
        r"""along_cross(Physics3D_Interactions_Flexibility_DefaultBallFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultBallFlexibility_along_cross(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Flexibility_DefaultBallFlexibility self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultBallFlexibility_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Flexibility_DefaultBallFlexibility self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultBallFlexibility_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Flexibility_DefaultBallFlexibility self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultBallFlexibility_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Flexibility_DefaultBallFlexibility self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultBallFlexibility_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Flexibility_DefaultBallFlexibility self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultBallFlexibility_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Flexibility_DefaultBallFlexibility self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultBallFlexibility_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Flexibility_DefaultBallFlexibility

# Register Physics3D_Interactions_Flexibility_DefaultBallFlexibility in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultBallFlexibility_swigregister(Physics3D_Interactions_Flexibility_DefaultBallFlexibility)

class Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility(Physics3D_Interactions_Flexibility_DefaultMateFlexibility):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Flexibility::DefaultCylindricalFlexibility class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility self) -> Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility"""
        _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility())

    def along_normal(self):
        r"""along_normal(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_along_normal(self)

    def along_cross(self):
        r"""along_cross(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_along_cross(self)

    def around_normal(self):
        r"""around_normal(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_around_normal(self)

    def around_cross(self):
        r"""around_cross(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_around_cross(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility

# Register Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility_swigregister(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility)

class Physics3D_Interactions_Flexibility_DefaultHingeFlexibility(Physics3D_Interactions_Flexibility_DefaultMateFlexibility):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility self) -> Physics3D_Interactions_Flexibility_DefaultHingeFlexibility"""
        _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Flexibility_DefaultHingeFlexibility())

    def along_main(self):
        r"""along_main(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_along_main(self)

    def along_normal(self):
        r"""along_normal(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_along_normal(self)

    def along_cross(self):
        r"""along_cross(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_along_cross(self)

    def around_normal(self):
        r"""around_normal(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_around_normal(self)

    def around_cross(self):
        r"""around_cross(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_around_cross(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Flexibility_DefaultHingeFlexibility

# Register Physics3D_Interactions_Flexibility_DefaultHingeFlexibility in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultHingeFlexibility_swigregister(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility)

class Physics3D_Interactions_Flexibility_DefaultLockFlexibility(Physics3D_Interactions_Flexibility_DefaultMateFlexibility):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Flexibility_DefaultLockFlexibility self) -> Physics3D_Interactions_Flexibility_DefaultLockFlexibility"""
        _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Flexibility_DefaultLockFlexibility())

    def along_main(self):
        r"""along_main(Physics3D_Interactions_Flexibility_DefaultLockFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_along_main(self)

    def along_normal(self):
        r"""along_normal(Physics3D_Interactions_Flexibility_DefaultLockFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_along_normal(self)

    def along_cross(self):
        r"""along_cross(Physics3D_Interactions_Flexibility_DefaultLockFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_along_cross(self)

    def around_main(self):
        r"""around_main(Physics3D_Interactions_Flexibility_DefaultLockFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_around_main(self)

    def around_normal(self):
        r"""around_normal(Physics3D_Interactions_Flexibility_DefaultLockFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_around_normal(self)

    def around_cross(self):
        r"""around_cross(Physics3D_Interactions_Flexibility_DefaultLockFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_around_cross(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Flexibility_DefaultLockFlexibility self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Flexibility_DefaultLockFlexibility self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Flexibility_DefaultLockFlexibility self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Flexibility_DefaultLockFlexibility self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Flexibility_DefaultLockFlexibility self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Flexibility_DefaultLockFlexibility self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Flexibility_DefaultLockFlexibility

# Register Physics3D_Interactions_Flexibility_DefaultLockFlexibility in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultLockFlexibility_swigregister(Physics3D_Interactions_Flexibility_DefaultLockFlexibility)

class Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility(Physics3D_Interactions_Flexibility_DefaultMateFlexibility):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility self) -> Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility"""
        _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility())

    def along_normal(self):
        r"""along_normal(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_along_normal(self)

    def along_cross(self):
        r"""along_cross(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_along_cross(self)

    def around_main(self):
        r"""around_main(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_around_main(self)

    def around_normal(self):
        r"""around_normal(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_around_normal(self)

    def around_cross(self):
        r"""around_cross(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_around_cross(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility

# Register Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility_swigregister(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility)

class Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility(Physics3D_Interactions_Flexibility_DefaultBallFlexibility):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Flexibility::LinearElasticBallFlexibility class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility self) -> Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility"""
        _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility())

    def default_stiffness(self):
        r"""default_stiffness(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility self) -> double"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_default_stiffness(self)

    def along_main(self):
        r"""along_main(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_along_main(self)

    def along_normal(self):
        r"""along_normal(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_along_normal(self)

    def along_cross(self):
        r"""along_cross(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_along_cross(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility

# Register Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility_swigregister(Physics3D_Interactions_Flexibility_LinearElasticBallFlexibility)

class Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility(Physics3D_Interactions_Flexibility_DefaultCylindricalFlexibility):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Flexibility::LinearElasticCylindricalFlexibility class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility self) -> Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility"""
        _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility())

    def default_stiffness(self):
        r"""default_stiffness(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility self) -> double"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_default_stiffness(self)

    def along_normal(self):
        r"""along_normal(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_along_normal(self)

    def along_cross(self):
        r"""along_cross(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_along_cross(self)

    def around_normal(self):
        r"""around_normal(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_around_normal(self)

    def around_cross(self):
        r"""around_cross(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_around_cross(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility

# Register Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility_swigregister(Physics3D_Interactions_Flexibility_LinearElasticCylindricalFlexibility)

class Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility(Physics3D_Interactions_Flexibility_DefaultHingeFlexibility):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Flexibility::LinearElasticHingeFlexibility class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility self) -> Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility"""
        _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility())

    def default_stiffness(self):
        r"""default_stiffness(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility self) -> double"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_default_stiffness(self)

    def along_main(self):
        r"""along_main(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_along_main(self)

    def along_normal(self):
        r"""along_normal(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_along_normal(self)

    def along_cross(self):
        r"""along_cross(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_along_cross(self)

    def around_normal(self):
        r"""around_normal(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_around_normal(self)

    def around_cross(self):
        r"""around_cross(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_around_cross(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility

# Register Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility_swigregister(Physics3D_Interactions_Flexibility_LinearElasticHingeFlexibility)

class Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility(Physics3D_Interactions_Flexibility_DefaultLockFlexibility):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Flexibility::LinearElasticLockFlexibility class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility self) -> Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility"""
        _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility())

    def default_stiffness(self):
        r"""default_stiffness(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility self) -> double"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_default_stiffness(self)

    def along_main(self):
        r"""along_main(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_along_main(self)

    def along_normal(self):
        r"""along_normal(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_along_normal(self)

    def along_cross(self):
        r"""along_cross(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_along_cross(self)

    def around_main(self):
        r"""around_main(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_around_main(self)

    def around_normal(self):
        r"""around_normal(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_around_normal(self)

    def around_cross(self):
        r"""around_cross(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_around_cross(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility

# Register Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility_swigregister(Physics3D_Interactions_Flexibility_LinearElasticLockFlexibility)

class Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility(Physics3D_Interactions_Flexibility_DefaultPrismaticFlexibility):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Flexibility::LinearElasticPrismaticFlexibility class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility self) -> Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility"""
        _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility())

    def default_stiffness(self):
        r"""default_stiffness(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility self) -> double"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_default_stiffness(self)

    def along_normal(self):
        r"""along_normal(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_along_normal(self)

    def along_cross(self):
        r"""along_cross(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_along_cross(self)

    def around_main(self):
        r"""around_main(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_around_main(self)

    def around_normal(self):
        r"""around_normal(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_around_normal(self)

    def around_cross(self):
        r"""around_cross(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic >"""
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_around_cross(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility

# Register Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility_swigregister(Physics3D_Interactions_Flexibility_LinearElasticPrismaticFlexibility)

class Physics3D_Interactions_ForceMotor(openplx.Physics.Physics_Interactions_Interaction1DOF):
    r"""Proxy of C++ openplx::Physics3D::Interactions::ForceMotor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_ForceMotor self) -> Physics3D_Interactions_ForceMotor"""
        _Physics3DSwig.Physics3D_Interactions_ForceMotor_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_ForceMotor())

    def default_force(self):
        r"""default_force(Physics3D_Interactions_ForceMotor self) -> double"""
        return _Physics3DSwig.Physics3D_Interactions_ForceMotor_default_force(self)

    def force_input(self):
        r"""force_input(Physics3D_Interactions_ForceMotor self) -> std::shared_ptr< openplx::Physics::Signals::Force1DInput >"""
        return _Physics3DSwig.Physics3D_Interactions_ForceMotor_force_input(self)

    def force_output(self):
        r"""force_output(Physics3D_Interactions_ForceMotor self) -> std::shared_ptr< openplx::Physics::Signals::Force1DOutput >"""
        return _Physics3DSwig.Physics3D_Interactions_ForceMotor_force_output(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_ForceMotor self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_ForceMotor_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_ForceMotor self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_ForceMotor_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_ForceMotor self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_ForceMotor_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_ForceMotor self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_ForceMotor_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_ForceMotor self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_ForceMotor_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_ForceMotor self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_ForceMotor_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_ForceMotor

# Register Physics3D_Interactions_ForceMotor in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_ForceMotor_swigregister(Physics3D_Interactions_ForceMotor)

class Physics3D_Interactions_Hinge(Physics3D_Interactions_Mate):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Hinge class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Hinge self) -> Physics3D_Interactions_Hinge"""
        _Physics3DSwig.Physics3D_Interactions_Hinge_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Hinge())

    def initial_angle(self):
        r"""initial_angle(Physics3D_Interactions_Hinge self) -> double"""
        return _Physics3DSwig.Physics3D_Interactions_Hinge_initial_angle(self)

    def dissipation(self):
        r"""dissipation(Physics3D_Interactions_Hinge self) -> std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultHingeDissipation >"""
        return _Physics3DSwig.Physics3D_Interactions_Hinge_dissipation(self)

    def flexibility(self):
        r"""flexibility(Physics3D_Interactions_Hinge self) -> std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultHingeFlexibility >"""
        return _Physics3DSwig.Physics3D_Interactions_Hinge_flexibility(self)

    def toughness(self):
        r"""toughness(Physics3D_Interactions_Hinge self) -> std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness >"""
        return _Physics3DSwig.Physics3D_Interactions_Hinge_toughness(self)

    def friction(self):
        r"""friction(Physics3D_Interactions_Hinge self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction >"""
        return _Physics3DSwig.Physics3D_Interactions_Hinge_friction(self)

    def angle_output(self):
        r"""angle_output(Physics3D_Interactions_Hinge self) -> std::shared_ptr< openplx::Physics::Signals::AngleOutput >"""
        return _Physics3DSwig.Physics3D_Interactions_Hinge_angle_output(self)

    def angular_velocity_output(self):
        r"""angular_velocity_output(Physics3D_Interactions_Hinge self) -> std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput >"""
        return _Physics3DSwig.Physics3D_Interactions_Hinge_angular_velocity_output(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Hinge self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Hinge_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Hinge self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Hinge_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Hinge self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Hinge_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Hinge self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Hinge_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Hinge self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Hinge_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Hinge self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Hinge_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Hinge

# Register Physics3D_Interactions_Hinge in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Hinge_swigregister(Physics3D_Interactions_Hinge)

class Physics3D_Interactions_RangeInteraction1DOF(openplx.Physics.Physics_Interactions_Interaction1DOF):
    r"""Proxy of C++ openplx::Physics3D::Interactions::RangeInteraction1DOF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_RangeInteraction1DOF self) -> Physics3D_Interactions_RangeInteraction1DOF"""
        _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_RangeInteraction1DOF())

    def flexibility(self):
        r"""flexibility(Physics3D_Interactions_RangeInteraction1DOF self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility >"""
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_flexibility(self)

    def dissipation(self):
        r"""dissipation(Physics3D_Interactions_RangeInteraction1DOF self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation >"""
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_dissipation(self)

    def start(self):
        r"""start(Physics3D_Interactions_RangeInteraction1DOF self) -> double"""
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_start(self)

    def end(self):
        r"""end(Physics3D_Interactions_RangeInteraction1DOF self) -> double"""
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_end(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_RangeInteraction1DOF self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_RangeInteraction1DOF self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_RangeInteraction1DOF self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_RangeInteraction1DOF self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_RangeInteraction1DOF self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_RangeInteraction1DOF self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_RangeInteraction1DOF

# Register Physics3D_Interactions_RangeInteraction1DOF in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_swigregister(Physics3D_Interactions_RangeInteraction1DOF)

class Physics3D_Interactions_LinearRange(Physics3D_Interactions_RangeInteraction1DOF):
    r"""Proxy of C++ openplx::Physics3D::Interactions::LinearRange class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_LinearRange self) -> Physics3D_Interactions_LinearRange"""
        _Physics3DSwig.Physics3D_Interactions_LinearRange_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_LinearRange())

    def force_output(self):
        r"""force_output(Physics3D_Interactions_LinearRange self) -> std::shared_ptr< openplx::Physics::Signals::Force1DOutput >"""
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_force_output(self)

    def position_output(self):
        r"""position_output(Physics3D_Interactions_LinearRange self) -> std::shared_ptr< openplx::Physics::Signals::Position1DOutput >"""
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_position_output(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_LinearRange self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_LinearRange self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_LinearRange self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_LinearRange self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_LinearRange self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_LinearRange self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_LinearRange

# Register Physics3D_Interactions_LinearRange in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_LinearRange_swigregister(Physics3D_Interactions_LinearRange)

class Physics3D_Interactions_SpringInteraction1DOF(openplx.Physics.Physics_Interactions_Interaction1DOF):
    r"""Proxy of C++ openplx::Physics3D::Interactions::SpringInteraction1DOF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_SpringInteraction1DOF self) -> Physics3D_Interactions_SpringInteraction1DOF"""
        _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_SpringInteraction1DOF())

    def flexibility(self):
        r"""flexibility(Physics3D_Interactions_SpringInteraction1DOF self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic >"""
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_flexibility(self)

    def dissipation(self):
        r"""dissipation(Physics3D_Interactions_SpringInteraction1DOF self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation >"""
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_dissipation(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_SpringInteraction1DOF self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_SpringInteraction1DOF self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_SpringInteraction1DOF self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_SpringInteraction1DOF self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_SpringInteraction1DOF self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_SpringInteraction1DOF self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_SpringInteraction1DOF

# Register Physics3D_Interactions_SpringInteraction1DOF in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_swigregister(Physics3D_Interactions_SpringInteraction1DOF)

class Physics3D_Interactions_LinearSpring(Physics3D_Interactions_SpringInteraction1DOF):
    r"""Proxy of C++ openplx::Physics3D::Interactions::LinearSpring class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_LinearSpring self) -> Physics3D_Interactions_LinearSpring"""
        _Physics3DSwig.Physics3D_Interactions_LinearSpring_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_LinearSpring())

    def position(self):
        r"""position(Physics3D_Interactions_LinearSpring self) -> double"""
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_position(self)

    def force_output(self):
        r"""force_output(Physics3D_Interactions_LinearSpring self) -> std::shared_ptr< openplx::Physics::Signals::Force1DOutput >"""
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_force_output(self)

    def target_position_output(self):
        r"""target_position_output(Physics3D_Interactions_LinearSpring self) -> std::shared_ptr< openplx::Physics::Signals::Position1DOutput >"""
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_target_position_output(self)

    def target_position_input(self):
        r"""target_position_input(Physics3D_Interactions_LinearSpring self) -> std::shared_ptr< openplx::Physics::Signals::Position1DInput >"""
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_target_position_input(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_LinearSpring self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_LinearSpring self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_LinearSpring self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_LinearSpring self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_LinearSpring self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_LinearSpring self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_LinearSpring

# Register Physics3D_Interactions_LinearSpring in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_LinearSpring_swigregister(Physics3D_Interactions_LinearSpring)

class Physics3D_Interactions_VelocityMotor(openplx.Physics.Physics_Interactions_Interaction1DOF):
    r"""Proxy of C++ openplx::Physics3D::Interactions::VelocityMotor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_VelocityMotor self) -> Physics3D_Interactions_VelocityMotor"""
        _Physics3DSwig.Physics3D_Interactions_VelocityMotor_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_VelocityMotor())

    def gain(self):
        r"""gain(Physics3D_Interactions_VelocityMotor self) -> double"""
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_gain(self)

    def target_speed(self):
        r"""target_speed(Physics3D_Interactions_VelocityMotor self) -> double"""
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_target_speed(self)

    def zero_speed_as_spring(self):
        r"""zero_speed_as_spring(Physics3D_Interactions_VelocityMotor self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_zero_speed_as_spring(self)

    def zero_speed_spring_flexibility(self):
        r"""zero_speed_spring_flexibility(Physics3D_Interactions_VelocityMotor self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic >"""
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_zero_speed_spring_flexibility(self)

    def zero_speed_spring_dissipation(self):
        r"""zero_speed_spring_dissipation(Physics3D_Interactions_VelocityMotor self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation >"""
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_zero_speed_spring_dissipation(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_VelocityMotor self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_VelocityMotor self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_VelocityMotor self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_VelocityMotor self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_VelocityMotor self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_VelocityMotor self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_VelocityMotor

# Register Physics3D_Interactions_VelocityMotor in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_VelocityMotor_swigregister(Physics3D_Interactions_VelocityMotor)

class Physics3D_Interactions_LinearVelocityMotor(Physics3D_Interactions_VelocityMotor):
    r"""Proxy of C++ openplx::Physics3D::Interactions::LinearVelocityMotor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_LinearVelocityMotor self) -> Physics3D_Interactions_LinearVelocityMotor"""
        _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_LinearVelocityMotor())

    def force_output(self):
        r"""force_output(Physics3D_Interactions_LinearVelocityMotor self) -> std::shared_ptr< openplx::Physics::Signals::Force1DOutput >"""
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_force_output(self)

    def target_linear_velocity_input(self):
        r"""target_linear_velocity_input(Physics3D_Interactions_LinearVelocityMotor self) -> std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput >"""
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_target_linear_velocity_input(self)

    def target_linear_velocity_output(self):
        r"""target_linear_velocity_output(Physics3D_Interactions_LinearVelocityMotor self) -> std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput >"""
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_target_linear_velocity_output(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_LinearVelocityMotor self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_LinearVelocityMotor self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_LinearVelocityMotor self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_LinearVelocityMotor self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_LinearVelocityMotor self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_LinearVelocityMotor self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_LinearVelocityMotor

# Register Physics3D_Interactions_LinearVelocityMotor in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_swigregister(Physics3D_Interactions_LinearVelocityMotor)

class Physics3D_Interactions_Lock(Physics3D_Interactions_Mate):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Lock class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Lock self) -> Physics3D_Interactions_Lock"""
        _Physics3DSwig.Physics3D_Interactions_Lock_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Lock())

    def dissipation(self):
        r"""dissipation(Physics3D_Interactions_Lock self) -> std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultLockDissipation >"""
        return _Physics3DSwig.Physics3D_Interactions_Lock_dissipation(self)

    def flexibility(self):
        r"""flexibility(Physics3D_Interactions_Lock self) -> std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultLockFlexibility >"""
        return _Physics3DSwig.Physics3D_Interactions_Lock_flexibility(self)

    def toughness(self):
        r"""toughness(Physics3D_Interactions_Lock self) -> std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultLockToughness >"""
        return _Physics3DSwig.Physics3D_Interactions_Lock_toughness(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Lock self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Lock_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Lock self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Lock_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Lock self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Lock_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Lock self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Lock_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Lock self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Lock_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Lock self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Lock_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Lock

# Register Physics3D_Interactions_Lock in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Lock_swigregister(Physics3D_Interactions_Lock)

class Physics3D_Interactions_Prismatic(Physics3D_Interactions_Mate):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Prismatic class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Prismatic self) -> Physics3D_Interactions_Prismatic"""
        _Physics3DSwig.Physics3D_Interactions_Prismatic_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Prismatic())

    def initial_position(self):
        r"""initial_position(Physics3D_Interactions_Prismatic self) -> double"""
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_initial_position(self)

    def dissipation(self):
        r"""dissipation(Physics3D_Interactions_Prismatic self) -> std::shared_ptr< openplx::Physics3D::Interactions::Dissipation::DefaultPrismaticDissipation >"""
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_dissipation(self)

    def flexibility(self):
        r"""flexibility(Physics3D_Interactions_Prismatic self) -> std::shared_ptr< openplx::Physics3D::Interactions::Flexibility::DefaultPrismaticFlexibility >"""
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_flexibility(self)

    def toughness(self):
        r"""toughness(Physics3D_Interactions_Prismatic self) -> std::shared_ptr< openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness >"""
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_toughness(self)

    def friction(self):
        r"""friction(Physics3D_Interactions_Prismatic self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction >"""
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_friction(self)

    def position_output(self):
        r"""position_output(Physics3D_Interactions_Prismatic self) -> std::shared_ptr< openplx::Physics::Signals::Position1DOutput >"""
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_position_output(self)

    def velocity_output(self):
        r"""velocity_output(Physics3D_Interactions_Prismatic self) -> std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput >"""
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_velocity_output(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Prismatic self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Prismatic self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Prismatic self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Prismatic self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Prismatic self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Prismatic self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Prismatic

# Register Physics3D_Interactions_Prismatic in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Prismatic_swigregister(Physics3D_Interactions_Prismatic)

class Physics3D_Interactions_RotationalRange(Physics3D_Interactions_RangeInteraction1DOF):
    r"""Proxy of C++ openplx::Physics3D::Interactions::RotationalRange class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_RotationalRange self) -> Physics3D_Interactions_RotationalRange"""
        _Physics3DSwig.Physics3D_Interactions_RotationalRange_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_RotationalRange())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_RotationalRange self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_RotationalRange self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_RotationalRange self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_RotationalRange self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_RotationalRange self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_RotationalRange self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_RotationalRange

# Register Physics3D_Interactions_RotationalRange in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_RotationalRange_swigregister(Physics3D_Interactions_RotationalRange)

class Physics3D_Interactions_RotationalVelocityMotor(Physics3D_Interactions_VelocityMotor):
    r"""Proxy of C++ openplx::Physics3D::Interactions::RotationalVelocityMotor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_RotationalVelocityMotor self) -> Physics3D_Interactions_RotationalVelocityMotor"""
        _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_RotationalVelocityMotor())

    def target_angular_velocity_input(self):
        r"""target_angular_velocity_input(Physics3D_Interactions_RotationalVelocityMotor self) -> std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput >"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_target_angular_velocity_input(self)

    def target_angular_velocity_output(self):
        r"""target_angular_velocity_output(Physics3D_Interactions_RotationalVelocityMotor self) -> std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput >"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_target_angular_velocity_output(self)

    def torque_output(self):
        r"""torque_output(Physics3D_Interactions_RotationalVelocityMotor self) -> std::shared_ptr< openplx::Physics::Signals::Torque1DOutput >"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_torque_output(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_RotationalVelocityMotor self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_RotationalVelocityMotor self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_RotationalVelocityMotor self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_RotationalVelocityMotor self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_RotationalVelocityMotor self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_RotationalVelocityMotor self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_RotationalVelocityMotor

# Register Physics3D_Interactions_RotationalVelocityMotor in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_swigregister(Physics3D_Interactions_RotationalVelocityMotor)

class Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel(openplx.Physics.Physics_Interactions_SurfaceContact_Model):
    r"""Proxy of C++ openplx::Physics3D::Interactions::SurfaceContact::PatchElasticityDryFrictionModel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel self) -> Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel"""
        _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel())

    def normal_flexibility(self):
        r"""normal_flexibility(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel self) -> std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity >"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_normal_flexibility(self)

    def friction(self):
        r"""friction(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction >"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_friction(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel

# Register Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel_swigregister(Physics3D_Interactions_SurfaceContact_PatchElasticityDryFrictionModel)

class Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel(openplx.Physics.Physics_Interactions_SurfaceContact_Model):
    r"""Proxy of C++ openplx::Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel self) -> Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel"""
        _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel())

    def normal_flexibility(self):
        r"""normal_flexibility(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel self) -> std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity >"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_normal_flexibility(self)

    def friction(self):
        r"""friction(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction >"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_friction(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel

# Register Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_swigregister(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel)

class Physics3D_Interactions_TorqueMotor(openplx.Physics.Physics_Interactions_Interaction1DOF):
    r"""Proxy of C++ openplx::Physics3D::Interactions::TorqueMotor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_TorqueMotor self) -> Physics3D_Interactions_TorqueMotor"""
        _Physics3DSwig.Physics3D_Interactions_TorqueMotor_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_TorqueMotor())

    def default_torque(self):
        r"""default_torque(Physics3D_Interactions_TorqueMotor self) -> double"""
        return _Physics3DSwig.Physics3D_Interactions_TorqueMotor_default_torque(self)

    def torque_output(self):
        r"""torque_output(Physics3D_Interactions_TorqueMotor self) -> std::shared_ptr< openplx::Physics::Signals::Torque1DOutput >"""
        return _Physics3DSwig.Physics3D_Interactions_TorqueMotor_torque_output(self)

    def torque_input(self):
        r"""torque_input(Physics3D_Interactions_TorqueMotor self) -> std::shared_ptr< openplx::Physics::Signals::Torque1DInput >"""
        return _Physics3DSwig.Physics3D_Interactions_TorqueMotor_torque_input(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_TorqueMotor self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_TorqueMotor_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_TorqueMotor self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_TorqueMotor_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_TorqueMotor self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_TorqueMotor_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_TorqueMotor self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_TorqueMotor_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_TorqueMotor self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_TorqueMotor_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_TorqueMotor self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_TorqueMotor_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_TorqueMotor

# Register Physics3D_Interactions_TorqueMotor in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_TorqueMotor_swigregister(Physics3D_Interactions_TorqueMotor)

class Physics3D_Interactions_TorsionSpring(Physics3D_Interactions_SpringInteraction1DOF):
    r"""Proxy of C++ openplx::Physics3D::Interactions::TorsionSpring class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_TorsionSpring self) -> Physics3D_Interactions_TorsionSpring"""
        _Physics3DSwig.Physics3D_Interactions_TorsionSpring_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_TorsionSpring())

    def angle(self):
        r"""angle(Physics3D_Interactions_TorsionSpring self) -> double"""
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_angle(self)

    def torque_output(self):
        r"""torque_output(Physics3D_Interactions_TorsionSpring self) -> std::shared_ptr< openplx::Physics::Signals::Torque1DOutput >"""
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_torque_output(self)

    def target_angle_output(self):
        r"""target_angle_output(Physics3D_Interactions_TorsionSpring self) -> std::shared_ptr< openplx::Physics::Signals::AngleOutput >"""
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_target_angle_output(self)

    def target_angle_input(self):
        r"""target_angle_input(Physics3D_Interactions_TorsionSpring self) -> std::shared_ptr< openplx::Physics::Signals::AngleInput >"""
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_target_angle_input(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_TorsionSpring self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_TorsionSpring self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_TorsionSpring self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_TorsionSpring self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_TorsionSpring self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_TorsionSpring self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_TorsionSpring

# Register Physics3D_Interactions_TorsionSpring in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_TorsionSpring_swigregister(Physics3D_Interactions_TorsionSpring)

class Physics3D_Interactions_Toughness_DefaultMateToughness(openplx.Core.Object):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Toughness::DefaultMateToughness class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Toughness_DefaultMateToughness self) -> Physics3D_Interactions_Toughness_DefaultMateToughness"""
        _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultMateToughness_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Toughness_DefaultMateToughness())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Toughness_DefaultMateToughness self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultMateToughness_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Toughness_DefaultMateToughness self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultMateToughness_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Toughness_DefaultMateToughness self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultMateToughness_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Toughness_DefaultMateToughness self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultMateToughness_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Toughness_DefaultMateToughness self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultMateToughness_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Toughness_DefaultMateToughness self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultMateToughness_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Toughness_DefaultMateToughness

# Register Physics3D_Interactions_Toughness_DefaultMateToughness in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Toughness_DefaultMateToughness_swigregister(Physics3D_Interactions_Toughness_DefaultMateToughness)

class Physics3D_Interactions_Toughness_DefaultBallToughness(Physics3D_Interactions_Toughness_DefaultMateToughness):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Toughness::DefaultBallToughness class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Toughness_DefaultBallToughness self) -> Physics3D_Interactions_Toughness_DefaultBallToughness"""
        _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultBallToughness_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Toughness_DefaultBallToughness())

    def along_main(self):
        r"""along_main(Physics3D_Interactions_Toughness_DefaultBallToughness self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultBallToughness_along_main(self)

    def along_normal(self):
        r"""along_normal(Physics3D_Interactions_Toughness_DefaultBallToughness self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultBallToughness_along_normal(self)

    def along_cross(self):
        r"""along_cross(Physics3D_Interactions_Toughness_DefaultBallToughness self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultBallToughness_along_cross(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Toughness_DefaultBallToughness self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultBallToughness_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Toughness_DefaultBallToughness self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultBallToughness_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Toughness_DefaultBallToughness self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultBallToughness_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Toughness_DefaultBallToughness self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultBallToughness_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Toughness_DefaultBallToughness self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultBallToughness_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Toughness_DefaultBallToughness self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultBallToughness_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Toughness_DefaultBallToughness

# Register Physics3D_Interactions_Toughness_DefaultBallToughness in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Toughness_DefaultBallToughness_swigregister(Physics3D_Interactions_Toughness_DefaultBallToughness)

class Physics3D_Interactions_Toughness_BallThresholdFracture(Physics3D_Interactions_Toughness_DefaultBallToughness):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Toughness::BallThresholdFracture class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Toughness_BallThresholdFracture self) -> Physics3D_Interactions_Toughness_BallThresholdFracture"""
        _Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Toughness_BallThresholdFracture())

    def default_limit(self):
        r"""default_limit(Physics3D_Interactions_Toughness_BallThresholdFracture self) -> double"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_default_limit(self)

    def along_main(self):
        r"""along_main(Physics3D_Interactions_Toughness_BallThresholdFracture self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_along_main(self)

    def along_normal(self):
        r"""along_normal(Physics3D_Interactions_Toughness_BallThresholdFracture self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_along_normal(self)

    def along_cross(self):
        r"""along_cross(Physics3D_Interactions_Toughness_BallThresholdFracture self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_along_cross(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Toughness_BallThresholdFracture self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Toughness_BallThresholdFracture self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Toughness_BallThresholdFracture self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Toughness_BallThresholdFracture self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Toughness_BallThresholdFracture self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Toughness_BallThresholdFracture self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Toughness_BallThresholdFracture

# Register Physics3D_Interactions_Toughness_BallThresholdFracture in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Toughness_BallThresholdFracture_swigregister(Physics3D_Interactions_Toughness_BallThresholdFracture)

class Physics3D_Interactions_Toughness_DefaultCylindricalToughness(Physics3D_Interactions_Toughness_DefaultMateToughness):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Toughness::DefaultCylindricalToughness class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Toughness_DefaultCylindricalToughness self) -> Physics3D_Interactions_Toughness_DefaultCylindricalToughness"""
        _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Toughness_DefaultCylindricalToughness())

    def along_normal(self):
        r"""along_normal(Physics3D_Interactions_Toughness_DefaultCylindricalToughness self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_along_normal(self)

    def along_cross(self):
        r"""along_cross(Physics3D_Interactions_Toughness_DefaultCylindricalToughness self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_along_cross(self)

    def around_normal(self):
        r"""around_normal(Physics3D_Interactions_Toughness_DefaultCylindricalToughness self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_around_normal(self)

    def around_cross(self):
        r"""around_cross(Physics3D_Interactions_Toughness_DefaultCylindricalToughness self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_around_cross(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Toughness_DefaultCylindricalToughness self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Toughness_DefaultCylindricalToughness self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Toughness_DefaultCylindricalToughness self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Toughness_DefaultCylindricalToughness self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Toughness_DefaultCylindricalToughness self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Toughness_DefaultCylindricalToughness self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Toughness_DefaultCylindricalToughness

# Register Physics3D_Interactions_Toughness_DefaultCylindricalToughness in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Toughness_DefaultCylindricalToughness_swigregister(Physics3D_Interactions_Toughness_DefaultCylindricalToughness)

class Physics3D_Interactions_Toughness_CylindricalThresholdFracture(Physics3D_Interactions_Toughness_DefaultCylindricalToughness):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Toughness::CylindricalThresholdFracture class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Toughness_CylindricalThresholdFracture self) -> Physics3D_Interactions_Toughness_CylindricalThresholdFracture"""
        _Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Toughness_CylindricalThresholdFracture())

    def default_limit(self):
        r"""default_limit(Physics3D_Interactions_Toughness_CylindricalThresholdFracture self) -> double"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_default_limit(self)

    def along_normal(self):
        r"""along_normal(Physics3D_Interactions_Toughness_CylindricalThresholdFracture self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_along_normal(self)

    def along_cross(self):
        r"""along_cross(Physics3D_Interactions_Toughness_CylindricalThresholdFracture self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_along_cross(self)

    def around_normal(self):
        r"""around_normal(Physics3D_Interactions_Toughness_CylindricalThresholdFracture self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_around_normal(self)

    def around_cross(self):
        r"""around_cross(Physics3D_Interactions_Toughness_CylindricalThresholdFracture self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_around_cross(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Toughness_CylindricalThresholdFracture self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Toughness_CylindricalThresholdFracture self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Toughness_CylindricalThresholdFracture self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Toughness_CylindricalThresholdFracture self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Toughness_CylindricalThresholdFracture self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Toughness_CylindricalThresholdFracture self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Toughness_CylindricalThresholdFracture

# Register Physics3D_Interactions_Toughness_CylindricalThresholdFracture in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Toughness_CylindricalThresholdFracture_swigregister(Physics3D_Interactions_Toughness_CylindricalThresholdFracture)

class Physics3D_Interactions_Toughness_DefaultHingeToughness(Physics3D_Interactions_Toughness_DefaultMateToughness):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Toughness::DefaultHingeToughness class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Toughness_DefaultHingeToughness self) -> Physics3D_Interactions_Toughness_DefaultHingeToughness"""
        _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Toughness_DefaultHingeToughness())

    def along_main(self):
        r"""along_main(Physics3D_Interactions_Toughness_DefaultHingeToughness self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_along_main(self)

    def along_normal(self):
        r"""along_normal(Physics3D_Interactions_Toughness_DefaultHingeToughness self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_along_normal(self)

    def along_cross(self):
        r"""along_cross(Physics3D_Interactions_Toughness_DefaultHingeToughness self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_along_cross(self)

    def around_normal(self):
        r"""around_normal(Physics3D_Interactions_Toughness_DefaultHingeToughness self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_around_normal(self)

    def around_cross(self):
        r"""around_cross(Physics3D_Interactions_Toughness_DefaultHingeToughness self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_around_cross(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Toughness_DefaultHingeToughness self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Toughness_DefaultHingeToughness self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Toughness_DefaultHingeToughness self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Toughness_DefaultHingeToughness self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Toughness_DefaultHingeToughness self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Toughness_DefaultHingeToughness self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Toughness_DefaultHingeToughness

# Register Physics3D_Interactions_Toughness_DefaultHingeToughness in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Toughness_DefaultHingeToughness_swigregister(Physics3D_Interactions_Toughness_DefaultHingeToughness)

class Physics3D_Interactions_Toughness_DefaultLockToughness(Physics3D_Interactions_Toughness_DefaultMateToughness):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Toughness::DefaultLockToughness class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Toughness_DefaultLockToughness self) -> Physics3D_Interactions_Toughness_DefaultLockToughness"""
        _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Toughness_DefaultLockToughness())

    def along_main(self):
        r"""along_main(Physics3D_Interactions_Toughness_DefaultLockToughness self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_along_main(self)

    def along_normal(self):
        r"""along_normal(Physics3D_Interactions_Toughness_DefaultLockToughness self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_along_normal(self)

    def along_cross(self):
        r"""along_cross(Physics3D_Interactions_Toughness_DefaultLockToughness self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_along_cross(self)

    def around_main(self):
        r"""around_main(Physics3D_Interactions_Toughness_DefaultLockToughness self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_around_main(self)

    def around_normal(self):
        r"""around_normal(Physics3D_Interactions_Toughness_DefaultLockToughness self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_around_normal(self)

    def around_cross(self):
        r"""around_cross(Physics3D_Interactions_Toughness_DefaultLockToughness self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_around_cross(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Toughness_DefaultLockToughness self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Toughness_DefaultLockToughness self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Toughness_DefaultLockToughness self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Toughness_DefaultLockToughness self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Toughness_DefaultLockToughness self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Toughness_DefaultLockToughness self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Toughness_DefaultLockToughness

# Register Physics3D_Interactions_Toughness_DefaultLockToughness in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Toughness_DefaultLockToughness_swigregister(Physics3D_Interactions_Toughness_DefaultLockToughness)

class Physics3D_Interactions_Toughness_DefaultPrismaticToughness(Physics3D_Interactions_Toughness_DefaultMateToughness):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Toughness::DefaultPrismaticToughness class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Toughness_DefaultPrismaticToughness self) -> Physics3D_Interactions_Toughness_DefaultPrismaticToughness"""
        _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Toughness_DefaultPrismaticToughness())

    def along_normal(self):
        r"""along_normal(Physics3D_Interactions_Toughness_DefaultPrismaticToughness self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_along_normal(self)

    def along_cross(self):
        r"""along_cross(Physics3D_Interactions_Toughness_DefaultPrismaticToughness self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_along_cross(self)

    def around_main(self):
        r"""around_main(Physics3D_Interactions_Toughness_DefaultPrismaticToughness self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_around_main(self)

    def around_normal(self):
        r"""around_normal(Physics3D_Interactions_Toughness_DefaultPrismaticToughness self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_around_normal(self)

    def around_cross(self):
        r"""around_cross(Physics3D_Interactions_Toughness_DefaultPrismaticToughness self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_around_cross(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Toughness_DefaultPrismaticToughness self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Toughness_DefaultPrismaticToughness self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Toughness_DefaultPrismaticToughness self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Toughness_DefaultPrismaticToughness self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Toughness_DefaultPrismaticToughness self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Toughness_DefaultPrismaticToughness self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Toughness_DefaultPrismaticToughness

# Register Physics3D_Interactions_Toughness_DefaultPrismaticToughness in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Toughness_DefaultPrismaticToughness_swigregister(Physics3D_Interactions_Toughness_DefaultPrismaticToughness)

class Physics3D_Interactions_Toughness_HingeThresholdFracture(Physics3D_Interactions_Toughness_DefaultHingeToughness):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Toughness::HingeThresholdFracture class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Toughness_HingeThresholdFracture self) -> Physics3D_Interactions_Toughness_HingeThresholdFracture"""
        _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Toughness_HingeThresholdFracture())

    def default_limit(self):
        r"""default_limit(Physics3D_Interactions_Toughness_HingeThresholdFracture self) -> double"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_default_limit(self)

    def along_main(self):
        r"""along_main(Physics3D_Interactions_Toughness_HingeThresholdFracture self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_along_main(self)

    def along_normal(self):
        r"""along_normal(Physics3D_Interactions_Toughness_HingeThresholdFracture self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_along_normal(self)

    def along_cross(self):
        r"""along_cross(Physics3D_Interactions_Toughness_HingeThresholdFracture self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_along_cross(self)

    def around_normal(self):
        r"""around_normal(Physics3D_Interactions_Toughness_HingeThresholdFracture self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_around_normal(self)

    def around_cross(self):
        r"""around_cross(Physics3D_Interactions_Toughness_HingeThresholdFracture self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_around_cross(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Toughness_HingeThresholdFracture self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Toughness_HingeThresholdFracture self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Toughness_HingeThresholdFracture self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Toughness_HingeThresholdFracture self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Toughness_HingeThresholdFracture self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Toughness_HingeThresholdFracture self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Toughness_HingeThresholdFracture

# Register Physics3D_Interactions_Toughness_HingeThresholdFracture in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Toughness_HingeThresholdFracture_swigregister(Physics3D_Interactions_Toughness_HingeThresholdFracture)

class Physics3D_Interactions_Toughness_LockThresholdFracture(Physics3D_Interactions_Toughness_DefaultLockToughness):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Toughness::LockThresholdFracture class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Toughness_LockThresholdFracture self) -> Physics3D_Interactions_Toughness_LockThresholdFracture"""
        _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Toughness_LockThresholdFracture())

    def default_limit(self):
        r"""default_limit(Physics3D_Interactions_Toughness_LockThresholdFracture self) -> double"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_default_limit(self)

    def along_main(self):
        r"""along_main(Physics3D_Interactions_Toughness_LockThresholdFracture self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_along_main(self)

    def along_normal(self):
        r"""along_normal(Physics3D_Interactions_Toughness_LockThresholdFracture self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_along_normal(self)

    def along_cross(self):
        r"""along_cross(Physics3D_Interactions_Toughness_LockThresholdFracture self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_along_cross(self)

    def around_main(self):
        r"""around_main(Physics3D_Interactions_Toughness_LockThresholdFracture self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_around_main(self)

    def around_normal(self):
        r"""around_normal(Physics3D_Interactions_Toughness_LockThresholdFracture self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_around_normal(self)

    def around_cross(self):
        r"""around_cross(Physics3D_Interactions_Toughness_LockThresholdFracture self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_around_cross(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Toughness_LockThresholdFracture self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Toughness_LockThresholdFracture self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Toughness_LockThresholdFracture self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Toughness_LockThresholdFracture self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Toughness_LockThresholdFracture self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Toughness_LockThresholdFracture self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Toughness_LockThresholdFracture

# Register Physics3D_Interactions_Toughness_LockThresholdFracture in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Toughness_LockThresholdFracture_swigregister(Physics3D_Interactions_Toughness_LockThresholdFracture)

class Physics3D_Interactions_Toughness_PrismaticThresholdFracture(Physics3D_Interactions_Toughness_DefaultPrismaticToughness):
    r"""Proxy of C++ openplx::Physics3D::Interactions::Toughness::PrismaticThresholdFracture class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Interactions_Toughness_PrismaticThresholdFracture self) -> Physics3D_Interactions_Toughness_PrismaticThresholdFracture"""
        _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Toughness_PrismaticThresholdFracture())

    def default_limit(self):
        r"""default_limit(Physics3D_Interactions_Toughness_PrismaticThresholdFracture self) -> double"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_default_limit(self)

    def along_normal(self):
        r"""along_normal(Physics3D_Interactions_Toughness_PrismaticThresholdFracture self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_along_normal(self)

    def along_cross(self):
        r"""along_cross(Physics3D_Interactions_Toughness_PrismaticThresholdFracture self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_along_cross(self)

    def around_main(self):
        r"""around_main(Physics3D_Interactions_Toughness_PrismaticThresholdFracture self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_around_main(self)

    def around_normal(self):
        r"""around_normal(Physics3D_Interactions_Toughness_PrismaticThresholdFracture self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_around_normal(self)

    def around_cross(self):
        r"""around_cross(Physics3D_Interactions_Toughness_PrismaticThresholdFracture self) -> std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture >"""
        return _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_around_cross(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Interactions_Toughness_PrismaticThresholdFracture self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Interactions_Toughness_PrismaticThresholdFracture self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Interactions_Toughness_PrismaticThresholdFracture self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Interactions_Toughness_PrismaticThresholdFracture self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Interactions_Toughness_PrismaticThresholdFracture self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Interactions_Toughness_PrismaticThresholdFracture self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Toughness_PrismaticThresholdFracture

# Register Physics3D_Interactions_Toughness_PrismaticThresholdFracture in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Toughness_PrismaticThresholdFracture_swigregister(Physics3D_Interactions_Toughness_PrismaticThresholdFracture)

class Physics3D_Signals_AngularVelocity3DInput(openplx.Physics.Physics_Signals_Input):
    r"""Proxy of C++ openplx::Physics3D::Signals::AngularVelocity3DInput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Signals_AngularVelocity3DInput self) -> Physics3D_Signals_AngularVelocity3DInput"""
        _Physics3DSwig.Physics3D_Signals_AngularVelocity3DInput_swiginit(self, _Physics3DSwig.new_Physics3D_Signals_AngularVelocity3DInput())

    def source(self):
        r"""source(Physics3D_Signals_AngularVelocity3DInput self) -> std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DInputTrait >"""
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DInput_source(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Signals_AngularVelocity3DInput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DInput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Signals_AngularVelocity3DInput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DInput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Signals_AngularVelocity3DInput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DInput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Signals_AngularVelocity3DInput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DInput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Signals_AngularVelocity3DInput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DInput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Signals_AngularVelocity3DInput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DInput_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Signals_AngularVelocity3DInput

# Register Physics3D_Signals_AngularVelocity3DInput in _Physics3DSwig:
_Physics3DSwig.Physics3D_Signals_AngularVelocity3DInput_swigregister(Physics3D_Signals_AngularVelocity3DInput)

class Physics3D_Signals_AngularVelocity3DOutput(openplx.Physics.Physics_Signals_Output):
    r"""Proxy of C++ openplx::Physics3D::Signals::AngularVelocity3DOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Signals_AngularVelocity3DOutput self) -> Physics3D_Signals_AngularVelocity3DOutput"""
        _Physics3DSwig.Physics3D_Signals_AngularVelocity3DOutput_swiginit(self, _Physics3DSwig.new_Physics3D_Signals_AngularVelocity3DOutput())

    def source(self):
        r"""source(Physics3D_Signals_AngularVelocity3DOutput self) -> std::shared_ptr< openplx::Physics3D::Signals::AngularVelocity3DOutputTrait >"""
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DOutput_source(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Signals_AngularVelocity3DOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Signals_AngularVelocity3DOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Signals_AngularVelocity3DOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Signals_AngularVelocity3DOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Signals_AngularVelocity3DOutput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DOutput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Signals_AngularVelocity3DOutput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Signals_AngularVelocity3DOutput_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Signals_AngularVelocity3DOutput

# Register Physics3D_Signals_AngularVelocity3DOutput in _Physics3DSwig:
_Physics3DSwig.Physics3D_Signals_AngularVelocity3DOutput_swigregister(Physics3D_Signals_AngularVelocity3DOutput)

class Physics3D_Signals_LinearVelocity3DInput(openplx.Physics.Physics_Signals_Input):
    r"""Proxy of C++ openplx::Physics3D::Signals::LinearVelocity3DInput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Signals_LinearVelocity3DInput self) -> Physics3D_Signals_LinearVelocity3DInput"""
        _Physics3DSwig.Physics3D_Signals_LinearVelocity3DInput_swiginit(self, _Physics3DSwig.new_Physics3D_Signals_LinearVelocity3DInput())

    def source(self):
        r"""source(Physics3D_Signals_LinearVelocity3DInput self) -> std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DInputTrait >"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DInput_source(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Signals_LinearVelocity3DInput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DInput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Signals_LinearVelocity3DInput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DInput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Signals_LinearVelocity3DInput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DInput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Signals_LinearVelocity3DInput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DInput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Signals_LinearVelocity3DInput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DInput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Signals_LinearVelocity3DInput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DInput_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Signals_LinearVelocity3DInput

# Register Physics3D_Signals_LinearVelocity3DInput in _Physics3DSwig:
_Physics3DSwig.Physics3D_Signals_LinearVelocity3DInput_swigregister(Physics3D_Signals_LinearVelocity3DInput)

class Physics3D_Signals_LinearVelocity3DOutput(openplx.Physics.Physics_Signals_Output):
    r"""Proxy of C++ openplx::Physics3D::Signals::LinearVelocity3DOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Signals_LinearVelocity3DOutput self) -> Physics3D_Signals_LinearVelocity3DOutput"""
        _Physics3DSwig.Physics3D_Signals_LinearVelocity3DOutput_swiginit(self, _Physics3DSwig.new_Physics3D_Signals_LinearVelocity3DOutput())

    def source(self):
        r"""source(Physics3D_Signals_LinearVelocity3DOutput self) -> std::shared_ptr< openplx::Physics3D::Signals::LinearVelocity3DOutputTrait >"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DOutput_source(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Signals_LinearVelocity3DOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Signals_LinearVelocity3DOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Signals_LinearVelocity3DOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Signals_LinearVelocity3DOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Signals_LinearVelocity3DOutput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DOutput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Signals_LinearVelocity3DOutput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocity3DOutput_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Signals_LinearVelocity3DOutput

# Register Physics3D_Signals_LinearVelocity3DOutput in _Physics3DSwig:
_Physics3DSwig.Physics3D_Signals_LinearVelocity3DOutput_swigregister(Physics3D_Signals_LinearVelocity3DOutput)

class Physics3D_Signals_MateConnector_Output(openplx.Physics.Physics_Signals_Output):
    r"""Proxy of C++ openplx::Physics3D::Signals::MateConnector::Output class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Signals_MateConnector_Output self) -> Physics3D_Signals_MateConnector_Output"""
        _Physics3DSwig.Physics3D_Signals_MateConnector_Output_swiginit(self, _Physics3DSwig.new_Physics3D_Signals_MateConnector_Output())

    def source(self):
        r"""source(Physics3D_Signals_MateConnector_Output self) -> std::shared_ptr< openplx::Physics3D::Charges::MateConnector >"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Output_source(self)

    def relative_to(self):
        r"""relative_to(Physics3D_Signals_MateConnector_Output self) -> std::shared_ptr< openplx::Physics3D::Charges::MateConnector >"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Output_relative_to(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Signals_MateConnector_Output self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Output_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Signals_MateConnector_Output self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Output_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Signals_MateConnector_Output self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Output_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Signals_MateConnector_Output self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Output_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Signals_MateConnector_Output self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Output_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Signals_MateConnector_Output self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Output_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Signals_MateConnector_Output

# Register Physics3D_Signals_MateConnector_Output in _Physics3DSwig:
_Physics3DSwig.Physics3D_Signals_MateConnector_Output_swigregister(Physics3D_Signals_MateConnector_Output)

class Physics3D_Signals_MateConnector_Acceleration3DOutput(Physics3D_Signals_MateConnector_Output):
    r"""Proxy of C++ openplx::Physics3D::Signals::MateConnector::Acceleration3DOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Signals_MateConnector_Acceleration3DOutput self) -> Physics3D_Signals_MateConnector_Acceleration3DOutput"""
        _Physics3DSwig.Physics3D_Signals_MateConnector_Acceleration3DOutput_swiginit(self, _Physics3DSwig.new_Physics3D_Signals_MateConnector_Acceleration3DOutput())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Signals_MateConnector_Acceleration3DOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Acceleration3DOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Signals_MateConnector_Acceleration3DOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Acceleration3DOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Signals_MateConnector_Acceleration3DOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Acceleration3DOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Signals_MateConnector_Acceleration3DOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Acceleration3DOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Signals_MateConnector_Acceleration3DOutput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Acceleration3DOutput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Signals_MateConnector_Acceleration3DOutput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_Acceleration3DOutput_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Signals_MateConnector_Acceleration3DOutput

# Register Physics3D_Signals_MateConnector_Acceleration3DOutput in _Physics3DSwig:
_Physics3DSwig.Physics3D_Signals_MateConnector_Acceleration3DOutput_swigregister(Physics3D_Signals_MateConnector_Acceleration3DOutput)

class Physics3D_Signals_MateConnector_AngularAcceleration3DOutput(Physics3D_Signals_MateConnector_Output):
    r"""Proxy of C++ openplx::Physics3D::Signals::MateConnector::AngularAcceleration3DOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput self) -> Physics3D_Signals_MateConnector_AngularAcceleration3DOutput"""
        _Physics3DSwig.Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_swiginit(self, _Physics3DSwig.new_Physics3D_Signals_MateConnector_AngularAcceleration3DOutput())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Signals_MateConnector_AngularAcceleration3DOutput

# Register Physics3D_Signals_MateConnector_AngularAcceleration3DOutput in _Physics3DSwig:
_Physics3DSwig.Physics3D_Signals_MateConnector_AngularAcceleration3DOutput_swigregister(Physics3D_Signals_MateConnector_AngularAcceleration3DOutput)

class MateConnectorOutputTrait(object):
    r"""Proxy of C++ openplx::Physics3D::Signals::MateConnector::MateConnectorOutputTrait class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Physics3DSwig.delete_MateConnectorOutputTrait

    def relative_to(self):
        r"""relative_to(MateConnectorOutputTrait self) -> std::shared_ptr< openplx::Physics3D::Charges::MateConnector >"""
        return _Physics3DSwig.MateConnectorOutputTrait_relative_to(self)

# Register MateConnectorOutputTrait in _Physics3DSwig:
_Physics3DSwig.MateConnectorOutputTrait_swigregister(MateConnectorOutputTrait)

class Physics3D_Signals_MateConnector_AngularVelocity3DOutput(Physics3D_Signals_AngularVelocity3DOutput, MateConnectorOutputTrait):
    r"""Proxy of C++ openplx::Physics3D::Signals::MateConnector::AngularVelocity3DOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Signals_MateConnector_AngularVelocity3DOutput self) -> Physics3D_Signals_MateConnector_AngularVelocity3DOutput"""
        _Physics3DSwig.Physics3D_Signals_MateConnector_AngularVelocity3DOutput_swiginit(self, _Physics3DSwig.new_Physics3D_Signals_MateConnector_AngularVelocity3DOutput())

    def relative_to(self):
        r"""relative_to(Physics3D_Signals_MateConnector_AngularVelocity3DOutput self) -> std::shared_ptr< openplx::Physics3D::Charges::MateConnector >"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularVelocity3DOutput_relative_to(self)

    def source(self):
        r"""source(Physics3D_Signals_MateConnector_AngularVelocity3DOutput self) -> std::shared_ptr< openplx::Physics3D::Signals::MateConnector::MCAngularVelocity3DOutputTrait >"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularVelocity3DOutput_source(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Signals_MateConnector_AngularVelocity3DOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularVelocity3DOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Signals_MateConnector_AngularVelocity3DOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularVelocity3DOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Signals_MateConnector_AngularVelocity3DOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularVelocity3DOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Signals_MateConnector_AngularVelocity3DOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularVelocity3DOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Signals_MateConnector_AngularVelocity3DOutput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularVelocity3DOutput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Signals_MateConnector_AngularVelocity3DOutput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_AngularVelocity3DOutput_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Signals_MateConnector_AngularVelocity3DOutput

# Register Physics3D_Signals_MateConnector_AngularVelocity3DOutput in _Physics3DSwig:
_Physics3DSwig.Physics3D_Signals_MateConnector_AngularVelocity3DOutput_swigregister(Physics3D_Signals_MateConnector_AngularVelocity3DOutput)

class Physics3D_Signals_MateConnector_LinearVelocity3DOutput(Physics3D_Signals_LinearVelocity3DOutput, MateConnectorOutputTrait):
    r"""Proxy of C++ openplx::Physics3D::Signals::MateConnector::LinearVelocity3DOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Signals_MateConnector_LinearVelocity3DOutput self) -> Physics3D_Signals_MateConnector_LinearVelocity3DOutput"""
        _Physics3DSwig.Physics3D_Signals_MateConnector_LinearVelocity3DOutput_swiginit(self, _Physics3DSwig.new_Physics3D_Signals_MateConnector_LinearVelocity3DOutput())

    def relative_to(self):
        r"""relative_to(Physics3D_Signals_MateConnector_LinearVelocity3DOutput self) -> std::shared_ptr< openplx::Physics3D::Charges::MateConnector >"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_LinearVelocity3DOutput_relative_to(self)

    def source(self):
        r"""source(Physics3D_Signals_MateConnector_LinearVelocity3DOutput self) -> std::shared_ptr< openplx::Physics3D::Signals::MateConnector::MCLinearVelocity3DOutputTrait >"""
        return _Physics3DSwig.Physics3D_Signals_MateConnector_LinearVelocity3DOutput_source(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Signals_MateConnector_LinearVelocity3DOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_LinearVelocity3DOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Signals_MateConnector_LinearVelocity3DOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_LinearVelocity3DOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Signals_MateConnector_LinearVelocity3DOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_LinearVelocity3DOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Signals_MateConnector_LinearVelocity3DOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_LinearVelocity3DOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Signals_MateConnector_LinearVelocity3DOutput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_LinearVelocity3DOutput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Signals_MateConnector_LinearVelocity3DOutput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_LinearVelocity3DOutput_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Signals_MateConnector_LinearVelocity3DOutput

# Register Physics3D_Signals_MateConnector_LinearVelocity3DOutput in _Physics3DSwig:
_Physics3DSwig.Physics3D_Signals_MateConnector_LinearVelocity3DOutput_swigregister(Physics3D_Signals_MateConnector_LinearVelocity3DOutput)

class Physics3D_Signals_MateConnector_PositionOutput(Physics3D_Signals_MateConnector_Output):
    r"""Proxy of C++ openplx::Physics3D::Signals::MateConnector::PositionOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Signals_MateConnector_PositionOutput self) -> Physics3D_Signals_MateConnector_PositionOutput"""
        _Physics3DSwig.Physics3D_Signals_MateConnector_PositionOutput_swiginit(self, _Physics3DSwig.new_Physics3D_Signals_MateConnector_PositionOutput())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Signals_MateConnector_PositionOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_PositionOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Signals_MateConnector_PositionOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_PositionOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Signals_MateConnector_PositionOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_PositionOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Signals_MateConnector_PositionOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_PositionOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Signals_MateConnector_PositionOutput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_PositionOutput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Signals_MateConnector_PositionOutput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_PositionOutput_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Signals_MateConnector_PositionOutput

# Register Physics3D_Signals_MateConnector_PositionOutput in _Physics3DSwig:
_Physics3DSwig.Physics3D_Signals_MateConnector_PositionOutput_swigregister(Physics3D_Signals_MateConnector_PositionOutput)

class Physics3D_Signals_MateConnector_RPYOutput(Physics3D_Signals_MateConnector_Output):
    r"""Proxy of C++ openplx::Physics3D::Signals::MateConnector::RPYOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Signals_MateConnector_RPYOutput self) -> Physics3D_Signals_MateConnector_RPYOutput"""
        _Physics3DSwig.Physics3D_Signals_MateConnector_RPYOutput_swiginit(self, _Physics3DSwig.new_Physics3D_Signals_MateConnector_RPYOutput())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Signals_MateConnector_RPYOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_RPYOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Signals_MateConnector_RPYOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_RPYOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Signals_MateConnector_RPYOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_RPYOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Signals_MateConnector_RPYOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_RPYOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Signals_MateConnector_RPYOutput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_RPYOutput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Signals_MateConnector_RPYOutput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Signals_MateConnector_RPYOutput_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Signals_MateConnector_RPYOutput

# Register Physics3D_Signals_MateConnector_RPYOutput in _Physics3DSwig:
_Physics3DSwig.Physics3D_Signals_MateConnector_RPYOutput_swigregister(Physics3D_Signals_MateConnector_RPYOutput)

class Physics3D_Signals_Position3DOutput(openplx.Physics.Physics_Signals_Output):
    r"""Proxy of C++ openplx::Physics3D::Signals::Position3DOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Signals_Position3DOutput self) -> Physics3D_Signals_Position3DOutput"""
        _Physics3DSwig.Physics3D_Signals_Position3DOutput_swiginit(self, _Physics3DSwig.new_Physics3D_Signals_Position3DOutput())

    def source(self):
        r"""source(Physics3D_Signals_Position3DOutput self) -> std::shared_ptr< openplx::Physics3D::Signals::Position3DOutputTrait >"""
        return _Physics3DSwig.Physics3D_Signals_Position3DOutput_source(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Signals_Position3DOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Signals_Position3DOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Signals_Position3DOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Signals_Position3DOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Signals_Position3DOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Signals_Position3DOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Signals_Position3DOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Signals_Position3DOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Signals_Position3DOutput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Signals_Position3DOutput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Signals_Position3DOutput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Signals_Position3DOutput_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Signals_Position3DOutput

# Register Physics3D_Signals_Position3DOutput in _Physics3DSwig:
_Physics3DSwig.Physics3D_Signals_Position3DOutput_swigregister(Physics3D_Signals_Position3DOutput)

class Physics3D_Signals_RPYOutput(openplx.Physics.Physics_Signals_Output):
    r"""Proxy of C++ openplx::Physics3D::Signals::RPYOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Signals_RPYOutput self) -> Physics3D_Signals_RPYOutput"""
        _Physics3DSwig.Physics3D_Signals_RPYOutput_swiginit(self, _Physics3DSwig.new_Physics3D_Signals_RPYOutput())

    def source(self):
        r"""source(Physics3D_Signals_RPYOutput self) -> std::shared_ptr< openplx::Physics3D::Signals::RPYOutputTrait >"""
        return _Physics3DSwig.Physics3D_Signals_RPYOutput_source(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Signals_RPYOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Signals_RPYOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Signals_RPYOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Signals_RPYOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Signals_RPYOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Signals_RPYOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Signals_RPYOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Signals_RPYOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Signals_RPYOutput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Signals_RPYOutput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Signals_RPYOutput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Signals_RPYOutput_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Signals_RPYOutput

# Register Physics3D_Signals_RPYOutput in _Physics3DSwig:
_Physics3DSwig.Physics3D_Signals_RPYOutput_swigregister(Physics3D_Signals_RPYOutput)

class Physics3D_Signals_Torque3DInput(openplx.Physics.Physics_Signals_Input):
    r"""Proxy of C++ openplx::Physics3D::Signals::Torque3DInput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Signals_Torque3DInput self) -> Physics3D_Signals_Torque3DInput"""
        _Physics3DSwig.Physics3D_Signals_Torque3DInput_swiginit(self, _Physics3DSwig.new_Physics3D_Signals_Torque3DInput())

    def source(self):
        r"""source(Physics3D_Signals_Torque3DInput self) -> std::shared_ptr< openplx::Physics3D::Signals::Torque3DInputTrait >"""
        return _Physics3DSwig.Physics3D_Signals_Torque3DInput_source(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Signals_Torque3DInput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Signals_Torque3DInput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Signals_Torque3DInput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Signals_Torque3DInput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Signals_Torque3DInput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Signals_Torque3DInput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Signals_Torque3DInput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Signals_Torque3DInput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Signals_Torque3DInput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Signals_Torque3DInput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Signals_Torque3DInput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Signals_Torque3DInput_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Signals_Torque3DInput

# Register Physics3D_Signals_Torque3DInput in _Physics3DSwig:
_Physics3DSwig.Physics3D_Signals_Torque3DInput_swigregister(Physics3D_Signals_Torque3DInput)

class Physics3D_Signals_Torque3DOutput(openplx.Physics.Physics_Signals_Output):
    r"""Proxy of C++ openplx::Physics3D::Signals::Torque3DOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_Signals_Torque3DOutput self) -> Physics3D_Signals_Torque3DOutput"""
        _Physics3DSwig.Physics3D_Signals_Torque3DOutput_swiginit(self, _Physics3DSwig.new_Physics3D_Signals_Torque3DOutput())

    def source(self):
        r"""source(Physics3D_Signals_Torque3DOutput self) -> std::shared_ptr< openplx::Physics3D::Signals::Torque3DOutputTrait >"""
        return _Physics3DSwig.Physics3D_Signals_Torque3DOutput_source(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_Signals_Torque3DOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_Signals_Torque3DOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_Signals_Torque3DOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_Signals_Torque3DOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_Signals_Torque3DOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_Signals_Torque3DOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_Signals_Torque3DOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_Signals_Torque3DOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_Signals_Torque3DOutput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_Signals_Torque3DOutput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_Signals_Torque3DOutput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_Signals_Torque3DOutput_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Signals_Torque3DOutput

# Register Physics3D_Signals_Torque3DOutput in _Physics3DSwig:
_Physics3DSwig.Physics3D_Signals_Torque3DOutput_swigregister(Physics3D_Signals_Torque3DOutput)

class Physics3D_System(openplx.Physics.Physics_System):
    r"""Proxy of C++ openplx::Physics3D::System class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_System self) -> Physics3D_System"""
        _Physics3DSwig.Physics3D_System_swiginit(self, _Physics3DSwig.new_Physics3D_System())

    def local_transform(self):
        r"""local_transform(Physics3D_System self) -> std::shared_ptr< openplx::Math::AffineTransform >"""
        return _Physics3DSwig.Physics3D_System_local_transform(self)

    def on_init(self, context):
        r"""
        on_init(Physics3D_System self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_System_on_init(self, context)

    def reduce_body_to_world_system_transform(self, rigid_body):
        r"""
        reduce_body_to_world_system_transform(Physics3D_System self, std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > rigid_body) -> std::shared_ptr< openplx::Math::AffineTransform >

        Parameters
        ----------
        rigid_body: std::shared_ptr< openplx::Physics3D::Bodies::RigidBody >

        """
        return _Physics3DSwig.Physics3D_System_reduce_body_to_world_system_transform(self, rigid_body)

    def reduce_to_world_system_transform(self):
        r"""reduce_to_world_system_transform(Physics3D_System self) -> std::shared_ptr< openplx::Math::AffineTransform >"""
        return _Physics3DSwig.Physics3D_System_reduce_to_world_system_transform(self)

    def kinematically_controlled(self):
        r"""kinematically_controlled(Physics3D_System self) -> Physics3D_Bodies_RigidBody_Vector"""
        return _Physics3DSwig.Physics3D_System_kinematically_controlled(self)

    def reference_body(self):
        r"""reference_body(Physics3D_System self) -> std::shared_ptr< openplx::Physics3D::Bodies::Body >"""
        return _Physics3DSwig.Physics3D_System_reference_body(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_System self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_System_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_System self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_System_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_System self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_System_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_System self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_System_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_System self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_System_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_System self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_System_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_System

# Register Physics3D_System in _Physics3DSwig:
_Physics3DSwig.Physics3D_System_swigregister(Physics3D_System)

class Physics3D_StructuralComponent(Physics3D_System):
    r"""Proxy of C++ openplx::Physics3D::StructuralComponent class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_StructuralComponent self) -> Physics3D_StructuralComponent"""
        _Physics3DSwig.Physics3D_StructuralComponent_swiginit(self, _Physics3DSwig.new_Physics3D_StructuralComponent())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_StructuralComponent self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_StructuralComponent_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_StructuralComponent self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_StructuralComponent_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_StructuralComponent self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_StructuralComponent_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_StructuralComponent self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_StructuralComponent_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_StructuralComponent self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_StructuralComponent_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_StructuralComponent self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_StructuralComponent_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_StructuralComponent

# Register Physics3D_StructuralComponent in _Physics3DSwig:
_Physics3DSwig.Physics3D_StructuralComponent_swigregister(Physics3D_StructuralComponent)

class Physics3D_StructuralPlane(Physics3D_StructuralComponent):
    r"""Proxy of C++ openplx::Physics3D::StructuralPlane class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics3D_StructuralPlane self) -> Physics3D_StructuralPlane"""
        _Physics3DSwig.Physics3D_StructuralPlane_swiginit(self, _Physics3DSwig.new_Physics3D_StructuralPlane())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics3D_StructuralPlane self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics3DSwig.Physics3D_StructuralPlane_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics3D_StructuralPlane self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Physics3D_StructuralPlane_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics3D_StructuralPlane self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics3DSwig.Physics3D_StructuralPlane_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics3D_StructuralPlane self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics3DSwig.Physics3D_StructuralPlane_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics3D_StructuralPlane self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics3DSwig.Physics3D_StructuralPlane_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics3D_StructuralPlane self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics3DSwig.Physics3D_StructuralPlane_triggerOnInit(self, context)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_StructuralPlane

# Register Physics3D_StructuralPlane in _Physics3DSwig:
_Physics3DSwig.Physics3D_StructuralPlane_swigregister(Physics3D_StructuralPlane)



