# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")



def _add_paths():
  import os
  result = []

  if hasattr(os, 'add_dll_directory'):
    for path in os.environ.get('PATH', '').split(';'):
      if os.path.isabs(path) and os.path.exists(path):
        result.append(os.add_dll_directory(path))

  return result

_extra_paths = _add_paths()

if __package__ or '.' in __name__:
    from . import _AgxOpenPlxPyApi
else:
    import _AgxOpenPlxPyApi

for path in _extra_paths:
  path.close()

del _extra_paths
del _add_paths



try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SHARED_PTR_DISOWN = _AgxOpenPlxPyApi.SHARED_PTR_DISOWN
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AgxOpenPlxPyApi.delete_SwigPyIterator

    def value(self):
        return _AgxOpenPlxPyApi.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _AgxOpenPlxPyApi.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _AgxOpenPlxPyApi.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _AgxOpenPlxPyApi.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _AgxOpenPlxPyApi.SwigPyIterator_equal(self, x)

    def copy(self):
        return _AgxOpenPlxPyApi.SwigPyIterator_copy(self)

    def next(self):
        return _AgxOpenPlxPyApi.SwigPyIterator_next(self)

    def __next__(self):
        return _AgxOpenPlxPyApi.SwigPyIterator___next__(self)

    def previous(self):
        return _AgxOpenPlxPyApi.SwigPyIterator_previous(self)

    def advance(self, n):
        return _AgxOpenPlxPyApi.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _AgxOpenPlxPyApi.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _AgxOpenPlxPyApi.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _AgxOpenPlxPyApi.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _AgxOpenPlxPyApi.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _AgxOpenPlxPyApi.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _AgxOpenPlxPyApi.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _AgxOpenPlxPyApi:
_AgxOpenPlxPyApi.SwigPyIterator_swigregister(SwigPyIterator)

import openplx.Core
import openplx.Math
import openplx.Physics
import openplx.Physics1D
import openplx.Physics3D
import openplx.DriveTrain
import openplx.Robotics
import openplx.Simulation
import agxSDK
import agx
import agxData
import agxStream
import agxCollide
import agxRender
class OpenPlxToAgxMapper(object):
    r"""Proxy of C++ agxopenplx::OpenPlxToAgxMapper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(OpenPlxToAgxMapper self, Simulation simulation, std::string const & source_id, std::shared_ptr< agxopenplx::AgxCache > agx_cache=0, std::shared_ptr< agxopenplx::OpenPlxMaterialManager > material_manager=0, std::shared_ptr< openplx::ErrorReporter > error_reporter=std::make_shared< openplx::ErrorReporter >()) -> OpenPlxToAgxMapper

        Parameters
        ----------
        simulation: agxSDK::Simulation *
        source_id: std::string const &
        agx_cache: std::shared_ptr< agxopenplx::AgxCache >
        material_manager: std::shared_ptr< agxopenplx::OpenPlxMaterialManager >
        error_reporter: std::shared_ptr< openplx::ErrorReporter >

        """
        _AgxOpenPlxPyApi.OpenPlxToAgxMapper_swiginit(self, _AgxOpenPlxPyApi.new_OpenPlxToAgxMapper(*args))

    def mapObject(self, object):
        r"""
        mapObject(OpenPlxToAgxMapper self, std::shared_ptr< openplx::Core::Object > object) -> AssemblyRef

        Parameters
        ----------
        object: std::shared_ptr< openplx::Core::Object >

        """
        return _AgxOpenPlxPyApi.OpenPlxToAgxMapper_mapObject(self, object)

    def getErrorReporter(self):
        r"""getErrorReporter(OpenPlxToAgxMapper self) -> std::shared_ptr< openplx::ErrorReporter >"""
        return _AgxOpenPlxPyApi.OpenPlxToAgxMapper_getErrorReporter(self)

    def getPowerLine(self):
        r"""getPowerLine(OpenPlxToAgxMapper self) -> agxPowerLine::PowerLineRef"""
        return _AgxOpenPlxPyApi.OpenPlxToAgxMapper_getPowerLine(self)

    def getSimulation(self):
        r"""getSimulation(OpenPlxToAgxMapper self) -> Simulation"""
        return _AgxOpenPlxPyApi.OpenPlxToAgxMapper_getSimulation(self)

    def getAgxCache(self):
        r"""getAgxCache(OpenPlxToAgxMapper self) -> std::shared_ptr< agxopenplx::AgxCache >"""
        return _AgxOpenPlxPyApi.OpenPlxToAgxMapper_getAgxCache(self)

    def lookupAgxRigidBody(self, rigid_body):
        r"""
        lookupAgxRigidBody(OpenPlxToAgxMapper self, std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > const & rigid_body) -> RigidBodyRef

        Parameters
        ----------
        rigid_body: std::shared_ptr< openplx::Physics3D::Bodies::RigidBody > const &

        """
        return _AgxOpenPlxPyApi.OpenPlxToAgxMapper_lookupAgxRigidBody(self, rigid_body)

    def getAgxTerrainFor(self, b_terrain):
        r"""
        getAgxTerrainFor(OpenPlxToAgxMapper self, std::shared_ptr< openplx::Terrain::Terrain > const & b_terrain) -> agxTerrain::TerrainRef

        Parameters
        ----------
        b_terrain: std::shared_ptr< openplx::Terrain::Terrain > const &

        """
        return _AgxOpenPlxPyApi.OpenPlxToAgxMapper_getAgxTerrainFor(self, b_terrain)

    def getEventListeners(self):
        r"""getEventListeners(OpenPlxToAgxMapper self) -> agx::Vector< agxSDK::EventListenerRef > const &"""
        return _AgxOpenPlxPyApi.OpenPlxToAgxMapper_getEventListeners(self)

    def getTracksMap(self):
        r"""getTracksMap(OpenPlxToAgxMapper self) -> std::unordered_map< std::shared_ptr< openplx::Vehicles::Tracks::System >,agxVehicle::TrackRef > const &"""
        return _AgxOpenPlxPyApi.OpenPlxToAgxMapper_getTracksMap(self)

    @staticmethod
    def mapGearBoxGear(gear_box, agx_gear_box, gear):
        r"""
        mapGearBoxGear(std::shared_ptr< openplx::DriveTrain::GearBox > const & gear_box, agxDriveTrain::GearBoxRef const & agx_gear_box, int gear) -> int

        Parameters
        ----------
        gear_box: std::shared_ptr< openplx::DriveTrain::GearBox > const &
        agx_gear_box: agxDriveTrain::GearBoxRef const &
        gear: int

        """
        return _AgxOpenPlxPyApi.OpenPlxToAgxMapper_mapGearBoxGear(gear_box, agx_gear_box, gear)
    __swig_destroy__ = _AgxOpenPlxPyApi.delete_OpenPlxToAgxMapper

# Register OpenPlxToAgxMapper in _AgxOpenPlxPyApi:
_AgxOpenPlxPyApi.OpenPlxToAgxMapper_swigregister(OpenPlxToAgxMapper)

def OpenPlxToAgxMapper_mapGearBoxGear(gear_box, agx_gear_box, gear):
    r"""
    OpenPlxToAgxMapper_mapGearBoxGear(std::shared_ptr< openplx::DriveTrain::GearBox > const & gear_box, agxDriveTrain::GearBoxRef const & agx_gear_box, int gear) -> int

    Parameters
    ----------
    gear_box: std::shared_ptr< openplx::DriveTrain::GearBox > const &
    agx_gear_box: agxDriveTrain::GearBoxRef const &
    gear: int

    """
    return _AgxOpenPlxPyApi.OpenPlxToAgxMapper_mapGearBoxGear(gear_box, agx_gear_box, gear)

AgxToOpenPlxTrimeshMode_OBJ_EXPORT = _AgxOpenPlxPyApi.AgxToOpenPlxTrimeshMode_OBJ_EXPORT

AgxToOpenPlxTrimeshMode_INLINE = _AgxOpenPlxPyApi.AgxToOpenPlxTrimeshMode_INLINE

AgxToOpenPlxTrimeshMode_CACHED = _AgxOpenPlxPyApi.AgxToOpenPlxTrimeshMode_CACHED

AgxToOpenPlxMaterialNamingRule_OPENPLX_NAME = _AgxOpenPlxPyApi.AgxToOpenPlxMaterialNamingRule_OPENPLX_NAME

AgxToOpenPlxMaterialNamingRule_AGX_NAME = _AgxOpenPlxPyApi.AgxToOpenPlxMaterialNamingRule_AGX_NAME

AgxToOpenPlxMaterialNamingRule_AGX_UUID = _AgxOpenPlxPyApi.AgxToOpenPlxMaterialNamingRule_AGX_UUID

class EnsureUniqueId(object):
    r"""Proxy of C++ agxopenplx::EnsureUniqueId class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def ensureUniqueId(self, name, uuid, used_names):
        r"""
        ensureUniqueId(EnsureUniqueId self, std::string const & name, Uuid uuid, std::unordered_set< std::string > & used_names) -> std::string

        Parameters
        ----------
        name: std::string const &
        uuid: agx::Uuid const &
        used_names: std::unordered_set< std::string > &

        """
        return _AgxOpenPlxPyApi.EnsureUniqueId_ensureUniqueId(self, name, uuid, used_names)

    def lookupId(self, x_uuid):
        r"""
        lookupId(EnsureUniqueId self, Uuid x_uuid) -> std::string

        Parameters
        ----------
        x_uuid: agx::Uuid const &

        """
        return _AgxOpenPlxPyApi.EnsureUniqueId_lookupId(self, x_uuid)

    def clear(self):
        r"""clear(EnsureUniqueId self)"""
        return _AgxOpenPlxPyApi.EnsureUniqueId_clear(self)

    def __init__(self):
        r"""__init__(EnsureUniqueId self) -> EnsureUniqueId"""
        _AgxOpenPlxPyApi.EnsureUniqueId_swiginit(self, _AgxOpenPlxPyApi.new_EnsureUniqueId())
    __swig_destroy__ = _AgxOpenPlxPyApi.delete_EnsureUniqueId

# Register EnsureUniqueId in _AgxOpenPlxPyApi:
_AgxOpenPlxPyApi.EnsureUniqueId_swigregister(EnsureUniqueId)

class AgxToOpenPlxMapper(object):
    r"""Proxy of C++ agxopenplx::AgxToOpenPlxMapper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(AgxToOpenPlxMapper self, Simulation simulation, agxopenplx::AgxToOpenPlxTrimeshMode trimesh_mode, uint32_t precision=6, bool discard_rigid_body_positions=False, bool regenerate_shape_uuids=False, agxopenplx::AgxToOpenPlxMaterialNamingRule material_naming_rule=AGX_NAME) -> AgxToOpenPlxMapper

        Parameters
        ----------
        simulation: agxSDK::Simulation *
        trimesh_mode: enum agxopenplx::AgxToOpenPlxTrimeshMode
        precision: uint32_t
        discard_rigid_body_positions: bool
        regenerate_shape_uuids: bool
        material_naming_rule: enum agxopenplx::AgxToOpenPlxMaterialNamingRule

        __init__(AgxToOpenPlxMapper self, std::string const & export_folder, bool obj_relative_path, uint32_t precision=6, bool discard_rigid_body_positions=False, bool regenerate_shape_uuids=False) -> AgxToOpenPlxMapper

        Parameters
        ----------
        export_folder: std::string const &
        obj_relative_path: bool
        precision: uint32_t
        discard_rigid_body_positions: bool
        regenerate_shape_uuids: bool

        """
        _AgxOpenPlxPyApi.AgxToOpenPlxMapper_swiginit(self, _AgxOpenPlxPyApi.new_AgxToOpenPlxMapper(*args))

    def nameOrUuid(self, name, uuid):
        r"""
        nameOrUuid(AgxToOpenPlxMapper self, agx::Name const & name, Uuid uuid) -> std::string

        Parameters
        ----------
        name: agx::Name const &
        uuid: agx::Uuid const &

        """
        return _AgxOpenPlxPyApi.AgxToOpenPlxMapper_nameOrUuid(self, name, uuid)

    def nameWithIndexOrUuid(self, name, index, uuid):
        r"""
        nameWithIndexOrUuid(AgxToOpenPlxMapper self, agx::Name const & name, size_t index, Uuid uuid) -> std::string

        Parameters
        ----------
        name: agx::Name const &
        index: size_t
        uuid: agx::Uuid const &

        """
        return _AgxOpenPlxPyApi.AgxToOpenPlxMapper_nameWithIndexOrUuid(self, name, index, uuid)

    def assemblyToDocument(self, assembly):
        r"""
        assemblyToDocument(AgxToOpenPlxMapper self, AssemblyRef assembly) -> openplx::DocPtr

        Parameters
        ----------
        assembly: agxSDK::AssemblyRef const &

        """
        return _AgxOpenPlxPyApi.AgxToOpenPlxMapper_assemblyToDocument(self, assembly)

    def assemblyToOpenPlx(self, assembly):
        r"""
        assemblyToOpenPlx(AgxToOpenPlxMapper self, AssemblyRef assembly) -> std::string

        Parameters
        ----------
        assembly: agxSDK::AssemblyRef const &

        """
        return _AgxOpenPlxPyApi.AgxToOpenPlxMapper_assemblyToOpenPlx(self, assembly)
    __swig_destroy__ = _AgxOpenPlxPyApi.delete_AgxToOpenPlxMapper

# Register AgxToOpenPlxMapper in _AgxOpenPlxPyApi:
_AgxOpenPlxPyApi.AgxToOpenPlxMapper_swigregister(AgxToOpenPlxMapper)

class InputSignalQueue(object):
    r"""Proxy of C++ agxopenplx::InputSignalQueue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def create():
        r"""create() -> std::shared_ptr< agxopenplx::InputSignalQueue >"""
        return _AgxOpenPlxPyApi.InputSignalQueue_create()

    def send(self, signal):
        r"""
        send(InputSignalQueue self, agxopenplx::InputSignalPtr signal)

        Parameters
        ----------
        signal: agxopenplx::InputSignalPtr

        """
        return _AgxOpenPlxPyApi.InputSignalQueue_send(self, signal)

    def getSignals(self):
        r"""getSignals(InputSignalQueue self) -> Physics_Signals_InputSignal_Vector"""
        return _AgxOpenPlxPyApi.InputSignalQueue_getSignals(self)

    def popSignals(self):
        r"""popSignals(InputSignalQueue self) -> Physics_Signals_InputSignal_Vector"""
        return _AgxOpenPlxPyApi.InputSignalQueue_popSignals(self)

    def clear(self):
        r"""clear(InputSignalQueue self)"""
        return _AgxOpenPlxPyApi.InputSignalQueue_clear(self)

    def size(self):
        r"""size(InputSignalQueue self) -> size_t"""
        return _AgxOpenPlxPyApi.InputSignalQueue_size(self)

    def empty(self):
        r"""empty(InputSignalQueue self) -> bool"""
        return _AgxOpenPlxPyApi.InputSignalQueue_empty(self)
    __swig_destroy__ = _AgxOpenPlxPyApi.delete_InputSignalQueue

# Register InputSignalQueue in _AgxOpenPlxPyApi:
_AgxOpenPlxPyApi.InputSignalQueue_swigregister(InputSignalQueue)

def InputSignalQueue_create():
    r"""InputSignalQueue_create() -> std::shared_ptr< agxopenplx::InputSignalQueue >"""
    return _AgxOpenPlxPyApi.InputSignalQueue_create()

class OutputSignalQueue(object):
    r"""Proxy of C++ agxopenplx::OutputSignalQueue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def create():
        r"""create() -> std::shared_ptr< agxopenplx::OutputSignalQueue >"""
        return _AgxOpenPlxPyApi.OutputSignalQueue_create()

    def send(self, signal):
        r"""
        send(OutputSignalQueue self, agxopenplx::OutputSignalPtr signal)

        Parameters
        ----------
        signal: agxopenplx::OutputSignalPtr

        """
        return _AgxOpenPlxPyApi.OutputSignalQueue_send(self, signal)

    def getSignals(self):
        r"""getSignals(OutputSignalQueue self) -> Physics_Signals_OutputSignal_Vector"""
        return _AgxOpenPlxPyApi.OutputSignalQueue_getSignals(self)

    def popSignals(self):
        r"""popSignals(OutputSignalQueue self) -> Physics_Signals_OutputSignal_Vector"""
        return _AgxOpenPlxPyApi.OutputSignalQueue_popSignals(self)

    def clear(self):
        r"""clear(OutputSignalQueue self)"""
        return _AgxOpenPlxPyApi.OutputSignalQueue_clear(self)

    def size(self):
        r"""size(OutputSignalQueue self) -> size_t"""
        return _AgxOpenPlxPyApi.OutputSignalQueue_size(self)

    def empty(self):
        r"""empty(OutputSignalQueue self) -> bool"""
        return _AgxOpenPlxPyApi.OutputSignalQueue_empty(self)
    __swig_destroy__ = _AgxOpenPlxPyApi.delete_OutputSignalQueue

# Register OutputSignalQueue in _AgxOpenPlxPyApi:
_AgxOpenPlxPyApi.OutputSignalQueue_swigregister(OutputSignalQueue)

def OutputSignalQueue_create():
    r"""OutputSignalQueue_create() -> std::shared_ptr< agxopenplx::OutputSignalQueue >"""
    return _AgxOpenPlxPyApi.OutputSignalQueue_create()

class InputSignalListener(agxSDK.StepEventListener):
    r"""Proxy of C++ agxopenplx::InputSignalListener class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, assembly, input_queue):
        r"""
        __init__(InputSignalListener self, Assembly assembly, std::shared_ptr< agxopenplx::InputSignalQueue > input_queue) -> InputSignalListener

        Parameters
        ----------
        assembly: agxSDK::Assembly *
        input_queue: std::shared_ptr< agxopenplx::InputSignalQueue >

        """

        if str(type(assembly)) == "<class 'agxSDK.AssemblyRef'>":
            assembly = assembly.get()


        _AgxOpenPlxPyApi.InputSignalListener_swiginit(self, _AgxOpenPlxPyApi.new_InputSignalListener(assembly, input_queue))

    def preCollide(self, time):
        r"""
        preCollide(InputSignalListener self, agx::TimeStamp const & time)

        Parameters
        ----------
        time: agx::TimeStamp const &

        """
        return _AgxOpenPlxPyApi.InputSignalListener_preCollide(self, time)
    RECOMMENDED_PRIO = _AgxOpenPlxPyApi.InputSignalListener_RECOMMENDED_PRIO
    
    SEND_SIGNAL_PRIO = _AgxOpenPlxPyApi.InputSignalListener_SEND_SIGNAL_PRIO
    

    def addNotification(self):
        _AgxOpenPlxPyApi.InputSignalListener_addNotification
        super().addNotification()


    __swig_destroy__ = _AgxOpenPlxPyApi.delete_InputSignalListener

# Register InputSignalListener in _AgxOpenPlxPyApi:
_AgxOpenPlxPyApi.InputSignalListener_swigregister(InputSignalListener)

class OutputSignalListener(agxSDK.StepEventListener):
    r"""Proxy of C++ agxopenplx::OutputSignalListener class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, assembly, openplx_scene, output_queue):
        r"""
        __init__(OutputSignalListener self, Assembly assembly, std::shared_ptr< openplx::Core::Object > const & openplx_scene, std::shared_ptr< agxopenplx::OutputSignalQueue > output_queue) -> OutputSignalListener

        Parameters
        ----------
        assembly: agxSDK::Assembly *
        openplx_scene: std::shared_ptr< openplx::Core::Object > const &
        output_queue: std::shared_ptr< agxopenplx::OutputSignalQueue >

        """

        if str(type(assembly)) == "<class 'agxSDK.AssemblyRef'>":
            assembly = assembly.get()


        _AgxOpenPlxPyApi.OutputSignalListener_swiginit(self, _AgxOpenPlxPyApi.new_OutputSignalListener(assembly, openplx_scene, output_queue))

    def syncOutputSignals(self):
        r"""syncOutputSignals(OutputSignalListener self)"""
        return _AgxOpenPlxPyApi.OutputSignalListener_syncOutputSignals(self)

    def post(self, time):
        r"""
        post(OutputSignalListener self, agx::TimeStamp const & time)

        Parameters
        ----------
        time: agx::TimeStamp const &

        """
        return _AgxOpenPlxPyApi.OutputSignalListener_post(self, time)
    RECOMMENDED_PRIO = _AgxOpenPlxPyApi.OutputSignalListener_RECOMMENDED_PRIO
    
    __swig_destroy__ = _AgxOpenPlxPyApi.delete_OutputSignalListener

# Register OutputSignalListener in _AgxOpenPlxPyApi:
_AgxOpenPlxPyApi.OutputSignalListener_swigregister(OutputSignalListener)

class AssemblyOpenPlxObjectPair(object):
    r"""Proxy of C++ std::pair< std::shared_ptr< openplx::Core::Object >,agxSDK::AssemblyRef > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(AssemblyOpenPlxObjectPair self) -> AssemblyOpenPlxObjectPair
        __init__(AssemblyOpenPlxObjectPair self, std::shared_ptr< openplx::Core::Object > first, AssemblyRef second) -> AssemblyOpenPlxObjectPair

        Parameters
        ----------
        first: std::shared_ptr< openplx::Core::Object >
        second: agx::ref_ptr< agxSDK::Assembly >

        __init__(AssemblyOpenPlxObjectPair self, AssemblyOpenPlxObjectPair other) -> AssemblyOpenPlxObjectPair

        Parameters
        ----------
        other: std::pair< std::shared_ptr< openplx::Core::Object >,agxSDK::AssemblyRef > const &

        """
        _AgxOpenPlxPyApi.AssemblyOpenPlxObjectPair_swiginit(self, _AgxOpenPlxPyApi.new_AssemblyOpenPlxObjectPair(*args))
    first = property(_AgxOpenPlxPyApi.AssemblyOpenPlxObjectPair_first_get, _AgxOpenPlxPyApi.AssemblyOpenPlxObjectPair_first_set, doc=r"""first : std::shared_ptr<(openplx::Core::Object)>""")
    second = property(_AgxOpenPlxPyApi.AssemblyOpenPlxObjectPair_second_get, _AgxOpenPlxPyApi.AssemblyOpenPlxObjectPair_second_set, doc=r"""second : agx::ref_ptr<(agxSDK::Assembly)>""")
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _AgxOpenPlxPyApi.delete_AssemblyOpenPlxObjectPair

# Register AssemblyOpenPlxObjectPair in _AgxOpenPlxPyApi:
_AgxOpenPlxPyApi.AssemblyOpenPlxObjectPair_swigregister(AssemblyOpenPlxObjectPair)

class ClickInputListener(object):
    r"""Proxy of C++ agxopenplx::ClickInputListener class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, server, openplx_scene, input_queue, time_step, autostepping_enabled):
        r"""
        __init__(ClickInputListener self, std::shared_ptr< click::Server > & server, std::shared_ptr< openplx::Core::Object > const & openplx_scene, std::shared_ptr< agxopenplx::InputSignalQueue > input_queue, double time_step, bool autostepping_enabled) -> ClickInputListener

        Parameters
        ----------
        server: std::shared_ptr< click::Server > &
        openplx_scene: std::shared_ptr< openplx::Core::Object > const &
        input_queue: std::shared_ptr< agxopenplx::InputSignalQueue >
        time_step: double
        autostepping_enabled: bool

        """
        _AgxOpenPlxPyApi.ClickInputListener_swiginit(self, _AgxOpenPlxPyApi.new_ClickInputListener(server, openplx_scene, input_queue, time_step, autostepping_enabled))
    __swig_destroy__ = _AgxOpenPlxPyApi.delete_ClickInputListener

    def preFrame(self, arg2):
        r"""
        preFrame(ClickInputListener self, agx::TimeStamp const & arg2) -> bool

        Parameters
        ----------
        arg2: agx::TimeStamp const &

        """
        return _AgxOpenPlxPyApi.ClickInputListener_preFrame(self, arg2)

    def set_autostepping_enabled(self, enabled):
        r"""
        set_autostepping_enabled(ClickInputListener self, bool enabled)

        Parameters
        ----------
        enabled: bool

        """
        return _AgxOpenPlxPyApi.ClickInputListener_set_autostepping_enabled(self, enabled)

    def is_autostepping_enabled(self):
        r"""is_autostepping_enabled(ClickInputListener self) -> bool"""
        return _AgxOpenPlxPyApi.ClickInputListener_is_autostepping_enabled(self)

    def is_click_signal_available(self):
        r"""is_click_signal_available(ClickInputListener self) -> bool"""
        return _AgxOpenPlxPyApi.ClickInputListener_is_click_signal_available(self)

    def setSensorRequestCallback(self, callback):
        r"""
        setSensorRequestCallback(ClickInputListener self, std::function< void (agx::TimeStamp const &) > callback)

        Parameters
        ----------
        callback: std::function< void (agx::TimeStamp const &) >

        """
        return _AgxOpenPlxPyApi.ClickInputListener_setSensorRequestCallback(self, callback)

    def updateScene(self, openplx_scene):
        r"""
        updateScene(ClickInputListener self, std::shared_ptr< openplx::Core::Object > const & openplx_scene)

        Parameters
        ----------
        openplx_scene: std::shared_ptr< openplx::Core::Object > const &

        """
        return _AgxOpenPlxPyApi.ClickInputListener_updateScene(self, openplx_scene)

    def updateInputQueue(self, input_queue):
        r"""
        updateInputQueue(ClickInputListener self, std::shared_ptr< agxopenplx::InputSignalQueue > const & input_queue)

        Parameters
        ----------
        input_queue: std::shared_ptr< agxopenplx::InputSignalQueue > const &

        """
        return _AgxOpenPlxPyApi.ClickInputListener_updateInputQueue(self, input_queue)

    def autostepOffCallback(self):
        r"""autostepOffCallback(ClickInputListener self)"""
        return _AgxOpenPlxPyApi.ClickInputListener_autostepOffCallback(self)

    def autostepOnCallback(self):
        r"""autostepOnCallback(ClickInputListener self)"""
        return _AgxOpenPlxPyApi.ClickInputListener_autostepOnCallback(self)

    def stopApplicationCallback(self):
        r"""stopApplicationCallback(ClickInputListener self)"""
        return _AgxOpenPlxPyApi.ClickInputListener_stopApplicationCallback(self)

    def resetCallback(self):
        r"""resetCallback(ClickInputListener self)"""
        return _AgxOpenPlxPyApi.ClickInputListener_resetCallback(self)

    def getScene(self):
        r"""getScene(ClickInputListener self) -> std::shared_ptr< openplx::Core::Object >"""
        return _AgxOpenPlxPyApi.ClickInputListener_getScene(self)

    def hasQueue(self, input_queue):
        r"""
        hasQueue(ClickInputListener self, std::shared_ptr< agxopenplx::InputSignalQueue > const & input_queue) -> bool

        Parameters
        ----------
        input_queue: std::shared_ptr< agxopenplx::InputSignalQueue > const &

        """
        return _AgxOpenPlxPyApi.ClickInputListener_hasQueue(self, input_queue)

# Register ClickInputListener in _AgxOpenPlxPyApi:
_AgxOpenPlxPyApi.ClickInputListener_swigregister(ClickInputListener)

class OsgClickInputListener(ClickInputListener):
    r"""Proxy of C++ agxopenplx::OsgClickInputListener class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, server, openplx_scene, input_queue, time_step, autostepping_enabled):
        r"""
        __init__(OsgClickInputListener self, std::shared_ptr< click::Server > & server, std::shared_ptr< openplx::Core::Object > const & openplx_scene, std::shared_ptr< agxopenplx::InputSignalQueue > input_queue, double time_step, bool autostepping_enabled) -> OsgClickInputListener

        Parameters
        ----------
        server: std::shared_ptr< click::Server > &
        openplx_scene: std::shared_ptr< openplx::Core::Object > const &
        input_queue: std::shared_ptr< agxopenplx::InputSignalQueue >
        time_step: double
        autostepping_enabled: bool

        """
        _AgxOpenPlxPyApi.OsgClickInputListener_swiginit(self, _AgxOpenPlxPyApi.new_OsgClickInputListener(server, openplx_scene, input_queue, time_step, autostepping_enabled))

    def preFrame(self, app):
        r"""
        preFrame(OsgClickInputListener self, agxOSG::ExampleApplication * app)

        Parameters
        ----------
        app: agxOSG::ExampleApplication *

        """
        return _AgxOpenPlxPyApi.OsgClickInputListener_preFrame(self, app)

    def autostepOffCallback(self):
        r"""autostepOffCallback(OsgClickInputListener self)"""
        return _AgxOpenPlxPyApi.OsgClickInputListener_autostepOffCallback(self)

    def autostepOnCallback(self):
        r"""autostepOnCallback(OsgClickInputListener self)"""
        return _AgxOpenPlxPyApi.OsgClickInputListener_autostepOnCallback(self)

    def stopApplicationCallback(self):
        r"""stopApplicationCallback(OsgClickInputListener self)"""
        return _AgxOpenPlxPyApi.OsgClickInputListener_stopApplicationCallback(self)

    def resetCallback(self):
        r"""resetCallback(OsgClickInputListener self)"""
        return _AgxOpenPlxPyApi.OsgClickInputListener_resetCallback(self)
    __swig_destroy__ = _AgxOpenPlxPyApi.delete_OsgClickInputListener

# Register OsgClickInputListener in _AgxOpenPlxPyApi:
_AgxOpenPlxPyApi.OsgClickInputListener_swigregister(OsgClickInputListener)

class ClickOutputListener(agxSDK.StepEventListener):
    r"""Proxy of C++ agxopenplx::ClickOutputListener class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, server, output_queue):
        r"""
        __init__(ClickOutputListener self, std::shared_ptr< click::Server > & server, std::shared_ptr< agxopenplx::OutputSignalQueue > output_queue) -> ClickOutputListener

        Parameters
        ----------
        server: std::shared_ptr< click::Server > &
        output_queue: std::shared_ptr< agxopenplx::OutputSignalQueue >

        """
        _AgxOpenPlxPyApi.ClickOutputListener_swiginit(self, _AgxOpenPlxPyApi.new_ClickOutputListener(server, output_queue))

    def post(self, prev_step):
        r"""
        post(ClickOutputListener self, agx::TimeStamp const & prev_step)

        Parameters
        ----------
        prev_step: agx::TimeStamp const &

        """
        return _AgxOpenPlxPyApi.ClickOutputListener_post(self, prev_step)

    def last(self, simulated_time):
        r"""
        last(ClickOutputListener self, agx::TimeStamp const & simulated_time)

        Parameters
        ----------
        simulated_time: agx::TimeStamp const &

        """
        return _AgxOpenPlxPyApi.ClickOutputListener_last(self, simulated_time)
    RECOMMENDED_PRIO = _AgxOpenPlxPyApi.ClickOutputListener_RECOMMENDED_PRIO
    

    def sendResetMessage(self):
        r"""sendResetMessage(ClickOutputListener self)"""
        return _AgxOpenPlxPyApi.ClickOutputListener_sendResetMessage(self)
    __swig_destroy__ = _AgxOpenPlxPyApi.delete_ClickOutputListener

# Register ClickOutputListener in _AgxOpenPlxPyApi:
_AgxOpenPlxPyApi.ClickOutputListener_swigregister(ClickOutputListener)

class ClickKeyboardEventListener(agxSDK.GuiEventListener):
    r"""Proxy of C++ agxopenplx::ClickKeyboardEventListener class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, click_input_listener, app, click_adapter):
        r"""
        __init__(ClickKeyboardEventListener self, std::shared_ptr< agxopenplx::ClickInputListener > click_input_listener, agxOSG::ExampleApplication * app, OsgClickAdapter click_adapter) -> ClickKeyboardEventListener

        Parameters
        ----------
        click_input_listener: std::shared_ptr< agxopenplx::ClickInputListener >
        app: agxOSG::ExampleApplication *
        click_adapter: agxopenplx::OsgClickAdapter *

        """
        _AgxOpenPlxPyApi.ClickKeyboardEventListener_swiginit(self, _AgxOpenPlxPyApi.new_ClickKeyboardEventListener(click_input_listener, app, click_adapter))

    def keyboard(self, key, modkeyMask, x, y, keyDown):
        r"""
        keyboard(ClickKeyboardEventListener self, int key, unsigned int modkeyMask, float x, float y, bool keyDown) -> bool

        Parameters
        ----------
        key: int
        modkeyMask: unsigned int
        x: float
        y: float
        keyDown: bool

        """
        return _AgxOpenPlxPyApi.ClickKeyboardEventListener_keyboard(self, key, modkeyMask, x, y, keyDown)
    RECOMMENDED_PRIO = _AgxOpenPlxPyApi.ClickKeyboardEventListener_RECOMMENDED_PRIO
    
    __swig_destroy__ = _AgxOpenPlxPyApi.delete_ClickKeyboardEventListener

# Register ClickKeyboardEventListener in _AgxOpenPlxPyApi:
_AgxOpenPlxPyApi.ClickKeyboardEventListener_swigregister(ClickKeyboardEventListener)

class OsgClickAdapter(object):
    r"""Proxy of C++ agxopenplx::OsgClickAdapter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def sendResetMessage(self):
        r"""sendResetMessage(OsgClickAdapter self)"""
        return _AgxOpenPlxPyApi.OsgClickAdapter_sendResetMessage(self)

    def willSendResetMessage(self):
        r"""willSendResetMessage(OsgClickAdapter self) -> bool"""
        return _AgxOpenPlxPyApi.OsgClickAdapter_willSendResetMessage(self)

    def add_listeners(self, app, simulation, click_server_addr, openplx_scene, input_queue, output_queue, output_signal_listener):
        r"""
        add_listeners(OsgClickAdapter self, agxOSG::ExampleApplication * app, Simulation simulation, std::string const & click_server_addr, std::shared_ptr< openplx::Core::Object > const & openplx_scene, std::shared_ptr< agxopenplx::InputSignalQueue > input_queue, std::shared_ptr< agxopenplx::OutputSignalQueue > output_queue, OutputSignalListener output_signal_listener)

        Parameters
        ----------
        app: agxOSG::ExampleApplication *
        simulation: agxSDK::Simulation *
        click_server_addr: std::string const &
        openplx_scene: std::shared_ptr< openplx::Core::Object > const &
        input_queue: std::shared_ptr< agxopenplx::InputSignalQueue >
        output_queue: std::shared_ptr< agxopenplx::OutputSignalQueue >
        output_signal_listener: agxopenplx::OutputSignalListener *

        """
        return _AgxOpenPlxPyApi.OsgClickAdapter_add_listeners(self, app, simulation, click_server_addr, openplx_scene, input_queue, output_queue, output_signal_listener)

    def createClickInputListener(self, openplx_scene, input_queue, time_step, auto_stepping):
        r"""
        createClickInputListener(OsgClickAdapter self, std::shared_ptr< openplx::Core::Object > const & openplx_scene, std::shared_ptr< agxopenplx::InputSignalQueue > input_queue, double time_step, bool auto_stepping) -> std::shared_ptr< agxopenplx::ClickInputListener >

        Parameters
        ----------
        openplx_scene: std::shared_ptr< openplx::Core::Object > const &
        input_queue: std::shared_ptr< agxopenplx::InputSignalQueue >
        time_step: double
        auto_stepping: bool

        """
        return _AgxOpenPlxPyApi.OsgClickAdapter_createClickInputListener(self, openplx_scene, input_queue, time_step, auto_stepping)

    def __init__(self):
        r"""__init__(OsgClickAdapter self) -> OsgClickAdapter"""
        _AgxOpenPlxPyApi.OsgClickAdapter_swiginit(self, _AgxOpenPlxPyApi.new_OsgClickAdapter())
    __swig_destroy__ = _AgxOpenPlxPyApi.delete_OsgClickAdapter

# Register OsgClickAdapter in _AgxOpenPlxPyApi:
_AgxOpenPlxPyApi.OsgClickAdapter_swigregister(OsgClickAdapter)

class AgxCache(object):
    r"""Proxy of C++ agxopenplx::AgxCache class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(AgxCache self) -> AgxCache"""
        _AgxOpenPlxPyApi.AgxCache_swiginit(self, _AgxOpenPlxPyApi.new_AgxCache())

    def readCollisionShape(self, uuid):
        r"""
        readCollisionShape(AgxCache self, std::string const & uuid) -> std::optional< agxCollide::ShapeRef >

        Parameters
        ----------
        uuid: std::string const &

        """
        return _AgxOpenPlxPyApi.AgxCache_readCollisionShape(self, uuid)

    def readCollisionShapeAndTransform(self, uuid):
        r"""
        readCollisionShapeAndTransform(AgxCache self, std::string const & uuid) -> std::optional< std::pair< agxCollide::ShapeRef,agx::AffineMatrix4x4 > >

        Parameters
        ----------
        uuid: std::string const &

        """
        return _AgxOpenPlxPyApi.AgxCache_readCollisionShapeAndTransform(self, uuid)

    def writeCollisionShape(self, shape):
        r"""
        writeCollisionShape(AgxCache self, ShapeRef shape)

        Parameters
        ----------
        shape: agxCollide::ShapeRef const &

        """
        return _AgxOpenPlxPyApi.AgxCache_writeCollisionShape(self, shape)

    def cacheShapes(self, assembly):
        r"""
        cacheShapes(AgxCache self, AssemblyRef assembly)

        Parameters
        ----------
        assembly: agxSDK::AssemblyRef const &

        """
        return _AgxOpenPlxPyApi.AgxCache_cacheShapes(self, assembly)

    def flagAsConsumed(self, uuid):
        r"""
        flagAsConsumed(AgxCache self, std::string const & uuid)

        Parameters
        ----------
        uuid: std::string const &

        """
        return _AgxOpenPlxPyApi.AgxCache_flagAsConsumed(self, uuid)

    def isConsumed(self, uuid):
        r"""
        isConsumed(AgxCache self, std::string const & uuid) -> bool

        Parameters
        ----------
        uuid: std::string const &

        """
        return _AgxOpenPlxPyApi.AgxCache_isConsumed(self, uuid)
    __swig_destroy__ = _AgxOpenPlxPyApi.delete_AgxCache

# Register AgxCache in _AgxOpenPlxPyApi:
_AgxOpenPlxPyApi.AgxCache_swigregister(AgxCache)

class OpenPlxMaterialManager(object):
    r"""Proxy of C++ agxopenplx::OpenPlxMaterialManager class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(OpenPlxMaterialManager self) -> OpenPlxMaterialManager"""
        _AgxOpenPlxPyApi.OpenPlxMaterialManager_swiginit(self, _AgxOpenPlxPyApi.new_OpenPlxMaterialManager())

    def registerAndMergeScene(self, scene):
        r"""
        registerAndMergeScene(OpenPlxMaterialManager self, Physics3D_System scene) -> bool

        Parameters
        ----------
        scene: openplx::Physics3D::System const &

        """
        return _AgxOpenPlxPyApi.OpenPlxMaterialManager_registerAndMergeScene(self, scene)
    __swig_destroy__ = _AgxOpenPlxPyApi.delete_OpenPlxMaterialManager

# Register OpenPlxMaterialManager in _AgxOpenPlxPyApi:
_AgxOpenPlxPyApi.OpenPlxMaterialManager_swigregister(OpenPlxMaterialManager)

class Result(object):
    r"""Proxy of C++ agxopenplx::Result class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, assembly, scene, errors, to_agx_mapper):
        r"""
        __init__(Result self, Assembly assembly, std::shared_ptr< openplx::Core::Object > scene, ErrorVector errors, std::shared_ptr< agxopenplx::OpenPlxToAgxMapper > to_agx_mapper) -> Result

        Parameters
        ----------
        assembly: agxSDK::Assembly *
        scene: std::shared_ptr< openplx::Core::Object >
        errors: openplx::Errors
        to_agx_mapper: std::shared_ptr< agxopenplx::OpenPlxToAgxMapper >

        """
        _AgxOpenPlxPyApi.Result_swiginit(self, _AgxOpenPlxPyApi.new_Result(assembly, scene, errors, to_agx_mapper))

    def assembly(self):
        r"""assembly(Result self) -> Assembly"""
        return _AgxOpenPlxPyApi.Result_assembly(self)

    def scene(self):
        r"""scene(Result self) -> std::shared_ptr< openplx::Core::Object >"""
        return _AgxOpenPlxPyApi.Result_scene(self)

    def errors(self):
        r"""errors(Result self) -> ErrorVector"""
        return _AgxOpenPlxPyApi.Result_errors(self)

    def to_agx_mapper(self):
        r"""to_agx_mapper(Result self) -> std::shared_ptr< agxopenplx::OpenPlxToAgxMapper >"""
        return _AgxOpenPlxPyApi.Result_to_agx_mapper(self)
    __swig_destroy__ = _AgxOpenPlxPyApi.delete_Result

# Register Result in _AgxOpenPlxPyApi:
_AgxOpenPlxPyApi.Result_swigregister(Result)

class OptParams(object):
    r"""Proxy of C++ agxopenplx::OptParams class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def with_model_name(self, model_name):
        r"""
        with_model_name(OptParams self, std::string model_name) -> OptParams

        Parameters
        ----------
        model_name: std::string

        """
        return _AgxOpenPlxPyApi.OptParams_with_model_name(self, model_name)

    def with_uuidv5(self, uuidv5_namespace_id):
        r"""
        with_uuidv5(OptParams self, std::string uuidv5_namespace_id) -> OptParams

        Parameters
        ----------
        uuidv5_namespace_id: std::string

        """
        return _AgxOpenPlxPyApi.OptParams_with_uuidv5(self, uuidv5_namespace_id)

    def model_name(self):
        r"""model_name(OptParams self) -> std::optional< std::string > const &"""
        return _AgxOpenPlxPyApi.OptParams_model_name(self)

    def uuidv5_namespace_id(self):
        r"""uuidv5_namespace_id(OptParams self) -> std::optional< std::string > const &"""
        return _AgxOpenPlxPyApi.OptParams_uuidv5_namespace_id(self)

    def __init__(self):
        r"""__init__(OptParams self) -> OptParams"""
        _AgxOpenPlxPyApi.OptParams_swiginit(self, _AgxOpenPlxPyApi.new_OptParams())
    __swig_destroy__ = _AgxOpenPlxPyApi.delete_OptParams

# Register OptParams in _AgxOpenPlxPyApi:
_AgxOpenPlxPyApi.OptParams_swigregister(OptParams)


def load_from_string(*args):
    r"""
    load_from_string(Simulation simulation, std::string const & source, std::string const & bundle_paths, OptParams optional_parameters=agxopenplx::OptParams()) -> Result

    Parameters
    ----------
    simulation: agxSDK::Simulation *
    source: std::string const &
    bundle_paths: std::string const &
    optional_parameters: agxopenplx::OptParams

    """
    return _AgxOpenPlxPyApi.load_from_string(*args)

def load_from_file(*args):
    r"""
    load_from_file(openplx_file:str, bundle_paths:str, modelname:str=) -> Result { assembly(), openplx_object(), errors() } 

    Load openplxfile and return the OpenPLX model and corresponding AGX assembly

        Parameters
        ----------
        openplx_file: path to the OpenPLX file
        openplx_file: path to the OpenPLX file
        bundle_paths: semicolon separated list of file paths to bundles
        optional_parameters: OptParams object, for example: OptParams().with_model_name(...).with_uuidv5(...)

    load_from_file(openplx_file:str, bundle_paths:str, modelname:str=) -> Result { assembly(), openplx_object(), errors() } 

    Load openplxfile and return the OpenPLX model and corresponding AGX assembly

        Parameters
        ----------
        openplx_file: path to the OpenPLX file
        openplx_file: path to the OpenPLX file
        bundle_paths: semicolon separated list of file paths to bundles
        optional_parameters: OptParams object, for example: OptParams().with_model_name(...).with_uuidv5(...)


    """
    return _AgxOpenPlxPyApi.load_from_file(*args)

def serialize_file(*args):
    r"""
    serialize_file(std::string const & path, std::string const & bundle_paths, OptParams optional_parameters=agxopenplx::OptParams()) -> std::string

    Parameters
    ----------
    path: std::string const &
    bundle_paths: std::string const &
    optional_parameters: agxopenplx::OptParams

    """
    return _AgxOpenPlxPyApi.serialize_file(*args)

def register_bundles(ctx):
    r"""
    register_bundles(OpenPlxContext ctx)

    Parameters
    ----------
    ctx: openplx::Core::Api::OpenPlxContext &

    """
    return _AgxOpenPlxPyApi.register_bundles(ctx)

def register_plugins(ctx, cache=0):
    r"""
    register_plugins(OpenPlxContext ctx, std::shared_ptr< agxopenplx::AgxCache > cache=0)

    Parameters
    ----------
    ctx: openplx::Core::Api::OpenPlxContext &
    cache: std::shared_ptr< agxopenplx::AgxCache >

    """
    return _AgxOpenPlxPyApi.register_plugins(ctx, cache)

def set_log_level(log_level_name):
    r"""
    set_log_level(std::string const & log_level_name)

    Parameters
    ----------
    log_level_name: std::string const &

    """
    return _AgxOpenPlxPyApi.set_log_level(log_level_name)

def check_if_migrate_hint_is_justified(current_version, errors):
    r"""
    check_if_migrate_hint_is_justified(std::string const & current_version, ErrorVector errors) -> std::string

    Parameters
    ----------
    current_version: std::string const &
    errors: openplx::Errors const &

    """
    return _AgxOpenPlxPyApi.check_if_migrate_hint_is_justified(current_version, errors)

def parse_and_evaluate_string(bundle_paths, source, modelname):
    r"""
    parse_and_evaluate_string(std::string const & bundle_paths, std::string const & source, std::string const & modelname) -> std::pair< std::shared_ptr< openplx::Core::Object >,openplx::Errors >

    Parameters
    ----------
    bundle_paths: std::string const &
    source: std::string const &
    modelname: std::string const &

    """
    return _AgxOpenPlxPyApi.parse_and_evaluate_string(bundle_paths, source, modelname)

def parseWithPlugin(arg1, key):
    r"""
    parseWithPlugin(std::shared_ptr< openplx::Plugin > arg1, std::string const & key) -> std::string

    Parameters
    ----------
    arg1: std::shared_ptr< openplx::Plugin >
    key: std::string const &

    """
    return _AgxOpenPlxPyApi.parseWithPlugin(arg1, key)

def get_error_strings(errors):
    r"""
    get_error_strings(ErrorVector errors) -> StringVector

    Parameters
    ----------
    errors: openplx::Errors const &

    """
    return _AgxOpenPlxPyApi.get_error_strings(errors)

def addVisuals(result, osg_root, debug_render_frames=False):
    r"""
    addVisuals(Result result, osg::Group * osg_root, bool debug_render_frames=False) -> bool

    Parameters
    ----------
    result: agxopenplx::Result
    osg_root: osg::Group *
    debug_render_frames: bool

    """
    return _AgxOpenPlxPyApi.addVisuals(result, osg_root, debug_render_frames)

def addDeformableVisualUpdaters(result, osg_root):
    r"""
    addDeformableVisualUpdaters(Result result, osg::Group * osg_root)

    Parameters
    ----------
    result: agxopenplx::Result
    osg_root: osg::Group *

    """
    return _AgxOpenPlxPyApi.addDeformableVisualUpdaters(result, osg_root)

def add_file_changed_listener(app, openplxfile):
    r"""
    add_file_changed_listener(agxOSG::ExampleApplication * app, std::string const & openplxfile)

    Parameters
    ----------
    app: agxOSG::ExampleApplication *
    openplxfile: std::string const &

    """
    return _AgxOpenPlxPyApi.add_file_changed_listener(app, openplxfile)
class FileChangedListener(object):
    r"""Proxy of C++ agxopenplx::FileChangedListener class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file_to_track):
        r"""
        __init__(FileChangedListener self, std::string file_to_track) -> FileChangedListener

        Parameters
        ----------
        file_to_track: std::string

        """
        _AgxOpenPlxPyApi.FileChangedListener_swiginit(self, _AgxOpenPlxPyApi.new_FileChangedListener(file_to_track))

    def preFrame(self, app):
        r"""
        preFrame(FileChangedListener self, agxOSG::ExampleApplication * app)

        Parameters
        ----------
        app: agxOSG::ExampleApplication *

        """
        return _AgxOpenPlxPyApi.FileChangedListener_preFrame(self, app)

    def postFrame(self, arg2):
        r"""
        postFrame(FileChangedListener self, agxOSG::ExampleApplication * arg2)

        Parameters
        ----------
        arg2: agxOSG::ExampleApplication *

        """
        return _AgxOpenPlxPyApi.FileChangedListener_postFrame(self, arg2)
    __swig_destroy__ = _AgxOpenPlxPyApi.delete_FileChangedListener

# Register FileChangedListener in _AgxOpenPlxPyApi:
_AgxOpenPlxPyApi.FileChangedListener_swigregister(FileChangedListener)



