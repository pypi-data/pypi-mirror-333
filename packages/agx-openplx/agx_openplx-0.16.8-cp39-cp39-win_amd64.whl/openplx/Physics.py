# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _PhysicsSwig
else:
    import _PhysicsSwig

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SHARED_PTR_DISOWN = _PhysicsSwig.SHARED_PTR_DISOWN

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PhysicsSwig.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _PhysicsSwig.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _PhysicsSwig.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _PhysicsSwig.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _PhysicsSwig.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _PhysicsSwig.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _PhysicsSwig.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _PhysicsSwig.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _PhysicsSwig.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _PhysicsSwig.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _PhysicsSwig.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _PhysicsSwig.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _PhysicsSwig.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _PhysicsSwig.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _PhysicsSwig.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _PhysicsSwig.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _PhysicsSwig.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _PhysicsSwig:
_PhysicsSwig.SwigPyIterator_swigregister(SwigPyIterator)

import openplx.Core
import openplx.Math
class Physics_Bodies_Body_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Bodies_Body_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Bodies_Body_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Bodies_Body_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Bodies_Body_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Bodies_Body_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Bodies_Body_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::size_type"""
        return _PhysicsSwig.Physics_Bodies_Body_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::difference_type j) -> Physics_Bodies_Body_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::difference_type

        """
        return _PhysicsSwig.Physics_Bodies_Body_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::difference_type

        __setslice__(Physics_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::difference_type j, Physics_Bodies_Body_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Bodies::Body >,std::allocator< std::shared_ptr< openplx::Physics::Bodies::Body > > > const &

        """
        return _PhysicsSwig.Physics_Bodies_Body_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::difference_type

        """
        return _PhysicsSwig.Physics_Bodies_Body_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::difference_type

        __delitem__(Physics_Bodies_Body_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Bodies_Body_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Bodies_Body_Vector self, PySliceObject * slice) -> Physics_Bodies_Body_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::difference_type

        """
        return _PhysicsSwig.Physics_Bodies_Body_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Bodies_Body_Vector self, PySliceObject * slice, Physics_Bodies_Body_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Bodies::Body >,std::allocator< std::shared_ptr< openplx::Physics::Bodies::Body > > > const &

        __setitem__(Physics_Bodies_Body_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::value_type const &

        """
        return _PhysicsSwig.Physics_Bodies_Body_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::value_type"""
        return _PhysicsSwig.Physics_Bodies_Body_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::value_type const &

        """
        return _PhysicsSwig.Physics_Bodies_Body_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Bodies_Body_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Bodies_Body_Vector_empty(self)

    def size(self):
        r"""size(Physics_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::size_type"""
        return _PhysicsSwig.Physics_Bodies_Body_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Bodies_Body_Vector self, Physics_Bodies_Body_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > > &

        """
        return _PhysicsSwig.Physics_Bodies_Body_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::iterator"""
        return _PhysicsSwig.Physics_Bodies_Body_Vector_begin(self)

    def end(self):
        r"""end(Physics_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::iterator"""
        return _PhysicsSwig.Physics_Bodies_Body_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Bodies_Body_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Bodies_Body_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Bodies_Body_Vector self)"""
        return _PhysicsSwig.Physics_Bodies_Body_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::allocator_type"""
        return _PhysicsSwig.Physics_Bodies_Body_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Bodies_Body_Vector self)"""
        return _PhysicsSwig.Physics_Bodies_Body_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::iterator

        erase(Physics_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::iterator

        """
        return _PhysicsSwig.Physics_Bodies_Body_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Bodies_Body_Vector self) -> Physics_Bodies_Body_Vector
        __init__(Physics_Bodies_Body_Vector self, Physics_Bodies_Body_Vector other) -> Physics_Bodies_Body_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > > const &

        __init__(Physics_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::size_type size) -> Physics_Bodies_Body_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::size_type

        __init__(Physics_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::value_type const & value) -> Physics_Bodies_Body_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::value_type const &

        """
        _PhysicsSwig.Physics_Bodies_Body_Vector_swiginit(self, _PhysicsSwig.new_Physics_Bodies_Body_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::value_type const &

        """
        return _PhysicsSwig.Physics_Bodies_Body_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::value_type const &"""
        return _PhysicsSwig.Physics_Bodies_Body_Vector_front(self)

    def back(self):
        r"""back(Physics_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::value_type const &"""
        return _PhysicsSwig.Physics_Bodies_Body_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::value_type const &

        """
        return _PhysicsSwig.Physics_Bodies_Body_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::size_type

        resize(Physics_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::value_type const &

        """
        return _PhysicsSwig.Physics_Bodies_Body_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::value_type const &

        insert(Physics_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::value_type const &

        """
        return _PhysicsSwig.Physics_Bodies_Body_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::size_type

        """
        return _PhysicsSwig.Physics_Bodies_Body_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Body > >::size_type"""
        return _PhysicsSwig.Physics_Bodies_Body_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Bodies_Body_Vector

# Register Physics_Bodies_Body_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Bodies_Body_Vector_swigregister(Physics_Bodies_Body_Vector)

class Physics_Bodies_Inertia_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Bodies_Inertia_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Bodies_Inertia_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Bodies_Inertia_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::size_type"""
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::difference_type j) -> Physics_Bodies_Inertia_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::difference_type

        """
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::difference_type

        __setslice__(Physics_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::difference_type j, Physics_Bodies_Inertia_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia >,std::allocator< std::shared_ptr< openplx::Physics::Bodies::Inertia > > > const &

        """
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::difference_type

        """
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::difference_type

        __delitem__(Physics_Bodies_Inertia_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Bodies_Inertia_Vector self, PySliceObject * slice) -> Physics_Bodies_Inertia_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::difference_type

        """
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Bodies_Inertia_Vector self, PySliceObject * slice, Physics_Bodies_Inertia_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia >,std::allocator< std::shared_ptr< openplx::Physics::Bodies::Inertia > > > const &

        __setitem__(Physics_Bodies_Inertia_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::value_type const &

        """
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::value_type"""
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::value_type const &

        """
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Bodies_Inertia_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector_empty(self)

    def size(self):
        r"""size(Physics_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::size_type"""
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Bodies_Inertia_Vector self, Physics_Bodies_Inertia_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > > &

        """
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::iterator"""
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector_begin(self)

    def end(self):
        r"""end(Physics_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::iterator"""
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Bodies_Inertia_Vector self)"""
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::allocator_type"""
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Bodies_Inertia_Vector self)"""
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::iterator

        erase(Physics_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::iterator

        """
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Bodies_Inertia_Vector self) -> Physics_Bodies_Inertia_Vector
        __init__(Physics_Bodies_Inertia_Vector self, Physics_Bodies_Inertia_Vector other) -> Physics_Bodies_Inertia_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > > const &

        __init__(Physics_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::size_type size) -> Physics_Bodies_Inertia_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::size_type

        __init__(Physics_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::value_type const & value) -> Physics_Bodies_Inertia_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::value_type const &

        """
        _PhysicsSwig.Physics_Bodies_Inertia_Vector_swiginit(self, _PhysicsSwig.new_Physics_Bodies_Inertia_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::value_type const &

        """
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::value_type const &"""
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector_front(self)

    def back(self):
        r"""back(Physics_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::value_type const &"""
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::value_type const &

        """
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::size_type

        resize(Physics_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::value_type const &

        """
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::value_type const &

        insert(Physics_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::value_type const &

        """
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::size_type

        """
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Inertia > >::size_type"""
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Bodies_Inertia_Vector

# Register Physics_Bodies_Inertia_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Bodies_Inertia_Vector_swigregister(Physics_Bodies_Inertia_Vector)

class Physics_Bodies_Kinematics_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Bodies_Kinematics_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Bodies_Kinematics_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Bodies_Kinematics_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::size_type"""
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::difference_type j) -> Physics_Bodies_Kinematics_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::difference_type

        """
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::difference_type

        __setslice__(Physics_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::difference_type j, Physics_Bodies_Kinematics_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics >,std::allocator< std::shared_ptr< openplx::Physics::Bodies::Kinematics > > > const &

        """
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::difference_type

        """
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::difference_type

        __delitem__(Physics_Bodies_Kinematics_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Bodies_Kinematics_Vector self, PySliceObject * slice) -> Physics_Bodies_Kinematics_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::difference_type

        """
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Bodies_Kinematics_Vector self, PySliceObject * slice, Physics_Bodies_Kinematics_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics >,std::allocator< std::shared_ptr< openplx::Physics::Bodies::Kinematics > > > const &

        __setitem__(Physics_Bodies_Kinematics_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::value_type const &

        """
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::value_type"""
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::value_type const &

        """
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Bodies_Kinematics_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector_empty(self)

    def size(self):
        r"""size(Physics_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::size_type"""
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Bodies_Kinematics_Vector self, Physics_Bodies_Kinematics_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > > &

        """
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::iterator"""
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector_begin(self)

    def end(self):
        r"""end(Physics_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::iterator"""
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Bodies_Kinematics_Vector self)"""
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::allocator_type"""
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Bodies_Kinematics_Vector self)"""
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::iterator

        erase(Physics_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::iterator

        """
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Bodies_Kinematics_Vector self) -> Physics_Bodies_Kinematics_Vector
        __init__(Physics_Bodies_Kinematics_Vector self, Physics_Bodies_Kinematics_Vector other) -> Physics_Bodies_Kinematics_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > > const &

        __init__(Physics_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::size_type size) -> Physics_Bodies_Kinematics_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::size_type

        __init__(Physics_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::value_type const & value) -> Physics_Bodies_Kinematics_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::value_type const &

        """
        _PhysicsSwig.Physics_Bodies_Kinematics_Vector_swiginit(self, _PhysicsSwig.new_Physics_Bodies_Kinematics_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::value_type const &

        """
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::value_type const &"""
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector_front(self)

    def back(self):
        r"""back(Physics_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::value_type const &"""
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::value_type const &

        """
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::size_type

        resize(Physics_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::value_type const &

        """
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::value_type const &

        insert(Physics_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::value_type const &

        """
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::size_type

        """
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Bodies::Kinematics > >::size_type"""
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Bodies_Kinematics_Vector

# Register Physics_Bodies_Kinematics_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Bodies_Kinematics_Vector_swigregister(Physics_Bodies_Kinematics_Vector)

class Physics_Charges_Charge_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Charges_Charge_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Charges_Charge_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Charges_Charge_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Charges_Charge_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Charges_Charge_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Charges_Charge_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Charges_Charge_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::size_type"""
        return _PhysicsSwig.Physics_Charges_Charge_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Charges_Charge_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::difference_type j) -> Physics_Charges_Charge_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::difference_type

        """
        return _PhysicsSwig.Physics_Charges_Charge_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Charges_Charge_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::difference_type

        __setslice__(Physics_Charges_Charge_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::difference_type j, Physics_Charges_Charge_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Charges::Charge >,std::allocator< std::shared_ptr< openplx::Physics::Charges::Charge > > > const &

        """
        return _PhysicsSwig.Physics_Charges_Charge_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Charges_Charge_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::difference_type

        """
        return _PhysicsSwig.Physics_Charges_Charge_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Charges_Charge_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::difference_type

        __delitem__(Physics_Charges_Charge_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Charges_Charge_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Charges_Charge_Vector self, PySliceObject * slice) -> Physics_Charges_Charge_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Charges_Charge_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::difference_type

        """
        return _PhysicsSwig.Physics_Charges_Charge_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Charges_Charge_Vector self, PySliceObject * slice, Physics_Charges_Charge_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Charges::Charge >,std::allocator< std::shared_ptr< openplx::Physics::Charges::Charge > > > const &

        __setitem__(Physics_Charges_Charge_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Charges_Charge_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charges_Charge_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Charges_Charge_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::value_type"""
        return _PhysicsSwig.Physics_Charges_Charge_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Charges_Charge_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charges_Charge_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Charges_Charge_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Charges_Charge_Vector_empty(self)

    def size(self):
        r"""size(Physics_Charges_Charge_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::size_type"""
        return _PhysicsSwig.Physics_Charges_Charge_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Charges_Charge_Vector self, Physics_Charges_Charge_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > > &

        """
        return _PhysicsSwig.Physics_Charges_Charge_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Charges_Charge_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::iterator"""
        return _PhysicsSwig.Physics_Charges_Charge_Vector_begin(self)

    def end(self):
        r"""end(Physics_Charges_Charge_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::iterator"""
        return _PhysicsSwig.Physics_Charges_Charge_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Charges_Charge_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Charges_Charge_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Charges_Charge_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Charges_Charge_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Charges_Charge_Vector self)"""
        return _PhysicsSwig.Physics_Charges_Charge_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Charges_Charge_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::allocator_type"""
        return _PhysicsSwig.Physics_Charges_Charge_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Charges_Charge_Vector self)"""
        return _PhysicsSwig.Physics_Charges_Charge_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Charges_Charge_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::iterator

        erase(Physics_Charges_Charge_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::iterator

        """
        return _PhysicsSwig.Physics_Charges_Charge_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Charges_Charge_Vector self) -> Physics_Charges_Charge_Vector
        __init__(Physics_Charges_Charge_Vector self, Physics_Charges_Charge_Vector other) -> Physics_Charges_Charge_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > > const &

        __init__(Physics_Charges_Charge_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::size_type size) -> Physics_Charges_Charge_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::size_type

        __init__(Physics_Charges_Charge_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::value_type const & value) -> Physics_Charges_Charge_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::value_type const &

        """
        _PhysicsSwig.Physics_Charges_Charge_Vector_swiginit(self, _PhysicsSwig.new_Physics_Charges_Charge_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Charges_Charge_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charges_Charge_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Charges_Charge_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::value_type const &"""
        return _PhysicsSwig.Physics_Charges_Charge_Vector_front(self)

    def back(self):
        r"""back(Physics_Charges_Charge_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::value_type const &"""
        return _PhysicsSwig.Physics_Charges_Charge_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Charges_Charge_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charges_Charge_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Charges_Charge_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::size_type

        resize(Physics_Charges_Charge_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charges_Charge_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Charges_Charge_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::value_type const &

        insert(Physics_Charges_Charge_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charges_Charge_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Charges_Charge_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::size_type

        """
        return _PhysicsSwig.Physics_Charges_Charge_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Charges_Charge_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Charges::Charge > >::size_type"""
        return _PhysicsSwig.Physics_Charges_Charge_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Charges_Charge_Vector

# Register Physics_Charges_Charge_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Charges_Charge_Vector_swigregister(Physics_Charges_Charge_Vector)

class Physics_Charges_ContactGeometry_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Charges_ContactGeometry_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Charges_ContactGeometry_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Charges_ContactGeometry_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Charges_ContactGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::size_type"""
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::difference_type j) -> Physics_Charges_ContactGeometry_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::difference_type

        """
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::difference_type

        __setslice__(Physics_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::difference_type j, Physics_Charges_ContactGeometry_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry >,std::allocator< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > > > const &

        """
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::difference_type

        """
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::difference_type

        __delitem__(Physics_Charges_ContactGeometry_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Charges_ContactGeometry_Vector self, PySliceObject * slice) -> Physics_Charges_ContactGeometry_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::difference_type

        """
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Charges_ContactGeometry_Vector self, PySliceObject * slice, Physics_Charges_ContactGeometry_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry >,std::allocator< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > > > const &

        __setitem__(Physics_Charges_ContactGeometry_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Charges_ContactGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::value_type"""
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Charges_ContactGeometry_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_empty(self)

    def size(self):
        r"""size(Physics_Charges_ContactGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::size_type"""
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Charges_ContactGeometry_Vector self, Physics_Charges_ContactGeometry_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > > &

        """
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Charges_ContactGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::iterator"""
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_begin(self)

    def end(self):
        r"""end(Physics_Charges_ContactGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::iterator"""
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Charges_ContactGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Charges_ContactGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Charges_ContactGeometry_Vector self)"""
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Charges_ContactGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::allocator_type"""
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Charges_ContactGeometry_Vector self)"""
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::iterator

        erase(Physics_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::iterator

        """
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Charges_ContactGeometry_Vector self) -> Physics_Charges_ContactGeometry_Vector
        __init__(Physics_Charges_ContactGeometry_Vector self, Physics_Charges_ContactGeometry_Vector other) -> Physics_Charges_ContactGeometry_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > > const &

        __init__(Physics_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::size_type size) -> Physics_Charges_ContactGeometry_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::size_type

        __init__(Physics_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::value_type const & value) -> Physics_Charges_ContactGeometry_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::value_type const &

        """
        _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_swiginit(self, _PhysicsSwig.new_Physics_Charges_ContactGeometry_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Charges_ContactGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::value_type const &"""
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_front(self)

    def back(self):
        r"""back(Physics_Charges_ContactGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::value_type const &"""
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::size_type

        resize(Physics_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::value_type const &

        insert(Physics_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::size_type

        """
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Charges_ContactGeometry_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Charges::ContactGeometry > >::size_type"""
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Charges_ContactGeometry_Vector

# Register Physics_Charges_ContactGeometry_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Charges_ContactGeometry_Vector_swigregister(Physics_Charges_ContactGeometry_Vector)

class Physics_Charges_LinearElasticMaterial_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Charges_LinearElasticMaterial_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Charges_LinearElasticMaterial_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Charges_LinearElasticMaterial_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Charges_LinearElasticMaterial_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Charges_LinearElasticMaterial_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Charges_LinearElasticMaterial_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Charges_LinearElasticMaterial_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::size_type"""
        return _PhysicsSwig.Physics_Charges_LinearElasticMaterial_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Charges_LinearElasticMaterial_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::difference_type j) -> Physics_Charges_LinearElasticMaterial_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::difference_type

        """
        return _PhysicsSwig.Physics_Charges_LinearElasticMaterial_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Charges_LinearElasticMaterial_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::difference_type

        __setslice__(Physics_Charges_LinearElasticMaterial_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::difference_type j, Physics_Charges_LinearElasticMaterial_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial >,std::allocator< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > > > const &

        """
        return _PhysicsSwig.Physics_Charges_LinearElasticMaterial_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Charges_LinearElasticMaterial_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::difference_type

        """
        return _PhysicsSwig.Physics_Charges_LinearElasticMaterial_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Charges_LinearElasticMaterial_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::difference_type

        __delitem__(Physics_Charges_LinearElasticMaterial_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Charges_LinearElasticMaterial_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Charges_LinearElasticMaterial_Vector self, PySliceObject * slice) -> Physics_Charges_LinearElasticMaterial_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Charges_LinearElasticMaterial_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::difference_type

        """
        return _PhysicsSwig.Physics_Charges_LinearElasticMaterial_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Charges_LinearElasticMaterial_Vector self, PySliceObject * slice, Physics_Charges_LinearElasticMaterial_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial >,std::allocator< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > > > const &

        __setitem__(Physics_Charges_LinearElasticMaterial_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Charges_LinearElasticMaterial_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charges_LinearElasticMaterial_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Charges_LinearElasticMaterial_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::value_type"""
        return _PhysicsSwig.Physics_Charges_LinearElasticMaterial_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Charges_LinearElasticMaterial_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charges_LinearElasticMaterial_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Charges_LinearElasticMaterial_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Charges_LinearElasticMaterial_Vector_empty(self)

    def size(self):
        r"""size(Physics_Charges_LinearElasticMaterial_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::size_type"""
        return _PhysicsSwig.Physics_Charges_LinearElasticMaterial_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Charges_LinearElasticMaterial_Vector self, Physics_Charges_LinearElasticMaterial_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > > &

        """
        return _PhysicsSwig.Physics_Charges_LinearElasticMaterial_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Charges_LinearElasticMaterial_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::iterator"""
        return _PhysicsSwig.Physics_Charges_LinearElasticMaterial_Vector_begin(self)

    def end(self):
        r"""end(Physics_Charges_LinearElasticMaterial_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::iterator"""
        return _PhysicsSwig.Physics_Charges_LinearElasticMaterial_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Charges_LinearElasticMaterial_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Charges_LinearElasticMaterial_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Charges_LinearElasticMaterial_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Charges_LinearElasticMaterial_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Charges_LinearElasticMaterial_Vector self)"""
        return _PhysicsSwig.Physics_Charges_LinearElasticMaterial_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Charges_LinearElasticMaterial_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::allocator_type"""
        return _PhysicsSwig.Physics_Charges_LinearElasticMaterial_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Charges_LinearElasticMaterial_Vector self)"""
        return _PhysicsSwig.Physics_Charges_LinearElasticMaterial_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Charges_LinearElasticMaterial_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::iterator

        erase(Physics_Charges_LinearElasticMaterial_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::iterator

        """
        return _PhysicsSwig.Physics_Charges_LinearElasticMaterial_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Charges_LinearElasticMaterial_Vector self) -> Physics_Charges_LinearElasticMaterial_Vector
        __init__(Physics_Charges_LinearElasticMaterial_Vector self, Physics_Charges_LinearElasticMaterial_Vector other) -> Physics_Charges_LinearElasticMaterial_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > > const &

        __init__(Physics_Charges_LinearElasticMaterial_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::size_type size) -> Physics_Charges_LinearElasticMaterial_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::size_type

        __init__(Physics_Charges_LinearElasticMaterial_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::value_type const & value) -> Physics_Charges_LinearElasticMaterial_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::value_type const &

        """
        _PhysicsSwig.Physics_Charges_LinearElasticMaterial_Vector_swiginit(self, _PhysicsSwig.new_Physics_Charges_LinearElasticMaterial_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Charges_LinearElasticMaterial_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charges_LinearElasticMaterial_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Charges_LinearElasticMaterial_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::value_type const &"""
        return _PhysicsSwig.Physics_Charges_LinearElasticMaterial_Vector_front(self)

    def back(self):
        r"""back(Physics_Charges_LinearElasticMaterial_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::value_type const &"""
        return _PhysicsSwig.Physics_Charges_LinearElasticMaterial_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Charges_LinearElasticMaterial_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charges_LinearElasticMaterial_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Charges_LinearElasticMaterial_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::size_type

        resize(Physics_Charges_LinearElasticMaterial_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charges_LinearElasticMaterial_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Charges_LinearElasticMaterial_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::value_type const &

        insert(Physics_Charges_LinearElasticMaterial_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charges_LinearElasticMaterial_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Charges_LinearElasticMaterial_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::size_type

        """
        return _PhysicsSwig.Physics_Charges_LinearElasticMaterial_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Charges_LinearElasticMaterial_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Charges::LinearElasticMaterial > >::size_type"""
        return _PhysicsSwig.Physics_Charges_LinearElasticMaterial_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Charges_LinearElasticMaterial_Vector

# Register Physics_Charges_LinearElasticMaterial_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Charges_LinearElasticMaterial_Vector_swigregister(Physics_Charges_LinearElasticMaterial_Vector)

class Physics_Charges_Material_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Charges::Material > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Charges_Material_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Charges_Material_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Charges_Material_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Charges_Material_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Charges_Material_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Charges_Material_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Charges_Material_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::size_type"""
        return _PhysicsSwig.Physics_Charges_Material_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Charges_Material_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::difference_type j) -> Physics_Charges_Material_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::difference_type

        """
        return _PhysicsSwig.Physics_Charges_Material_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Charges_Material_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::difference_type

        __setslice__(Physics_Charges_Material_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::difference_type j, Physics_Charges_Material_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Charges::Material >,std::allocator< std::shared_ptr< openplx::Physics::Charges::Material > > > const &

        """
        return _PhysicsSwig.Physics_Charges_Material_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Charges_Material_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::difference_type

        """
        return _PhysicsSwig.Physics_Charges_Material_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Charges_Material_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::difference_type

        __delitem__(Physics_Charges_Material_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Charges_Material_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Charges_Material_Vector self, PySliceObject * slice) -> Physics_Charges_Material_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Charges_Material_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::difference_type

        """
        return _PhysicsSwig.Physics_Charges_Material_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Charges_Material_Vector self, PySliceObject * slice, Physics_Charges_Material_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Charges::Material >,std::allocator< std::shared_ptr< openplx::Physics::Charges::Material > > > const &

        __setitem__(Physics_Charges_Material_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Charges_Material_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charges_Material_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Charges_Material_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::value_type"""
        return _PhysicsSwig.Physics_Charges_Material_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Charges_Material_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charges_Material_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Charges_Material_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Charges_Material_Vector_empty(self)

    def size(self):
        r"""size(Physics_Charges_Material_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::size_type"""
        return _PhysicsSwig.Physics_Charges_Material_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Charges_Material_Vector self, Physics_Charges_Material_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Charges::Material > > &

        """
        return _PhysicsSwig.Physics_Charges_Material_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Charges_Material_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::iterator"""
        return _PhysicsSwig.Physics_Charges_Material_Vector_begin(self)

    def end(self):
        r"""end(Physics_Charges_Material_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::iterator"""
        return _PhysicsSwig.Physics_Charges_Material_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Charges_Material_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Charges_Material_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Charges_Material_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Charges_Material_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Charges_Material_Vector self)"""
        return _PhysicsSwig.Physics_Charges_Material_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Charges_Material_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::allocator_type"""
        return _PhysicsSwig.Physics_Charges_Material_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Charges_Material_Vector self)"""
        return _PhysicsSwig.Physics_Charges_Material_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Charges_Material_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::iterator

        erase(Physics_Charges_Material_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::iterator

        """
        return _PhysicsSwig.Physics_Charges_Material_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Charges_Material_Vector self) -> Physics_Charges_Material_Vector
        __init__(Physics_Charges_Material_Vector self, Physics_Charges_Material_Vector other) -> Physics_Charges_Material_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Charges::Material > > const &

        __init__(Physics_Charges_Material_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::size_type size) -> Physics_Charges_Material_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::size_type

        __init__(Physics_Charges_Material_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::value_type const & value) -> Physics_Charges_Material_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::value_type const &

        """
        _PhysicsSwig.Physics_Charges_Material_Vector_swiginit(self, _PhysicsSwig.new_Physics_Charges_Material_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Charges_Material_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charges_Material_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Charges_Material_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::value_type const &"""
        return _PhysicsSwig.Physics_Charges_Material_Vector_front(self)

    def back(self):
        r"""back(Physics_Charges_Material_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::value_type const &"""
        return _PhysicsSwig.Physics_Charges_Material_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Charges_Material_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charges_Material_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Charges_Material_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::size_type

        resize(Physics_Charges_Material_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charges_Material_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Charges_Material_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::value_type const &

        insert(Physics_Charges_Material_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charges_Material_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Charges_Material_Vector self, std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::size_type

        """
        return _PhysicsSwig.Physics_Charges_Material_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Charges_Material_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Charges::Material > >::size_type"""
        return _PhysicsSwig.Physics_Charges_Material_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Charges_Material_Vector

# Register Physics_Charges_Material_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Charges_Material_Vector_swigregister(Physics_Charges_Material_Vector)

class Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::difference_type j) -> Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::difference_type

        __setslice__(Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::difference_type j, Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::difference_type

        __delitem__(Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector self, PySliceObject * slice) -> Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector self, PySliceObject * slice, Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > > > const &

        __setitem__(Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector self, Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > > &

        """
        return _PhysicsSwig.Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::iterator

        erase(Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector self) -> Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector
        __init__(Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector self, Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector other) -> Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > > const &

        __init__(Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::size_type size) -> Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::size_type

        __init__(Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::value_type const & value) -> Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::size_type

        resize(Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::value_type const &

        insert(Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector

# Register Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector_swigregister(Physics_Interactions_Adhesion_ConstantForceAdhesion_Vector)

class Physics_Interactions_Adhesion_DefaultAdhesion_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_Adhesion_DefaultAdhesion_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_Adhesion_DefaultAdhesion_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_Adhesion_DefaultAdhesion_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Adhesion_DefaultAdhesion_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_Adhesion_DefaultAdhesion_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Adhesion_DefaultAdhesion_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_Adhesion_DefaultAdhesion_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Adhesion_DefaultAdhesion_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_Adhesion_DefaultAdhesion_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::difference_type j) -> Physics_Interactions_Adhesion_DefaultAdhesion_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Adhesion_DefaultAdhesion_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_Adhesion_DefaultAdhesion_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::difference_type

        __setslice__(Physics_Interactions_Adhesion_DefaultAdhesion_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::difference_type j, Physics_Interactions_Adhesion_DefaultAdhesion_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Adhesion_DefaultAdhesion_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_Adhesion_DefaultAdhesion_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Adhesion_DefaultAdhesion_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_Adhesion_DefaultAdhesion_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::difference_type

        __delitem__(Physics_Interactions_Adhesion_DefaultAdhesion_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_Adhesion_DefaultAdhesion_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_Adhesion_DefaultAdhesion_Vector self, PySliceObject * slice) -> Physics_Interactions_Adhesion_DefaultAdhesion_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_Adhesion_DefaultAdhesion_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Adhesion_DefaultAdhesion_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_Adhesion_DefaultAdhesion_Vector self, PySliceObject * slice, Physics_Interactions_Adhesion_DefaultAdhesion_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > > > const &

        __setitem__(Physics_Interactions_Adhesion_DefaultAdhesion_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_Adhesion_DefaultAdhesion_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Adhesion_DefaultAdhesion_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_Adhesion_DefaultAdhesion_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_Adhesion_DefaultAdhesion_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_Adhesion_DefaultAdhesion_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Adhesion_DefaultAdhesion_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_Adhesion_DefaultAdhesion_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Adhesion_DefaultAdhesion_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_Adhesion_DefaultAdhesion_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Adhesion_DefaultAdhesion_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_Adhesion_DefaultAdhesion_Vector self, Physics_Interactions_Adhesion_DefaultAdhesion_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > > &

        """
        return _PhysicsSwig.Physics_Interactions_Adhesion_DefaultAdhesion_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_Adhesion_DefaultAdhesion_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Adhesion_DefaultAdhesion_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_Adhesion_DefaultAdhesion_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Adhesion_DefaultAdhesion_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_Adhesion_DefaultAdhesion_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Adhesion_DefaultAdhesion_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_Adhesion_DefaultAdhesion_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Adhesion_DefaultAdhesion_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_Adhesion_DefaultAdhesion_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Adhesion_DefaultAdhesion_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_Adhesion_DefaultAdhesion_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_Adhesion_DefaultAdhesion_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_Adhesion_DefaultAdhesion_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Adhesion_DefaultAdhesion_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_Adhesion_DefaultAdhesion_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::iterator

        erase(Physics_Interactions_Adhesion_DefaultAdhesion_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_Adhesion_DefaultAdhesion_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_Adhesion_DefaultAdhesion_Vector self) -> Physics_Interactions_Adhesion_DefaultAdhesion_Vector
        __init__(Physics_Interactions_Adhesion_DefaultAdhesion_Vector self, Physics_Interactions_Adhesion_DefaultAdhesion_Vector other) -> Physics_Interactions_Adhesion_DefaultAdhesion_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > > const &

        __init__(Physics_Interactions_Adhesion_DefaultAdhesion_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::size_type size) -> Physics_Interactions_Adhesion_DefaultAdhesion_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::size_type

        __init__(Physics_Interactions_Adhesion_DefaultAdhesion_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::value_type const & value) -> Physics_Interactions_Adhesion_DefaultAdhesion_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_Adhesion_DefaultAdhesion_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Adhesion_DefaultAdhesion_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_Adhesion_DefaultAdhesion_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Adhesion_DefaultAdhesion_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_Adhesion_DefaultAdhesion_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Adhesion_DefaultAdhesion_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_Adhesion_DefaultAdhesion_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Adhesion_DefaultAdhesion_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_Adhesion_DefaultAdhesion_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Adhesion_DefaultAdhesion_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_Adhesion_DefaultAdhesion_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::size_type

        resize(Physics_Interactions_Adhesion_DefaultAdhesion_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Adhesion_DefaultAdhesion_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_Adhesion_DefaultAdhesion_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::value_type const &

        insert(Physics_Interactions_Adhesion_DefaultAdhesion_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Adhesion_DefaultAdhesion_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_Adhesion_DefaultAdhesion_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_Adhesion_DefaultAdhesion_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_Adhesion_DefaultAdhesion_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Adhesion_DefaultAdhesion_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Adhesion_DefaultAdhesion_Vector

# Register Physics_Interactions_Adhesion_DefaultAdhesion_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Adhesion_DefaultAdhesion_Vector_swigregister(Physics_Interactions_Adhesion_DefaultAdhesion_Vector)

class Physics_Interactions_Clearance_ConstantAngleClearance_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_Clearance_ConstantAngleClearance_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantAngleClearance_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_Clearance_ConstantAngleClearance_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantAngleClearance_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_Clearance_ConstantAngleClearance_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantAngleClearance_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_Clearance_ConstantAngleClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantAngleClearance_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_Clearance_ConstantAngleClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::difference_type j) -> Physics_Interactions_Clearance_ConstantAngleClearance_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantAngleClearance_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_Clearance_ConstantAngleClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::difference_type

        __setslice__(Physics_Interactions_Clearance_ConstantAngleClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::difference_type j, Physics_Interactions_Clearance_ConstantAngleClearance_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantAngleClearance_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_Clearance_ConstantAngleClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantAngleClearance_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_Clearance_ConstantAngleClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::difference_type

        __delitem__(Physics_Interactions_Clearance_ConstantAngleClearance_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantAngleClearance_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_Clearance_ConstantAngleClearance_Vector self, PySliceObject * slice) -> Physics_Interactions_Clearance_ConstantAngleClearance_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_Clearance_ConstantAngleClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantAngleClearance_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_Clearance_ConstantAngleClearance_Vector self, PySliceObject * slice, Physics_Interactions_Clearance_ConstantAngleClearance_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > > > const &

        __setitem__(Physics_Interactions_Clearance_ConstantAngleClearance_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_Clearance_ConstantAngleClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantAngleClearance_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_Clearance_ConstantAngleClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantAngleClearance_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_Clearance_ConstantAngleClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantAngleClearance_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_Clearance_ConstantAngleClearance_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantAngleClearance_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_Clearance_ConstantAngleClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantAngleClearance_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_Clearance_ConstantAngleClearance_Vector self, Physics_Interactions_Clearance_ConstantAngleClearance_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > > &

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantAngleClearance_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_Clearance_ConstantAngleClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantAngleClearance_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_Clearance_ConstantAngleClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantAngleClearance_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_Clearance_ConstantAngleClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantAngleClearance_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_Clearance_ConstantAngleClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantAngleClearance_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_Clearance_ConstantAngleClearance_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantAngleClearance_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_Clearance_ConstantAngleClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantAngleClearance_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_Clearance_ConstantAngleClearance_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantAngleClearance_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_Clearance_ConstantAngleClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::iterator

        erase(Physics_Interactions_Clearance_ConstantAngleClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantAngleClearance_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_Clearance_ConstantAngleClearance_Vector self) -> Physics_Interactions_Clearance_ConstantAngleClearance_Vector
        __init__(Physics_Interactions_Clearance_ConstantAngleClearance_Vector self, Physics_Interactions_Clearance_ConstantAngleClearance_Vector other) -> Physics_Interactions_Clearance_ConstantAngleClearance_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > > const &

        __init__(Physics_Interactions_Clearance_ConstantAngleClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::size_type size) -> Physics_Interactions_Clearance_ConstantAngleClearance_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::size_type

        __init__(Physics_Interactions_Clearance_ConstantAngleClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::value_type const & value) -> Physics_Interactions_Clearance_ConstantAngleClearance_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_Clearance_ConstantAngleClearance_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Clearance_ConstantAngleClearance_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_Clearance_ConstantAngleClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantAngleClearance_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_Clearance_ConstantAngleClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantAngleClearance_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_Clearance_ConstantAngleClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantAngleClearance_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_Clearance_ConstantAngleClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantAngleClearance_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_Clearance_ConstantAngleClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::size_type

        resize(Physics_Interactions_Clearance_ConstantAngleClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantAngleClearance_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_Clearance_ConstantAngleClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::value_type const &

        insert(Physics_Interactions_Clearance_ConstantAngleClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantAngleClearance_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_Clearance_ConstantAngleClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantAngleClearance_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_Clearance_ConstantAngleClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantAngleClearance > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantAngleClearance_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Clearance_ConstantAngleClearance_Vector

# Register Physics_Interactions_Clearance_ConstantAngleClearance_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Clearance_ConstantAngleClearance_Vector_swigregister(Physics_Interactions_Clearance_ConstantAngleClearance_Vector)

class Physics_Interactions_Clearance_ConstantDistanceClearance_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_Clearance_ConstantDistanceClearance_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantDistanceClearance_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_Clearance_ConstantDistanceClearance_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantDistanceClearance_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_Clearance_ConstantDistanceClearance_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantDistanceClearance_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_Clearance_ConstantDistanceClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantDistanceClearance_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_Clearance_ConstantDistanceClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::difference_type j) -> Physics_Interactions_Clearance_ConstantDistanceClearance_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantDistanceClearance_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_Clearance_ConstantDistanceClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::difference_type

        __setslice__(Physics_Interactions_Clearance_ConstantDistanceClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::difference_type j, Physics_Interactions_Clearance_ConstantDistanceClearance_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantDistanceClearance_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_Clearance_ConstantDistanceClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantDistanceClearance_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_Clearance_ConstantDistanceClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::difference_type

        __delitem__(Physics_Interactions_Clearance_ConstantDistanceClearance_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantDistanceClearance_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_Clearance_ConstantDistanceClearance_Vector self, PySliceObject * slice) -> Physics_Interactions_Clearance_ConstantDistanceClearance_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_Clearance_ConstantDistanceClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantDistanceClearance_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_Clearance_ConstantDistanceClearance_Vector self, PySliceObject * slice, Physics_Interactions_Clearance_ConstantDistanceClearance_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > > > const &

        __setitem__(Physics_Interactions_Clearance_ConstantDistanceClearance_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_Clearance_ConstantDistanceClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantDistanceClearance_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_Clearance_ConstantDistanceClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantDistanceClearance_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_Clearance_ConstantDistanceClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantDistanceClearance_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_Clearance_ConstantDistanceClearance_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantDistanceClearance_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_Clearance_ConstantDistanceClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantDistanceClearance_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_Clearance_ConstantDistanceClearance_Vector self, Physics_Interactions_Clearance_ConstantDistanceClearance_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > > &

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantDistanceClearance_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_Clearance_ConstantDistanceClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantDistanceClearance_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_Clearance_ConstantDistanceClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantDistanceClearance_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_Clearance_ConstantDistanceClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantDistanceClearance_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_Clearance_ConstantDistanceClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantDistanceClearance_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_Clearance_ConstantDistanceClearance_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantDistanceClearance_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_Clearance_ConstantDistanceClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantDistanceClearance_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_Clearance_ConstantDistanceClearance_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantDistanceClearance_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_Clearance_ConstantDistanceClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::iterator

        erase(Physics_Interactions_Clearance_ConstantDistanceClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantDistanceClearance_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_Clearance_ConstantDistanceClearance_Vector self) -> Physics_Interactions_Clearance_ConstantDistanceClearance_Vector
        __init__(Physics_Interactions_Clearance_ConstantDistanceClearance_Vector self, Physics_Interactions_Clearance_ConstantDistanceClearance_Vector other) -> Physics_Interactions_Clearance_ConstantDistanceClearance_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > > const &

        __init__(Physics_Interactions_Clearance_ConstantDistanceClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::size_type size) -> Physics_Interactions_Clearance_ConstantDistanceClearance_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::size_type

        __init__(Physics_Interactions_Clearance_ConstantDistanceClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::value_type const & value) -> Physics_Interactions_Clearance_ConstantDistanceClearance_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_Clearance_ConstantDistanceClearance_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Clearance_ConstantDistanceClearance_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_Clearance_ConstantDistanceClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantDistanceClearance_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_Clearance_ConstantDistanceClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantDistanceClearance_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_Clearance_ConstantDistanceClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantDistanceClearance_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_Clearance_ConstantDistanceClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantDistanceClearance_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_Clearance_ConstantDistanceClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::size_type

        resize(Physics_Interactions_Clearance_ConstantDistanceClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantDistanceClearance_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_Clearance_ConstantDistanceClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::value_type const &

        insert(Physics_Interactions_Clearance_ConstantDistanceClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantDistanceClearance_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_Clearance_ConstantDistanceClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantDistanceClearance_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_Clearance_ConstantDistanceClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::ConstantDistanceClearance > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantDistanceClearance_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Clearance_ConstantDistanceClearance_Vector

# Register Physics_Interactions_Clearance_ConstantDistanceClearance_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Clearance_ConstantDistanceClearance_Vector_swigregister(Physics_Interactions_Clearance_ConstantDistanceClearance_Vector)

class Physics_Interactions_Clearance_DefaultClearance_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_Clearance_DefaultClearance_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_Clearance_DefaultClearance_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_Clearance_DefaultClearance_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Clearance_DefaultClearance_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_Clearance_DefaultClearance_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Clearance_DefaultClearance_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_Clearance_DefaultClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Clearance_DefaultClearance_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_Clearance_DefaultClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::difference_type j) -> Physics_Interactions_Clearance_DefaultClearance_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_DefaultClearance_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_Clearance_DefaultClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::difference_type

        __setslice__(Physics_Interactions_Clearance_DefaultClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::difference_type j, Physics_Interactions_Clearance_DefaultClearance_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_DefaultClearance_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_Clearance_DefaultClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_DefaultClearance_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_Clearance_DefaultClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::difference_type

        __delitem__(Physics_Interactions_Clearance_DefaultClearance_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_DefaultClearance_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_Clearance_DefaultClearance_Vector self, PySliceObject * slice) -> Physics_Interactions_Clearance_DefaultClearance_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_Clearance_DefaultClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_DefaultClearance_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_Clearance_DefaultClearance_Vector self, PySliceObject * slice, Physics_Interactions_Clearance_DefaultClearance_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > > > const &

        __setitem__(Physics_Interactions_Clearance_DefaultClearance_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_Clearance_DefaultClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_DefaultClearance_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_Clearance_DefaultClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_Clearance_DefaultClearance_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_Clearance_DefaultClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_DefaultClearance_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_Clearance_DefaultClearance_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Clearance_DefaultClearance_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_Clearance_DefaultClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Clearance_DefaultClearance_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_Clearance_DefaultClearance_Vector self, Physics_Interactions_Clearance_DefaultClearance_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > > &

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_DefaultClearance_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_Clearance_DefaultClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Clearance_DefaultClearance_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_Clearance_DefaultClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Clearance_DefaultClearance_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_Clearance_DefaultClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Clearance_DefaultClearance_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_Clearance_DefaultClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Clearance_DefaultClearance_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_Clearance_DefaultClearance_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Clearance_DefaultClearance_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_Clearance_DefaultClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_Clearance_DefaultClearance_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_Clearance_DefaultClearance_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Clearance_DefaultClearance_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_Clearance_DefaultClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::iterator

        erase(Physics_Interactions_Clearance_DefaultClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_DefaultClearance_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_Clearance_DefaultClearance_Vector self) -> Physics_Interactions_Clearance_DefaultClearance_Vector
        __init__(Physics_Interactions_Clearance_DefaultClearance_Vector self, Physics_Interactions_Clearance_DefaultClearance_Vector other) -> Physics_Interactions_Clearance_DefaultClearance_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > > const &

        __init__(Physics_Interactions_Clearance_DefaultClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::size_type size) -> Physics_Interactions_Clearance_DefaultClearance_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::size_type

        __init__(Physics_Interactions_Clearance_DefaultClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::value_type const & value) -> Physics_Interactions_Clearance_DefaultClearance_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_Clearance_DefaultClearance_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Clearance_DefaultClearance_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_Clearance_DefaultClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_DefaultClearance_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_Clearance_DefaultClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Clearance_DefaultClearance_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_Clearance_DefaultClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Clearance_DefaultClearance_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_Clearance_DefaultClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_DefaultClearance_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_Clearance_DefaultClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::size_type

        resize(Physics_Interactions_Clearance_DefaultClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_DefaultClearance_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_Clearance_DefaultClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::value_type const &

        insert(Physics_Interactions_Clearance_DefaultClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_DefaultClearance_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_Clearance_DefaultClearance_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_DefaultClearance_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_Clearance_DefaultClearance_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Clearance_DefaultClearance_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Clearance_DefaultClearance_Vector

# Register Physics_Interactions_Clearance_DefaultClearance_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Clearance_DefaultClearance_Vector_swigregister(Physics_Interactions_Clearance_DefaultClearance_Vector)

class Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::difference_type j) -> Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::difference_type

        __setslice__(Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::difference_type j, Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::difference_type

        __delitem__(Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector self, PySliceObject * slice) -> Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector self, PySliceObject * slice, Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > > > const &

        __setitem__(Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector self, Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > > &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::iterator

        erase(Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector self) -> Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector
        __init__(Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector self, Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector other) -> Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > > const &

        __init__(Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::size_type size) -> Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::size_type

        __init__(Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::value_type const & value) -> Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::size_type

        resize(Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::value_type const &

        insert(Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector

# Register Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector_swigregister(Physics_Interactions_Dissipation_AsymmetricLimitFriction_Vector)

class Physics_Interactions_Dissipation_ConstantLimitFriction_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_Dissipation_ConstantLimitFriction_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantLimitFriction_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_Dissipation_ConstantLimitFriction_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantLimitFriction_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_Dissipation_ConstantLimitFriction_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantLimitFriction_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_Dissipation_ConstantLimitFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantLimitFriction_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_Dissipation_ConstantLimitFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::difference_type j) -> Physics_Interactions_Dissipation_ConstantLimitFriction_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantLimitFriction_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_Dissipation_ConstantLimitFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::difference_type

        __setslice__(Physics_Interactions_Dissipation_ConstantLimitFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::difference_type j, Physics_Interactions_Dissipation_ConstantLimitFriction_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantLimitFriction_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_Dissipation_ConstantLimitFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantLimitFriction_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_Dissipation_ConstantLimitFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::difference_type

        __delitem__(Physics_Interactions_Dissipation_ConstantLimitFriction_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantLimitFriction_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_Dissipation_ConstantLimitFriction_Vector self, PySliceObject * slice) -> Physics_Interactions_Dissipation_ConstantLimitFriction_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_Dissipation_ConstantLimitFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantLimitFriction_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_Dissipation_ConstantLimitFriction_Vector self, PySliceObject * slice, Physics_Interactions_Dissipation_ConstantLimitFriction_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > > > const &

        __setitem__(Physics_Interactions_Dissipation_ConstantLimitFriction_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_Dissipation_ConstantLimitFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantLimitFriction_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_Dissipation_ConstantLimitFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantLimitFriction_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_Dissipation_ConstantLimitFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantLimitFriction_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_Dissipation_ConstantLimitFriction_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantLimitFriction_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_Dissipation_ConstantLimitFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantLimitFriction_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_Dissipation_ConstantLimitFriction_Vector self, Physics_Interactions_Dissipation_ConstantLimitFriction_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > > &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantLimitFriction_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_Dissipation_ConstantLimitFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantLimitFriction_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_Dissipation_ConstantLimitFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantLimitFriction_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_Dissipation_ConstantLimitFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantLimitFriction_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_Dissipation_ConstantLimitFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantLimitFriction_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_Dissipation_ConstantLimitFriction_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantLimitFriction_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_Dissipation_ConstantLimitFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantLimitFriction_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_Dissipation_ConstantLimitFriction_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantLimitFriction_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_Dissipation_ConstantLimitFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::iterator

        erase(Physics_Interactions_Dissipation_ConstantLimitFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantLimitFriction_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_Dissipation_ConstantLimitFriction_Vector self) -> Physics_Interactions_Dissipation_ConstantLimitFriction_Vector
        __init__(Physics_Interactions_Dissipation_ConstantLimitFriction_Vector self, Physics_Interactions_Dissipation_ConstantLimitFriction_Vector other) -> Physics_Interactions_Dissipation_ConstantLimitFriction_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > > const &

        __init__(Physics_Interactions_Dissipation_ConstantLimitFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::size_type size) -> Physics_Interactions_Dissipation_ConstantLimitFriction_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::size_type

        __init__(Physics_Interactions_Dissipation_ConstantLimitFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::value_type const & value) -> Physics_Interactions_Dissipation_ConstantLimitFriction_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_Dissipation_ConstantLimitFriction_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Dissipation_ConstantLimitFriction_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_Dissipation_ConstantLimitFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantLimitFriction_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_Dissipation_ConstantLimitFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantLimitFriction_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_Dissipation_ConstantLimitFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantLimitFriction_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_Dissipation_ConstantLimitFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantLimitFriction_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_Dissipation_ConstantLimitFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::size_type

        resize(Physics_Interactions_Dissipation_ConstantLimitFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantLimitFriction_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_Dissipation_ConstantLimitFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::value_type const &

        insert(Physics_Interactions_Dissipation_ConstantLimitFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantLimitFriction_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_Dissipation_ConstantLimitFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantLimitFriction_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_Dissipation_ConstantLimitFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantLimitFriction > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantLimitFriction_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Dissipation_ConstantLimitFriction_Vector

# Register Physics_Interactions_Dissipation_ConstantLimitFriction_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Dissipation_ConstantLimitFriction_Vector_swigregister(Physics_Interactions_Dissipation_ConstantLimitFriction_Vector)

class Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::difference_type j) -> Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::difference_type

        __setslice__(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::difference_type j, Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::difference_type

        __delitem__(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector self, PySliceObject * slice) -> Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector self, PySliceObject * slice, Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > > > const &

        __setitem__(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector self, Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > > &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::iterator

        erase(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector self) -> Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector
        __init__(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector self, Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector other) -> Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > > const &

        __init__(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::size_type size) -> Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::size_type

        __init__(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::value_type const & value) -> Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::size_type

        resize(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::value_type const &

        insert(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector

# Register Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector_swigregister(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_Vector)

class Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::difference_type j) -> Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::difference_type

        __setslice__(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::difference_type j, Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::difference_type

        __delitem__(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector self, PySliceObject * slice) -> Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector self, PySliceObject * slice, Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > > > const &

        __setitem__(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector self, Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > > &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::iterator

        erase(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector self) -> Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector
        __init__(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector self, Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector other) -> Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > > const &

        __init__(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::size_type size) -> Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::size_type

        __init__(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::value_type const & value) -> Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::size_type

        resize(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::value_type const &

        insert(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector

# Register Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector_swigregister(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_Vector)

class Physics_Interactions_Dissipation_DefaultDissipation_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_Dissipation_DefaultDissipation_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDissipation_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_Dissipation_DefaultDissipation_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDissipation_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_Dissipation_DefaultDissipation_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDissipation_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_Dissipation_DefaultDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDissipation_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_Dissipation_DefaultDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::difference_type j) -> Physics_Interactions_Dissipation_DefaultDissipation_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDissipation_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_Dissipation_DefaultDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::difference_type

        __setslice__(Physics_Interactions_Dissipation_DefaultDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::difference_type j, Physics_Interactions_Dissipation_DefaultDissipation_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDissipation_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_Dissipation_DefaultDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDissipation_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_Dissipation_DefaultDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::difference_type

        __delitem__(Physics_Interactions_Dissipation_DefaultDissipation_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDissipation_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_Dissipation_DefaultDissipation_Vector self, PySliceObject * slice) -> Physics_Interactions_Dissipation_DefaultDissipation_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_Dissipation_DefaultDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDissipation_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_Dissipation_DefaultDissipation_Vector self, PySliceObject * slice, Physics_Interactions_Dissipation_DefaultDissipation_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > > > const &

        __setitem__(Physics_Interactions_Dissipation_DefaultDissipation_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_Dissipation_DefaultDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDissipation_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_Dissipation_DefaultDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDissipation_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_Dissipation_DefaultDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDissipation_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_Dissipation_DefaultDissipation_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDissipation_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_Dissipation_DefaultDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDissipation_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_Dissipation_DefaultDissipation_Vector self, Physics_Interactions_Dissipation_DefaultDissipation_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > > &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDissipation_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_Dissipation_DefaultDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDissipation_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_Dissipation_DefaultDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDissipation_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_Dissipation_DefaultDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDissipation_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_Dissipation_DefaultDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDissipation_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_Dissipation_DefaultDissipation_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDissipation_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_Dissipation_DefaultDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDissipation_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_Dissipation_DefaultDissipation_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDissipation_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_Dissipation_DefaultDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::iterator

        erase(Physics_Interactions_Dissipation_DefaultDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDissipation_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_Dissipation_DefaultDissipation_Vector self) -> Physics_Interactions_Dissipation_DefaultDissipation_Vector
        __init__(Physics_Interactions_Dissipation_DefaultDissipation_Vector self, Physics_Interactions_Dissipation_DefaultDissipation_Vector other) -> Physics_Interactions_Dissipation_DefaultDissipation_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > > const &

        __init__(Physics_Interactions_Dissipation_DefaultDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::size_type size) -> Physics_Interactions_Dissipation_DefaultDissipation_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::size_type

        __init__(Physics_Interactions_Dissipation_DefaultDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::value_type const & value) -> Physics_Interactions_Dissipation_DefaultDissipation_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDissipation_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Dissipation_DefaultDissipation_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_Dissipation_DefaultDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDissipation_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_Dissipation_DefaultDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDissipation_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_Dissipation_DefaultDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDissipation_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_Dissipation_DefaultDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDissipation_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_Dissipation_DefaultDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::size_type

        resize(Physics_Interactions_Dissipation_DefaultDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDissipation_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_Dissipation_DefaultDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::value_type const &

        insert(Physics_Interactions_Dissipation_DefaultDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDissipation_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_Dissipation_DefaultDissipation_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDissipation_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_Dissipation_DefaultDissipation_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDissipation_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Dissipation_DefaultDissipation_Vector

# Register Physics_Interactions_Dissipation_DefaultDissipation_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Dissipation_DefaultDissipation_Vector_swigregister(Physics_Interactions_Dissipation_DefaultDissipation_Vector)

class Physics_Interactions_Dissipation_DefaultDryFriction_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_Dissipation_DefaultDryFriction_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDryFriction_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_Dissipation_DefaultDryFriction_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDryFriction_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_Dissipation_DefaultDryFriction_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDryFriction_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_Dissipation_DefaultDryFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDryFriction_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_Dissipation_DefaultDryFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::difference_type j) -> Physics_Interactions_Dissipation_DefaultDryFriction_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDryFriction_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_Dissipation_DefaultDryFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::difference_type

        __setslice__(Physics_Interactions_Dissipation_DefaultDryFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::difference_type j, Physics_Interactions_Dissipation_DefaultDryFriction_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDryFriction_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_Dissipation_DefaultDryFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDryFriction_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_Dissipation_DefaultDryFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::difference_type

        __delitem__(Physics_Interactions_Dissipation_DefaultDryFriction_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDryFriction_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_Dissipation_DefaultDryFriction_Vector self, PySliceObject * slice) -> Physics_Interactions_Dissipation_DefaultDryFriction_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_Dissipation_DefaultDryFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDryFriction_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_Dissipation_DefaultDryFriction_Vector self, PySliceObject * slice, Physics_Interactions_Dissipation_DefaultDryFriction_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > > > const &

        __setitem__(Physics_Interactions_Dissipation_DefaultDryFriction_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_Dissipation_DefaultDryFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDryFriction_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_Dissipation_DefaultDryFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDryFriction_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_Dissipation_DefaultDryFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDryFriction_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_Dissipation_DefaultDryFriction_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDryFriction_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_Dissipation_DefaultDryFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDryFriction_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_Dissipation_DefaultDryFriction_Vector self, Physics_Interactions_Dissipation_DefaultDryFriction_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > > &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDryFriction_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_Dissipation_DefaultDryFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDryFriction_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_Dissipation_DefaultDryFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDryFriction_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_Dissipation_DefaultDryFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDryFriction_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_Dissipation_DefaultDryFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDryFriction_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_Dissipation_DefaultDryFriction_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDryFriction_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_Dissipation_DefaultDryFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDryFriction_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_Dissipation_DefaultDryFriction_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDryFriction_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_Dissipation_DefaultDryFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::iterator

        erase(Physics_Interactions_Dissipation_DefaultDryFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDryFriction_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_Dissipation_DefaultDryFriction_Vector self) -> Physics_Interactions_Dissipation_DefaultDryFriction_Vector
        __init__(Physics_Interactions_Dissipation_DefaultDryFriction_Vector self, Physics_Interactions_Dissipation_DefaultDryFriction_Vector other) -> Physics_Interactions_Dissipation_DefaultDryFriction_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > > const &

        __init__(Physics_Interactions_Dissipation_DefaultDryFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::size_type size) -> Physics_Interactions_Dissipation_DefaultDryFriction_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::size_type

        __init__(Physics_Interactions_Dissipation_DefaultDryFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::value_type const & value) -> Physics_Interactions_Dissipation_DefaultDryFriction_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDryFriction_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Dissipation_DefaultDryFriction_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_Dissipation_DefaultDryFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDryFriction_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_Dissipation_DefaultDryFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDryFriction_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_Dissipation_DefaultDryFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDryFriction_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_Dissipation_DefaultDryFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDryFriction_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_Dissipation_DefaultDryFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::size_type

        resize(Physics_Interactions_Dissipation_DefaultDryFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDryFriction_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_Dissipation_DefaultDryFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::value_type const &

        insert(Physics_Interactions_Dissipation_DefaultDryFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDryFriction_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_Dissipation_DefaultDryFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDryFriction_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_Dissipation_DefaultDryFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDryFriction > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDryFriction_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Dissipation_DefaultDryFriction_Vector

# Register Physics_Interactions_Dissipation_DefaultDryFriction_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Dissipation_DefaultDryFriction_Vector_swigregister(Physics_Interactions_Dissipation_DefaultDryFriction_Vector)

class Physics_Interactions_Dissipation_DefaultFriction_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_Dissipation_DefaultFriction_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultFriction_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_Dissipation_DefaultFriction_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultFriction_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_Dissipation_DefaultFriction_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultFriction_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_Dissipation_DefaultFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultFriction_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_Dissipation_DefaultFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::difference_type j) -> Physics_Interactions_Dissipation_DefaultFriction_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultFriction_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_Dissipation_DefaultFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::difference_type

        __setslice__(Physics_Interactions_Dissipation_DefaultFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::difference_type j, Physics_Interactions_Dissipation_DefaultFriction_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultFriction_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_Dissipation_DefaultFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultFriction_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_Dissipation_DefaultFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::difference_type

        __delitem__(Physics_Interactions_Dissipation_DefaultFriction_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultFriction_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_Dissipation_DefaultFriction_Vector self, PySliceObject * slice) -> Physics_Interactions_Dissipation_DefaultFriction_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_Dissipation_DefaultFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultFriction_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_Dissipation_DefaultFriction_Vector self, PySliceObject * slice, Physics_Interactions_Dissipation_DefaultFriction_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > > > const &

        __setitem__(Physics_Interactions_Dissipation_DefaultFriction_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_Dissipation_DefaultFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultFriction_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_Dissipation_DefaultFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultFriction_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_Dissipation_DefaultFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultFriction_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_Dissipation_DefaultFriction_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultFriction_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_Dissipation_DefaultFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultFriction_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_Dissipation_DefaultFriction_Vector self, Physics_Interactions_Dissipation_DefaultFriction_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > > &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultFriction_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_Dissipation_DefaultFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultFriction_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_Dissipation_DefaultFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultFriction_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_Dissipation_DefaultFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultFriction_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_Dissipation_DefaultFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultFriction_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_Dissipation_DefaultFriction_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultFriction_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_Dissipation_DefaultFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultFriction_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_Dissipation_DefaultFriction_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultFriction_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_Dissipation_DefaultFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::iterator

        erase(Physics_Interactions_Dissipation_DefaultFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultFriction_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_Dissipation_DefaultFriction_Vector self) -> Physics_Interactions_Dissipation_DefaultFriction_Vector
        __init__(Physics_Interactions_Dissipation_DefaultFriction_Vector self, Physics_Interactions_Dissipation_DefaultFriction_Vector other) -> Physics_Interactions_Dissipation_DefaultFriction_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > > const &

        __init__(Physics_Interactions_Dissipation_DefaultFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::size_type size) -> Physics_Interactions_Dissipation_DefaultFriction_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::size_type

        __init__(Physics_Interactions_Dissipation_DefaultFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::value_type const & value) -> Physics_Interactions_Dissipation_DefaultFriction_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_Dissipation_DefaultFriction_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Dissipation_DefaultFriction_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_Dissipation_DefaultFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultFriction_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_Dissipation_DefaultFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultFriction_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_Dissipation_DefaultFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultFriction_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_Dissipation_DefaultFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultFriction_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_Dissipation_DefaultFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::size_type

        resize(Physics_Interactions_Dissipation_DefaultFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultFriction_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_Dissipation_DefaultFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::value_type const &

        insert(Physics_Interactions_Dissipation_DefaultFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultFriction_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_Dissipation_DefaultFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultFriction_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_Dissipation_DefaultFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultFriction_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Dissipation_DefaultFriction_Vector

# Register Physics_Interactions_Dissipation_DefaultFriction_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Dissipation_DefaultFriction_Vector_swigregister(Physics_Interactions_Dissipation_DefaultFriction_Vector)

class Physics_Interactions_Dissipation_DryBoxFriction_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_Dissipation_DryBoxFriction_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryBoxFriction_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_Dissipation_DryBoxFriction_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryBoxFriction_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_Dissipation_DryBoxFriction_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryBoxFriction_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_Dissipation_DryBoxFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryBoxFriction_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_Dissipation_DryBoxFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::difference_type j) -> Physics_Interactions_Dissipation_DryBoxFriction_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryBoxFriction_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_Dissipation_DryBoxFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::difference_type

        __setslice__(Physics_Interactions_Dissipation_DryBoxFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::difference_type j, Physics_Interactions_Dissipation_DryBoxFriction_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryBoxFriction_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_Dissipation_DryBoxFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryBoxFriction_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_Dissipation_DryBoxFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::difference_type

        __delitem__(Physics_Interactions_Dissipation_DryBoxFriction_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryBoxFriction_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_Dissipation_DryBoxFriction_Vector self, PySliceObject * slice) -> Physics_Interactions_Dissipation_DryBoxFriction_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_Dissipation_DryBoxFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryBoxFriction_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_Dissipation_DryBoxFriction_Vector self, PySliceObject * slice, Physics_Interactions_Dissipation_DryBoxFriction_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > > > const &

        __setitem__(Physics_Interactions_Dissipation_DryBoxFriction_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_Dissipation_DryBoxFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryBoxFriction_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_Dissipation_DryBoxFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryBoxFriction_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_Dissipation_DryBoxFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryBoxFriction_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_Dissipation_DryBoxFriction_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryBoxFriction_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_Dissipation_DryBoxFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryBoxFriction_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_Dissipation_DryBoxFriction_Vector self, Physics_Interactions_Dissipation_DryBoxFriction_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > > &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryBoxFriction_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_Dissipation_DryBoxFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryBoxFriction_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_Dissipation_DryBoxFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryBoxFriction_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_Dissipation_DryBoxFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryBoxFriction_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_Dissipation_DryBoxFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryBoxFriction_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_Dissipation_DryBoxFriction_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryBoxFriction_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_Dissipation_DryBoxFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryBoxFriction_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_Dissipation_DryBoxFriction_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryBoxFriction_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_Dissipation_DryBoxFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::iterator

        erase(Physics_Interactions_Dissipation_DryBoxFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryBoxFriction_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_Dissipation_DryBoxFriction_Vector self) -> Physics_Interactions_Dissipation_DryBoxFriction_Vector
        __init__(Physics_Interactions_Dissipation_DryBoxFriction_Vector self, Physics_Interactions_Dissipation_DryBoxFriction_Vector other) -> Physics_Interactions_Dissipation_DryBoxFriction_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > > const &

        __init__(Physics_Interactions_Dissipation_DryBoxFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::size_type size) -> Physics_Interactions_Dissipation_DryBoxFriction_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::size_type

        __init__(Physics_Interactions_Dissipation_DryBoxFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::value_type const & value) -> Physics_Interactions_Dissipation_DryBoxFriction_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_Dissipation_DryBoxFriction_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Dissipation_DryBoxFriction_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_Dissipation_DryBoxFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryBoxFriction_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_Dissipation_DryBoxFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryBoxFriction_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_Dissipation_DryBoxFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryBoxFriction_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_Dissipation_DryBoxFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryBoxFriction_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_Dissipation_DryBoxFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::size_type

        resize(Physics_Interactions_Dissipation_DryBoxFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryBoxFriction_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_Dissipation_DryBoxFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::value_type const &

        insert(Physics_Interactions_Dissipation_DryBoxFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryBoxFriction_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_Dissipation_DryBoxFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryBoxFriction_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_Dissipation_DryBoxFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryBoxFriction > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryBoxFriction_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Dissipation_DryBoxFriction_Vector

# Register Physics_Interactions_Dissipation_DryBoxFriction_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Dissipation_DryBoxFriction_Vector_swigregister(Physics_Interactions_Dissipation_DryBoxFriction_Vector)

class Physics_Interactions_Dissipation_DryConeFriction_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_Dissipation_DryConeFriction_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConeFriction_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_Dissipation_DryConeFriction_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConeFriction_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_Dissipation_DryConeFriction_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConeFriction_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_Dissipation_DryConeFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConeFriction_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_Dissipation_DryConeFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::difference_type j) -> Physics_Interactions_Dissipation_DryConeFriction_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConeFriction_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_Dissipation_DryConeFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::difference_type

        __setslice__(Physics_Interactions_Dissipation_DryConeFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::difference_type j, Physics_Interactions_Dissipation_DryConeFriction_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConeFriction_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_Dissipation_DryConeFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConeFriction_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_Dissipation_DryConeFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::difference_type

        __delitem__(Physics_Interactions_Dissipation_DryConeFriction_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConeFriction_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_Dissipation_DryConeFriction_Vector self, PySliceObject * slice) -> Physics_Interactions_Dissipation_DryConeFriction_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_Dissipation_DryConeFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConeFriction_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_Dissipation_DryConeFriction_Vector self, PySliceObject * slice, Physics_Interactions_Dissipation_DryConeFriction_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > > > const &

        __setitem__(Physics_Interactions_Dissipation_DryConeFriction_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_Dissipation_DryConeFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConeFriction_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_Dissipation_DryConeFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConeFriction_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_Dissipation_DryConeFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConeFriction_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_Dissipation_DryConeFriction_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConeFriction_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_Dissipation_DryConeFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConeFriction_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_Dissipation_DryConeFriction_Vector self, Physics_Interactions_Dissipation_DryConeFriction_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > > &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConeFriction_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_Dissipation_DryConeFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConeFriction_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_Dissipation_DryConeFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConeFriction_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_Dissipation_DryConeFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConeFriction_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_Dissipation_DryConeFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConeFriction_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_Dissipation_DryConeFriction_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConeFriction_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_Dissipation_DryConeFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConeFriction_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_Dissipation_DryConeFriction_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConeFriction_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_Dissipation_DryConeFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::iterator

        erase(Physics_Interactions_Dissipation_DryConeFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConeFriction_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_Dissipation_DryConeFriction_Vector self) -> Physics_Interactions_Dissipation_DryConeFriction_Vector
        __init__(Physics_Interactions_Dissipation_DryConeFriction_Vector self, Physics_Interactions_Dissipation_DryConeFriction_Vector other) -> Physics_Interactions_Dissipation_DryConeFriction_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > > const &

        __init__(Physics_Interactions_Dissipation_DryConeFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::size_type size) -> Physics_Interactions_Dissipation_DryConeFriction_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::size_type

        __init__(Physics_Interactions_Dissipation_DryConeFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::value_type const & value) -> Physics_Interactions_Dissipation_DryConeFriction_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_Dissipation_DryConeFriction_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Dissipation_DryConeFriction_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_Dissipation_DryConeFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConeFriction_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_Dissipation_DryConeFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConeFriction_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_Dissipation_DryConeFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConeFriction_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_Dissipation_DryConeFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConeFriction_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_Dissipation_DryConeFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::size_type

        resize(Physics_Interactions_Dissipation_DryConeFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConeFriction_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_Dissipation_DryConeFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::value_type const &

        insert(Physics_Interactions_Dissipation_DryConeFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConeFriction_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_Dissipation_DryConeFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConeFriction_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_Dissipation_DryConeFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConeFriction > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConeFriction_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Dissipation_DryConeFriction_Vector

# Register Physics_Interactions_Dissipation_DryConeFriction_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Dissipation_DryConeFriction_Vector_swigregister(Physics_Interactions_Dissipation_DryConeFriction_Vector)

class Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::difference_type j) -> Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::difference_type

        __setslice__(Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::difference_type j, Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::difference_type

        __delitem__(Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector self, PySliceObject * slice) -> Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector self, PySliceObject * slice, Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > > > const &

        __setitem__(Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector self, Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > > &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::iterator

        erase(Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector self) -> Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector
        __init__(Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector self, Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector other) -> Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > > const &

        __init__(Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::size_type size) -> Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::size_type

        __init__(Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::value_type const & value) -> Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::size_type

        resize(Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::value_type const &

        insert(Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector

# Register Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector_swigregister(Physics_Interactions_Dissipation_DryConstantNormalForceFriction_Vector)

class Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::difference_type j) -> Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::difference_type

        __setslice__(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::difference_type j, Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::difference_type

        __delitem__(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector self, PySliceObject * slice) -> Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector self, PySliceObject * slice, Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > > > const &

        __setitem__(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector self, Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > > &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::iterator

        erase(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector self) -> Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector
        __init__(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector self, Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector other) -> Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > > const &

        __init__(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::size_type size) -> Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::size_type

        __init__(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::value_type const & value) -> Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::size_type

        resize(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::value_type const &

        insert(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector

# Register Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector_swigregister(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_Vector)

class Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::difference_type j) -> Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::difference_type

        __setslice__(Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::difference_type j, Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::difference_type

        __delitem__(Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector self, PySliceObject * slice) -> Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector self, PySliceObject * slice, Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > > > const &

        __setitem__(Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector self, Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > > &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::iterator

        erase(Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector self) -> Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector
        __init__(Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector self, Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector other) -> Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > > const &

        __init__(Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::size_type size) -> Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::size_type

        __init__(Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::value_type const & value) -> Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::size_type

        resize(Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::value_type const &

        insert(Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector

# Register Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector_swigregister(Physics_Interactions_Dissipation_DryScaleBoxFriction_Vector)

class Physics_Interactions_Dissipation_MechanicalDamping_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_Dissipation_MechanicalDamping_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_MechanicalDamping_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_Dissipation_MechanicalDamping_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_MechanicalDamping_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_Dissipation_MechanicalDamping_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_MechanicalDamping_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_Dissipation_MechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_MechanicalDamping_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_Dissipation_MechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::difference_type j) -> Physics_Interactions_Dissipation_MechanicalDamping_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_MechanicalDamping_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_Dissipation_MechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::difference_type

        __setslice__(Physics_Interactions_Dissipation_MechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::difference_type j, Physics_Interactions_Dissipation_MechanicalDamping_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_MechanicalDamping_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_Dissipation_MechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_MechanicalDamping_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_Dissipation_MechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::difference_type

        __delitem__(Physics_Interactions_Dissipation_MechanicalDamping_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_MechanicalDamping_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_Dissipation_MechanicalDamping_Vector self, PySliceObject * slice) -> Physics_Interactions_Dissipation_MechanicalDamping_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_Dissipation_MechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_MechanicalDamping_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_Dissipation_MechanicalDamping_Vector self, PySliceObject * slice, Physics_Interactions_Dissipation_MechanicalDamping_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > > > const &

        __setitem__(Physics_Interactions_Dissipation_MechanicalDamping_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_Dissipation_MechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_MechanicalDamping_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_Dissipation_MechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_MechanicalDamping_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_Dissipation_MechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_MechanicalDamping_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_Dissipation_MechanicalDamping_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_MechanicalDamping_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_Dissipation_MechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_MechanicalDamping_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_Dissipation_MechanicalDamping_Vector self, Physics_Interactions_Dissipation_MechanicalDamping_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > > &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_MechanicalDamping_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_Dissipation_MechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_MechanicalDamping_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_Dissipation_MechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_MechanicalDamping_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_Dissipation_MechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_MechanicalDamping_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_Dissipation_MechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_MechanicalDamping_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_Dissipation_MechanicalDamping_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_MechanicalDamping_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_Dissipation_MechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_MechanicalDamping_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_Dissipation_MechanicalDamping_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_MechanicalDamping_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_Dissipation_MechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::iterator

        erase(Physics_Interactions_Dissipation_MechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_MechanicalDamping_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_Dissipation_MechanicalDamping_Vector self) -> Physics_Interactions_Dissipation_MechanicalDamping_Vector
        __init__(Physics_Interactions_Dissipation_MechanicalDamping_Vector self, Physics_Interactions_Dissipation_MechanicalDamping_Vector other) -> Physics_Interactions_Dissipation_MechanicalDamping_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > > const &

        __init__(Physics_Interactions_Dissipation_MechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::size_type size) -> Physics_Interactions_Dissipation_MechanicalDamping_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::size_type

        __init__(Physics_Interactions_Dissipation_MechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::value_type const & value) -> Physics_Interactions_Dissipation_MechanicalDamping_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_Dissipation_MechanicalDamping_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Dissipation_MechanicalDamping_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_Dissipation_MechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_MechanicalDamping_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_Dissipation_MechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_MechanicalDamping_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_Dissipation_MechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_MechanicalDamping_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_Dissipation_MechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_MechanicalDamping_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_Dissipation_MechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::size_type

        resize(Physics_Interactions_Dissipation_MechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_MechanicalDamping_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_Dissipation_MechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::value_type const &

        insert(Physics_Interactions_Dissipation_MechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_MechanicalDamping_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_Dissipation_MechanicalDamping_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_MechanicalDamping_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_Dissipation_MechanicalDamping_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Dissipation::MechanicalDamping > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_MechanicalDamping_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Dissipation_MechanicalDamping_Vector

# Register Physics_Interactions_Dissipation_MechanicalDamping_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Dissipation_MechanicalDamping_Vector_swigregister(Physics_Interactions_Dissipation_MechanicalDamping_Vector)

class Physics_Interactions_Flexibility_DefaultFlexibility_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_Flexibility_DefaultFlexibility_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_DefaultFlexibility_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_Flexibility_DefaultFlexibility_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_DefaultFlexibility_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_Flexibility_DefaultFlexibility_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_DefaultFlexibility_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_Flexibility_DefaultFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_DefaultFlexibility_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_Flexibility_DefaultFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::difference_type j) -> Physics_Interactions_Flexibility_DefaultFlexibility_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_DefaultFlexibility_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_Flexibility_DefaultFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::difference_type

        __setslice__(Physics_Interactions_Flexibility_DefaultFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::difference_type j, Physics_Interactions_Flexibility_DefaultFlexibility_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_DefaultFlexibility_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_Flexibility_DefaultFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_DefaultFlexibility_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_Flexibility_DefaultFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::difference_type

        __delitem__(Physics_Interactions_Flexibility_DefaultFlexibility_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_DefaultFlexibility_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_Flexibility_DefaultFlexibility_Vector self, PySliceObject * slice) -> Physics_Interactions_Flexibility_DefaultFlexibility_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_Flexibility_DefaultFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_DefaultFlexibility_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_Flexibility_DefaultFlexibility_Vector self, PySliceObject * slice, Physics_Interactions_Flexibility_DefaultFlexibility_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > > > const &

        __setitem__(Physics_Interactions_Flexibility_DefaultFlexibility_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_Flexibility_DefaultFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_DefaultFlexibility_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_Flexibility_DefaultFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_DefaultFlexibility_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_Flexibility_DefaultFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_DefaultFlexibility_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_Flexibility_DefaultFlexibility_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_DefaultFlexibility_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_Flexibility_DefaultFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_DefaultFlexibility_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_Flexibility_DefaultFlexibility_Vector self, Physics_Interactions_Flexibility_DefaultFlexibility_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > > &

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_DefaultFlexibility_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_Flexibility_DefaultFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_DefaultFlexibility_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_Flexibility_DefaultFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_DefaultFlexibility_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_Flexibility_DefaultFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_DefaultFlexibility_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_Flexibility_DefaultFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_DefaultFlexibility_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_Flexibility_DefaultFlexibility_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_DefaultFlexibility_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_Flexibility_DefaultFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_DefaultFlexibility_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_Flexibility_DefaultFlexibility_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_DefaultFlexibility_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_Flexibility_DefaultFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::iterator

        erase(Physics_Interactions_Flexibility_DefaultFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_DefaultFlexibility_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_Flexibility_DefaultFlexibility_Vector self) -> Physics_Interactions_Flexibility_DefaultFlexibility_Vector
        __init__(Physics_Interactions_Flexibility_DefaultFlexibility_Vector self, Physics_Interactions_Flexibility_DefaultFlexibility_Vector other) -> Physics_Interactions_Flexibility_DefaultFlexibility_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > > const &

        __init__(Physics_Interactions_Flexibility_DefaultFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::size_type size) -> Physics_Interactions_Flexibility_DefaultFlexibility_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::size_type

        __init__(Physics_Interactions_Flexibility_DefaultFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::value_type const & value) -> Physics_Interactions_Flexibility_DefaultFlexibility_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_Flexibility_DefaultFlexibility_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Flexibility_DefaultFlexibility_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_Flexibility_DefaultFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_DefaultFlexibility_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_Flexibility_DefaultFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_DefaultFlexibility_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_Flexibility_DefaultFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_DefaultFlexibility_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_Flexibility_DefaultFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_DefaultFlexibility_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_Flexibility_DefaultFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::size_type

        resize(Physics_Interactions_Flexibility_DefaultFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_DefaultFlexibility_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_Flexibility_DefaultFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::value_type const &

        insert(Physics_Interactions_Flexibility_DefaultFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_DefaultFlexibility_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_Flexibility_DefaultFlexibility_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_DefaultFlexibility_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_Flexibility_DefaultFlexibility_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_DefaultFlexibility_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Flexibility_DefaultFlexibility_Vector

# Register Physics_Interactions_Flexibility_DefaultFlexibility_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Flexibility_DefaultFlexibility_Vector_swigregister(Physics_Interactions_Flexibility_DefaultFlexibility_Vector)

class Physics_Interactions_Flexibility_LinearElastic_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_Flexibility_LinearElastic_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_LinearElastic_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_Flexibility_LinearElastic_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_LinearElastic_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_Flexibility_LinearElastic_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_LinearElastic_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_Flexibility_LinearElastic_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_LinearElastic_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_Flexibility_LinearElastic_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::difference_type j) -> Physics_Interactions_Flexibility_LinearElastic_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_LinearElastic_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_Flexibility_LinearElastic_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::difference_type

        __setslice__(Physics_Interactions_Flexibility_LinearElastic_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::difference_type j, Physics_Interactions_Flexibility_LinearElastic_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_LinearElastic_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_Flexibility_LinearElastic_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_LinearElastic_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_Flexibility_LinearElastic_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::difference_type

        __delitem__(Physics_Interactions_Flexibility_LinearElastic_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_LinearElastic_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_Flexibility_LinearElastic_Vector self, PySliceObject * slice) -> Physics_Interactions_Flexibility_LinearElastic_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_Flexibility_LinearElastic_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_LinearElastic_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_Flexibility_LinearElastic_Vector self, PySliceObject * slice, Physics_Interactions_Flexibility_LinearElastic_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > > > const &

        __setitem__(Physics_Interactions_Flexibility_LinearElastic_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_Flexibility_LinearElastic_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_LinearElastic_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_Flexibility_LinearElastic_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_LinearElastic_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_Flexibility_LinearElastic_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_LinearElastic_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_Flexibility_LinearElastic_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_LinearElastic_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_Flexibility_LinearElastic_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_LinearElastic_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_Flexibility_LinearElastic_Vector self, Physics_Interactions_Flexibility_LinearElastic_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > > &

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_LinearElastic_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_Flexibility_LinearElastic_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_LinearElastic_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_Flexibility_LinearElastic_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_LinearElastic_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_Flexibility_LinearElastic_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_LinearElastic_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_Flexibility_LinearElastic_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_LinearElastic_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_Flexibility_LinearElastic_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_LinearElastic_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_Flexibility_LinearElastic_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_LinearElastic_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_Flexibility_LinearElastic_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_LinearElastic_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_Flexibility_LinearElastic_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::iterator

        erase(Physics_Interactions_Flexibility_LinearElastic_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_LinearElastic_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_Flexibility_LinearElastic_Vector self) -> Physics_Interactions_Flexibility_LinearElastic_Vector
        __init__(Physics_Interactions_Flexibility_LinearElastic_Vector self, Physics_Interactions_Flexibility_LinearElastic_Vector other) -> Physics_Interactions_Flexibility_LinearElastic_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > > const &

        __init__(Physics_Interactions_Flexibility_LinearElastic_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::size_type size) -> Physics_Interactions_Flexibility_LinearElastic_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::size_type

        __init__(Physics_Interactions_Flexibility_LinearElastic_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::value_type const & value) -> Physics_Interactions_Flexibility_LinearElastic_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_Flexibility_LinearElastic_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Flexibility_LinearElastic_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_Flexibility_LinearElastic_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_LinearElastic_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_Flexibility_LinearElastic_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_LinearElastic_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_Flexibility_LinearElastic_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_LinearElastic_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_Flexibility_LinearElastic_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_LinearElastic_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_Flexibility_LinearElastic_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::size_type

        resize(Physics_Interactions_Flexibility_LinearElastic_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_LinearElastic_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_Flexibility_LinearElastic_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::value_type const &

        insert(Physics_Interactions_Flexibility_LinearElastic_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_LinearElastic_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_Flexibility_LinearElastic_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_LinearElastic_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_Flexibility_LinearElastic_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_LinearElastic_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Flexibility_LinearElastic_Vector

# Register Physics_Interactions_Flexibility_LinearElastic_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Flexibility_LinearElastic_Vector_swigregister(Physics_Interactions_Flexibility_LinearElastic_Vector)

class Physics_Interactions_Flexibility_Rigid_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_Flexibility_Rigid_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_Rigid_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_Flexibility_Rigid_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_Rigid_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_Flexibility_Rigid_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_Rigid_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_Flexibility_Rigid_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_Rigid_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_Flexibility_Rigid_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::difference_type j) -> Physics_Interactions_Flexibility_Rigid_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_Rigid_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_Flexibility_Rigid_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::difference_type

        __setslice__(Physics_Interactions_Flexibility_Rigid_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::difference_type j, Physics_Interactions_Flexibility_Rigid_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_Rigid_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_Flexibility_Rigid_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_Rigid_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_Flexibility_Rigid_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::difference_type

        __delitem__(Physics_Interactions_Flexibility_Rigid_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_Rigid_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_Flexibility_Rigid_Vector self, PySliceObject * slice) -> Physics_Interactions_Flexibility_Rigid_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_Flexibility_Rigid_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_Rigid_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_Flexibility_Rigid_Vector self, PySliceObject * slice, Physics_Interactions_Flexibility_Rigid_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > > > const &

        __setitem__(Physics_Interactions_Flexibility_Rigid_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_Flexibility_Rigid_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_Rigid_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_Flexibility_Rigid_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_Rigid_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_Flexibility_Rigid_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_Rigid_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_Flexibility_Rigid_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_Rigid_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_Flexibility_Rigid_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_Rigid_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_Flexibility_Rigid_Vector self, Physics_Interactions_Flexibility_Rigid_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > > &

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_Rigid_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_Flexibility_Rigid_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_Rigid_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_Flexibility_Rigid_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_Rigid_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_Flexibility_Rigid_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_Rigid_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_Flexibility_Rigid_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_Rigid_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_Flexibility_Rigid_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_Rigid_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_Flexibility_Rigid_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_Rigid_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_Flexibility_Rigid_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_Rigid_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_Flexibility_Rigid_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::iterator

        erase(Physics_Interactions_Flexibility_Rigid_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_Rigid_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_Flexibility_Rigid_Vector self) -> Physics_Interactions_Flexibility_Rigid_Vector
        __init__(Physics_Interactions_Flexibility_Rigid_Vector self, Physics_Interactions_Flexibility_Rigid_Vector other) -> Physics_Interactions_Flexibility_Rigid_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > > const &

        __init__(Physics_Interactions_Flexibility_Rigid_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::size_type size) -> Physics_Interactions_Flexibility_Rigid_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::size_type

        __init__(Physics_Interactions_Flexibility_Rigid_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::value_type const & value) -> Physics_Interactions_Flexibility_Rigid_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_Flexibility_Rigid_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Flexibility_Rigid_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_Flexibility_Rigid_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_Rigid_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_Flexibility_Rigid_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_Rigid_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_Flexibility_Rigid_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_Rigid_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_Flexibility_Rigid_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_Rigid_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_Flexibility_Rigid_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::size_type

        resize(Physics_Interactions_Flexibility_Rigid_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_Rigid_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_Flexibility_Rigid_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::value_type const &

        insert(Physics_Interactions_Flexibility_Rigid_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_Rigid_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_Flexibility_Rigid_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_Rigid_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_Flexibility_Rigid_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Flexibility::Rigid > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_Rigid_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Flexibility_Rigid_Vector

# Register Physics_Interactions_Flexibility_Rigid_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Flexibility_Rigid_Vector_swigregister(Physics_Interactions_Flexibility_Rigid_Vector)

class Physics_Interactions_Interaction_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_Interaction_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_Interaction_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_Interaction_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_Interaction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::difference_type j) -> Physics_Interactions_Interaction_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::difference_type

        __setslice__(Physics_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::difference_type j, Physics_Interactions_Interaction_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Interaction > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::difference_type

        __delitem__(Physics_Interactions_Interaction_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_Interaction_Vector self, PySliceObject * slice) -> Physics_Interactions_Interaction_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_Interaction_Vector self, PySliceObject * slice, Physics_Interactions_Interaction_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Interaction > > > const &

        __setitem__(Physics_Interactions_Interaction_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_Interaction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_Interaction_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_Interaction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_Interaction_Vector self, Physics_Interactions_Interaction_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > > &

        """
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_Interaction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_Interaction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_Interaction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_Interaction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_Interaction_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_Interaction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_Interaction_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::iterator

        erase(Physics_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_Interaction_Vector self) -> Physics_Interactions_Interaction_Vector
        __init__(Physics_Interactions_Interaction_Vector self, Physics_Interactions_Interaction_Vector other) -> Physics_Interactions_Interaction_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > > const &

        __init__(Physics_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::size_type size) -> Physics_Interactions_Interaction_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::size_type

        __init__(Physics_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::value_type const & value) -> Physics_Interactions_Interaction_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_Interaction_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Interaction_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_Interaction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_Interaction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::size_type

        resize(Physics_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::value_type const &

        insert(Physics_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_Interaction_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Interaction_Vector

# Register Physics_Interactions_Interaction_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Interaction_Vector_swigregister(Physics_Interactions_Interaction_Vector)

class Physics_Interactions_Interaction1DOF_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_Interaction1DOF_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_Interaction1DOF_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_Interaction1DOF_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Interaction1DOF_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_Interaction1DOF_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Interaction1DOF_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_Interaction1DOF_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Interaction1DOF_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_Interaction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::difference_type j) -> Physics_Interactions_Interaction1DOF_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Interaction1DOF_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_Interaction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::difference_type

        __setslice__(Physics_Interactions_Interaction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::difference_type j, Physics_Interactions_Interaction1DOF_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Interaction1DOF_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_Interaction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Interaction1DOF_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_Interaction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::difference_type

        __delitem__(Physics_Interactions_Interaction1DOF_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_Interaction1DOF_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_Interaction1DOF_Vector self, PySliceObject * slice) -> Physics_Interactions_Interaction1DOF_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_Interaction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Interaction1DOF_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_Interaction1DOF_Vector self, PySliceObject * slice, Physics_Interactions_Interaction1DOF_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > > > const &

        __setitem__(Physics_Interactions_Interaction1DOF_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_Interaction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Interaction1DOF_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_Interaction1DOF_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_Interaction1DOF_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_Interaction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Interaction1DOF_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_Interaction1DOF_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Interaction1DOF_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_Interaction1DOF_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Interaction1DOF_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_Interaction1DOF_Vector self, Physics_Interactions_Interaction1DOF_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > > &

        """
        return _PhysicsSwig.Physics_Interactions_Interaction1DOF_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_Interaction1DOF_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Interaction1DOF_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_Interaction1DOF_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Interaction1DOF_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_Interaction1DOF_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Interaction1DOF_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_Interaction1DOF_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Interaction1DOF_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_Interaction1DOF_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Interaction1DOF_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_Interaction1DOF_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_Interaction1DOF_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_Interaction1DOF_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Interaction1DOF_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_Interaction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::iterator

        erase(Physics_Interactions_Interaction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_Interaction1DOF_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_Interaction1DOF_Vector self) -> Physics_Interactions_Interaction1DOF_Vector
        __init__(Physics_Interactions_Interaction1DOF_Vector self, Physics_Interactions_Interaction1DOF_Vector other) -> Physics_Interactions_Interaction1DOF_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > > const &

        __init__(Physics_Interactions_Interaction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::size_type size) -> Physics_Interactions_Interaction1DOF_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::size_type

        __init__(Physics_Interactions_Interaction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::value_type const & value) -> Physics_Interactions_Interaction1DOF_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_Interaction1DOF_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Interaction1DOF_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_Interaction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Interaction1DOF_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_Interaction1DOF_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Interaction1DOF_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_Interaction1DOF_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Interaction1DOF_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_Interaction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Interaction1DOF_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_Interaction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::size_type

        resize(Physics_Interactions_Interaction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Interaction1DOF_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_Interaction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::value_type const &

        insert(Physics_Interactions_Interaction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Interaction1DOF_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_Interaction1DOF_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_Interaction1DOF_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_Interaction1DOF_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Interaction1DOF > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Interaction1DOF_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Interaction1DOF_Vector

# Register Physics_Interactions_Interaction1DOF_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Interaction1DOF_Vector_swigregister(Physics_Interactions_Interaction1DOF_Vector)

class Physics_Interactions_SurfaceContact_Model_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_SurfaceContact_Model_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_SurfaceContact_Model_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_SurfaceContact_Model_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_SurfaceContact_Model_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_SurfaceContact_Model_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::difference_type j) -> Physics_Interactions_SurfaceContact_Model_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_SurfaceContact_Model_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::difference_type

        __setslice__(Physics_Interactions_SurfaceContact_Model_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::difference_type j, Physics_Interactions_SurfaceContact_Model_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_SurfaceContact_Model_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_SurfaceContact_Model_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::difference_type

        __delitem__(Physics_Interactions_SurfaceContact_Model_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_SurfaceContact_Model_Vector self, PySliceObject * slice) -> Physics_Interactions_SurfaceContact_Model_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_SurfaceContact_Model_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_SurfaceContact_Model_Vector self, PySliceObject * slice, Physics_Interactions_SurfaceContact_Model_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > > > const &

        __setitem__(Physics_Interactions_SurfaceContact_Model_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_SurfaceContact_Model_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_SurfaceContact_Model_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_SurfaceContact_Model_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_SurfaceContact_Model_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_SurfaceContact_Model_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_SurfaceContact_Model_Vector self, Physics_Interactions_SurfaceContact_Model_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > > &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_SurfaceContact_Model_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_SurfaceContact_Model_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_SurfaceContact_Model_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_SurfaceContact_Model_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_SurfaceContact_Model_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_SurfaceContact_Model_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_SurfaceContact_Model_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_SurfaceContact_Model_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::iterator

        erase(Physics_Interactions_SurfaceContact_Model_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_SurfaceContact_Model_Vector self) -> Physics_Interactions_SurfaceContact_Model_Vector
        __init__(Physics_Interactions_SurfaceContact_Model_Vector self, Physics_Interactions_SurfaceContact_Model_Vector other) -> Physics_Interactions_SurfaceContact_Model_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > > const &

        __init__(Physics_Interactions_SurfaceContact_Model_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::size_type size) -> Physics_Interactions_SurfaceContact_Model_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::size_type

        __init__(Physics_Interactions_SurfaceContact_Model_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::value_type const & value) -> Physics_Interactions_SurfaceContact_Model_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_SurfaceContact_Model_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_SurfaceContact_Model_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_SurfaceContact_Model_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_SurfaceContact_Model_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_SurfaceContact_Model_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_SurfaceContact_Model_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::size_type

        resize(Physics_Interactions_SurfaceContact_Model_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_SurfaceContact_Model_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::value_type const &

        insert(Physics_Interactions_SurfaceContact_Model_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_SurfaceContact_Model_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_SurfaceContact_Model_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::Model > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_SurfaceContact_Model_Vector

# Register Physics_Interactions_SurfaceContact_Model_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_swigregister(Physics_Interactions_SurfaceContact_Model_Vector)

class Physics_Interactions_SurfaceContact_PatchElasticity_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_SurfaceContact_PatchElasticity_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PatchElasticity_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_SurfaceContact_PatchElasticity_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PatchElasticity_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_SurfaceContact_PatchElasticity_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PatchElasticity_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_SurfaceContact_PatchElasticity_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PatchElasticity_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_SurfaceContact_PatchElasticity_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::difference_type j) -> Physics_Interactions_SurfaceContact_PatchElasticity_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PatchElasticity_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_SurfaceContact_PatchElasticity_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::difference_type

        __setslice__(Physics_Interactions_SurfaceContact_PatchElasticity_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::difference_type j, Physics_Interactions_SurfaceContact_PatchElasticity_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PatchElasticity_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_SurfaceContact_PatchElasticity_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PatchElasticity_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_SurfaceContact_PatchElasticity_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::difference_type

        __delitem__(Physics_Interactions_SurfaceContact_PatchElasticity_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PatchElasticity_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_SurfaceContact_PatchElasticity_Vector self, PySliceObject * slice) -> Physics_Interactions_SurfaceContact_PatchElasticity_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_SurfaceContact_PatchElasticity_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PatchElasticity_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_SurfaceContact_PatchElasticity_Vector self, PySliceObject * slice, Physics_Interactions_SurfaceContact_PatchElasticity_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > > > const &

        __setitem__(Physics_Interactions_SurfaceContact_PatchElasticity_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_SurfaceContact_PatchElasticity_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PatchElasticity_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_SurfaceContact_PatchElasticity_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PatchElasticity_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_SurfaceContact_PatchElasticity_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PatchElasticity_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_SurfaceContact_PatchElasticity_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PatchElasticity_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_SurfaceContact_PatchElasticity_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PatchElasticity_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_SurfaceContact_PatchElasticity_Vector self, Physics_Interactions_SurfaceContact_PatchElasticity_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > > &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PatchElasticity_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_SurfaceContact_PatchElasticity_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PatchElasticity_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_SurfaceContact_PatchElasticity_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PatchElasticity_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_SurfaceContact_PatchElasticity_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PatchElasticity_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_SurfaceContact_PatchElasticity_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PatchElasticity_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_SurfaceContact_PatchElasticity_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PatchElasticity_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_SurfaceContact_PatchElasticity_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PatchElasticity_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_SurfaceContact_PatchElasticity_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PatchElasticity_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_SurfaceContact_PatchElasticity_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::iterator

        erase(Physics_Interactions_SurfaceContact_PatchElasticity_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PatchElasticity_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_SurfaceContact_PatchElasticity_Vector self) -> Physics_Interactions_SurfaceContact_PatchElasticity_Vector
        __init__(Physics_Interactions_SurfaceContact_PatchElasticity_Vector self, Physics_Interactions_SurfaceContact_PatchElasticity_Vector other) -> Physics_Interactions_SurfaceContact_PatchElasticity_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > > const &

        __init__(Physics_Interactions_SurfaceContact_PatchElasticity_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::size_type size) -> Physics_Interactions_SurfaceContact_PatchElasticity_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::size_type

        __init__(Physics_Interactions_SurfaceContact_PatchElasticity_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::value_type const & value) -> Physics_Interactions_SurfaceContact_PatchElasticity_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_SurfaceContact_PatchElasticity_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_SurfaceContact_PatchElasticity_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_SurfaceContact_PatchElasticity_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PatchElasticity_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_SurfaceContact_PatchElasticity_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PatchElasticity_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_SurfaceContact_PatchElasticity_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PatchElasticity_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_SurfaceContact_PatchElasticity_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PatchElasticity_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_SurfaceContact_PatchElasticity_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::size_type

        resize(Physics_Interactions_SurfaceContact_PatchElasticity_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PatchElasticity_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_SurfaceContact_PatchElasticity_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::value_type const &

        insert(Physics_Interactions_SurfaceContact_PatchElasticity_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PatchElasticity_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_SurfaceContact_PatchElasticity_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PatchElasticity_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_SurfaceContact_PatchElasticity_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PatchElasticity > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PatchElasticity_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_SurfaceContact_PatchElasticity_Vector

# Register Physics_Interactions_SurfaceContact_PatchElasticity_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_SurfaceContact_PatchElasticity_Vector_swigregister(Physics_Interactions_SurfaceContact_PatchElasticity_Vector)

class Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::difference_type j) -> Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::difference_type

        __setslice__(Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::difference_type j, Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::difference_type

        __delitem__(Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector self, PySliceObject * slice) -> Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector self, PySliceObject * slice, Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > > > const &

        __setitem__(Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector self, Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > > &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::iterator

        erase(Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector self) -> Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector
        __init__(Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector self, Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector other) -> Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > > const &

        __init__(Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::size_type size) -> Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::size_type

        __init__(Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::value_type const & value) -> Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::size_type

        resize(Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::value_type const &

        insert(Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector

# Register Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector_swigregister(Physics_Interactions_SurfaceContact_PointwiseElasticity_Vector)

class Physics_Interactions_Toughness_DefaultToughness_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_Toughness_DefaultToughness_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_Toughness_DefaultToughness_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_Toughness_DefaultToughness_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Toughness_DefaultToughness_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_Toughness_DefaultToughness_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Toughness_DefaultToughness_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_Toughness_DefaultToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Toughness_DefaultToughness_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_Toughness_DefaultToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::difference_type j) -> Physics_Interactions_Toughness_DefaultToughness_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_DefaultToughness_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_Toughness_DefaultToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::difference_type

        __setslice__(Physics_Interactions_Toughness_DefaultToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::difference_type j, Physics_Interactions_Toughness_DefaultToughness_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_DefaultToughness_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_Toughness_DefaultToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_DefaultToughness_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_Toughness_DefaultToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::difference_type

        __delitem__(Physics_Interactions_Toughness_DefaultToughness_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_DefaultToughness_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_Toughness_DefaultToughness_Vector self, PySliceObject * slice) -> Physics_Interactions_Toughness_DefaultToughness_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_Toughness_DefaultToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_DefaultToughness_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_Toughness_DefaultToughness_Vector self, PySliceObject * slice, Physics_Interactions_Toughness_DefaultToughness_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > > > const &

        __setitem__(Physics_Interactions_Toughness_DefaultToughness_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_Toughness_DefaultToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_DefaultToughness_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_Toughness_DefaultToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_Toughness_DefaultToughness_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_Toughness_DefaultToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_DefaultToughness_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_Toughness_DefaultToughness_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Toughness_DefaultToughness_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_Toughness_DefaultToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Toughness_DefaultToughness_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_Toughness_DefaultToughness_Vector self, Physics_Interactions_Toughness_DefaultToughness_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > > &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_DefaultToughness_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_Toughness_DefaultToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Toughness_DefaultToughness_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_Toughness_DefaultToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Toughness_DefaultToughness_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_Toughness_DefaultToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Toughness_DefaultToughness_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_Toughness_DefaultToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Toughness_DefaultToughness_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_Toughness_DefaultToughness_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Toughness_DefaultToughness_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_Toughness_DefaultToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_Toughness_DefaultToughness_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_Toughness_DefaultToughness_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Toughness_DefaultToughness_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_Toughness_DefaultToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::iterator

        erase(Physics_Interactions_Toughness_DefaultToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_DefaultToughness_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_Toughness_DefaultToughness_Vector self) -> Physics_Interactions_Toughness_DefaultToughness_Vector
        __init__(Physics_Interactions_Toughness_DefaultToughness_Vector self, Physics_Interactions_Toughness_DefaultToughness_Vector other) -> Physics_Interactions_Toughness_DefaultToughness_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > > const &

        __init__(Physics_Interactions_Toughness_DefaultToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::size_type size) -> Physics_Interactions_Toughness_DefaultToughness_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::size_type

        __init__(Physics_Interactions_Toughness_DefaultToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::value_type const & value) -> Physics_Interactions_Toughness_DefaultToughness_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_Toughness_DefaultToughness_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Toughness_DefaultToughness_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_Toughness_DefaultToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_DefaultToughness_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_Toughness_DefaultToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Toughness_DefaultToughness_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_Toughness_DefaultToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Toughness_DefaultToughness_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_Toughness_DefaultToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_DefaultToughness_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_Toughness_DefaultToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::size_type

        resize(Physics_Interactions_Toughness_DefaultToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_DefaultToughness_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_Toughness_DefaultToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::value_type const &

        insert(Physics_Interactions_Toughness_DefaultToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_DefaultToughness_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_Toughness_DefaultToughness_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_DefaultToughness_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_Toughness_DefaultToughness_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::DefaultToughness > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Toughness_DefaultToughness_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Toughness_DefaultToughness_Vector

# Register Physics_Interactions_Toughness_DefaultToughness_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Toughness_DefaultToughness_Vector_swigregister(Physics_Interactions_Toughness_DefaultToughness_Vector)

class Physics_Interactions_Toughness_ThresholdFracture_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_Toughness_ThresholdFracture_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdFracture_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_Toughness_ThresholdFracture_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdFracture_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_Toughness_ThresholdFracture_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdFracture_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_Toughness_ThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdFracture_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_Toughness_ThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::difference_type j) -> Physics_Interactions_Toughness_ThresholdFracture_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdFracture_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_Toughness_ThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::difference_type

        __setslice__(Physics_Interactions_Toughness_ThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::difference_type j, Physics_Interactions_Toughness_ThresholdFracture_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdFracture_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_Toughness_ThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdFracture_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_Toughness_ThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::difference_type

        __delitem__(Physics_Interactions_Toughness_ThresholdFracture_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdFracture_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_Toughness_ThresholdFracture_Vector self, PySliceObject * slice) -> Physics_Interactions_Toughness_ThresholdFracture_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_Toughness_ThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdFracture_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_Toughness_ThresholdFracture_Vector self, PySliceObject * slice, Physics_Interactions_Toughness_ThresholdFracture_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > > > const &

        __setitem__(Physics_Interactions_Toughness_ThresholdFracture_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_Toughness_ThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdFracture_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_Toughness_ThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdFracture_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_Toughness_ThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdFracture_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_Toughness_ThresholdFracture_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdFracture_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_Toughness_ThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdFracture_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_Toughness_ThresholdFracture_Vector self, Physics_Interactions_Toughness_ThresholdFracture_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > > &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdFracture_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_Toughness_ThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdFracture_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_Toughness_ThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdFracture_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_Toughness_ThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdFracture_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_Toughness_ThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdFracture_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_Toughness_ThresholdFracture_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdFracture_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_Toughness_ThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdFracture_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_Toughness_ThresholdFracture_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdFracture_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_Toughness_ThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::iterator

        erase(Physics_Interactions_Toughness_ThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdFracture_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_Toughness_ThresholdFracture_Vector self) -> Physics_Interactions_Toughness_ThresholdFracture_Vector
        __init__(Physics_Interactions_Toughness_ThresholdFracture_Vector self, Physics_Interactions_Toughness_ThresholdFracture_Vector other) -> Physics_Interactions_Toughness_ThresholdFracture_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > > const &

        __init__(Physics_Interactions_Toughness_ThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::size_type size) -> Physics_Interactions_Toughness_ThresholdFracture_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::size_type

        __init__(Physics_Interactions_Toughness_ThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::value_type const & value) -> Physics_Interactions_Toughness_ThresholdFracture_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_Toughness_ThresholdFracture_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Toughness_ThresholdFracture_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_Toughness_ThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdFracture_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_Toughness_ThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdFracture_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_Toughness_ThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdFracture_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_Toughness_ThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdFracture_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_Toughness_ThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::size_type

        resize(Physics_Interactions_Toughness_ThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdFracture_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_Toughness_ThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::value_type const &

        insert(Physics_Interactions_Toughness_ThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdFracture_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_Toughness_ThresholdFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdFracture_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_Toughness_ThresholdFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdFracture > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdFracture_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Toughness_ThresholdFracture_Vector

# Register Physics_Interactions_Toughness_ThresholdFracture_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Toughness_ThresholdFracture_Vector_swigregister(Physics_Interactions_Toughness_ThresholdFracture_Vector)

class Physics_Interactions_Toughness_ThresholdPlastic_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_Toughness_ThresholdPlastic_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlastic_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_Toughness_ThresholdPlastic_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlastic_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_Toughness_ThresholdPlastic_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlastic_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_Toughness_ThresholdPlastic_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlastic_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_Toughness_ThresholdPlastic_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::difference_type j) -> Physics_Interactions_Toughness_ThresholdPlastic_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlastic_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_Toughness_ThresholdPlastic_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::difference_type

        __setslice__(Physics_Interactions_Toughness_ThresholdPlastic_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::difference_type j, Physics_Interactions_Toughness_ThresholdPlastic_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlastic_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_Toughness_ThresholdPlastic_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlastic_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_Toughness_ThresholdPlastic_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::difference_type

        __delitem__(Physics_Interactions_Toughness_ThresholdPlastic_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlastic_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_Toughness_ThresholdPlastic_Vector self, PySliceObject * slice) -> Physics_Interactions_Toughness_ThresholdPlastic_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_Toughness_ThresholdPlastic_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlastic_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_Toughness_ThresholdPlastic_Vector self, PySliceObject * slice, Physics_Interactions_Toughness_ThresholdPlastic_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > > > const &

        __setitem__(Physics_Interactions_Toughness_ThresholdPlastic_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_Toughness_ThresholdPlastic_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlastic_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_Toughness_ThresholdPlastic_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlastic_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_Toughness_ThresholdPlastic_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlastic_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_Toughness_ThresholdPlastic_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlastic_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_Toughness_ThresholdPlastic_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlastic_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_Toughness_ThresholdPlastic_Vector self, Physics_Interactions_Toughness_ThresholdPlastic_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > > &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlastic_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_Toughness_ThresholdPlastic_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlastic_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_Toughness_ThresholdPlastic_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlastic_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_Toughness_ThresholdPlastic_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlastic_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_Toughness_ThresholdPlastic_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlastic_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_Toughness_ThresholdPlastic_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlastic_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_Toughness_ThresholdPlastic_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlastic_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_Toughness_ThresholdPlastic_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlastic_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_Toughness_ThresholdPlastic_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::iterator

        erase(Physics_Interactions_Toughness_ThresholdPlastic_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlastic_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_Toughness_ThresholdPlastic_Vector self) -> Physics_Interactions_Toughness_ThresholdPlastic_Vector
        __init__(Physics_Interactions_Toughness_ThresholdPlastic_Vector self, Physics_Interactions_Toughness_ThresholdPlastic_Vector other) -> Physics_Interactions_Toughness_ThresholdPlastic_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > > const &

        __init__(Physics_Interactions_Toughness_ThresholdPlastic_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::size_type size) -> Physics_Interactions_Toughness_ThresholdPlastic_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::size_type

        __init__(Physics_Interactions_Toughness_ThresholdPlastic_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::value_type const & value) -> Physics_Interactions_Toughness_ThresholdPlastic_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlastic_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Toughness_ThresholdPlastic_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_Toughness_ThresholdPlastic_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlastic_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_Toughness_ThresholdPlastic_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlastic_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_Toughness_ThresholdPlastic_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlastic_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_Toughness_ThresholdPlastic_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlastic_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_Toughness_ThresholdPlastic_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::size_type

        resize(Physics_Interactions_Toughness_ThresholdPlastic_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlastic_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_Toughness_ThresholdPlastic_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::value_type const &

        insert(Physics_Interactions_Toughness_ThresholdPlastic_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlastic_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_Toughness_ThresholdPlastic_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlastic_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_Toughness_ThresholdPlastic_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlastic > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlastic_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Toughness_ThresholdPlastic_Vector

# Register Physics_Interactions_Toughness_ThresholdPlastic_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlastic_Vector_swigregister(Physics_Interactions_Toughness_ThresholdPlastic_Vector)

class Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::difference_type j) -> Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::difference_type

        __setslice__(Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::difference_type j, Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::difference_type

        __delitem__(Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector self, PySliceObject * slice) -> Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector self, PySliceObject * slice, Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > > > const &

        __setitem__(Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector self, Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > > &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::iterator

        erase(Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector self) -> Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector
        __init__(Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector self, Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector other) -> Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > > const &

        __init__(Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::size_type size) -> Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::size_type

        __init__(Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::value_type const & value) -> Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::size_type

        resize(Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::value_type const &

        insert(Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector

# Register Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector_swigregister(Physics_Interactions_Toughness_ThresholdPlasticFracture_Vector)

class Physics_Interactions_Toughness_Unbreakable_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_Toughness_Unbreakable_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_Toughness_Unbreakable_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_Toughness_Unbreakable_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Toughness_Unbreakable_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_Toughness_Unbreakable_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Toughness_Unbreakable_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_Toughness_Unbreakable_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Toughness_Unbreakable_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_Toughness_Unbreakable_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::difference_type j) -> Physics_Interactions_Toughness_Unbreakable_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_Unbreakable_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_Toughness_Unbreakable_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::difference_type

        __setslice__(Physics_Interactions_Toughness_Unbreakable_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::difference_type j, Physics_Interactions_Toughness_Unbreakable_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_Unbreakable_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_Toughness_Unbreakable_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_Unbreakable_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_Toughness_Unbreakable_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::difference_type

        __delitem__(Physics_Interactions_Toughness_Unbreakable_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_Unbreakable_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_Toughness_Unbreakable_Vector self, PySliceObject * slice) -> Physics_Interactions_Toughness_Unbreakable_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_Toughness_Unbreakable_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_Unbreakable_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_Toughness_Unbreakable_Vector self, PySliceObject * slice, Physics_Interactions_Toughness_Unbreakable_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable >,std::allocator< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > > > const &

        __setitem__(Physics_Interactions_Toughness_Unbreakable_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_Toughness_Unbreakable_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_Unbreakable_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_Toughness_Unbreakable_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_Toughness_Unbreakable_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_Toughness_Unbreakable_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_Unbreakable_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_Toughness_Unbreakable_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Toughness_Unbreakable_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_Toughness_Unbreakable_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Toughness_Unbreakable_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_Toughness_Unbreakable_Vector self, Physics_Interactions_Toughness_Unbreakable_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > > &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_Unbreakable_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_Toughness_Unbreakable_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Toughness_Unbreakable_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_Toughness_Unbreakable_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Toughness_Unbreakable_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_Toughness_Unbreakable_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Toughness_Unbreakable_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_Toughness_Unbreakable_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Toughness_Unbreakable_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_Toughness_Unbreakable_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Toughness_Unbreakable_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_Toughness_Unbreakable_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_Toughness_Unbreakable_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_Toughness_Unbreakable_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Toughness_Unbreakable_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_Toughness_Unbreakable_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::iterator

        erase(Physics_Interactions_Toughness_Unbreakable_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_Unbreakable_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_Toughness_Unbreakable_Vector self) -> Physics_Interactions_Toughness_Unbreakable_Vector
        __init__(Physics_Interactions_Toughness_Unbreakable_Vector self, Physics_Interactions_Toughness_Unbreakable_Vector other) -> Physics_Interactions_Toughness_Unbreakable_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > > const &

        __init__(Physics_Interactions_Toughness_Unbreakable_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::size_type size) -> Physics_Interactions_Toughness_Unbreakable_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::size_type

        __init__(Physics_Interactions_Toughness_Unbreakable_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::value_type const & value) -> Physics_Interactions_Toughness_Unbreakable_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_Toughness_Unbreakable_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Toughness_Unbreakable_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_Toughness_Unbreakable_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_Unbreakable_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_Toughness_Unbreakable_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Toughness_Unbreakable_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_Toughness_Unbreakable_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Toughness_Unbreakable_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_Toughness_Unbreakable_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_Unbreakable_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_Toughness_Unbreakable_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::size_type

        resize(Physics_Interactions_Toughness_Unbreakable_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_Unbreakable_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_Toughness_Unbreakable_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::value_type const &

        insert(Physics_Interactions_Toughness_Unbreakable_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_Unbreakable_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_Toughness_Unbreakable_Vector self, std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_Unbreakable_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_Toughness_Unbreakable_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Interactions::Toughness::Unbreakable > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Toughness_Unbreakable_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Toughness_Unbreakable_Vector

# Register Physics_Interactions_Toughness_Unbreakable_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Toughness_Unbreakable_Vector_swigregister(Physics_Interactions_Toughness_Unbreakable_Vector)

class Physics_KinematicLock_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::KinematicLock > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_KinematicLock_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_KinematicLock_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_KinematicLock_Vector self) -> bool"""
        return _PhysicsSwig.Physics_KinematicLock_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_KinematicLock_Vector self) -> bool"""
        return _PhysicsSwig.Physics_KinematicLock_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_KinematicLock_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::size_type"""
        return _PhysicsSwig.Physics_KinematicLock_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_KinematicLock_Vector self, std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::difference_type j) -> Physics_KinematicLock_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::difference_type

        """
        return _PhysicsSwig.Physics_KinematicLock_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_KinematicLock_Vector self, std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::difference_type

        __setslice__(Physics_KinematicLock_Vector self, std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::difference_type j, Physics_KinematicLock_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::KinematicLock >,std::allocator< std::shared_ptr< openplx::Physics::KinematicLock > > > const &

        """
        return _PhysicsSwig.Physics_KinematicLock_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_KinematicLock_Vector self, std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::difference_type

        """
        return _PhysicsSwig.Physics_KinematicLock_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_KinematicLock_Vector self, std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::difference_type

        __delitem__(Physics_KinematicLock_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_KinematicLock_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_KinematicLock_Vector self, PySliceObject * slice) -> Physics_KinematicLock_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_KinematicLock_Vector self, std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::difference_type

        """
        return _PhysicsSwig.Physics_KinematicLock_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_KinematicLock_Vector self, PySliceObject * slice, Physics_KinematicLock_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::KinematicLock >,std::allocator< std::shared_ptr< openplx::Physics::KinematicLock > > > const &

        __setitem__(Physics_KinematicLock_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_KinematicLock_Vector self, std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::value_type const &

        """
        return _PhysicsSwig.Physics_KinematicLock_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_KinematicLock_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::value_type"""
        return _PhysicsSwig.Physics_KinematicLock_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_KinematicLock_Vector self, std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::value_type const &

        """
        return _PhysicsSwig.Physics_KinematicLock_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_KinematicLock_Vector self) -> bool"""
        return _PhysicsSwig.Physics_KinematicLock_Vector_empty(self)

    def size(self):
        r"""size(Physics_KinematicLock_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::size_type"""
        return _PhysicsSwig.Physics_KinematicLock_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_KinematicLock_Vector self, Physics_KinematicLock_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::KinematicLock > > &

        """
        return _PhysicsSwig.Physics_KinematicLock_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_KinematicLock_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::iterator"""
        return _PhysicsSwig.Physics_KinematicLock_Vector_begin(self)

    def end(self):
        r"""end(Physics_KinematicLock_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::iterator"""
        return _PhysicsSwig.Physics_KinematicLock_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_KinematicLock_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::reverse_iterator"""
        return _PhysicsSwig.Physics_KinematicLock_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_KinematicLock_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::reverse_iterator"""
        return _PhysicsSwig.Physics_KinematicLock_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_KinematicLock_Vector self)"""
        return _PhysicsSwig.Physics_KinematicLock_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_KinematicLock_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::allocator_type"""
        return _PhysicsSwig.Physics_KinematicLock_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_KinematicLock_Vector self)"""
        return _PhysicsSwig.Physics_KinematicLock_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_KinematicLock_Vector self, std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::iterator

        erase(Physics_KinematicLock_Vector self, std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::iterator

        """
        return _PhysicsSwig.Physics_KinematicLock_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_KinematicLock_Vector self) -> Physics_KinematicLock_Vector
        __init__(Physics_KinematicLock_Vector self, Physics_KinematicLock_Vector other) -> Physics_KinematicLock_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::KinematicLock > > const &

        __init__(Physics_KinematicLock_Vector self, std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::size_type size) -> Physics_KinematicLock_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::size_type

        __init__(Physics_KinematicLock_Vector self, std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::value_type const & value) -> Physics_KinematicLock_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::value_type const &

        """
        _PhysicsSwig.Physics_KinematicLock_Vector_swiginit(self, _PhysicsSwig.new_Physics_KinematicLock_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_KinematicLock_Vector self, std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::value_type const &

        """
        return _PhysicsSwig.Physics_KinematicLock_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_KinematicLock_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::value_type const &"""
        return _PhysicsSwig.Physics_KinematicLock_Vector_front(self)

    def back(self):
        r"""back(Physics_KinematicLock_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::value_type const &"""
        return _PhysicsSwig.Physics_KinematicLock_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_KinematicLock_Vector self, std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::value_type const &

        """
        return _PhysicsSwig.Physics_KinematicLock_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_KinematicLock_Vector self, std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::size_type

        resize(Physics_KinematicLock_Vector self, std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::value_type const &

        """
        return _PhysicsSwig.Physics_KinematicLock_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_KinematicLock_Vector self, std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::value_type const &

        insert(Physics_KinematicLock_Vector self, std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::value_type const &

        """
        return _PhysicsSwig.Physics_KinematicLock_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_KinematicLock_Vector self, std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::size_type

        """
        return _PhysicsSwig.Physics_KinematicLock_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_KinematicLock_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::KinematicLock > >::size_type"""
        return _PhysicsSwig.Physics_KinematicLock_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_KinematicLock_Vector

# Register Physics_KinematicLock_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_KinematicLock_Vector_swigregister(Physics_KinematicLock_Vector)

class Physics_Signals_Acceleration3DValue_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_Acceleration3DValue_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_Acceleration3DValue_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_Acceleration3DValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Acceleration3DValue_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_Acceleration3DValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Acceleration3DValue_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_Acceleration3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Acceleration3DValue_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_Acceleration3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::difference_type j) -> Physics_Signals_Acceleration3DValue_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Acceleration3DValue_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_Acceleration3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::difference_type

        __setslice__(Physics_Signals_Acceleration3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::difference_type j, Physics_Signals_Acceleration3DValue_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue >,std::allocator< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > > > const &

        """
        return _PhysicsSwig.Physics_Signals_Acceleration3DValue_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_Acceleration3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Acceleration3DValue_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_Acceleration3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::difference_type

        __delitem__(Physics_Signals_Acceleration3DValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_Acceleration3DValue_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_Acceleration3DValue_Vector self, PySliceObject * slice) -> Physics_Signals_Acceleration3DValue_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_Acceleration3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Acceleration3DValue_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_Acceleration3DValue_Vector self, PySliceObject * slice, Physics_Signals_Acceleration3DValue_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue >,std::allocator< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > > > const &

        __setitem__(Physics_Signals_Acceleration3DValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_Acceleration3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Acceleration3DValue_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_Acceleration3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::value_type"""
        return _PhysicsSwig.Physics_Signals_Acceleration3DValue_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_Acceleration3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Acceleration3DValue_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_Acceleration3DValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Acceleration3DValue_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_Acceleration3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Acceleration3DValue_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_Acceleration3DValue_Vector self, Physics_Signals_Acceleration3DValue_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > > &

        """
        return _PhysicsSwig.Physics_Signals_Acceleration3DValue_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_Acceleration3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Acceleration3DValue_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_Acceleration3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Acceleration3DValue_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_Acceleration3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Acceleration3DValue_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_Acceleration3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Acceleration3DValue_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_Acceleration3DValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Acceleration3DValue_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_Acceleration3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_Acceleration3DValue_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_Acceleration3DValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Acceleration3DValue_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_Acceleration3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::iterator

        erase(Physics_Signals_Acceleration3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_Acceleration3DValue_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_Acceleration3DValue_Vector self) -> Physics_Signals_Acceleration3DValue_Vector
        __init__(Physics_Signals_Acceleration3DValue_Vector self, Physics_Signals_Acceleration3DValue_Vector other) -> Physics_Signals_Acceleration3DValue_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > > const &

        __init__(Physics_Signals_Acceleration3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::size_type size) -> Physics_Signals_Acceleration3DValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::size_type

        __init__(Physics_Signals_Acceleration3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::value_type const & value) -> Physics_Signals_Acceleration3DValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_Acceleration3DValue_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_Acceleration3DValue_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_Acceleration3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Acceleration3DValue_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_Acceleration3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Acceleration3DValue_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_Acceleration3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Acceleration3DValue_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_Acceleration3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Acceleration3DValue_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_Acceleration3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::size_type

        resize(Physics_Signals_Acceleration3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Acceleration3DValue_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_Acceleration3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::value_type const &

        insert(Physics_Signals_Acceleration3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Acceleration3DValue_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_Acceleration3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_Acceleration3DValue_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_Acceleration3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Acceleration3DValue_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_Acceleration3DValue_Vector

# Register Physics_Signals_Acceleration3DValue_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_Acceleration3DValue_Vector_swigregister(Physics_Signals_Acceleration3DValue_Vector)

class Physics_Signals_ActivateInput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_ActivateInput_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_ActivateInput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_ActivateInput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_ActivateInput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_ActivateInput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_ActivateInput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_ActivateInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_ActivateInput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_ActivateInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::difference_type j) -> Physics_Signals_ActivateInput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_ActivateInput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_ActivateInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::difference_type

        __setslice__(Physics_Signals_ActivateInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::difference_type j, Physics_Signals_ActivateInput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::ActivateInput > > > const &

        """
        return _PhysicsSwig.Physics_Signals_ActivateInput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_ActivateInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_ActivateInput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_ActivateInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::difference_type

        __delitem__(Physics_Signals_ActivateInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_ActivateInput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_ActivateInput_Vector self, PySliceObject * slice) -> Physics_Signals_ActivateInput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_ActivateInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_ActivateInput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_ActivateInput_Vector self, PySliceObject * slice, Physics_Signals_ActivateInput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::ActivateInput > > > const &

        __setitem__(Physics_Signals_ActivateInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_ActivateInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_ActivateInput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_ActivateInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::value_type"""
        return _PhysicsSwig.Physics_Signals_ActivateInput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_ActivateInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_ActivateInput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_ActivateInput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_ActivateInput_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_ActivateInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_ActivateInput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_ActivateInput_Vector self, Physics_Signals_ActivateInput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > > &

        """
        return _PhysicsSwig.Physics_Signals_ActivateInput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_ActivateInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_ActivateInput_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_ActivateInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_ActivateInput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_ActivateInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_ActivateInput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_ActivateInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_ActivateInput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_ActivateInput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_ActivateInput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_ActivateInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_ActivateInput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_ActivateInput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_ActivateInput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_ActivateInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::iterator

        erase(Physics_Signals_ActivateInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_ActivateInput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_ActivateInput_Vector self) -> Physics_Signals_ActivateInput_Vector
        __init__(Physics_Signals_ActivateInput_Vector self, Physics_Signals_ActivateInput_Vector other) -> Physics_Signals_ActivateInput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > > const &

        __init__(Physics_Signals_ActivateInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::size_type size) -> Physics_Signals_ActivateInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::size_type

        __init__(Physics_Signals_ActivateInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::value_type const & value) -> Physics_Signals_ActivateInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_ActivateInput_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_ActivateInput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_ActivateInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_ActivateInput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_ActivateInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_ActivateInput_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_ActivateInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_ActivateInput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_ActivateInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_ActivateInput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_ActivateInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::size_type

        resize(Physics_Signals_ActivateInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_ActivateInput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_ActivateInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::value_type const &

        insert(Physics_Signals_ActivateInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_ActivateInput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_ActivateInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_ActivateInput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_ActivateInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ActivateInput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_ActivateInput_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_ActivateInput_Vector

# Register Physics_Signals_ActivateInput_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_ActivateInput_Vector_swigregister(Physics_Signals_ActivateInput_Vector)

class Physics_Signals_ActivatedOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_ActivatedOutput_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_ActivatedOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_ActivatedOutput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_ActivatedOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_ActivatedOutput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_ActivatedOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_ActivatedOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_ActivatedOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_ActivatedOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::difference_type j) -> Physics_Signals_ActivatedOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_ActivatedOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_ActivatedOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::difference_type

        __setslice__(Physics_Signals_ActivatedOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::difference_type j, Physics_Signals_ActivatedOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > > > const &

        """
        return _PhysicsSwig.Physics_Signals_ActivatedOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_ActivatedOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_ActivatedOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_ActivatedOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::difference_type

        __delitem__(Physics_Signals_ActivatedOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_ActivatedOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_ActivatedOutput_Vector self, PySliceObject * slice) -> Physics_Signals_ActivatedOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_ActivatedOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_ActivatedOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_ActivatedOutput_Vector self, PySliceObject * slice, Physics_Signals_ActivatedOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > > > const &

        __setitem__(Physics_Signals_ActivatedOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_ActivatedOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_ActivatedOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_ActivatedOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::value_type"""
        return _PhysicsSwig.Physics_Signals_ActivatedOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_ActivatedOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_ActivatedOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_ActivatedOutput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_ActivatedOutput_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_ActivatedOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_ActivatedOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_ActivatedOutput_Vector self, Physics_Signals_ActivatedOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > > &

        """
        return _PhysicsSwig.Physics_Signals_ActivatedOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_ActivatedOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_ActivatedOutput_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_ActivatedOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_ActivatedOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_ActivatedOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_ActivatedOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_ActivatedOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_ActivatedOutput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_ActivatedOutput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_ActivatedOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_ActivatedOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_ActivatedOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_ActivatedOutput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_ActivatedOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_ActivatedOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::iterator

        erase(Physics_Signals_ActivatedOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_ActivatedOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_ActivatedOutput_Vector self) -> Physics_Signals_ActivatedOutput_Vector
        __init__(Physics_Signals_ActivatedOutput_Vector self, Physics_Signals_ActivatedOutput_Vector other) -> Physics_Signals_ActivatedOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > > const &

        __init__(Physics_Signals_ActivatedOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::size_type size) -> Physics_Signals_ActivatedOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::size_type

        __init__(Physics_Signals_ActivatedOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::value_type const & value) -> Physics_Signals_ActivatedOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_ActivatedOutput_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_ActivatedOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_ActivatedOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_ActivatedOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_ActivatedOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_ActivatedOutput_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_ActivatedOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_ActivatedOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_ActivatedOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_ActivatedOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_ActivatedOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::size_type

        resize(Physics_Signals_ActivatedOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_ActivatedOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_ActivatedOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::value_type const &

        insert(Physics_Signals_ActivatedOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_ActivatedOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_ActivatedOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_ActivatedOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_ActivatedOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ActivatedOutput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_ActivatedOutput_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_ActivatedOutput_Vector

# Register Physics_Signals_ActivatedOutput_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_ActivatedOutput_Vector_swigregister(Physics_Signals_ActivatedOutput_Vector)

class Physics_Signals_AngleInput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_AngleInput_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_AngleInput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_AngleInput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_AngleInput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_AngleInput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_AngleInput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_AngleInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_AngleInput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_AngleInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::difference_type j) -> Physics_Signals_AngleInput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_AngleInput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_AngleInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::difference_type

        __setslice__(Physics_Signals_AngleInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::difference_type j, Physics_Signals_AngleInput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::AngleInput > > > const &

        """
        return _PhysicsSwig.Physics_Signals_AngleInput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_AngleInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_AngleInput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_AngleInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::difference_type

        __delitem__(Physics_Signals_AngleInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_AngleInput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_AngleInput_Vector self, PySliceObject * slice) -> Physics_Signals_AngleInput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_AngleInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_AngleInput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_AngleInput_Vector self, PySliceObject * slice, Physics_Signals_AngleInput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::AngleInput > > > const &

        __setitem__(Physics_Signals_AngleInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_AngleInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngleInput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_AngleInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::value_type"""
        return _PhysicsSwig.Physics_Signals_AngleInput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_AngleInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngleInput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_AngleInput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_AngleInput_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_AngleInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_AngleInput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_AngleInput_Vector self, Physics_Signals_AngleInput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > > &

        """
        return _PhysicsSwig.Physics_Signals_AngleInput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_AngleInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_AngleInput_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_AngleInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_AngleInput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_AngleInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_AngleInput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_AngleInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_AngleInput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_AngleInput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_AngleInput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_AngleInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_AngleInput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_AngleInput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_AngleInput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_AngleInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::iterator

        erase(Physics_Signals_AngleInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_AngleInput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_AngleInput_Vector self) -> Physics_Signals_AngleInput_Vector
        __init__(Physics_Signals_AngleInput_Vector self, Physics_Signals_AngleInput_Vector other) -> Physics_Signals_AngleInput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > > const &

        __init__(Physics_Signals_AngleInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::size_type size) -> Physics_Signals_AngleInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::size_type

        __init__(Physics_Signals_AngleInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::value_type const & value) -> Physics_Signals_AngleInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_AngleInput_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_AngleInput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_AngleInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngleInput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_AngleInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_AngleInput_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_AngleInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_AngleInput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_AngleInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngleInput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_AngleInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::size_type

        resize(Physics_Signals_AngleInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngleInput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_AngleInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::value_type const &

        insert(Physics_Signals_AngleInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngleInput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_AngleInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_AngleInput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_AngleInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleInput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_AngleInput_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_AngleInput_Vector

# Register Physics_Signals_AngleInput_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_AngleInput_Vector_swigregister(Physics_Signals_AngleInput_Vector)

class Physics_Signals_AngleOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_AngleOutput_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_AngleOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_AngleOutput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_AngleOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_AngleOutput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_AngleOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_AngleOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_AngleOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_AngleOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::difference_type j) -> Physics_Signals_AngleOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_AngleOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_AngleOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::difference_type

        __setslice__(Physics_Signals_AngleOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::difference_type j, Physics_Signals_AngleOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::AngleOutput > > > const &

        """
        return _PhysicsSwig.Physics_Signals_AngleOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_AngleOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_AngleOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_AngleOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::difference_type

        __delitem__(Physics_Signals_AngleOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_AngleOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_AngleOutput_Vector self, PySliceObject * slice) -> Physics_Signals_AngleOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_AngleOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_AngleOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_AngleOutput_Vector self, PySliceObject * slice, Physics_Signals_AngleOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::AngleOutput > > > const &

        __setitem__(Physics_Signals_AngleOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_AngleOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngleOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_AngleOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::value_type"""
        return _PhysicsSwig.Physics_Signals_AngleOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_AngleOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngleOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_AngleOutput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_AngleOutput_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_AngleOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_AngleOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_AngleOutput_Vector self, Physics_Signals_AngleOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > > &

        """
        return _PhysicsSwig.Physics_Signals_AngleOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_AngleOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_AngleOutput_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_AngleOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_AngleOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_AngleOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_AngleOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_AngleOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_AngleOutput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_AngleOutput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_AngleOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_AngleOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_AngleOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_AngleOutput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_AngleOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_AngleOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::iterator

        erase(Physics_Signals_AngleOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_AngleOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_AngleOutput_Vector self) -> Physics_Signals_AngleOutput_Vector
        __init__(Physics_Signals_AngleOutput_Vector self, Physics_Signals_AngleOutput_Vector other) -> Physics_Signals_AngleOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > > const &

        __init__(Physics_Signals_AngleOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::size_type size) -> Physics_Signals_AngleOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::size_type

        __init__(Physics_Signals_AngleOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::value_type const & value) -> Physics_Signals_AngleOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_AngleOutput_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_AngleOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_AngleOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngleOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_AngleOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_AngleOutput_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_AngleOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_AngleOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_AngleOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngleOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_AngleOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::size_type

        resize(Physics_Signals_AngleOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngleOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_AngleOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::value_type const &

        insert(Physics_Signals_AngleOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngleOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_AngleOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_AngleOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_AngleOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleOutput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_AngleOutput_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_AngleOutput_Vector

# Register Physics_Signals_AngleOutput_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_AngleOutput_Vector_swigregister(Physics_Signals_AngleOutput_Vector)

class Physics_Signals_AngleValue_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_AngleValue_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_AngleValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_AngleValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_AngleValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_AngleValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::difference_type j) -> Physics_Signals_AngleValue_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_AngleValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::difference_type

        __setslice__(Physics_Signals_AngleValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::difference_type j, Physics_Signals_AngleValue_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue >,std::allocator< std::shared_ptr< openplx::Physics::Signals::AngleValue > > > const &

        """
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_AngleValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_AngleValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::difference_type

        __delitem__(Physics_Signals_AngleValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_AngleValue_Vector self, PySliceObject * slice) -> Physics_Signals_AngleValue_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_AngleValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_AngleValue_Vector self, PySliceObject * slice, Physics_Signals_AngleValue_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue >,std::allocator< std::shared_ptr< openplx::Physics::Signals::AngleValue > > > const &

        __setitem__(Physics_Signals_AngleValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_AngleValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_AngleValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::value_type"""
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_AngleValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_AngleValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_AngleValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_AngleValue_Vector self, Physics_Signals_AngleValue_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > > &

        """
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_AngleValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_AngleValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_AngleValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_AngleValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_AngleValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_AngleValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_AngleValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_AngleValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::iterator

        erase(Physics_Signals_AngleValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_AngleValue_Vector self) -> Physics_Signals_AngleValue_Vector
        __init__(Physics_Signals_AngleValue_Vector self, Physics_Signals_AngleValue_Vector other) -> Physics_Signals_AngleValue_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > > const &

        __init__(Physics_Signals_AngleValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::size_type size) -> Physics_Signals_AngleValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::size_type

        __init__(Physics_Signals_AngleValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::value_type const & value) -> Physics_Signals_AngleValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_AngleValue_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_AngleValue_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_AngleValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_AngleValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_AngleValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_AngleValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_AngleValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::size_type

        resize(Physics_Signals_AngleValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_AngleValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::value_type const &

        insert(Physics_Signals_AngleValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_AngleValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_AngleValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngleValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_AngleValue_Vector

# Register Physics_Signals_AngleValue_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_AngleValue_Vector_swigregister(Physics_Signals_AngleValue_Vector)

class Physics_Signals_AngularAcceleration3DValue_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_AngularAcceleration3DValue_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_AngularAcceleration3DValue_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_AngularAcceleration3DValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_AngularAcceleration3DValue_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_AngularAcceleration3DValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_AngularAcceleration3DValue_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_AngularAcceleration3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_AngularAcceleration3DValue_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_AngularAcceleration3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::difference_type j) -> Physics_Signals_AngularAcceleration3DValue_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_AngularAcceleration3DValue_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_AngularAcceleration3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::difference_type

        __setslice__(Physics_Signals_AngularAcceleration3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::difference_type j, Physics_Signals_AngularAcceleration3DValue_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue >,std::allocator< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > > > const &

        """
        return _PhysicsSwig.Physics_Signals_AngularAcceleration3DValue_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_AngularAcceleration3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_AngularAcceleration3DValue_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_AngularAcceleration3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::difference_type

        __delitem__(Physics_Signals_AngularAcceleration3DValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_AngularAcceleration3DValue_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_AngularAcceleration3DValue_Vector self, PySliceObject * slice) -> Physics_Signals_AngularAcceleration3DValue_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_AngularAcceleration3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_AngularAcceleration3DValue_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_AngularAcceleration3DValue_Vector self, PySliceObject * slice, Physics_Signals_AngularAcceleration3DValue_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue >,std::allocator< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > > > const &

        __setitem__(Physics_Signals_AngularAcceleration3DValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_AngularAcceleration3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngularAcceleration3DValue_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_AngularAcceleration3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::value_type"""
        return _PhysicsSwig.Physics_Signals_AngularAcceleration3DValue_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_AngularAcceleration3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngularAcceleration3DValue_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_AngularAcceleration3DValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_AngularAcceleration3DValue_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_AngularAcceleration3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_AngularAcceleration3DValue_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_AngularAcceleration3DValue_Vector self, Physics_Signals_AngularAcceleration3DValue_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > > &

        """
        return _PhysicsSwig.Physics_Signals_AngularAcceleration3DValue_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_AngularAcceleration3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_AngularAcceleration3DValue_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_AngularAcceleration3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_AngularAcceleration3DValue_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_AngularAcceleration3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_AngularAcceleration3DValue_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_AngularAcceleration3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_AngularAcceleration3DValue_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_AngularAcceleration3DValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_AngularAcceleration3DValue_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_AngularAcceleration3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_AngularAcceleration3DValue_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_AngularAcceleration3DValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_AngularAcceleration3DValue_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_AngularAcceleration3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::iterator

        erase(Physics_Signals_AngularAcceleration3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_AngularAcceleration3DValue_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_AngularAcceleration3DValue_Vector self) -> Physics_Signals_AngularAcceleration3DValue_Vector
        __init__(Physics_Signals_AngularAcceleration3DValue_Vector self, Physics_Signals_AngularAcceleration3DValue_Vector other) -> Physics_Signals_AngularAcceleration3DValue_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > > const &

        __init__(Physics_Signals_AngularAcceleration3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::size_type size) -> Physics_Signals_AngularAcceleration3DValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::size_type

        __init__(Physics_Signals_AngularAcceleration3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::value_type const & value) -> Physics_Signals_AngularAcceleration3DValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_AngularAcceleration3DValue_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_AngularAcceleration3DValue_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_AngularAcceleration3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngularAcceleration3DValue_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_AngularAcceleration3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_AngularAcceleration3DValue_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_AngularAcceleration3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_AngularAcceleration3DValue_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_AngularAcceleration3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngularAcceleration3DValue_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_AngularAcceleration3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::size_type

        resize(Physics_Signals_AngularAcceleration3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngularAcceleration3DValue_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_AngularAcceleration3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::value_type const &

        insert(Physics_Signals_AngularAcceleration3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngularAcceleration3DValue_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_AngularAcceleration3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_AngularAcceleration3DValue_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_AngularAcceleration3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_AngularAcceleration3DValue_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_AngularAcceleration3DValue_Vector

# Register Physics_Signals_AngularAcceleration3DValue_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_AngularAcceleration3DValue_Vector_swigregister(Physics_Signals_AngularAcceleration3DValue_Vector)

class Physics_Signals_AngularVelocity1DInput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_AngularVelocity1DInput_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DInput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_AngularVelocity1DInput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DInput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_AngularVelocity1DInput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DInput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_AngularVelocity1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DInput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_AngularVelocity1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::difference_type j) -> Physics_Signals_AngularVelocity1DInput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DInput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_AngularVelocity1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::difference_type

        __setslice__(Physics_Signals_AngularVelocity1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::difference_type j, Physics_Signals_AngularVelocity1DInput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > > > const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DInput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_AngularVelocity1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DInput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_AngularVelocity1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::difference_type

        __delitem__(Physics_Signals_AngularVelocity1DInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DInput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_AngularVelocity1DInput_Vector self, PySliceObject * slice) -> Physics_Signals_AngularVelocity1DInput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_AngularVelocity1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DInput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_AngularVelocity1DInput_Vector self, PySliceObject * slice, Physics_Signals_AngularVelocity1DInput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > > > const &

        __setitem__(Physics_Signals_AngularVelocity1DInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_AngularVelocity1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DInput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_AngularVelocity1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::value_type"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DInput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_AngularVelocity1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DInput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_AngularVelocity1DInput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DInput_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_AngularVelocity1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DInput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_AngularVelocity1DInput_Vector self, Physics_Signals_AngularVelocity1DInput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > > &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DInput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_AngularVelocity1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DInput_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_AngularVelocity1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DInput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_AngularVelocity1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DInput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_AngularVelocity1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DInput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_AngularVelocity1DInput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DInput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_AngularVelocity1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DInput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_AngularVelocity1DInput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DInput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_AngularVelocity1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::iterator

        erase(Physics_Signals_AngularVelocity1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DInput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_AngularVelocity1DInput_Vector self) -> Physics_Signals_AngularVelocity1DInput_Vector
        __init__(Physics_Signals_AngularVelocity1DInput_Vector self, Physics_Signals_AngularVelocity1DInput_Vector other) -> Physics_Signals_AngularVelocity1DInput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > > const &

        __init__(Physics_Signals_AngularVelocity1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::size_type size) -> Physics_Signals_AngularVelocity1DInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::size_type

        __init__(Physics_Signals_AngularVelocity1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::value_type const & value) -> Physics_Signals_AngularVelocity1DInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_AngularVelocity1DInput_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_AngularVelocity1DInput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_AngularVelocity1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DInput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_AngularVelocity1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DInput_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_AngularVelocity1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DInput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_AngularVelocity1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DInput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_AngularVelocity1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::size_type

        resize(Physics_Signals_AngularVelocity1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DInput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_AngularVelocity1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::value_type const &

        insert(Physics_Signals_AngularVelocity1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DInput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_AngularVelocity1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DInput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_AngularVelocity1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DInput_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_AngularVelocity1DInput_Vector

# Register Physics_Signals_AngularVelocity1DInput_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_AngularVelocity1DInput_Vector_swigregister(Physics_Signals_AngularVelocity1DInput_Vector)

class Physics_Signals_AngularVelocity1DOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_AngularVelocity1DOutput_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_AngularVelocity1DOutput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_AngularVelocity1DOutput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_AngularVelocity1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_AngularVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::difference_type j) -> Physics_Signals_AngularVelocity1DOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_AngularVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::difference_type

        __setslice__(Physics_Signals_AngularVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::difference_type j, Physics_Signals_AngularVelocity1DOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > > > const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_AngularVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_AngularVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::difference_type

        __delitem__(Physics_Signals_AngularVelocity1DOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_AngularVelocity1DOutput_Vector self, PySliceObject * slice) -> Physics_Signals_AngularVelocity1DOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_AngularVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_AngularVelocity1DOutput_Vector self, PySliceObject * slice, Physics_Signals_AngularVelocity1DOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > > > const &

        __setitem__(Physics_Signals_AngularVelocity1DOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_AngularVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_AngularVelocity1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::value_type"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_AngularVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_AngularVelocity1DOutput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DOutput_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_AngularVelocity1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_AngularVelocity1DOutput_Vector self, Physics_Signals_AngularVelocity1DOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > > &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_AngularVelocity1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DOutput_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_AngularVelocity1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_AngularVelocity1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_AngularVelocity1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DOutput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_AngularVelocity1DOutput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_AngularVelocity1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_AngularVelocity1DOutput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_AngularVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::iterator

        erase(Physics_Signals_AngularVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_AngularVelocity1DOutput_Vector self) -> Physics_Signals_AngularVelocity1DOutput_Vector
        __init__(Physics_Signals_AngularVelocity1DOutput_Vector self, Physics_Signals_AngularVelocity1DOutput_Vector other) -> Physics_Signals_AngularVelocity1DOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > > const &

        __init__(Physics_Signals_AngularVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::size_type size) -> Physics_Signals_AngularVelocity1DOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::size_type

        __init__(Physics_Signals_AngularVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::value_type const & value) -> Physics_Signals_AngularVelocity1DOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_AngularVelocity1DOutput_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_AngularVelocity1DOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_AngularVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_AngularVelocity1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DOutput_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_AngularVelocity1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_AngularVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_AngularVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::size_type

        resize(Physics_Signals_AngularVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_AngularVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::value_type const &

        insert(Physics_Signals_AngularVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_AngularVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_AngularVelocity1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DOutput_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_AngularVelocity1DOutput_Vector

# Register Physics_Signals_AngularVelocity1DOutput_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_AngularVelocity1DOutput_Vector_swigregister(Physics_Signals_AngularVelocity1DOutput_Vector)

class Physics_Signals_AngularVelocity1DValue_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_AngularVelocity1DValue_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DValue_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_AngularVelocity1DValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DValue_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_AngularVelocity1DValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DValue_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_AngularVelocity1DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DValue_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_AngularVelocity1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::difference_type j) -> Physics_Signals_AngularVelocity1DValue_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DValue_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_AngularVelocity1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::difference_type

        __setslice__(Physics_Signals_AngularVelocity1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::difference_type j, Physics_Signals_AngularVelocity1DValue_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue >,std::allocator< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > > > const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DValue_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_AngularVelocity1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DValue_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_AngularVelocity1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::difference_type

        __delitem__(Physics_Signals_AngularVelocity1DValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DValue_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_AngularVelocity1DValue_Vector self, PySliceObject * slice) -> Physics_Signals_AngularVelocity1DValue_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_AngularVelocity1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DValue_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_AngularVelocity1DValue_Vector self, PySliceObject * slice, Physics_Signals_AngularVelocity1DValue_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue >,std::allocator< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > > > const &

        __setitem__(Physics_Signals_AngularVelocity1DValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_AngularVelocity1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DValue_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_AngularVelocity1DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::value_type"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DValue_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_AngularVelocity1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DValue_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_AngularVelocity1DValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DValue_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_AngularVelocity1DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DValue_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_AngularVelocity1DValue_Vector self, Physics_Signals_AngularVelocity1DValue_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > > &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DValue_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_AngularVelocity1DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DValue_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_AngularVelocity1DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DValue_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_AngularVelocity1DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DValue_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_AngularVelocity1DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DValue_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_AngularVelocity1DValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DValue_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_AngularVelocity1DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DValue_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_AngularVelocity1DValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DValue_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_AngularVelocity1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::iterator

        erase(Physics_Signals_AngularVelocity1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DValue_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_AngularVelocity1DValue_Vector self) -> Physics_Signals_AngularVelocity1DValue_Vector
        __init__(Physics_Signals_AngularVelocity1DValue_Vector self, Physics_Signals_AngularVelocity1DValue_Vector other) -> Physics_Signals_AngularVelocity1DValue_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > > const &

        __init__(Physics_Signals_AngularVelocity1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::size_type size) -> Physics_Signals_AngularVelocity1DValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::size_type

        __init__(Physics_Signals_AngularVelocity1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::value_type const & value) -> Physics_Signals_AngularVelocity1DValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_AngularVelocity1DValue_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_AngularVelocity1DValue_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_AngularVelocity1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DValue_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_AngularVelocity1DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DValue_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_AngularVelocity1DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DValue_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_AngularVelocity1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DValue_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_AngularVelocity1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::size_type

        resize(Physics_Signals_AngularVelocity1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DValue_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_AngularVelocity1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::value_type const &

        insert(Physics_Signals_AngularVelocity1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DValue_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_AngularVelocity1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DValue_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_AngularVelocity1DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DValue_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_AngularVelocity1DValue_Vector

# Register Physics_Signals_AngularVelocity1DValue_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_AngularVelocity1DValue_Vector_swigregister(Physics_Signals_AngularVelocity1DValue_Vector)

class Physics_Signals_AngularVelocity3DValue_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_AngularVelocity3DValue_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity3DValue_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_AngularVelocity3DValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity3DValue_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_AngularVelocity3DValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity3DValue_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_AngularVelocity3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity3DValue_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_AngularVelocity3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::difference_type j) -> Physics_Signals_AngularVelocity3DValue_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity3DValue_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_AngularVelocity3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::difference_type

        __setslice__(Physics_Signals_AngularVelocity3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::difference_type j, Physics_Signals_AngularVelocity3DValue_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue >,std::allocator< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > > > const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity3DValue_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_AngularVelocity3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity3DValue_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_AngularVelocity3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::difference_type

        __delitem__(Physics_Signals_AngularVelocity3DValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity3DValue_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_AngularVelocity3DValue_Vector self, PySliceObject * slice) -> Physics_Signals_AngularVelocity3DValue_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_AngularVelocity3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity3DValue_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_AngularVelocity3DValue_Vector self, PySliceObject * slice, Physics_Signals_AngularVelocity3DValue_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue >,std::allocator< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > > > const &

        __setitem__(Physics_Signals_AngularVelocity3DValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_AngularVelocity3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity3DValue_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_AngularVelocity3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::value_type"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity3DValue_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_AngularVelocity3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity3DValue_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_AngularVelocity3DValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity3DValue_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_AngularVelocity3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity3DValue_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_AngularVelocity3DValue_Vector self, Physics_Signals_AngularVelocity3DValue_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > > &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity3DValue_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_AngularVelocity3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity3DValue_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_AngularVelocity3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity3DValue_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_AngularVelocity3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity3DValue_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_AngularVelocity3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity3DValue_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_AngularVelocity3DValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity3DValue_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_AngularVelocity3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity3DValue_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_AngularVelocity3DValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity3DValue_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_AngularVelocity3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::iterator

        erase(Physics_Signals_AngularVelocity3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity3DValue_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_AngularVelocity3DValue_Vector self) -> Physics_Signals_AngularVelocity3DValue_Vector
        __init__(Physics_Signals_AngularVelocity3DValue_Vector self, Physics_Signals_AngularVelocity3DValue_Vector other) -> Physics_Signals_AngularVelocity3DValue_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > > const &

        __init__(Physics_Signals_AngularVelocity3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::size_type size) -> Physics_Signals_AngularVelocity3DValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::size_type

        __init__(Physics_Signals_AngularVelocity3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::value_type const & value) -> Physics_Signals_AngularVelocity3DValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_AngularVelocity3DValue_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_AngularVelocity3DValue_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_AngularVelocity3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity3DValue_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_AngularVelocity3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity3DValue_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_AngularVelocity3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity3DValue_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_AngularVelocity3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity3DValue_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_AngularVelocity3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::size_type

        resize(Physics_Signals_AngularVelocity3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity3DValue_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_AngularVelocity3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::value_type const &

        insert(Physics_Signals_AngularVelocity3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity3DValue_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_AngularVelocity3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity3DValue_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_AngularVelocity3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity3DValue_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_AngularVelocity3DValue_Vector

# Register Physics_Signals_AngularVelocity3DValue_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_AngularVelocity3DValue_Vector_swigregister(Physics_Signals_AngularVelocity3DValue_Vector)

class Physics_Signals_BoolInput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_BoolInput_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_BoolInput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_BoolInput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_BoolInput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_BoolInput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_BoolInput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_BoolInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_BoolInput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_BoolInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::difference_type j) -> Physics_Signals_BoolInput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_BoolInput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_BoolInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::difference_type

        __setslice__(Physics_Signals_BoolInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::difference_type j, Physics_Signals_BoolInput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::BoolInput > > > const &

        """
        return _PhysicsSwig.Physics_Signals_BoolInput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_BoolInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_BoolInput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_BoolInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::difference_type

        __delitem__(Physics_Signals_BoolInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_BoolInput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_BoolInput_Vector self, PySliceObject * slice) -> Physics_Signals_BoolInput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_BoolInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_BoolInput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_BoolInput_Vector self, PySliceObject * slice, Physics_Signals_BoolInput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::BoolInput > > > const &

        __setitem__(Physics_Signals_BoolInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_BoolInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_BoolInput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_BoolInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::value_type"""
        return _PhysicsSwig.Physics_Signals_BoolInput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_BoolInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_BoolInput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_BoolInput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_BoolInput_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_BoolInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_BoolInput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_BoolInput_Vector self, Physics_Signals_BoolInput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > > &

        """
        return _PhysicsSwig.Physics_Signals_BoolInput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_BoolInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_BoolInput_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_BoolInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_BoolInput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_BoolInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_BoolInput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_BoolInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_BoolInput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_BoolInput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_BoolInput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_BoolInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_BoolInput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_BoolInput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_BoolInput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_BoolInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::iterator

        erase(Physics_Signals_BoolInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_BoolInput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_BoolInput_Vector self) -> Physics_Signals_BoolInput_Vector
        __init__(Physics_Signals_BoolInput_Vector self, Physics_Signals_BoolInput_Vector other) -> Physics_Signals_BoolInput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > > const &

        __init__(Physics_Signals_BoolInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::size_type size) -> Physics_Signals_BoolInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::size_type

        __init__(Physics_Signals_BoolInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::value_type const & value) -> Physics_Signals_BoolInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_BoolInput_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_BoolInput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_BoolInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_BoolInput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_BoolInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_BoolInput_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_BoolInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_BoolInput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_BoolInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_BoolInput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_BoolInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::size_type

        resize(Physics_Signals_BoolInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_BoolInput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_BoolInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::value_type const &

        insert(Physics_Signals_BoolInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_BoolInput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_BoolInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_BoolInput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_BoolInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_BoolInput_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_BoolInput_Vector

# Register Physics_Signals_BoolInput_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_BoolInput_Vector_swigregister(Physics_Signals_BoolInput_Vector)

class Physics_Signals_BoolInputSignal_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_BoolInputSignal_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_BoolInputSignal_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_BoolInputSignal_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_BoolInputSignal_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_BoolInputSignal_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_BoolInputSignal_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_BoolInputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::size_type"""
        return _PhysicsSwig.Physics_Signals_BoolInputSignal_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_BoolInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::difference_type j) -> Physics_Signals_BoolInputSignal_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_BoolInputSignal_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_BoolInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::difference_type

        __setslice__(Physics_Signals_BoolInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::difference_type j, Physics_Signals_BoolInputSignal_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal >,std::allocator< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > > > const &

        """
        return _PhysicsSwig.Physics_Signals_BoolInputSignal_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_BoolInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_BoolInputSignal_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_BoolInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::difference_type

        __delitem__(Physics_Signals_BoolInputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_BoolInputSignal_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_BoolInputSignal_Vector self, PySliceObject * slice) -> Physics_Signals_BoolInputSignal_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_BoolInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_BoolInputSignal_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_BoolInputSignal_Vector self, PySliceObject * slice, Physics_Signals_BoolInputSignal_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal >,std::allocator< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > > > const &

        __setitem__(Physics_Signals_BoolInputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_BoolInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_BoolInputSignal_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_BoolInputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::value_type"""
        return _PhysicsSwig.Physics_Signals_BoolInputSignal_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_BoolInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_BoolInputSignal_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_BoolInputSignal_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_BoolInputSignal_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_BoolInputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::size_type"""
        return _PhysicsSwig.Physics_Signals_BoolInputSignal_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_BoolInputSignal_Vector self, Physics_Signals_BoolInputSignal_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > > &

        """
        return _PhysicsSwig.Physics_Signals_BoolInputSignal_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_BoolInputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::iterator"""
        return _PhysicsSwig.Physics_Signals_BoolInputSignal_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_BoolInputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::iterator"""
        return _PhysicsSwig.Physics_Signals_BoolInputSignal_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_BoolInputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_BoolInputSignal_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_BoolInputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_BoolInputSignal_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_BoolInputSignal_Vector self)"""
        return _PhysicsSwig.Physics_Signals_BoolInputSignal_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_BoolInputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_BoolInputSignal_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_BoolInputSignal_Vector self)"""
        return _PhysicsSwig.Physics_Signals_BoolInputSignal_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_BoolInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::iterator

        erase(Physics_Signals_BoolInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_BoolInputSignal_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_BoolInputSignal_Vector self) -> Physics_Signals_BoolInputSignal_Vector
        __init__(Physics_Signals_BoolInputSignal_Vector self, Physics_Signals_BoolInputSignal_Vector other) -> Physics_Signals_BoolInputSignal_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > > const &

        __init__(Physics_Signals_BoolInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::size_type size) -> Physics_Signals_BoolInputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::size_type

        __init__(Physics_Signals_BoolInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::value_type const & value) -> Physics_Signals_BoolInputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_BoolInputSignal_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_BoolInputSignal_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_BoolInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_BoolInputSignal_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_BoolInputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_BoolInputSignal_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_BoolInputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_BoolInputSignal_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_BoolInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_BoolInputSignal_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_BoolInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::size_type

        resize(Physics_Signals_BoolInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_BoolInputSignal_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_BoolInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::value_type const &

        insert(Physics_Signals_BoolInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_BoolInputSignal_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_BoolInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_BoolInputSignal_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_BoolInputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolInputSignal > >::size_type"""
        return _PhysicsSwig.Physics_Signals_BoolInputSignal_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_BoolInputSignal_Vector

# Register Physics_Signals_BoolInputSignal_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_BoolInputSignal_Vector_swigregister(Physics_Signals_BoolInputSignal_Vector)

class Physics_Signals_BoolOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_BoolOutput_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_BoolOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_BoolOutput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_BoolOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_BoolOutput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_BoolOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_BoolOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_BoolOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_BoolOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::difference_type j) -> Physics_Signals_BoolOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_BoolOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_BoolOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::difference_type

        __setslice__(Physics_Signals_BoolOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::difference_type j, Physics_Signals_BoolOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::BoolOutput > > > const &

        """
        return _PhysicsSwig.Physics_Signals_BoolOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_BoolOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_BoolOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_BoolOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::difference_type

        __delitem__(Physics_Signals_BoolOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_BoolOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_BoolOutput_Vector self, PySliceObject * slice) -> Physics_Signals_BoolOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_BoolOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_BoolOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_BoolOutput_Vector self, PySliceObject * slice, Physics_Signals_BoolOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::BoolOutput > > > const &

        __setitem__(Physics_Signals_BoolOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_BoolOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_BoolOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_BoolOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::value_type"""
        return _PhysicsSwig.Physics_Signals_BoolOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_BoolOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_BoolOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_BoolOutput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_BoolOutput_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_BoolOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_BoolOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_BoolOutput_Vector self, Physics_Signals_BoolOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > > &

        """
        return _PhysicsSwig.Physics_Signals_BoolOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_BoolOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_BoolOutput_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_BoolOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_BoolOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_BoolOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_BoolOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_BoolOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_BoolOutput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_BoolOutput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_BoolOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_BoolOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_BoolOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_BoolOutput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_BoolOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_BoolOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::iterator

        erase(Physics_Signals_BoolOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_BoolOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_BoolOutput_Vector self) -> Physics_Signals_BoolOutput_Vector
        __init__(Physics_Signals_BoolOutput_Vector self, Physics_Signals_BoolOutput_Vector other) -> Physics_Signals_BoolOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > > const &

        __init__(Physics_Signals_BoolOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::size_type size) -> Physics_Signals_BoolOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::size_type

        __init__(Physics_Signals_BoolOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::value_type const & value) -> Physics_Signals_BoolOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_BoolOutput_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_BoolOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_BoolOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_BoolOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_BoolOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_BoolOutput_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_BoolOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_BoolOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_BoolOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_BoolOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_BoolOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::size_type

        resize(Physics_Signals_BoolOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_BoolOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_BoolOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::value_type const &

        insert(Physics_Signals_BoolOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_BoolOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_BoolOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_BoolOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_BoolOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolOutput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_BoolOutput_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_BoolOutput_Vector

# Register Physics_Signals_BoolOutput_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_BoolOutput_Vector_swigregister(Physics_Signals_BoolOutput_Vector)

class Physics_Signals_BoolValue_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_BoolValue_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_BoolValue_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_BoolValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_BoolValue_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_BoolValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_BoolValue_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_BoolValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_BoolValue_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_BoolValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::difference_type j) -> Physics_Signals_BoolValue_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_BoolValue_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_BoolValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::difference_type

        __setslice__(Physics_Signals_BoolValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::difference_type j, Physics_Signals_BoolValue_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue >,std::allocator< std::shared_ptr< openplx::Physics::Signals::BoolValue > > > const &

        """
        return _PhysicsSwig.Physics_Signals_BoolValue_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_BoolValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_BoolValue_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_BoolValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::difference_type

        __delitem__(Physics_Signals_BoolValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_BoolValue_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_BoolValue_Vector self, PySliceObject * slice) -> Physics_Signals_BoolValue_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_BoolValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_BoolValue_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_BoolValue_Vector self, PySliceObject * slice, Physics_Signals_BoolValue_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue >,std::allocator< std::shared_ptr< openplx::Physics::Signals::BoolValue > > > const &

        __setitem__(Physics_Signals_BoolValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_BoolValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_BoolValue_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_BoolValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::value_type"""
        return _PhysicsSwig.Physics_Signals_BoolValue_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_BoolValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_BoolValue_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_BoolValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_BoolValue_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_BoolValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_BoolValue_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_BoolValue_Vector self, Physics_Signals_BoolValue_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > > &

        """
        return _PhysicsSwig.Physics_Signals_BoolValue_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_BoolValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_BoolValue_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_BoolValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_BoolValue_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_BoolValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_BoolValue_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_BoolValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_BoolValue_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_BoolValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_BoolValue_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_BoolValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_BoolValue_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_BoolValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_BoolValue_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_BoolValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::iterator

        erase(Physics_Signals_BoolValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_BoolValue_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_BoolValue_Vector self) -> Physics_Signals_BoolValue_Vector
        __init__(Physics_Signals_BoolValue_Vector self, Physics_Signals_BoolValue_Vector other) -> Physics_Signals_BoolValue_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > > const &

        __init__(Physics_Signals_BoolValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::size_type size) -> Physics_Signals_BoolValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::size_type

        __init__(Physics_Signals_BoolValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::value_type const & value) -> Physics_Signals_BoolValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_BoolValue_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_BoolValue_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_BoolValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_BoolValue_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_BoolValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_BoolValue_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_BoolValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_BoolValue_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_BoolValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_BoolValue_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_BoolValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::size_type

        resize(Physics_Signals_BoolValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_BoolValue_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_BoolValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::value_type const &

        insert(Physics_Signals_BoolValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_BoolValue_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_BoolValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_BoolValue_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_BoolValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::BoolValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_BoolValue_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_BoolValue_Vector

# Register Physics_Signals_BoolValue_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_BoolValue_Vector_swigregister(Physics_Signals_BoolValue_Vector)

class Physics_Signals_DistanceValue_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_DistanceValue_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_DistanceValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_DistanceValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_DistanceValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_DistanceValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::difference_type j) -> Physics_Signals_DistanceValue_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_DistanceValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::difference_type

        __setslice__(Physics_Signals_DistanceValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::difference_type j, Physics_Signals_DistanceValue_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue >,std::allocator< std::shared_ptr< openplx::Physics::Signals::DistanceValue > > > const &

        """
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_DistanceValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_DistanceValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::difference_type

        __delitem__(Physics_Signals_DistanceValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_DistanceValue_Vector self, PySliceObject * slice) -> Physics_Signals_DistanceValue_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_DistanceValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_DistanceValue_Vector self, PySliceObject * slice, Physics_Signals_DistanceValue_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue >,std::allocator< std::shared_ptr< openplx::Physics::Signals::DistanceValue > > > const &

        __setitem__(Physics_Signals_DistanceValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_DistanceValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_DistanceValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::value_type"""
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_DistanceValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_DistanceValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_DistanceValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_DistanceValue_Vector self, Physics_Signals_DistanceValue_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > > &

        """
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_DistanceValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_DistanceValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_DistanceValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_DistanceValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_DistanceValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_DistanceValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_DistanceValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_DistanceValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::iterator

        erase(Physics_Signals_DistanceValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_DistanceValue_Vector self) -> Physics_Signals_DistanceValue_Vector
        __init__(Physics_Signals_DistanceValue_Vector self, Physics_Signals_DistanceValue_Vector other) -> Physics_Signals_DistanceValue_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > > const &

        __init__(Physics_Signals_DistanceValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::size_type size) -> Physics_Signals_DistanceValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::size_type

        __init__(Physics_Signals_DistanceValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::value_type const & value) -> Physics_Signals_DistanceValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_DistanceValue_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_DistanceValue_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_DistanceValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_DistanceValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_DistanceValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_DistanceValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_DistanceValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::size_type

        resize(Physics_Signals_DistanceValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_DistanceValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::value_type const &

        insert(Physics_Signals_DistanceValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_DistanceValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_DistanceValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DistanceValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_DistanceValue_Vector

# Register Physics_Signals_DistanceValue_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_DistanceValue_Vector_swigregister(Physics_Signals_DistanceValue_Vector)

class Physics_Signals_DurationInput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_DurationInput_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_DurationInput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_DurationInput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_DurationInput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_DurationInput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_DurationInput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_DurationInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_DurationInput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_DurationInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::difference_type j) -> Physics_Signals_DurationInput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_DurationInput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_DurationInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::difference_type

        __setslice__(Physics_Signals_DurationInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::difference_type j, Physics_Signals_DurationInput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::DurationInput > > > const &

        """
        return _PhysicsSwig.Physics_Signals_DurationInput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_DurationInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_DurationInput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_DurationInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::difference_type

        __delitem__(Physics_Signals_DurationInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_DurationInput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_DurationInput_Vector self, PySliceObject * slice) -> Physics_Signals_DurationInput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_DurationInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_DurationInput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_DurationInput_Vector self, PySliceObject * slice, Physics_Signals_DurationInput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::DurationInput > > > const &

        __setitem__(Physics_Signals_DurationInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_DurationInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DurationInput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_DurationInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::value_type"""
        return _PhysicsSwig.Physics_Signals_DurationInput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_DurationInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DurationInput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_DurationInput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_DurationInput_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_DurationInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_DurationInput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_DurationInput_Vector self, Physics_Signals_DurationInput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > > &

        """
        return _PhysicsSwig.Physics_Signals_DurationInput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_DurationInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_DurationInput_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_DurationInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_DurationInput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_DurationInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_DurationInput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_DurationInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_DurationInput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_DurationInput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_DurationInput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_DurationInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_DurationInput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_DurationInput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_DurationInput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_DurationInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::iterator

        erase(Physics_Signals_DurationInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_DurationInput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_DurationInput_Vector self) -> Physics_Signals_DurationInput_Vector
        __init__(Physics_Signals_DurationInput_Vector self, Physics_Signals_DurationInput_Vector other) -> Physics_Signals_DurationInput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > > const &

        __init__(Physics_Signals_DurationInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::size_type size) -> Physics_Signals_DurationInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::size_type

        __init__(Physics_Signals_DurationInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::value_type const & value) -> Physics_Signals_DurationInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_DurationInput_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_DurationInput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_DurationInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DurationInput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_DurationInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_DurationInput_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_DurationInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_DurationInput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_DurationInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DurationInput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_DurationInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::size_type

        resize(Physics_Signals_DurationInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DurationInput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_DurationInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::value_type const &

        insert(Physics_Signals_DurationInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DurationInput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_DurationInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_DurationInput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_DurationInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationInput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_DurationInput_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_DurationInput_Vector

# Register Physics_Signals_DurationInput_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_DurationInput_Vector_swigregister(Physics_Signals_DurationInput_Vector)

class Physics_Signals_DurationOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_DurationOutput_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_DurationOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_DurationOutput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_DurationOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_DurationOutput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_DurationOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_DurationOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_DurationOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_DurationOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::difference_type j) -> Physics_Signals_DurationOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_DurationOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_DurationOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::difference_type

        __setslice__(Physics_Signals_DurationOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::difference_type j, Physics_Signals_DurationOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::DurationOutput > > > const &

        """
        return _PhysicsSwig.Physics_Signals_DurationOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_DurationOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_DurationOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_DurationOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::difference_type

        __delitem__(Physics_Signals_DurationOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_DurationOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_DurationOutput_Vector self, PySliceObject * slice) -> Physics_Signals_DurationOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_DurationOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_DurationOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_DurationOutput_Vector self, PySliceObject * slice, Physics_Signals_DurationOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::DurationOutput > > > const &

        __setitem__(Physics_Signals_DurationOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_DurationOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DurationOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_DurationOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::value_type"""
        return _PhysicsSwig.Physics_Signals_DurationOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_DurationOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DurationOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_DurationOutput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_DurationOutput_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_DurationOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_DurationOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_DurationOutput_Vector self, Physics_Signals_DurationOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > > &

        """
        return _PhysicsSwig.Physics_Signals_DurationOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_DurationOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_DurationOutput_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_DurationOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_DurationOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_DurationOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_DurationOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_DurationOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_DurationOutput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_DurationOutput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_DurationOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_DurationOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_DurationOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_DurationOutput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_DurationOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_DurationOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::iterator

        erase(Physics_Signals_DurationOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_DurationOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_DurationOutput_Vector self) -> Physics_Signals_DurationOutput_Vector
        __init__(Physics_Signals_DurationOutput_Vector self, Physics_Signals_DurationOutput_Vector other) -> Physics_Signals_DurationOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > > const &

        __init__(Physics_Signals_DurationOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::size_type size) -> Physics_Signals_DurationOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::size_type

        __init__(Physics_Signals_DurationOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::value_type const & value) -> Physics_Signals_DurationOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_DurationOutput_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_DurationOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_DurationOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DurationOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_DurationOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_DurationOutput_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_DurationOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_DurationOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_DurationOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DurationOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_DurationOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::size_type

        resize(Physics_Signals_DurationOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DurationOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_DurationOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::value_type const &

        insert(Physics_Signals_DurationOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DurationOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_DurationOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_DurationOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_DurationOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationOutput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_DurationOutput_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_DurationOutput_Vector

# Register Physics_Signals_DurationOutput_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_DurationOutput_Vector_swigregister(Physics_Signals_DurationOutput_Vector)

class Physics_Signals_DurationValue_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_DurationValue_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_DurationValue_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_DurationValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_DurationValue_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_DurationValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_DurationValue_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_DurationValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_DurationValue_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_DurationValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::difference_type j) -> Physics_Signals_DurationValue_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_DurationValue_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_DurationValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::difference_type

        __setslice__(Physics_Signals_DurationValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::difference_type j, Physics_Signals_DurationValue_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue >,std::allocator< std::shared_ptr< openplx::Physics::Signals::DurationValue > > > const &

        """
        return _PhysicsSwig.Physics_Signals_DurationValue_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_DurationValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_DurationValue_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_DurationValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::difference_type

        __delitem__(Physics_Signals_DurationValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_DurationValue_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_DurationValue_Vector self, PySliceObject * slice) -> Physics_Signals_DurationValue_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_DurationValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_DurationValue_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_DurationValue_Vector self, PySliceObject * slice, Physics_Signals_DurationValue_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue >,std::allocator< std::shared_ptr< openplx::Physics::Signals::DurationValue > > > const &

        __setitem__(Physics_Signals_DurationValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_DurationValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DurationValue_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_DurationValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::value_type"""
        return _PhysicsSwig.Physics_Signals_DurationValue_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_DurationValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DurationValue_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_DurationValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_DurationValue_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_DurationValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_DurationValue_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_DurationValue_Vector self, Physics_Signals_DurationValue_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > > &

        """
        return _PhysicsSwig.Physics_Signals_DurationValue_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_DurationValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_DurationValue_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_DurationValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_DurationValue_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_DurationValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_DurationValue_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_DurationValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_DurationValue_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_DurationValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_DurationValue_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_DurationValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_DurationValue_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_DurationValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_DurationValue_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_DurationValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::iterator

        erase(Physics_Signals_DurationValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_DurationValue_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_DurationValue_Vector self) -> Physics_Signals_DurationValue_Vector
        __init__(Physics_Signals_DurationValue_Vector self, Physics_Signals_DurationValue_Vector other) -> Physics_Signals_DurationValue_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > > const &

        __init__(Physics_Signals_DurationValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::size_type size) -> Physics_Signals_DurationValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::size_type

        __init__(Physics_Signals_DurationValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::value_type const & value) -> Physics_Signals_DurationValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_DurationValue_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_DurationValue_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_DurationValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DurationValue_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_DurationValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_DurationValue_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_DurationValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_DurationValue_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_DurationValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DurationValue_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_DurationValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::size_type

        resize(Physics_Signals_DurationValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DurationValue_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_DurationValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::value_type const &

        insert(Physics_Signals_DurationValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DurationValue_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_DurationValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_DurationValue_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_DurationValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::DurationValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_DurationValue_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_DurationValue_Vector

# Register Physics_Signals_DurationValue_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_DurationValue_Vector_swigregister(Physics_Signals_DurationValue_Vector)

class Physics_Signals_EnableInteractionInput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_EnableInteractionInput_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_EnableInteractionInput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_EnableInteractionInput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_EnableInteractionInput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_EnableInteractionInput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_EnableInteractionInput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_EnableInteractionInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_EnableInteractionInput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_EnableInteractionInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::difference_type j) -> Physics_Signals_EnableInteractionInput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_EnableInteractionInput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_EnableInteractionInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::difference_type

        __setslice__(Physics_Signals_EnableInteractionInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::difference_type j, Physics_Signals_EnableInteractionInput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > > > const &

        """
        return _PhysicsSwig.Physics_Signals_EnableInteractionInput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_EnableInteractionInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_EnableInteractionInput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_EnableInteractionInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::difference_type

        __delitem__(Physics_Signals_EnableInteractionInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_EnableInteractionInput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_EnableInteractionInput_Vector self, PySliceObject * slice) -> Physics_Signals_EnableInteractionInput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_EnableInteractionInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_EnableInteractionInput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_EnableInteractionInput_Vector self, PySliceObject * slice, Physics_Signals_EnableInteractionInput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > > > const &

        __setitem__(Physics_Signals_EnableInteractionInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_EnableInteractionInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_EnableInteractionInput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_EnableInteractionInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::value_type"""
        return _PhysicsSwig.Physics_Signals_EnableInteractionInput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_EnableInteractionInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_EnableInteractionInput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_EnableInteractionInput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_EnableInteractionInput_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_EnableInteractionInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_EnableInteractionInput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_EnableInteractionInput_Vector self, Physics_Signals_EnableInteractionInput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > > &

        """
        return _PhysicsSwig.Physics_Signals_EnableInteractionInput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_EnableInteractionInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_EnableInteractionInput_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_EnableInteractionInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_EnableInteractionInput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_EnableInteractionInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_EnableInteractionInput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_EnableInteractionInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_EnableInteractionInput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_EnableInteractionInput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_EnableInteractionInput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_EnableInteractionInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_EnableInteractionInput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_EnableInteractionInput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_EnableInteractionInput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_EnableInteractionInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::iterator

        erase(Physics_Signals_EnableInteractionInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_EnableInteractionInput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_EnableInteractionInput_Vector self) -> Physics_Signals_EnableInteractionInput_Vector
        __init__(Physics_Signals_EnableInteractionInput_Vector self, Physics_Signals_EnableInteractionInput_Vector other) -> Physics_Signals_EnableInteractionInput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > > const &

        __init__(Physics_Signals_EnableInteractionInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::size_type size) -> Physics_Signals_EnableInteractionInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::size_type

        __init__(Physics_Signals_EnableInteractionInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::value_type const & value) -> Physics_Signals_EnableInteractionInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_EnableInteractionInput_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_EnableInteractionInput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_EnableInteractionInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_EnableInteractionInput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_EnableInteractionInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_EnableInteractionInput_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_EnableInteractionInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_EnableInteractionInput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_EnableInteractionInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_EnableInteractionInput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_EnableInteractionInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::size_type

        resize(Physics_Signals_EnableInteractionInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_EnableInteractionInput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_EnableInteractionInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::value_type const &

        insert(Physics_Signals_EnableInteractionInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_EnableInteractionInput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_EnableInteractionInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_EnableInteractionInput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_EnableInteractionInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_EnableInteractionInput_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_EnableInteractionInput_Vector

# Register Physics_Signals_EnableInteractionInput_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_EnableInteractionInput_Vector_swigregister(Physics_Signals_EnableInteractionInput_Vector)

class Physics_Signals_EngageInput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_EngageInput_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_EngageInput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_EngageInput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_EngageInput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_EngageInput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_EngageInput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_EngageInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_EngageInput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_EngageInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::difference_type j) -> Physics_Signals_EngageInput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_EngageInput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_EngageInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::difference_type

        __setslice__(Physics_Signals_EngageInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::difference_type j, Physics_Signals_EngageInput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::EngageInput > > > const &

        """
        return _PhysicsSwig.Physics_Signals_EngageInput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_EngageInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_EngageInput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_EngageInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::difference_type

        __delitem__(Physics_Signals_EngageInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_EngageInput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_EngageInput_Vector self, PySliceObject * slice) -> Physics_Signals_EngageInput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_EngageInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_EngageInput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_EngageInput_Vector self, PySliceObject * slice, Physics_Signals_EngageInput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::EngageInput > > > const &

        __setitem__(Physics_Signals_EngageInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_EngageInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_EngageInput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_EngageInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::value_type"""
        return _PhysicsSwig.Physics_Signals_EngageInput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_EngageInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_EngageInput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_EngageInput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_EngageInput_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_EngageInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_EngageInput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_EngageInput_Vector self, Physics_Signals_EngageInput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > > &

        """
        return _PhysicsSwig.Physics_Signals_EngageInput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_EngageInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_EngageInput_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_EngageInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_EngageInput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_EngageInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_EngageInput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_EngageInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_EngageInput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_EngageInput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_EngageInput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_EngageInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_EngageInput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_EngageInput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_EngageInput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_EngageInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::iterator

        erase(Physics_Signals_EngageInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_EngageInput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_EngageInput_Vector self) -> Physics_Signals_EngageInput_Vector
        __init__(Physics_Signals_EngageInput_Vector self, Physics_Signals_EngageInput_Vector other) -> Physics_Signals_EngageInput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > > const &

        __init__(Physics_Signals_EngageInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::size_type size) -> Physics_Signals_EngageInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::size_type

        __init__(Physics_Signals_EngageInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::value_type const & value) -> Physics_Signals_EngageInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_EngageInput_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_EngageInput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_EngageInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_EngageInput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_EngageInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_EngageInput_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_EngageInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_EngageInput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_EngageInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_EngageInput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_EngageInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::size_type

        resize(Physics_Signals_EngageInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_EngageInput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_EngageInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::value_type const &

        insert(Physics_Signals_EngageInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_EngageInput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_EngageInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_EngageInput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_EngageInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EngageInput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_EngageInput_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_EngageInput_Vector

# Register Physics_Signals_EngageInput_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_EngageInput_Vector_swigregister(Physics_Signals_EngageInput_Vector)

class Physics_Signals_EngagedOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_EngagedOutput_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_EngagedOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_EngagedOutput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_EngagedOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_EngagedOutput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_EngagedOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_EngagedOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_EngagedOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_EngagedOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::difference_type j) -> Physics_Signals_EngagedOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_EngagedOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_EngagedOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::difference_type

        __setslice__(Physics_Signals_EngagedOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::difference_type j, Physics_Signals_EngagedOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > > > const &

        """
        return _PhysicsSwig.Physics_Signals_EngagedOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_EngagedOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_EngagedOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_EngagedOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::difference_type

        __delitem__(Physics_Signals_EngagedOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_EngagedOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_EngagedOutput_Vector self, PySliceObject * slice) -> Physics_Signals_EngagedOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_EngagedOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_EngagedOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_EngagedOutput_Vector self, PySliceObject * slice, Physics_Signals_EngagedOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > > > const &

        __setitem__(Physics_Signals_EngagedOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_EngagedOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_EngagedOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_EngagedOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::value_type"""
        return _PhysicsSwig.Physics_Signals_EngagedOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_EngagedOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_EngagedOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_EngagedOutput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_EngagedOutput_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_EngagedOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_EngagedOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_EngagedOutput_Vector self, Physics_Signals_EngagedOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > > &

        """
        return _PhysicsSwig.Physics_Signals_EngagedOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_EngagedOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_EngagedOutput_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_EngagedOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_EngagedOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_EngagedOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_EngagedOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_EngagedOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_EngagedOutput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_EngagedOutput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_EngagedOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_EngagedOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_EngagedOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_EngagedOutput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_EngagedOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_EngagedOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::iterator

        erase(Physics_Signals_EngagedOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_EngagedOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_EngagedOutput_Vector self) -> Physics_Signals_EngagedOutput_Vector
        __init__(Physics_Signals_EngagedOutput_Vector self, Physics_Signals_EngagedOutput_Vector other) -> Physics_Signals_EngagedOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > > const &

        __init__(Physics_Signals_EngagedOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::size_type size) -> Physics_Signals_EngagedOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::size_type

        __init__(Physics_Signals_EngagedOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::value_type const & value) -> Physics_Signals_EngagedOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_EngagedOutput_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_EngagedOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_EngagedOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_EngagedOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_EngagedOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_EngagedOutput_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_EngagedOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_EngagedOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_EngagedOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_EngagedOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_EngagedOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::size_type

        resize(Physics_Signals_EngagedOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_EngagedOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_EngagedOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::value_type const &

        insert(Physics_Signals_EngagedOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_EngagedOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_EngagedOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_EngagedOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_EngagedOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::EngagedOutput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_EngagedOutput_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_EngagedOutput_Vector

# Register Physics_Signals_EngagedOutput_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_EngagedOutput_Vector_swigregister(Physics_Signals_EngagedOutput_Vector)

class Physics_Signals_Force1DInput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_Force1DInput_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_Force1DInput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_Force1DInput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Force1DInput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_Force1DInput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Force1DInput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_Force1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Force1DInput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_Force1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::difference_type j) -> Physics_Signals_Force1DInput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Force1DInput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_Force1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::difference_type

        __setslice__(Physics_Signals_Force1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::difference_type j, Physics_Signals_Force1DInput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::Force1DInput > > > const &

        """
        return _PhysicsSwig.Physics_Signals_Force1DInput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_Force1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Force1DInput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_Force1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::difference_type

        __delitem__(Physics_Signals_Force1DInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_Force1DInput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_Force1DInput_Vector self, PySliceObject * slice) -> Physics_Signals_Force1DInput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_Force1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Force1DInput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_Force1DInput_Vector self, PySliceObject * slice, Physics_Signals_Force1DInput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::Force1DInput > > > const &

        __setitem__(Physics_Signals_Force1DInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_Force1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Force1DInput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_Force1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::value_type"""
        return _PhysicsSwig.Physics_Signals_Force1DInput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_Force1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Force1DInput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_Force1DInput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Force1DInput_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_Force1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Force1DInput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_Force1DInput_Vector self, Physics_Signals_Force1DInput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > > &

        """
        return _PhysicsSwig.Physics_Signals_Force1DInput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_Force1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Force1DInput_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_Force1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Force1DInput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_Force1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Force1DInput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_Force1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Force1DInput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_Force1DInput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Force1DInput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_Force1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_Force1DInput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_Force1DInput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Force1DInput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_Force1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::iterator

        erase(Physics_Signals_Force1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_Force1DInput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_Force1DInput_Vector self) -> Physics_Signals_Force1DInput_Vector
        __init__(Physics_Signals_Force1DInput_Vector self, Physics_Signals_Force1DInput_Vector other) -> Physics_Signals_Force1DInput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > > const &

        __init__(Physics_Signals_Force1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::size_type size) -> Physics_Signals_Force1DInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::size_type

        __init__(Physics_Signals_Force1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::value_type const & value) -> Physics_Signals_Force1DInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_Force1DInput_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_Force1DInput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_Force1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Force1DInput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_Force1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Force1DInput_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_Force1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Force1DInput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_Force1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Force1DInput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_Force1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::size_type

        resize(Physics_Signals_Force1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Force1DInput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_Force1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::value_type const &

        insert(Physics_Signals_Force1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Force1DInput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_Force1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_Force1DInput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_Force1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DInput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Force1DInput_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_Force1DInput_Vector

# Register Physics_Signals_Force1DInput_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_Force1DInput_Vector_swigregister(Physics_Signals_Force1DInput_Vector)

class Physics_Signals_Force1DOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_Force1DOutput_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_Force1DOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_Force1DOutput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Force1DOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_Force1DOutput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Force1DOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_Force1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Force1DOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_Force1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::difference_type j) -> Physics_Signals_Force1DOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Force1DOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_Force1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::difference_type

        __setslice__(Physics_Signals_Force1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::difference_type j, Physics_Signals_Force1DOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > > > const &

        """
        return _PhysicsSwig.Physics_Signals_Force1DOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_Force1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Force1DOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_Force1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::difference_type

        __delitem__(Physics_Signals_Force1DOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_Force1DOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_Force1DOutput_Vector self, PySliceObject * slice) -> Physics_Signals_Force1DOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_Force1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Force1DOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_Force1DOutput_Vector self, PySliceObject * slice, Physics_Signals_Force1DOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > > > const &

        __setitem__(Physics_Signals_Force1DOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_Force1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Force1DOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_Force1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::value_type"""
        return _PhysicsSwig.Physics_Signals_Force1DOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_Force1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Force1DOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_Force1DOutput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Force1DOutput_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_Force1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Force1DOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_Force1DOutput_Vector self, Physics_Signals_Force1DOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > > &

        """
        return _PhysicsSwig.Physics_Signals_Force1DOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_Force1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Force1DOutput_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_Force1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Force1DOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_Force1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Force1DOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_Force1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Force1DOutput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_Force1DOutput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Force1DOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_Force1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_Force1DOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_Force1DOutput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Force1DOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_Force1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::iterator

        erase(Physics_Signals_Force1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_Force1DOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_Force1DOutput_Vector self) -> Physics_Signals_Force1DOutput_Vector
        __init__(Physics_Signals_Force1DOutput_Vector self, Physics_Signals_Force1DOutput_Vector other) -> Physics_Signals_Force1DOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > > const &

        __init__(Physics_Signals_Force1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::size_type size) -> Physics_Signals_Force1DOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::size_type

        __init__(Physics_Signals_Force1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::value_type const & value) -> Physics_Signals_Force1DOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_Force1DOutput_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_Force1DOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_Force1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Force1DOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_Force1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Force1DOutput_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_Force1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Force1DOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_Force1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Force1DOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_Force1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::size_type

        resize(Physics_Signals_Force1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Force1DOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_Force1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::value_type const &

        insert(Physics_Signals_Force1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Force1DOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_Force1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_Force1DOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_Force1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DOutput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Force1DOutput_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_Force1DOutput_Vector

# Register Physics_Signals_Force1DOutput_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_Force1DOutput_Vector_swigregister(Physics_Signals_Force1DOutput_Vector)

class Physics_Signals_Force1DValue_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_Force1DValue_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_Force1DValue_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_Force1DValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Force1DValue_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_Force1DValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Force1DValue_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_Force1DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Force1DValue_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_Force1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::difference_type j) -> Physics_Signals_Force1DValue_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Force1DValue_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_Force1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::difference_type

        __setslice__(Physics_Signals_Force1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::difference_type j, Physics_Signals_Force1DValue_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue >,std::allocator< std::shared_ptr< openplx::Physics::Signals::Force1DValue > > > const &

        """
        return _PhysicsSwig.Physics_Signals_Force1DValue_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_Force1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Force1DValue_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_Force1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::difference_type

        __delitem__(Physics_Signals_Force1DValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_Force1DValue_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_Force1DValue_Vector self, PySliceObject * slice) -> Physics_Signals_Force1DValue_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_Force1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Force1DValue_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_Force1DValue_Vector self, PySliceObject * slice, Physics_Signals_Force1DValue_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue >,std::allocator< std::shared_ptr< openplx::Physics::Signals::Force1DValue > > > const &

        __setitem__(Physics_Signals_Force1DValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_Force1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Force1DValue_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_Force1DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::value_type"""
        return _PhysicsSwig.Physics_Signals_Force1DValue_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_Force1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Force1DValue_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_Force1DValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Force1DValue_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_Force1DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Force1DValue_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_Force1DValue_Vector self, Physics_Signals_Force1DValue_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > > &

        """
        return _PhysicsSwig.Physics_Signals_Force1DValue_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_Force1DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Force1DValue_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_Force1DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Force1DValue_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_Force1DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Force1DValue_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_Force1DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Force1DValue_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_Force1DValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Force1DValue_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_Force1DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_Force1DValue_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_Force1DValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Force1DValue_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_Force1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::iterator

        erase(Physics_Signals_Force1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_Force1DValue_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_Force1DValue_Vector self) -> Physics_Signals_Force1DValue_Vector
        __init__(Physics_Signals_Force1DValue_Vector self, Physics_Signals_Force1DValue_Vector other) -> Physics_Signals_Force1DValue_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > > const &

        __init__(Physics_Signals_Force1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::size_type size) -> Physics_Signals_Force1DValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::size_type

        __init__(Physics_Signals_Force1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::value_type const & value) -> Physics_Signals_Force1DValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_Force1DValue_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_Force1DValue_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_Force1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Force1DValue_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_Force1DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Force1DValue_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_Force1DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Force1DValue_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_Force1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Force1DValue_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_Force1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::size_type

        resize(Physics_Signals_Force1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Force1DValue_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_Force1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::value_type const &

        insert(Physics_Signals_Force1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Force1DValue_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_Force1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_Force1DValue_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_Force1DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force1DValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Force1DValue_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_Force1DValue_Vector

# Register Physics_Signals_Force1DValue_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_Force1DValue_Vector_swigregister(Physics_Signals_Force1DValue_Vector)

class Physics_Signals_Force3DValue_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_Force3DValue_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_Force3DValue_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_Force3DValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Force3DValue_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_Force3DValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Force3DValue_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_Force3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Force3DValue_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_Force3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::difference_type j) -> Physics_Signals_Force3DValue_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Force3DValue_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_Force3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::difference_type

        __setslice__(Physics_Signals_Force3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::difference_type j, Physics_Signals_Force3DValue_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue >,std::allocator< std::shared_ptr< openplx::Physics::Signals::Force3DValue > > > const &

        """
        return _PhysicsSwig.Physics_Signals_Force3DValue_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_Force3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Force3DValue_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_Force3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::difference_type

        __delitem__(Physics_Signals_Force3DValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_Force3DValue_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_Force3DValue_Vector self, PySliceObject * slice) -> Physics_Signals_Force3DValue_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_Force3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Force3DValue_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_Force3DValue_Vector self, PySliceObject * slice, Physics_Signals_Force3DValue_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue >,std::allocator< std::shared_ptr< openplx::Physics::Signals::Force3DValue > > > const &

        __setitem__(Physics_Signals_Force3DValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_Force3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Force3DValue_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_Force3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::value_type"""
        return _PhysicsSwig.Physics_Signals_Force3DValue_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_Force3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Force3DValue_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_Force3DValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Force3DValue_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_Force3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Force3DValue_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_Force3DValue_Vector self, Physics_Signals_Force3DValue_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > > &

        """
        return _PhysicsSwig.Physics_Signals_Force3DValue_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_Force3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Force3DValue_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_Force3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Force3DValue_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_Force3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Force3DValue_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_Force3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Force3DValue_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_Force3DValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Force3DValue_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_Force3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_Force3DValue_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_Force3DValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Force3DValue_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_Force3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::iterator

        erase(Physics_Signals_Force3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_Force3DValue_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_Force3DValue_Vector self) -> Physics_Signals_Force3DValue_Vector
        __init__(Physics_Signals_Force3DValue_Vector self, Physics_Signals_Force3DValue_Vector other) -> Physics_Signals_Force3DValue_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > > const &

        __init__(Physics_Signals_Force3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::size_type size) -> Physics_Signals_Force3DValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::size_type

        __init__(Physics_Signals_Force3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::value_type const & value) -> Physics_Signals_Force3DValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_Force3DValue_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_Force3DValue_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_Force3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Force3DValue_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_Force3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Force3DValue_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_Force3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Force3DValue_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_Force3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Force3DValue_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_Force3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::size_type

        resize(Physics_Signals_Force3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Force3DValue_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_Force3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::value_type const &

        insert(Physics_Signals_Force3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Force3DValue_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_Force3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_Force3DValue_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_Force3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Force3DValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Force3DValue_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_Force3DValue_Vector

# Register Physics_Signals_Force3DValue_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_Force3DValue_Vector_swigregister(Physics_Signals_Force3DValue_Vector)

class Physics_Signals_FractionInput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_FractionInput_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_FractionInput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_FractionInput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_FractionInput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_FractionInput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_FractionInput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_FractionInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_FractionInput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_FractionInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::difference_type j) -> Physics_Signals_FractionInput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_FractionInput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_FractionInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::difference_type

        __setslice__(Physics_Signals_FractionInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::difference_type j, Physics_Signals_FractionInput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::FractionInput > > > const &

        """
        return _PhysicsSwig.Physics_Signals_FractionInput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_FractionInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_FractionInput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_FractionInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::difference_type

        __delitem__(Physics_Signals_FractionInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_FractionInput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_FractionInput_Vector self, PySliceObject * slice) -> Physics_Signals_FractionInput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_FractionInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_FractionInput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_FractionInput_Vector self, PySliceObject * slice, Physics_Signals_FractionInput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::FractionInput > > > const &

        __setitem__(Physics_Signals_FractionInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_FractionInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_FractionInput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_FractionInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::value_type"""
        return _PhysicsSwig.Physics_Signals_FractionInput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_FractionInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_FractionInput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_FractionInput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_FractionInput_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_FractionInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_FractionInput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_FractionInput_Vector self, Physics_Signals_FractionInput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > > &

        """
        return _PhysicsSwig.Physics_Signals_FractionInput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_FractionInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_FractionInput_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_FractionInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_FractionInput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_FractionInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_FractionInput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_FractionInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_FractionInput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_FractionInput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_FractionInput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_FractionInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_FractionInput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_FractionInput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_FractionInput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_FractionInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::iterator

        erase(Physics_Signals_FractionInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_FractionInput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_FractionInput_Vector self) -> Physics_Signals_FractionInput_Vector
        __init__(Physics_Signals_FractionInput_Vector self, Physics_Signals_FractionInput_Vector other) -> Physics_Signals_FractionInput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > > const &

        __init__(Physics_Signals_FractionInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::size_type size) -> Physics_Signals_FractionInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::size_type

        __init__(Physics_Signals_FractionInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::value_type const & value) -> Physics_Signals_FractionInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_FractionInput_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_FractionInput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_FractionInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_FractionInput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_FractionInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_FractionInput_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_FractionInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_FractionInput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_FractionInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_FractionInput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_FractionInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::size_type

        resize(Physics_Signals_FractionInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_FractionInput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_FractionInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::value_type const &

        insert(Physics_Signals_FractionInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_FractionInput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_FractionInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_FractionInput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_FractionInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionInput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_FractionInput_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_FractionInput_Vector

# Register Physics_Signals_FractionInput_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_FractionInput_Vector_swigregister(Physics_Signals_FractionInput_Vector)

class Physics_Signals_FractionOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_FractionOutput_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_FractionOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_FractionOutput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_FractionOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_FractionOutput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_FractionOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_FractionOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_FractionOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_FractionOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::difference_type j) -> Physics_Signals_FractionOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_FractionOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_FractionOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::difference_type

        __setslice__(Physics_Signals_FractionOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::difference_type j, Physics_Signals_FractionOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::FractionOutput > > > const &

        """
        return _PhysicsSwig.Physics_Signals_FractionOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_FractionOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_FractionOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_FractionOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::difference_type

        __delitem__(Physics_Signals_FractionOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_FractionOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_FractionOutput_Vector self, PySliceObject * slice) -> Physics_Signals_FractionOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_FractionOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_FractionOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_FractionOutput_Vector self, PySliceObject * slice, Physics_Signals_FractionOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::FractionOutput > > > const &

        __setitem__(Physics_Signals_FractionOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_FractionOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_FractionOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_FractionOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::value_type"""
        return _PhysicsSwig.Physics_Signals_FractionOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_FractionOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_FractionOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_FractionOutput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_FractionOutput_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_FractionOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_FractionOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_FractionOutput_Vector self, Physics_Signals_FractionOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > > &

        """
        return _PhysicsSwig.Physics_Signals_FractionOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_FractionOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_FractionOutput_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_FractionOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_FractionOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_FractionOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_FractionOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_FractionOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_FractionOutput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_FractionOutput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_FractionOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_FractionOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_FractionOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_FractionOutput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_FractionOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_FractionOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::iterator

        erase(Physics_Signals_FractionOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_FractionOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_FractionOutput_Vector self) -> Physics_Signals_FractionOutput_Vector
        __init__(Physics_Signals_FractionOutput_Vector self, Physics_Signals_FractionOutput_Vector other) -> Physics_Signals_FractionOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > > const &

        __init__(Physics_Signals_FractionOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::size_type size) -> Physics_Signals_FractionOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::size_type

        __init__(Physics_Signals_FractionOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::value_type const & value) -> Physics_Signals_FractionOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_FractionOutput_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_FractionOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_FractionOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_FractionOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_FractionOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_FractionOutput_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_FractionOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_FractionOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_FractionOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_FractionOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_FractionOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::size_type

        resize(Physics_Signals_FractionOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_FractionOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_FractionOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::value_type const &

        insert(Physics_Signals_FractionOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_FractionOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_FractionOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_FractionOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_FractionOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionOutput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_FractionOutput_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_FractionOutput_Vector

# Register Physics_Signals_FractionOutput_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_FractionOutput_Vector_swigregister(Physics_Signals_FractionOutput_Vector)

class Physics_Signals_FractionValue_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_FractionValue_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_FractionValue_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_FractionValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_FractionValue_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_FractionValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_FractionValue_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_FractionValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_FractionValue_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_FractionValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::difference_type j) -> Physics_Signals_FractionValue_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_FractionValue_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_FractionValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::difference_type

        __setslice__(Physics_Signals_FractionValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::difference_type j, Physics_Signals_FractionValue_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue >,std::allocator< std::shared_ptr< openplx::Physics::Signals::FractionValue > > > const &

        """
        return _PhysicsSwig.Physics_Signals_FractionValue_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_FractionValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_FractionValue_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_FractionValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::difference_type

        __delitem__(Physics_Signals_FractionValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_FractionValue_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_FractionValue_Vector self, PySliceObject * slice) -> Physics_Signals_FractionValue_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_FractionValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_FractionValue_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_FractionValue_Vector self, PySliceObject * slice, Physics_Signals_FractionValue_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue >,std::allocator< std::shared_ptr< openplx::Physics::Signals::FractionValue > > > const &

        __setitem__(Physics_Signals_FractionValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_FractionValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_FractionValue_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_FractionValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::value_type"""
        return _PhysicsSwig.Physics_Signals_FractionValue_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_FractionValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_FractionValue_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_FractionValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_FractionValue_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_FractionValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_FractionValue_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_FractionValue_Vector self, Physics_Signals_FractionValue_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > > &

        """
        return _PhysicsSwig.Physics_Signals_FractionValue_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_FractionValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_FractionValue_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_FractionValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_FractionValue_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_FractionValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_FractionValue_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_FractionValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_FractionValue_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_FractionValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_FractionValue_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_FractionValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_FractionValue_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_FractionValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_FractionValue_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_FractionValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::iterator

        erase(Physics_Signals_FractionValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_FractionValue_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_FractionValue_Vector self) -> Physics_Signals_FractionValue_Vector
        __init__(Physics_Signals_FractionValue_Vector self, Physics_Signals_FractionValue_Vector other) -> Physics_Signals_FractionValue_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > > const &

        __init__(Physics_Signals_FractionValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::size_type size) -> Physics_Signals_FractionValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::size_type

        __init__(Physics_Signals_FractionValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::value_type const & value) -> Physics_Signals_FractionValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_FractionValue_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_FractionValue_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_FractionValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_FractionValue_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_FractionValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_FractionValue_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_FractionValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_FractionValue_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_FractionValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_FractionValue_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_FractionValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::size_type

        resize(Physics_Signals_FractionValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_FractionValue_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_FractionValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::value_type const &

        insert(Physics_Signals_FractionValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_FractionValue_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_FractionValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_FractionValue_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_FractionValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::FractionValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_FractionValue_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_FractionValue_Vector

# Register Physics_Signals_FractionValue_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_FractionValue_Vector_swigregister(Physics_Signals_FractionValue_Vector)

class Physics_Signals_Input_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::Input > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_Input_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_Input_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_Input_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Input_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_Input_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Input_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_Input_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Input_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_Input_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::difference_type j) -> Physics_Signals_Input_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Input_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_Input_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::difference_type

        __setslice__(Physics_Signals_Input_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::difference_type j, Physics_Signals_Input_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Input >,std::allocator< std::shared_ptr< openplx::Physics::Signals::Input > > > const &

        """
        return _PhysicsSwig.Physics_Signals_Input_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_Input_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Input_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_Input_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::difference_type

        __delitem__(Physics_Signals_Input_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_Input_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_Input_Vector self, PySliceObject * slice) -> Physics_Signals_Input_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_Input_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Input_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_Input_Vector self, PySliceObject * slice, Physics_Signals_Input_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Input >,std::allocator< std::shared_ptr< openplx::Physics::Signals::Input > > > const &

        __setitem__(Physics_Signals_Input_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_Input_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Input_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_Input_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::value_type"""
        return _PhysicsSwig.Physics_Signals_Input_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_Input_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Input_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_Input_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Input_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_Input_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Input_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_Input_Vector self, Physics_Signals_Input_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Input > > &

        """
        return _PhysicsSwig.Physics_Signals_Input_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_Input_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Input_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_Input_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Input_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_Input_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Input_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_Input_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Input_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_Input_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Input_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_Input_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_Input_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_Input_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Input_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_Input_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::iterator

        erase(Physics_Signals_Input_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_Input_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_Input_Vector self) -> Physics_Signals_Input_Vector
        __init__(Physics_Signals_Input_Vector self, Physics_Signals_Input_Vector other) -> Physics_Signals_Input_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::Input > > const &

        __init__(Physics_Signals_Input_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::size_type size) -> Physics_Signals_Input_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::size_type

        __init__(Physics_Signals_Input_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::value_type const & value) -> Physics_Signals_Input_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_Input_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_Input_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_Input_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Input_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_Input_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Input_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_Input_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Input_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_Input_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Input_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_Input_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::size_type

        resize(Physics_Signals_Input_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Input_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_Input_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::value_type const &

        insert(Physics_Signals_Input_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Input_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_Input_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_Input_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_Input_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Input > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Input_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_Input_Vector

# Register Physics_Signals_Input_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_Input_Vector_swigregister(Physics_Signals_Input_Vector)

class Physics_Signals_InputOutputType_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_InputOutputType_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_InputOutputType_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_InputOutputType_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_InputOutputType_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_InputOutputType_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_InputOutputType_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_InputOutputType_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::size_type"""
        return _PhysicsSwig.Physics_Signals_InputOutputType_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_InputOutputType_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::difference_type j) -> Physics_Signals_InputOutputType_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_InputOutputType_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_InputOutputType_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::difference_type

        __setslice__(Physics_Signals_InputOutputType_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::difference_type j, Physics_Signals_InputOutputType_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType >,std::allocator< std::shared_ptr< openplx::Physics::Signals::InputOutputType > > > const &

        """
        return _PhysicsSwig.Physics_Signals_InputOutputType_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_InputOutputType_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_InputOutputType_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_InputOutputType_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::difference_type

        __delitem__(Physics_Signals_InputOutputType_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_InputOutputType_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_InputOutputType_Vector self, PySliceObject * slice) -> Physics_Signals_InputOutputType_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_InputOutputType_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_InputOutputType_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_InputOutputType_Vector self, PySliceObject * slice, Physics_Signals_InputOutputType_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType >,std::allocator< std::shared_ptr< openplx::Physics::Signals::InputOutputType > > > const &

        __setitem__(Physics_Signals_InputOutputType_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_InputOutputType_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_InputOutputType_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_InputOutputType_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::value_type"""
        return _PhysicsSwig.Physics_Signals_InputOutputType_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_InputOutputType_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_InputOutputType_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_InputOutputType_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_InputOutputType_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_InputOutputType_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::size_type"""
        return _PhysicsSwig.Physics_Signals_InputOutputType_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_InputOutputType_Vector self, Physics_Signals_InputOutputType_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > > &

        """
        return _PhysicsSwig.Physics_Signals_InputOutputType_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_InputOutputType_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::iterator"""
        return _PhysicsSwig.Physics_Signals_InputOutputType_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_InputOutputType_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::iterator"""
        return _PhysicsSwig.Physics_Signals_InputOutputType_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_InputOutputType_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_InputOutputType_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_InputOutputType_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_InputOutputType_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_InputOutputType_Vector self)"""
        return _PhysicsSwig.Physics_Signals_InputOutputType_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_InputOutputType_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_InputOutputType_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_InputOutputType_Vector self)"""
        return _PhysicsSwig.Physics_Signals_InputOutputType_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_InputOutputType_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::iterator

        erase(Physics_Signals_InputOutputType_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_InputOutputType_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_InputOutputType_Vector self) -> Physics_Signals_InputOutputType_Vector
        __init__(Physics_Signals_InputOutputType_Vector self, Physics_Signals_InputOutputType_Vector other) -> Physics_Signals_InputOutputType_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > > const &

        __init__(Physics_Signals_InputOutputType_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::size_type size) -> Physics_Signals_InputOutputType_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::size_type

        __init__(Physics_Signals_InputOutputType_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::value_type const & value) -> Physics_Signals_InputOutputType_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_InputOutputType_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_InputOutputType_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_InputOutputType_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_InputOutputType_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_InputOutputType_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_InputOutputType_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_InputOutputType_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_InputOutputType_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_InputOutputType_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_InputOutputType_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_InputOutputType_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::size_type

        resize(Physics_Signals_InputOutputType_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_InputOutputType_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_InputOutputType_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::value_type const &

        insert(Physics_Signals_InputOutputType_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_InputOutputType_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_InputOutputType_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_InputOutputType_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_InputOutputType_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InputOutputType > >::size_type"""
        return _PhysicsSwig.Physics_Signals_InputOutputType_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_InputOutputType_Vector

# Register Physics_Signals_InputOutputType_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_InputOutputType_Vector_swigregister(Physics_Signals_InputOutputType_Vector)

class Physics_Signals_InputSignal_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_InputSignal_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_InputSignal_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_InputSignal_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_InputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::size_type"""
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_InputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::difference_type j) -> Physics_Signals_InputSignal_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_InputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::difference_type

        __setslice__(Physics_Signals_InputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::difference_type j, Physics_Signals_InputSignal_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal >,std::allocator< std::shared_ptr< openplx::Physics::Signals::InputSignal > > > const &

        """
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_InputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_InputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::difference_type

        __delitem__(Physics_Signals_InputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_InputSignal_Vector self, PySliceObject * slice) -> Physics_Signals_InputSignal_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_InputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_InputSignal_Vector self, PySliceObject * slice, Physics_Signals_InputSignal_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal >,std::allocator< std::shared_ptr< openplx::Physics::Signals::InputSignal > > > const &

        __setitem__(Physics_Signals_InputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_InputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_InputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::value_type"""
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_InputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_InputSignal_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_InputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::size_type"""
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_InputSignal_Vector self, Physics_Signals_InputSignal_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > > &

        """
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_InputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::iterator"""
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_InputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::iterator"""
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_InputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_InputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_InputSignal_Vector self)"""
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_InputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_InputSignal_Vector self)"""
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_InputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::iterator

        erase(Physics_Signals_InputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_InputSignal_Vector self) -> Physics_Signals_InputSignal_Vector
        __init__(Physics_Signals_InputSignal_Vector self, Physics_Signals_InputSignal_Vector other) -> Physics_Signals_InputSignal_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > > const &

        __init__(Physics_Signals_InputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::size_type size) -> Physics_Signals_InputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::size_type

        __init__(Physics_Signals_InputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::value_type const & value) -> Physics_Signals_InputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_InputSignal_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_InputSignal_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_InputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_InputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_InputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_InputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_InputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::size_type

        resize(Physics_Signals_InputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_InputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::value_type const &

        insert(Physics_Signals_InputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_InputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_InputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InputSignal > >::size_type"""
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_InputSignal_Vector

# Register Physics_Signals_InputSignal_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_InputSignal_Vector_swigregister(Physics_Signals_InputSignal_Vector)

class Physics_Signals_IntInput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_IntInput_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_IntInput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_IntInput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_IntInput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_IntInput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_IntInput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_IntInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_IntInput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_IntInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::difference_type j) -> Physics_Signals_IntInput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_IntInput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_IntInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::difference_type

        __setslice__(Physics_Signals_IntInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::difference_type j, Physics_Signals_IntInput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::IntInput > > > const &

        """
        return _PhysicsSwig.Physics_Signals_IntInput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_IntInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_IntInput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_IntInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::difference_type

        __delitem__(Physics_Signals_IntInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_IntInput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_IntInput_Vector self, PySliceObject * slice) -> Physics_Signals_IntInput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_IntInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_IntInput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_IntInput_Vector self, PySliceObject * slice, Physics_Signals_IntInput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::IntInput > > > const &

        __setitem__(Physics_Signals_IntInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_IntInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_IntInput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_IntInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::value_type"""
        return _PhysicsSwig.Physics_Signals_IntInput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_IntInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_IntInput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_IntInput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_IntInput_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_IntInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_IntInput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_IntInput_Vector self, Physics_Signals_IntInput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > > &

        """
        return _PhysicsSwig.Physics_Signals_IntInput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_IntInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_IntInput_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_IntInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_IntInput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_IntInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_IntInput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_IntInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_IntInput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_IntInput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_IntInput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_IntInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_IntInput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_IntInput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_IntInput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_IntInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::iterator

        erase(Physics_Signals_IntInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_IntInput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_IntInput_Vector self) -> Physics_Signals_IntInput_Vector
        __init__(Physics_Signals_IntInput_Vector self, Physics_Signals_IntInput_Vector other) -> Physics_Signals_IntInput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > > const &

        __init__(Physics_Signals_IntInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::size_type size) -> Physics_Signals_IntInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::size_type

        __init__(Physics_Signals_IntInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::value_type const & value) -> Physics_Signals_IntInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_IntInput_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_IntInput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_IntInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_IntInput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_IntInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_IntInput_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_IntInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_IntInput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_IntInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_IntInput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_IntInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::size_type

        resize(Physics_Signals_IntInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_IntInput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_IntInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::value_type const &

        insert(Physics_Signals_IntInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_IntInput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_IntInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_IntInput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_IntInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntInput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_IntInput_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_IntInput_Vector

# Register Physics_Signals_IntInput_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_IntInput_Vector_swigregister(Physics_Signals_IntInput_Vector)

class Physics_Signals_IntInputSignal_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_IntInputSignal_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_IntInputSignal_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_IntInputSignal_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_IntInputSignal_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_IntInputSignal_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_IntInputSignal_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_IntInputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::size_type"""
        return _PhysicsSwig.Physics_Signals_IntInputSignal_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_IntInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::difference_type j) -> Physics_Signals_IntInputSignal_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_IntInputSignal_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_IntInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::difference_type

        __setslice__(Physics_Signals_IntInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::difference_type j, Physics_Signals_IntInputSignal_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal >,std::allocator< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > > > const &

        """
        return _PhysicsSwig.Physics_Signals_IntInputSignal_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_IntInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_IntInputSignal_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_IntInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::difference_type

        __delitem__(Physics_Signals_IntInputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_IntInputSignal_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_IntInputSignal_Vector self, PySliceObject * slice) -> Physics_Signals_IntInputSignal_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_IntInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_IntInputSignal_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_IntInputSignal_Vector self, PySliceObject * slice, Physics_Signals_IntInputSignal_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal >,std::allocator< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > > > const &

        __setitem__(Physics_Signals_IntInputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_IntInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_IntInputSignal_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_IntInputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::value_type"""
        return _PhysicsSwig.Physics_Signals_IntInputSignal_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_IntInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_IntInputSignal_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_IntInputSignal_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_IntInputSignal_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_IntInputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::size_type"""
        return _PhysicsSwig.Physics_Signals_IntInputSignal_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_IntInputSignal_Vector self, Physics_Signals_IntInputSignal_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > > &

        """
        return _PhysicsSwig.Physics_Signals_IntInputSignal_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_IntInputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::iterator"""
        return _PhysicsSwig.Physics_Signals_IntInputSignal_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_IntInputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::iterator"""
        return _PhysicsSwig.Physics_Signals_IntInputSignal_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_IntInputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_IntInputSignal_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_IntInputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_IntInputSignal_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_IntInputSignal_Vector self)"""
        return _PhysicsSwig.Physics_Signals_IntInputSignal_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_IntInputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_IntInputSignal_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_IntInputSignal_Vector self)"""
        return _PhysicsSwig.Physics_Signals_IntInputSignal_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_IntInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::iterator

        erase(Physics_Signals_IntInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_IntInputSignal_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_IntInputSignal_Vector self) -> Physics_Signals_IntInputSignal_Vector
        __init__(Physics_Signals_IntInputSignal_Vector self, Physics_Signals_IntInputSignal_Vector other) -> Physics_Signals_IntInputSignal_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > > const &

        __init__(Physics_Signals_IntInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::size_type size) -> Physics_Signals_IntInputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::size_type

        __init__(Physics_Signals_IntInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::value_type const & value) -> Physics_Signals_IntInputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_IntInputSignal_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_IntInputSignal_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_IntInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_IntInputSignal_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_IntInputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_IntInputSignal_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_IntInputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_IntInputSignal_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_IntInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_IntInputSignal_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_IntInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::size_type

        resize(Physics_Signals_IntInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_IntInputSignal_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_IntInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::value_type const &

        insert(Physics_Signals_IntInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_IntInputSignal_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_IntInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_IntInputSignal_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_IntInputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntInputSignal > >::size_type"""
        return _PhysicsSwig.Physics_Signals_IntInputSignal_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_IntInputSignal_Vector

# Register Physics_Signals_IntInputSignal_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_IntInputSignal_Vector_swigregister(Physics_Signals_IntInputSignal_Vector)

class Physics_Signals_IntOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_IntOutput_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_IntOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_IntOutput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_IntOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_IntOutput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_IntOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_IntOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_IntOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_IntOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::difference_type j) -> Physics_Signals_IntOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_IntOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_IntOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::difference_type

        __setslice__(Physics_Signals_IntOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::difference_type j, Physics_Signals_IntOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::IntOutput > > > const &

        """
        return _PhysicsSwig.Physics_Signals_IntOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_IntOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_IntOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_IntOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::difference_type

        __delitem__(Physics_Signals_IntOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_IntOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_IntOutput_Vector self, PySliceObject * slice) -> Physics_Signals_IntOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_IntOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_IntOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_IntOutput_Vector self, PySliceObject * slice, Physics_Signals_IntOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::IntOutput > > > const &

        __setitem__(Physics_Signals_IntOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_IntOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_IntOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_IntOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::value_type"""
        return _PhysicsSwig.Physics_Signals_IntOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_IntOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_IntOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_IntOutput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_IntOutput_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_IntOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_IntOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_IntOutput_Vector self, Physics_Signals_IntOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > > &

        """
        return _PhysicsSwig.Physics_Signals_IntOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_IntOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_IntOutput_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_IntOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_IntOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_IntOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_IntOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_IntOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_IntOutput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_IntOutput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_IntOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_IntOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_IntOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_IntOutput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_IntOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_IntOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::iterator

        erase(Physics_Signals_IntOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_IntOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_IntOutput_Vector self) -> Physics_Signals_IntOutput_Vector
        __init__(Physics_Signals_IntOutput_Vector self, Physics_Signals_IntOutput_Vector other) -> Physics_Signals_IntOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > > const &

        __init__(Physics_Signals_IntOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::size_type size) -> Physics_Signals_IntOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::size_type

        __init__(Physics_Signals_IntOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::value_type const & value) -> Physics_Signals_IntOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_IntOutput_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_IntOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_IntOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_IntOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_IntOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_IntOutput_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_IntOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_IntOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_IntOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_IntOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_IntOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::size_type

        resize(Physics_Signals_IntOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_IntOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_IntOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::value_type const &

        insert(Physics_Signals_IntOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_IntOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_IntOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_IntOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_IntOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntOutput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_IntOutput_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_IntOutput_Vector

# Register Physics_Signals_IntOutput_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_IntOutput_Vector_swigregister(Physics_Signals_IntOutput_Vector)

class Physics_Signals_IntValue_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_IntValue_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_IntValue_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_IntValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_IntValue_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_IntValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_IntValue_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_IntValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_IntValue_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_IntValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::difference_type j) -> Physics_Signals_IntValue_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_IntValue_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_IntValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::difference_type

        __setslice__(Physics_Signals_IntValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::difference_type j, Physics_Signals_IntValue_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue >,std::allocator< std::shared_ptr< openplx::Physics::Signals::IntValue > > > const &

        """
        return _PhysicsSwig.Physics_Signals_IntValue_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_IntValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_IntValue_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_IntValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::difference_type

        __delitem__(Physics_Signals_IntValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_IntValue_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_IntValue_Vector self, PySliceObject * slice) -> Physics_Signals_IntValue_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_IntValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_IntValue_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_IntValue_Vector self, PySliceObject * slice, Physics_Signals_IntValue_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue >,std::allocator< std::shared_ptr< openplx::Physics::Signals::IntValue > > > const &

        __setitem__(Physics_Signals_IntValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_IntValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_IntValue_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_IntValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::value_type"""
        return _PhysicsSwig.Physics_Signals_IntValue_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_IntValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_IntValue_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_IntValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_IntValue_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_IntValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_IntValue_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_IntValue_Vector self, Physics_Signals_IntValue_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > > &

        """
        return _PhysicsSwig.Physics_Signals_IntValue_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_IntValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_IntValue_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_IntValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_IntValue_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_IntValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_IntValue_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_IntValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_IntValue_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_IntValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_IntValue_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_IntValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_IntValue_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_IntValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_IntValue_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_IntValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::iterator

        erase(Physics_Signals_IntValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_IntValue_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_IntValue_Vector self) -> Physics_Signals_IntValue_Vector
        __init__(Physics_Signals_IntValue_Vector self, Physics_Signals_IntValue_Vector other) -> Physics_Signals_IntValue_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > > const &

        __init__(Physics_Signals_IntValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::size_type size) -> Physics_Signals_IntValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::size_type

        __init__(Physics_Signals_IntValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::value_type const & value) -> Physics_Signals_IntValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_IntValue_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_IntValue_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_IntValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_IntValue_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_IntValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_IntValue_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_IntValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_IntValue_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_IntValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_IntValue_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_IntValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::size_type

        resize(Physics_Signals_IntValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_IntValue_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_IntValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::value_type const &

        insert(Physics_Signals_IntValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_IntValue_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_IntValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_IntValue_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_IntValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::IntValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_IntValue_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_IntValue_Vector

# Register Physics_Signals_IntValue_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_IntValue_Vector_swigregister(Physics_Signals_IntValue_Vector)

class Physics_Signals_InteractionEnabledOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_InteractionEnabledOutput_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_InteractionEnabledOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_InteractionEnabledOutput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_InteractionEnabledOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_InteractionEnabledOutput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_InteractionEnabledOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_InteractionEnabledOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_InteractionEnabledOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_InteractionEnabledOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::difference_type j) -> Physics_Signals_InteractionEnabledOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_InteractionEnabledOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_InteractionEnabledOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::difference_type

        __setslice__(Physics_Signals_InteractionEnabledOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::difference_type j, Physics_Signals_InteractionEnabledOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > > > const &

        """
        return _PhysicsSwig.Physics_Signals_InteractionEnabledOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_InteractionEnabledOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_InteractionEnabledOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_InteractionEnabledOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::difference_type

        __delitem__(Physics_Signals_InteractionEnabledOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_InteractionEnabledOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_InteractionEnabledOutput_Vector self, PySliceObject * slice) -> Physics_Signals_InteractionEnabledOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_InteractionEnabledOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_InteractionEnabledOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_InteractionEnabledOutput_Vector self, PySliceObject * slice, Physics_Signals_InteractionEnabledOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > > > const &

        __setitem__(Physics_Signals_InteractionEnabledOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_InteractionEnabledOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_InteractionEnabledOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_InteractionEnabledOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::value_type"""
        return _PhysicsSwig.Physics_Signals_InteractionEnabledOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_InteractionEnabledOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_InteractionEnabledOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_InteractionEnabledOutput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_InteractionEnabledOutput_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_InteractionEnabledOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_InteractionEnabledOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_InteractionEnabledOutput_Vector self, Physics_Signals_InteractionEnabledOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > > &

        """
        return _PhysicsSwig.Physics_Signals_InteractionEnabledOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_InteractionEnabledOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_InteractionEnabledOutput_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_InteractionEnabledOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_InteractionEnabledOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_InteractionEnabledOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_InteractionEnabledOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_InteractionEnabledOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_InteractionEnabledOutput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_InteractionEnabledOutput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_InteractionEnabledOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_InteractionEnabledOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_InteractionEnabledOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_InteractionEnabledOutput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_InteractionEnabledOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_InteractionEnabledOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::iterator

        erase(Physics_Signals_InteractionEnabledOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_InteractionEnabledOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_InteractionEnabledOutput_Vector self) -> Physics_Signals_InteractionEnabledOutput_Vector
        __init__(Physics_Signals_InteractionEnabledOutput_Vector self, Physics_Signals_InteractionEnabledOutput_Vector other) -> Physics_Signals_InteractionEnabledOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > > const &

        __init__(Physics_Signals_InteractionEnabledOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::size_type size) -> Physics_Signals_InteractionEnabledOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::size_type

        __init__(Physics_Signals_InteractionEnabledOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::value_type const & value) -> Physics_Signals_InteractionEnabledOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_InteractionEnabledOutput_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_InteractionEnabledOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_InteractionEnabledOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_InteractionEnabledOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_InteractionEnabledOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_InteractionEnabledOutput_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_InteractionEnabledOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_InteractionEnabledOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_InteractionEnabledOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_InteractionEnabledOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_InteractionEnabledOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::size_type

        resize(Physics_Signals_InteractionEnabledOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_InteractionEnabledOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_InteractionEnabledOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::value_type const &

        insert(Physics_Signals_InteractionEnabledOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_InteractionEnabledOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_InteractionEnabledOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_InteractionEnabledOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_InteractionEnabledOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_InteractionEnabledOutput_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_InteractionEnabledOutput_Vector

# Register Physics_Signals_InteractionEnabledOutput_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_InteractionEnabledOutput_Vector_swigregister(Physics_Signals_InteractionEnabledOutput_Vector)

class Physics_Signals_LinearVelocity1DInput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_LinearVelocity1DInput_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DInput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_LinearVelocity1DInput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DInput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_LinearVelocity1DInput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DInput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_LinearVelocity1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DInput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_LinearVelocity1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::difference_type j) -> Physics_Signals_LinearVelocity1DInput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DInput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_LinearVelocity1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::difference_type

        __setslice__(Physics_Signals_LinearVelocity1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::difference_type j, Physics_Signals_LinearVelocity1DInput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > > > const &

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DInput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_LinearVelocity1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DInput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_LinearVelocity1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::difference_type

        __delitem__(Physics_Signals_LinearVelocity1DInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DInput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_LinearVelocity1DInput_Vector self, PySliceObject * slice) -> Physics_Signals_LinearVelocity1DInput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_LinearVelocity1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DInput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_LinearVelocity1DInput_Vector self, PySliceObject * slice, Physics_Signals_LinearVelocity1DInput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > > > const &

        __setitem__(Physics_Signals_LinearVelocity1DInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_LinearVelocity1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DInput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_LinearVelocity1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::value_type"""
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DInput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_LinearVelocity1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DInput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_LinearVelocity1DInput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DInput_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_LinearVelocity1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DInput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_LinearVelocity1DInput_Vector self, Physics_Signals_LinearVelocity1DInput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > > &

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DInput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_LinearVelocity1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DInput_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_LinearVelocity1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DInput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_LinearVelocity1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DInput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_LinearVelocity1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DInput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_LinearVelocity1DInput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DInput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_LinearVelocity1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DInput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_LinearVelocity1DInput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DInput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_LinearVelocity1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::iterator

        erase(Physics_Signals_LinearVelocity1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DInput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_LinearVelocity1DInput_Vector self) -> Physics_Signals_LinearVelocity1DInput_Vector
        __init__(Physics_Signals_LinearVelocity1DInput_Vector self, Physics_Signals_LinearVelocity1DInput_Vector other) -> Physics_Signals_LinearVelocity1DInput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > > const &

        __init__(Physics_Signals_LinearVelocity1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::size_type size) -> Physics_Signals_LinearVelocity1DInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::size_type

        __init__(Physics_Signals_LinearVelocity1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::value_type const & value) -> Physics_Signals_LinearVelocity1DInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_LinearVelocity1DInput_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_LinearVelocity1DInput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_LinearVelocity1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DInput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_LinearVelocity1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DInput_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_LinearVelocity1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DInput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_LinearVelocity1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DInput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_LinearVelocity1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::size_type

        resize(Physics_Signals_LinearVelocity1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DInput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_LinearVelocity1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::value_type const &

        insert(Physics_Signals_LinearVelocity1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DInput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_LinearVelocity1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DInput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_LinearVelocity1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DInput_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_LinearVelocity1DInput_Vector

# Register Physics_Signals_LinearVelocity1DInput_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_LinearVelocity1DInput_Vector_swigregister(Physics_Signals_LinearVelocity1DInput_Vector)

class Physics_Signals_LinearVelocity1DOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_LinearVelocity1DOutput_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_LinearVelocity1DOutput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_LinearVelocity1DOutput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_LinearVelocity1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_LinearVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::difference_type j) -> Physics_Signals_LinearVelocity1DOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_LinearVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::difference_type

        __setslice__(Physics_Signals_LinearVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::difference_type j, Physics_Signals_LinearVelocity1DOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > > > const &

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_LinearVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_LinearVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::difference_type

        __delitem__(Physics_Signals_LinearVelocity1DOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_LinearVelocity1DOutput_Vector self, PySliceObject * slice) -> Physics_Signals_LinearVelocity1DOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_LinearVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_LinearVelocity1DOutput_Vector self, PySliceObject * slice, Physics_Signals_LinearVelocity1DOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > > > const &

        __setitem__(Physics_Signals_LinearVelocity1DOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_LinearVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_LinearVelocity1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::value_type"""
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_LinearVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_LinearVelocity1DOutput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DOutput_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_LinearVelocity1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_LinearVelocity1DOutput_Vector self, Physics_Signals_LinearVelocity1DOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > > &

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_LinearVelocity1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DOutput_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_LinearVelocity1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_LinearVelocity1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_LinearVelocity1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DOutput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_LinearVelocity1DOutput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_LinearVelocity1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_LinearVelocity1DOutput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_LinearVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::iterator

        erase(Physics_Signals_LinearVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_LinearVelocity1DOutput_Vector self) -> Physics_Signals_LinearVelocity1DOutput_Vector
        __init__(Physics_Signals_LinearVelocity1DOutput_Vector self, Physics_Signals_LinearVelocity1DOutput_Vector other) -> Physics_Signals_LinearVelocity1DOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > > const &

        __init__(Physics_Signals_LinearVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::size_type size) -> Physics_Signals_LinearVelocity1DOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::size_type

        __init__(Physics_Signals_LinearVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::value_type const & value) -> Physics_Signals_LinearVelocity1DOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_LinearVelocity1DOutput_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_LinearVelocity1DOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_LinearVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_LinearVelocity1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DOutput_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_LinearVelocity1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_LinearVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_LinearVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::size_type

        resize(Physics_Signals_LinearVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_LinearVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::value_type const &

        insert(Physics_Signals_LinearVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_LinearVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_LinearVelocity1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DOutput_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_LinearVelocity1DOutput_Vector

# Register Physics_Signals_LinearVelocity1DOutput_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_LinearVelocity1DOutput_Vector_swigregister(Physics_Signals_LinearVelocity1DOutput_Vector)

class Physics_Signals_Output_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::Output > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_Output_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_Output_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_Output_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Output_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_Output_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Output_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_Output_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Output_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_Output_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::difference_type j) -> Physics_Signals_Output_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Output_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_Output_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::difference_type

        __setslice__(Physics_Signals_Output_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::difference_type j, Physics_Signals_Output_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Output >,std::allocator< std::shared_ptr< openplx::Physics::Signals::Output > > > const &

        """
        return _PhysicsSwig.Physics_Signals_Output_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_Output_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Output_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_Output_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::difference_type

        __delitem__(Physics_Signals_Output_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_Output_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_Output_Vector self, PySliceObject * slice) -> Physics_Signals_Output_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_Output_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Output_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_Output_Vector self, PySliceObject * slice, Physics_Signals_Output_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Output >,std::allocator< std::shared_ptr< openplx::Physics::Signals::Output > > > const &

        __setitem__(Physics_Signals_Output_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_Output_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Output_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_Output_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::value_type"""
        return _PhysicsSwig.Physics_Signals_Output_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_Output_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Output_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_Output_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Output_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_Output_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Output_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_Output_Vector self, Physics_Signals_Output_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Output > > &

        """
        return _PhysicsSwig.Physics_Signals_Output_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_Output_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Output_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_Output_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Output_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_Output_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Output_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_Output_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Output_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_Output_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Output_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_Output_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_Output_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_Output_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Output_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_Output_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::iterator

        erase(Physics_Signals_Output_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_Output_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_Output_Vector self) -> Physics_Signals_Output_Vector
        __init__(Physics_Signals_Output_Vector self, Physics_Signals_Output_Vector other) -> Physics_Signals_Output_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::Output > > const &

        __init__(Physics_Signals_Output_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::size_type size) -> Physics_Signals_Output_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::size_type

        __init__(Physics_Signals_Output_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::value_type const & value) -> Physics_Signals_Output_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_Output_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_Output_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_Output_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Output_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_Output_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Output_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_Output_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Output_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_Output_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Output_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_Output_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::size_type

        resize(Physics_Signals_Output_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Output_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_Output_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::value_type const &

        insert(Physics_Signals_Output_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Output_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_Output_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_Output_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_Output_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Output > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Output_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_Output_Vector

# Register Physics_Signals_Output_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_Output_Vector_swigregister(Physics_Signals_Output_Vector)

class Physics_Signals_OutputSignal_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_OutputSignal_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_OutputSignal_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_OutputSignal_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_OutputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::size_type"""
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_OutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::difference_type j) -> Physics_Signals_OutputSignal_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_OutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::difference_type

        __setslice__(Physics_Signals_OutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::difference_type j, Physics_Signals_OutputSignal_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal >,std::allocator< std::shared_ptr< openplx::Physics::Signals::OutputSignal > > > const &

        """
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_OutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_OutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::difference_type

        __delitem__(Physics_Signals_OutputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_OutputSignal_Vector self, PySliceObject * slice) -> Physics_Signals_OutputSignal_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_OutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_OutputSignal_Vector self, PySliceObject * slice, Physics_Signals_OutputSignal_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal >,std::allocator< std::shared_ptr< openplx::Physics::Signals::OutputSignal > > > const &

        __setitem__(Physics_Signals_OutputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_OutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_OutputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::value_type"""
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_OutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_OutputSignal_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_OutputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::size_type"""
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_OutputSignal_Vector self, Physics_Signals_OutputSignal_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > > &

        """
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_OutputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::iterator"""
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_OutputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::iterator"""
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_OutputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_OutputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_OutputSignal_Vector self)"""
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_OutputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_OutputSignal_Vector self)"""
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_OutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::iterator

        erase(Physics_Signals_OutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_OutputSignal_Vector self) -> Physics_Signals_OutputSignal_Vector
        __init__(Physics_Signals_OutputSignal_Vector self, Physics_Signals_OutputSignal_Vector other) -> Physics_Signals_OutputSignal_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > > const &

        __init__(Physics_Signals_OutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::size_type size) -> Physics_Signals_OutputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::size_type

        __init__(Physics_Signals_OutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::value_type const & value) -> Physics_Signals_OutputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_OutputSignal_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_OutputSignal_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_OutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_OutputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_OutputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_OutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_OutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::size_type

        resize(Physics_Signals_OutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_OutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::value_type const &

        insert(Physics_Signals_OutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_OutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_OutputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::OutputSignal > >::size_type"""
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_OutputSignal_Vector

# Register Physics_Signals_OutputSignal_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_OutputSignal_Vector_swigregister(Physics_Signals_OutputSignal_Vector)

class Physics_Signals_Position1DInput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_Position1DInput_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_Position1DInput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_Position1DInput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Position1DInput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_Position1DInput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Position1DInput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_Position1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Position1DInput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_Position1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::difference_type j) -> Physics_Signals_Position1DInput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Position1DInput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_Position1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::difference_type

        __setslice__(Physics_Signals_Position1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::difference_type j, Physics_Signals_Position1DInput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::Position1DInput > > > const &

        """
        return _PhysicsSwig.Physics_Signals_Position1DInput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_Position1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Position1DInput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_Position1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::difference_type

        __delitem__(Physics_Signals_Position1DInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_Position1DInput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_Position1DInput_Vector self, PySliceObject * slice) -> Physics_Signals_Position1DInput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_Position1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Position1DInput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_Position1DInput_Vector self, PySliceObject * slice, Physics_Signals_Position1DInput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::Position1DInput > > > const &

        __setitem__(Physics_Signals_Position1DInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_Position1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Position1DInput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_Position1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::value_type"""
        return _PhysicsSwig.Physics_Signals_Position1DInput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_Position1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Position1DInput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_Position1DInput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Position1DInput_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_Position1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Position1DInput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_Position1DInput_Vector self, Physics_Signals_Position1DInput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > > &

        """
        return _PhysicsSwig.Physics_Signals_Position1DInput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_Position1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Position1DInput_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_Position1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Position1DInput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_Position1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Position1DInput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_Position1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Position1DInput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_Position1DInput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Position1DInput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_Position1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_Position1DInput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_Position1DInput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Position1DInput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_Position1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::iterator

        erase(Physics_Signals_Position1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_Position1DInput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_Position1DInput_Vector self) -> Physics_Signals_Position1DInput_Vector
        __init__(Physics_Signals_Position1DInput_Vector self, Physics_Signals_Position1DInput_Vector other) -> Physics_Signals_Position1DInput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > > const &

        __init__(Physics_Signals_Position1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::size_type size) -> Physics_Signals_Position1DInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::size_type

        __init__(Physics_Signals_Position1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::value_type const & value) -> Physics_Signals_Position1DInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_Position1DInput_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_Position1DInput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_Position1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Position1DInput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_Position1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Position1DInput_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_Position1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Position1DInput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_Position1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Position1DInput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_Position1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::size_type

        resize(Physics_Signals_Position1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Position1DInput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_Position1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::value_type const &

        insert(Physics_Signals_Position1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Position1DInput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_Position1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_Position1DInput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_Position1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DInput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Position1DInput_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_Position1DInput_Vector

# Register Physics_Signals_Position1DInput_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_Position1DInput_Vector_swigregister(Physics_Signals_Position1DInput_Vector)

class Physics_Signals_Position1DOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_Position1DOutput_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_Position1DOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_Position1DOutput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Position1DOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_Position1DOutput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Position1DOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_Position1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Position1DOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_Position1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::difference_type j) -> Physics_Signals_Position1DOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Position1DOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_Position1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::difference_type

        __setslice__(Physics_Signals_Position1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::difference_type j, Physics_Signals_Position1DOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > > > const &

        """
        return _PhysicsSwig.Physics_Signals_Position1DOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_Position1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Position1DOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_Position1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::difference_type

        __delitem__(Physics_Signals_Position1DOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_Position1DOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_Position1DOutput_Vector self, PySliceObject * slice) -> Physics_Signals_Position1DOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_Position1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Position1DOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_Position1DOutput_Vector self, PySliceObject * slice, Physics_Signals_Position1DOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > > > const &

        __setitem__(Physics_Signals_Position1DOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_Position1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Position1DOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_Position1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::value_type"""
        return _PhysicsSwig.Physics_Signals_Position1DOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_Position1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Position1DOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_Position1DOutput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Position1DOutput_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_Position1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Position1DOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_Position1DOutput_Vector self, Physics_Signals_Position1DOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > > &

        """
        return _PhysicsSwig.Physics_Signals_Position1DOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_Position1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Position1DOutput_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_Position1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Position1DOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_Position1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Position1DOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_Position1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Position1DOutput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_Position1DOutput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Position1DOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_Position1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_Position1DOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_Position1DOutput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Position1DOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_Position1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::iterator

        erase(Physics_Signals_Position1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_Position1DOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_Position1DOutput_Vector self) -> Physics_Signals_Position1DOutput_Vector
        __init__(Physics_Signals_Position1DOutput_Vector self, Physics_Signals_Position1DOutput_Vector other) -> Physics_Signals_Position1DOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > > const &

        __init__(Physics_Signals_Position1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::size_type size) -> Physics_Signals_Position1DOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::size_type

        __init__(Physics_Signals_Position1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::value_type const & value) -> Physics_Signals_Position1DOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_Position1DOutput_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_Position1DOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_Position1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Position1DOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_Position1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Position1DOutput_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_Position1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Position1DOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_Position1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Position1DOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_Position1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::size_type

        resize(Physics_Signals_Position1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Position1DOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_Position1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::value_type const &

        insert(Physics_Signals_Position1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Position1DOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_Position1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_Position1DOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_Position1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position1DOutput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Position1DOutput_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_Position1DOutput_Vector

# Register Physics_Signals_Position1DOutput_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_Position1DOutput_Vector_swigregister(Physics_Signals_Position1DOutput_Vector)

class Physics_Signals_Position3DValue_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_Position3DValue_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_Position3DValue_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_Position3DValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Position3DValue_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_Position3DValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Position3DValue_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_Position3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Position3DValue_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_Position3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::difference_type j) -> Physics_Signals_Position3DValue_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Position3DValue_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_Position3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::difference_type

        __setslice__(Physics_Signals_Position3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::difference_type j, Physics_Signals_Position3DValue_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue >,std::allocator< std::shared_ptr< openplx::Physics::Signals::Position3DValue > > > const &

        """
        return _PhysicsSwig.Physics_Signals_Position3DValue_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_Position3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Position3DValue_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_Position3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::difference_type

        __delitem__(Physics_Signals_Position3DValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_Position3DValue_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_Position3DValue_Vector self, PySliceObject * slice) -> Physics_Signals_Position3DValue_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_Position3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Position3DValue_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_Position3DValue_Vector self, PySliceObject * slice, Physics_Signals_Position3DValue_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue >,std::allocator< std::shared_ptr< openplx::Physics::Signals::Position3DValue > > > const &

        __setitem__(Physics_Signals_Position3DValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_Position3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Position3DValue_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_Position3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::value_type"""
        return _PhysicsSwig.Physics_Signals_Position3DValue_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_Position3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Position3DValue_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_Position3DValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Position3DValue_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_Position3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Position3DValue_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_Position3DValue_Vector self, Physics_Signals_Position3DValue_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > > &

        """
        return _PhysicsSwig.Physics_Signals_Position3DValue_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_Position3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Position3DValue_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_Position3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Position3DValue_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_Position3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Position3DValue_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_Position3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Position3DValue_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_Position3DValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Position3DValue_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_Position3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_Position3DValue_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_Position3DValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Position3DValue_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_Position3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::iterator

        erase(Physics_Signals_Position3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_Position3DValue_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_Position3DValue_Vector self) -> Physics_Signals_Position3DValue_Vector
        __init__(Physics_Signals_Position3DValue_Vector self, Physics_Signals_Position3DValue_Vector other) -> Physics_Signals_Position3DValue_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > > const &

        __init__(Physics_Signals_Position3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::size_type size) -> Physics_Signals_Position3DValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::size_type

        __init__(Physics_Signals_Position3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::value_type const & value) -> Physics_Signals_Position3DValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_Position3DValue_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_Position3DValue_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_Position3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Position3DValue_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_Position3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Position3DValue_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_Position3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Position3DValue_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_Position3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Position3DValue_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_Position3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::size_type

        resize(Physics_Signals_Position3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Position3DValue_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_Position3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::value_type const &

        insert(Physics_Signals_Position3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Position3DValue_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_Position3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_Position3DValue_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_Position3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Position3DValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Position3DValue_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_Position3DValue_Vector

# Register Physics_Signals_Position3DValue_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_Position3DValue_Vector_swigregister(Physics_Signals_Position3DValue_Vector)

class Physics_Signals_RPYvalue_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_RPYvalue_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_RPYvalue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_RPYvalue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_RPYvalue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_RPYvalue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::difference_type j) -> Physics_Signals_RPYvalue_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_RPYvalue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::difference_type

        __setslice__(Physics_Signals_RPYvalue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::difference_type j, Physics_Signals_RPYvalue_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue >,std::allocator< std::shared_ptr< openplx::Physics::Signals::RPYvalue > > > const &

        """
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_RPYvalue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_RPYvalue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::difference_type

        __delitem__(Physics_Signals_RPYvalue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_RPYvalue_Vector self, PySliceObject * slice) -> Physics_Signals_RPYvalue_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_RPYvalue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_RPYvalue_Vector self, PySliceObject * slice, Physics_Signals_RPYvalue_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue >,std::allocator< std::shared_ptr< openplx::Physics::Signals::RPYvalue > > > const &

        __setitem__(Physics_Signals_RPYvalue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_RPYvalue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_RPYvalue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::value_type"""
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_RPYvalue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_RPYvalue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_RPYvalue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_RPYvalue_Vector self, Physics_Signals_RPYvalue_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > > &

        """
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_RPYvalue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_RPYvalue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_RPYvalue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_RPYvalue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_RPYvalue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_RPYvalue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_RPYvalue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_RPYvalue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::iterator

        erase(Physics_Signals_RPYvalue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_RPYvalue_Vector self) -> Physics_Signals_RPYvalue_Vector
        __init__(Physics_Signals_RPYvalue_Vector self, Physics_Signals_RPYvalue_Vector other) -> Physics_Signals_RPYvalue_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > > const &

        __init__(Physics_Signals_RPYvalue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::size_type size) -> Physics_Signals_RPYvalue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::size_type

        __init__(Physics_Signals_RPYvalue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::value_type const & value) -> Physics_Signals_RPYvalue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_RPYvalue_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_RPYvalue_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_RPYvalue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_RPYvalue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_RPYvalue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_RPYvalue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_RPYvalue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::size_type

        resize(Physics_Signals_RPYvalue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_RPYvalue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::value_type const &

        insert(Physics_Signals_RPYvalue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_RPYvalue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_RPYvalue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RPYvalue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_RPYvalue_Vector

# Register Physics_Signals_RPYvalue_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_RPYvalue_Vector_swigregister(Physics_Signals_RPYvalue_Vector)

class Physics_Signals_RealInputSignal_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_RealInputSignal_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_RealInputSignal_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_RealInputSignal_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_RealInputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::size_type"""
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_RealInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::difference_type j) -> Physics_Signals_RealInputSignal_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_RealInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::difference_type

        __setslice__(Physics_Signals_RealInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::difference_type j, Physics_Signals_RealInputSignal_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal >,std::allocator< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > > > const &

        """
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_RealInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_RealInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::difference_type

        __delitem__(Physics_Signals_RealInputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_RealInputSignal_Vector self, PySliceObject * slice) -> Physics_Signals_RealInputSignal_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_RealInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_RealInputSignal_Vector self, PySliceObject * slice, Physics_Signals_RealInputSignal_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal >,std::allocator< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > > > const &

        __setitem__(Physics_Signals_RealInputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_RealInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_RealInputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::value_type"""
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_RealInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_RealInputSignal_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_RealInputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::size_type"""
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_RealInputSignal_Vector self, Physics_Signals_RealInputSignal_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > > &

        """
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_RealInputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::iterator"""
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_RealInputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::iterator"""
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_RealInputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_RealInputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_RealInputSignal_Vector self)"""
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_RealInputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_RealInputSignal_Vector self)"""
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_RealInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::iterator

        erase(Physics_Signals_RealInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_RealInputSignal_Vector self) -> Physics_Signals_RealInputSignal_Vector
        __init__(Physics_Signals_RealInputSignal_Vector self, Physics_Signals_RealInputSignal_Vector other) -> Physics_Signals_RealInputSignal_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > > const &

        __init__(Physics_Signals_RealInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::size_type size) -> Physics_Signals_RealInputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::size_type

        __init__(Physics_Signals_RealInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::value_type const & value) -> Physics_Signals_RealInputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_RealInputSignal_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_RealInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_RealInputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_RealInputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_RealInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_RealInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::size_type

        resize(Physics_Signals_RealInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_RealInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::value_type const &

        insert(Physics_Signals_RealInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_RealInputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_RealInputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RealInputSignal > >::size_type"""
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_RealInputSignal_Vector

# Register Physics_Signals_RealInputSignal_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_RealInputSignal_Vector_swigregister(Physics_Signals_RealInputSignal_Vector)

class Physics_Signals_RealValue_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_RealValue_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_RealValue_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_RealValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_RealValue_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_RealValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_RealValue_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_RealValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_RealValue_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_RealValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::difference_type j) -> Physics_Signals_RealValue_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_RealValue_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_RealValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::difference_type

        __setslice__(Physics_Signals_RealValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::difference_type j, Physics_Signals_RealValue_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue >,std::allocator< std::shared_ptr< openplx::Physics::Signals::RealValue > > > const &

        """
        return _PhysicsSwig.Physics_Signals_RealValue_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_RealValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_RealValue_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_RealValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::difference_type

        __delitem__(Physics_Signals_RealValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_RealValue_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_RealValue_Vector self, PySliceObject * slice) -> Physics_Signals_RealValue_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_RealValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_RealValue_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_RealValue_Vector self, PySliceObject * slice, Physics_Signals_RealValue_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue >,std::allocator< std::shared_ptr< openplx::Physics::Signals::RealValue > > > const &

        __setitem__(Physics_Signals_RealValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_RealValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RealValue_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_RealValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::value_type"""
        return _PhysicsSwig.Physics_Signals_RealValue_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_RealValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RealValue_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_RealValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_RealValue_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_RealValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_RealValue_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_RealValue_Vector self, Physics_Signals_RealValue_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > > &

        """
        return _PhysicsSwig.Physics_Signals_RealValue_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_RealValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_RealValue_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_RealValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_RealValue_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_RealValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_RealValue_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_RealValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_RealValue_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_RealValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_RealValue_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_RealValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_RealValue_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_RealValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_RealValue_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_RealValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::iterator

        erase(Physics_Signals_RealValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_RealValue_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_RealValue_Vector self) -> Physics_Signals_RealValue_Vector
        __init__(Physics_Signals_RealValue_Vector self, Physics_Signals_RealValue_Vector other) -> Physics_Signals_RealValue_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > > const &

        __init__(Physics_Signals_RealValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::size_type size) -> Physics_Signals_RealValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::size_type

        __init__(Physics_Signals_RealValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::value_type const & value) -> Physics_Signals_RealValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_RealValue_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_RealValue_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_RealValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RealValue_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_RealValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_RealValue_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_RealValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_RealValue_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_RealValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RealValue_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_RealValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::size_type

        resize(Physics_Signals_RealValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RealValue_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_RealValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::value_type const &

        insert(Physics_Signals_RealValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RealValue_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_RealValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_RealValue_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_RealValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RealValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_RealValue_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_RealValue_Vector

# Register Physics_Signals_RealValue_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_RealValue_Vector_swigregister(Physics_Signals_RealValue_Vector)

class Physics_Signals_RelativeVelocity1DOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_RelativeVelocity1DOutput_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_RelativeVelocity1DOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_RelativeVelocity1DOutput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_RelativeVelocity1DOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_RelativeVelocity1DOutput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_RelativeVelocity1DOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_RelativeVelocity1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_RelativeVelocity1DOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_RelativeVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::difference_type j) -> Physics_Signals_RelativeVelocity1DOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_RelativeVelocity1DOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_RelativeVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::difference_type

        __setslice__(Physics_Signals_RelativeVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::difference_type j, Physics_Signals_RelativeVelocity1DOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > > > const &

        """
        return _PhysicsSwig.Physics_Signals_RelativeVelocity1DOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_RelativeVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_RelativeVelocity1DOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_RelativeVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::difference_type

        __delitem__(Physics_Signals_RelativeVelocity1DOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_RelativeVelocity1DOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_RelativeVelocity1DOutput_Vector self, PySliceObject * slice) -> Physics_Signals_RelativeVelocity1DOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_RelativeVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_RelativeVelocity1DOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_RelativeVelocity1DOutput_Vector self, PySliceObject * slice, Physics_Signals_RelativeVelocity1DOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > > > const &

        __setitem__(Physics_Signals_RelativeVelocity1DOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_RelativeVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RelativeVelocity1DOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_RelativeVelocity1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::value_type"""
        return _PhysicsSwig.Physics_Signals_RelativeVelocity1DOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_RelativeVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RelativeVelocity1DOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_RelativeVelocity1DOutput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_RelativeVelocity1DOutput_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_RelativeVelocity1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_RelativeVelocity1DOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_RelativeVelocity1DOutput_Vector self, Physics_Signals_RelativeVelocity1DOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > > &

        """
        return _PhysicsSwig.Physics_Signals_RelativeVelocity1DOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_RelativeVelocity1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_RelativeVelocity1DOutput_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_RelativeVelocity1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_RelativeVelocity1DOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_RelativeVelocity1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_RelativeVelocity1DOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_RelativeVelocity1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_RelativeVelocity1DOutput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_RelativeVelocity1DOutput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_RelativeVelocity1DOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_RelativeVelocity1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_RelativeVelocity1DOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_RelativeVelocity1DOutput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_RelativeVelocity1DOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_RelativeVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::iterator

        erase(Physics_Signals_RelativeVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_RelativeVelocity1DOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_RelativeVelocity1DOutput_Vector self) -> Physics_Signals_RelativeVelocity1DOutput_Vector
        __init__(Physics_Signals_RelativeVelocity1DOutput_Vector self, Physics_Signals_RelativeVelocity1DOutput_Vector other) -> Physics_Signals_RelativeVelocity1DOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > > const &

        __init__(Physics_Signals_RelativeVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::size_type size) -> Physics_Signals_RelativeVelocity1DOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::size_type

        __init__(Physics_Signals_RelativeVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::value_type const & value) -> Physics_Signals_RelativeVelocity1DOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_RelativeVelocity1DOutput_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_RelativeVelocity1DOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_RelativeVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RelativeVelocity1DOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_RelativeVelocity1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_RelativeVelocity1DOutput_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_RelativeVelocity1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_RelativeVelocity1DOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_RelativeVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RelativeVelocity1DOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_RelativeVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::size_type

        resize(Physics_Signals_RelativeVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RelativeVelocity1DOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_RelativeVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::value_type const &

        insert(Physics_Signals_RelativeVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RelativeVelocity1DOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_RelativeVelocity1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_RelativeVelocity1DOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_RelativeVelocity1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_RelativeVelocity1DOutput_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_RelativeVelocity1DOutput_Vector

# Register Physics_Signals_RelativeVelocity1DOutput_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_RelativeVelocity1DOutput_Vector_swigregister(Physics_Signals_RelativeVelocity1DOutput_Vector)

class Physics_Signals_Torque1DInput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_Torque1DInput_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_Torque1DInput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_Torque1DInput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Torque1DInput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_Torque1DInput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Torque1DInput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_Torque1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Torque1DInput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_Torque1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::difference_type j) -> Physics_Signals_Torque1DInput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Torque1DInput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_Torque1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::difference_type

        __setslice__(Physics_Signals_Torque1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::difference_type j, Physics_Signals_Torque1DInput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > > > const &

        """
        return _PhysicsSwig.Physics_Signals_Torque1DInput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_Torque1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Torque1DInput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_Torque1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::difference_type

        __delitem__(Physics_Signals_Torque1DInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_Torque1DInput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_Torque1DInput_Vector self, PySliceObject * slice) -> Physics_Signals_Torque1DInput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_Torque1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Torque1DInput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_Torque1DInput_Vector self, PySliceObject * slice, Physics_Signals_Torque1DInput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > > > const &

        __setitem__(Physics_Signals_Torque1DInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_Torque1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Torque1DInput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_Torque1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::value_type"""
        return _PhysicsSwig.Physics_Signals_Torque1DInput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_Torque1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Torque1DInput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_Torque1DInput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Torque1DInput_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_Torque1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Torque1DInput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_Torque1DInput_Vector self, Physics_Signals_Torque1DInput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > > &

        """
        return _PhysicsSwig.Physics_Signals_Torque1DInput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_Torque1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Torque1DInput_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_Torque1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Torque1DInput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_Torque1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Torque1DInput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_Torque1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Torque1DInput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_Torque1DInput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Torque1DInput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_Torque1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_Torque1DInput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_Torque1DInput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Torque1DInput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_Torque1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::iterator

        erase(Physics_Signals_Torque1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_Torque1DInput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_Torque1DInput_Vector self) -> Physics_Signals_Torque1DInput_Vector
        __init__(Physics_Signals_Torque1DInput_Vector self, Physics_Signals_Torque1DInput_Vector other) -> Physics_Signals_Torque1DInput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > > const &

        __init__(Physics_Signals_Torque1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::size_type size) -> Physics_Signals_Torque1DInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::size_type

        __init__(Physics_Signals_Torque1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::value_type const & value) -> Physics_Signals_Torque1DInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_Torque1DInput_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_Torque1DInput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_Torque1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Torque1DInput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_Torque1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Torque1DInput_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_Torque1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Torque1DInput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_Torque1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Torque1DInput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_Torque1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::size_type

        resize(Physics_Signals_Torque1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Torque1DInput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_Torque1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::value_type const &

        insert(Physics_Signals_Torque1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Torque1DInput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_Torque1DInput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_Torque1DInput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_Torque1DInput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DInput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Torque1DInput_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_Torque1DInput_Vector

# Register Physics_Signals_Torque1DInput_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_Torque1DInput_Vector_swigregister(Physics_Signals_Torque1DInput_Vector)

class Physics_Signals_Torque1DOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_Torque1DOutput_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_Torque1DOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_Torque1DOutput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Torque1DOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_Torque1DOutput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Torque1DOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_Torque1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Torque1DOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_Torque1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::difference_type j) -> Physics_Signals_Torque1DOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Torque1DOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_Torque1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::difference_type

        __setslice__(Physics_Signals_Torque1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::difference_type j, Physics_Signals_Torque1DOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > > > const &

        """
        return _PhysicsSwig.Physics_Signals_Torque1DOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_Torque1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Torque1DOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_Torque1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::difference_type

        __delitem__(Physics_Signals_Torque1DOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_Torque1DOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_Torque1DOutput_Vector self, PySliceObject * slice) -> Physics_Signals_Torque1DOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_Torque1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Torque1DOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_Torque1DOutput_Vector self, PySliceObject * slice, Physics_Signals_Torque1DOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput >,std::allocator< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > > > const &

        __setitem__(Physics_Signals_Torque1DOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_Torque1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Torque1DOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_Torque1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::value_type"""
        return _PhysicsSwig.Physics_Signals_Torque1DOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_Torque1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Torque1DOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_Torque1DOutput_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Torque1DOutput_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_Torque1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Torque1DOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_Torque1DOutput_Vector self, Physics_Signals_Torque1DOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > > &

        """
        return _PhysicsSwig.Physics_Signals_Torque1DOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_Torque1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Torque1DOutput_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_Torque1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Torque1DOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_Torque1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Torque1DOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_Torque1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Torque1DOutput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_Torque1DOutput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Torque1DOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_Torque1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_Torque1DOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_Torque1DOutput_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Torque1DOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_Torque1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::iterator

        erase(Physics_Signals_Torque1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_Torque1DOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_Torque1DOutput_Vector self) -> Physics_Signals_Torque1DOutput_Vector
        __init__(Physics_Signals_Torque1DOutput_Vector self, Physics_Signals_Torque1DOutput_Vector other) -> Physics_Signals_Torque1DOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > > const &

        __init__(Physics_Signals_Torque1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::size_type size) -> Physics_Signals_Torque1DOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::size_type

        __init__(Physics_Signals_Torque1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::value_type const & value) -> Physics_Signals_Torque1DOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_Torque1DOutput_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_Torque1DOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_Torque1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Torque1DOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_Torque1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Torque1DOutput_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_Torque1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Torque1DOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_Torque1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Torque1DOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_Torque1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::size_type

        resize(Physics_Signals_Torque1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Torque1DOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_Torque1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::value_type const &

        insert(Physics_Signals_Torque1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Torque1DOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_Torque1DOutput_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_Torque1DOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_Torque1DOutput_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DOutput > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Torque1DOutput_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_Torque1DOutput_Vector

# Register Physics_Signals_Torque1DOutput_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_Torque1DOutput_Vector_swigregister(Physics_Signals_Torque1DOutput_Vector)

class Physics_Signals_Torque1DValue_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_Torque1DValue_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_Torque1DValue_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_Torque1DValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Torque1DValue_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_Torque1DValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Torque1DValue_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_Torque1DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Torque1DValue_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_Torque1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::difference_type j) -> Physics_Signals_Torque1DValue_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Torque1DValue_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_Torque1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::difference_type

        __setslice__(Physics_Signals_Torque1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::difference_type j, Physics_Signals_Torque1DValue_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue >,std::allocator< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > > > const &

        """
        return _PhysicsSwig.Physics_Signals_Torque1DValue_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_Torque1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Torque1DValue_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_Torque1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::difference_type

        __delitem__(Physics_Signals_Torque1DValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_Torque1DValue_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_Torque1DValue_Vector self, PySliceObject * slice) -> Physics_Signals_Torque1DValue_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_Torque1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Torque1DValue_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_Torque1DValue_Vector self, PySliceObject * slice, Physics_Signals_Torque1DValue_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue >,std::allocator< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > > > const &

        __setitem__(Physics_Signals_Torque1DValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_Torque1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Torque1DValue_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_Torque1DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::value_type"""
        return _PhysicsSwig.Physics_Signals_Torque1DValue_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_Torque1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Torque1DValue_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_Torque1DValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Torque1DValue_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_Torque1DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Torque1DValue_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_Torque1DValue_Vector self, Physics_Signals_Torque1DValue_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > > &

        """
        return _PhysicsSwig.Physics_Signals_Torque1DValue_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_Torque1DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Torque1DValue_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_Torque1DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Torque1DValue_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_Torque1DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Torque1DValue_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_Torque1DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Torque1DValue_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_Torque1DValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Torque1DValue_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_Torque1DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_Torque1DValue_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_Torque1DValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Torque1DValue_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_Torque1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::iterator

        erase(Physics_Signals_Torque1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_Torque1DValue_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_Torque1DValue_Vector self) -> Physics_Signals_Torque1DValue_Vector
        __init__(Physics_Signals_Torque1DValue_Vector self, Physics_Signals_Torque1DValue_Vector other) -> Physics_Signals_Torque1DValue_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > > const &

        __init__(Physics_Signals_Torque1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::size_type size) -> Physics_Signals_Torque1DValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::size_type

        __init__(Physics_Signals_Torque1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::value_type const & value) -> Physics_Signals_Torque1DValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_Torque1DValue_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_Torque1DValue_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_Torque1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Torque1DValue_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_Torque1DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Torque1DValue_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_Torque1DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Torque1DValue_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_Torque1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Torque1DValue_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_Torque1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::size_type

        resize(Physics_Signals_Torque1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Torque1DValue_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_Torque1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::value_type const &

        insert(Physics_Signals_Torque1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Torque1DValue_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_Torque1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_Torque1DValue_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_Torque1DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque1DValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Torque1DValue_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_Torque1DValue_Vector

# Register Physics_Signals_Torque1DValue_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_Torque1DValue_Vector_swigregister(Physics_Signals_Torque1DValue_Vector)

class Physics_Signals_Torque3DValue_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_Torque3DValue_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_Torque3DValue_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_Torque3DValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Torque3DValue_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_Torque3DValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Torque3DValue_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_Torque3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Torque3DValue_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_Torque3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::difference_type j) -> Physics_Signals_Torque3DValue_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Torque3DValue_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_Torque3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::difference_type

        __setslice__(Physics_Signals_Torque3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::difference_type j, Physics_Signals_Torque3DValue_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue >,std::allocator< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > > > const &

        """
        return _PhysicsSwig.Physics_Signals_Torque3DValue_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_Torque3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Torque3DValue_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_Torque3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::difference_type

        __delitem__(Physics_Signals_Torque3DValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_Torque3DValue_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_Torque3DValue_Vector self, PySliceObject * slice) -> Physics_Signals_Torque3DValue_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_Torque3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Torque3DValue_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_Torque3DValue_Vector self, PySliceObject * slice, Physics_Signals_Torque3DValue_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue >,std::allocator< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > > > const &

        __setitem__(Physics_Signals_Torque3DValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_Torque3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Torque3DValue_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_Torque3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::value_type"""
        return _PhysicsSwig.Physics_Signals_Torque3DValue_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_Torque3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Torque3DValue_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_Torque3DValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Torque3DValue_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_Torque3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Torque3DValue_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_Torque3DValue_Vector self, Physics_Signals_Torque3DValue_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > > &

        """
        return _PhysicsSwig.Physics_Signals_Torque3DValue_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_Torque3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Torque3DValue_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_Torque3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Torque3DValue_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_Torque3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Torque3DValue_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_Torque3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Torque3DValue_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_Torque3DValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Torque3DValue_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_Torque3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_Torque3DValue_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_Torque3DValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Torque3DValue_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_Torque3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::iterator

        erase(Physics_Signals_Torque3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_Torque3DValue_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_Torque3DValue_Vector self) -> Physics_Signals_Torque3DValue_Vector
        __init__(Physics_Signals_Torque3DValue_Vector self, Physics_Signals_Torque3DValue_Vector other) -> Physics_Signals_Torque3DValue_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > > const &

        __init__(Physics_Signals_Torque3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::size_type size) -> Physics_Signals_Torque3DValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::size_type

        __init__(Physics_Signals_Torque3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::value_type const & value) -> Physics_Signals_Torque3DValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_Torque3DValue_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_Torque3DValue_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_Torque3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Torque3DValue_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_Torque3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Torque3DValue_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_Torque3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Torque3DValue_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_Torque3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Torque3DValue_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_Torque3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::size_type

        resize(Physics_Signals_Torque3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Torque3DValue_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_Torque3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::value_type const &

        insert(Physics_Signals_Torque3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Torque3DValue_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_Torque3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_Torque3DValue_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_Torque3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Torque3DValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Torque3DValue_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_Torque3DValue_Vector

# Register Physics_Signals_Torque3DValue_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_Torque3DValue_Vector_swigregister(Physics_Signals_Torque3DValue_Vector)

class Physics_Signals_Value_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::Value > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_Value_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_Value_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_Value_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Value_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_Value_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Value_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_Value_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Value_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_Value_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::difference_type j) -> Physics_Signals_Value_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Value_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_Value_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::difference_type

        __setslice__(Physics_Signals_Value_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::difference_type j, Physics_Signals_Value_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Value >,std::allocator< std::shared_ptr< openplx::Physics::Signals::Value > > > const &

        """
        return _PhysicsSwig.Physics_Signals_Value_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_Value_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Value_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_Value_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::difference_type

        __delitem__(Physics_Signals_Value_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_Value_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_Value_Vector self, PySliceObject * slice) -> Physics_Signals_Value_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_Value_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Value_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_Value_Vector self, PySliceObject * slice, Physics_Signals_Value_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Value >,std::allocator< std::shared_ptr< openplx::Physics::Signals::Value > > > const &

        __setitem__(Physics_Signals_Value_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_Value_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Value_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_Value_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::value_type"""
        return _PhysicsSwig.Physics_Signals_Value_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_Value_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Value_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_Value_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Value_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_Value_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Value_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_Value_Vector self, Physics_Signals_Value_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Value > > &

        """
        return _PhysicsSwig.Physics_Signals_Value_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_Value_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Value_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_Value_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Value_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_Value_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Value_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_Value_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Value_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_Value_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Value_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_Value_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_Value_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_Value_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Value_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_Value_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::iterator

        erase(Physics_Signals_Value_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_Value_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_Value_Vector self) -> Physics_Signals_Value_Vector
        __init__(Physics_Signals_Value_Vector self, Physics_Signals_Value_Vector other) -> Physics_Signals_Value_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::Value > > const &

        __init__(Physics_Signals_Value_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::size_type size) -> Physics_Signals_Value_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::size_type

        __init__(Physics_Signals_Value_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::value_type const & value) -> Physics_Signals_Value_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_Value_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_Value_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_Value_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Value_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_Value_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Value_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_Value_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Value_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_Value_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Value_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_Value_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::size_type

        resize(Physics_Signals_Value_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Value_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_Value_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::value_type const &

        insert(Physics_Signals_Value_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Value_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_Value_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_Value_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_Value_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Value > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Value_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_Value_Vector

# Register Physics_Signals_Value_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_Value_Vector_swigregister(Physics_Signals_Value_Vector)

class Physics_Signals_ValueOutputSignal_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_ValueOutputSignal_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_ValueOutputSignal_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_ValueOutputSignal_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_ValueOutputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::size_type"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_ValueOutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::difference_type j) -> Physics_Signals_ValueOutputSignal_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_ValueOutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::difference_type

        __setslice__(Physics_Signals_ValueOutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::difference_type j, Physics_Signals_ValueOutputSignal_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >,std::allocator< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > > > const &

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_ValueOutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_ValueOutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::difference_type

        __delitem__(Physics_Signals_ValueOutputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_ValueOutputSignal_Vector self, PySliceObject * slice) -> Physics_Signals_ValueOutputSignal_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_ValueOutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_ValueOutputSignal_Vector self, PySliceObject * slice, Physics_Signals_ValueOutputSignal_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >,std::allocator< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > > > const &

        __setitem__(Physics_Signals_ValueOutputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_ValueOutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_ValueOutputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::value_type"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_ValueOutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_ValueOutputSignal_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_ValueOutputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::size_type"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_ValueOutputSignal_Vector self, Physics_Signals_ValueOutputSignal_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > > &

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_ValueOutputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::iterator"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_ValueOutputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::iterator"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_ValueOutputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_ValueOutputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_ValueOutputSignal_Vector self)"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_ValueOutputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_ValueOutputSignal_Vector self)"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_ValueOutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::iterator

        erase(Physics_Signals_ValueOutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_ValueOutputSignal_Vector self) -> Physics_Signals_ValueOutputSignal_Vector
        __init__(Physics_Signals_ValueOutputSignal_Vector self, Physics_Signals_ValueOutputSignal_Vector other) -> Physics_Signals_ValueOutputSignal_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > > const &

        __init__(Physics_Signals_ValueOutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::size_type size) -> Physics_Signals_ValueOutputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::size_type

        __init__(Physics_Signals_ValueOutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::value_type const & value) -> Physics_Signals_ValueOutputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_ValueOutputSignal_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_ValueOutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_ValueOutputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_ValueOutputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_ValueOutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_ValueOutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::size_type

        resize(Physics_Signals_ValueOutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_ValueOutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::value_type const &

        insert(Physics_Signals_ValueOutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_ValueOutputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_ValueOutputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal > >::size_type"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_ValueOutputSignal_Vector

# Register Physics_Signals_ValueOutputSignal_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_swigregister(Physics_Signals_ValueOutputSignal_Vector)

class Physics_Signals_Vec3InputSignal_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_Vec3InputSignal_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_Vec3InputSignal_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_Vec3InputSignal_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Vec3InputSignal_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_Vec3InputSignal_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Vec3InputSignal_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_Vec3InputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Vec3InputSignal_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_Vec3InputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::difference_type j) -> Physics_Signals_Vec3InputSignal_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Vec3InputSignal_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_Vec3InputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::difference_type

        __setslice__(Physics_Signals_Vec3InputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::difference_type j, Physics_Signals_Vec3InputSignal_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal >,std::allocator< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > > > const &

        """
        return _PhysicsSwig.Physics_Signals_Vec3InputSignal_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_Vec3InputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Vec3InputSignal_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_Vec3InputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::difference_type

        __delitem__(Physics_Signals_Vec3InputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_Vec3InputSignal_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_Vec3InputSignal_Vector self, PySliceObject * slice) -> Physics_Signals_Vec3InputSignal_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_Vec3InputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Vec3InputSignal_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_Vec3InputSignal_Vector self, PySliceObject * slice, Physics_Signals_Vec3InputSignal_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal >,std::allocator< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > > > const &

        __setitem__(Physics_Signals_Vec3InputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_Vec3InputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Vec3InputSignal_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_Vec3InputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::value_type"""
        return _PhysicsSwig.Physics_Signals_Vec3InputSignal_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_Vec3InputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Vec3InputSignal_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_Vec3InputSignal_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Vec3InputSignal_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_Vec3InputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Vec3InputSignal_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_Vec3InputSignal_Vector self, Physics_Signals_Vec3InputSignal_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > > &

        """
        return _PhysicsSwig.Physics_Signals_Vec3InputSignal_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_Vec3InputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Vec3InputSignal_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_Vec3InputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Vec3InputSignal_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_Vec3InputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Vec3InputSignal_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_Vec3InputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Vec3InputSignal_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_Vec3InputSignal_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Vec3InputSignal_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_Vec3InputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_Vec3InputSignal_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_Vec3InputSignal_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Vec3InputSignal_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_Vec3InputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::iterator

        erase(Physics_Signals_Vec3InputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_Vec3InputSignal_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_Vec3InputSignal_Vector self) -> Physics_Signals_Vec3InputSignal_Vector
        __init__(Physics_Signals_Vec3InputSignal_Vector self, Physics_Signals_Vec3InputSignal_Vector other) -> Physics_Signals_Vec3InputSignal_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > > const &

        __init__(Physics_Signals_Vec3InputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::size_type size) -> Physics_Signals_Vec3InputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::size_type

        __init__(Physics_Signals_Vec3InputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::value_type const & value) -> Physics_Signals_Vec3InputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_Vec3InputSignal_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_Vec3InputSignal_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_Vec3InputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Vec3InputSignal_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_Vec3InputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Vec3InputSignal_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_Vec3InputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Vec3InputSignal_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_Vec3InputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Vec3InputSignal_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_Vec3InputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::size_type

        resize(Physics_Signals_Vec3InputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Vec3InputSignal_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_Vec3InputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::value_type const &

        insert(Physics_Signals_Vec3InputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Vec3InputSignal_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_Vec3InputSignal_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_Vec3InputSignal_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_Vec3InputSignal_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Vec3InputSignal_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_Vec3InputSignal_Vector

# Register Physics_Signals_Vec3InputSignal_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_Vec3InputSignal_Vector_swigregister(Physics_Signals_Vec3InputSignal_Vector)

class Physics_Signals_Vec3Value_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_Vec3Value_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_Vec3Value_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_Vec3Value_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_Vec3Value_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_Vec3Value_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::difference_type j) -> Physics_Signals_Vec3Value_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_Vec3Value_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::difference_type

        __setslice__(Physics_Signals_Vec3Value_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::difference_type j, Physics_Signals_Vec3Value_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value >,std::allocator< std::shared_ptr< openplx::Physics::Signals::Vec3Value > > > const &

        """
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_Vec3Value_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_Vec3Value_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::difference_type

        __delitem__(Physics_Signals_Vec3Value_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_Vec3Value_Vector self, PySliceObject * slice) -> Physics_Signals_Vec3Value_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_Vec3Value_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_Vec3Value_Vector self, PySliceObject * slice, Physics_Signals_Vec3Value_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value >,std::allocator< std::shared_ptr< openplx::Physics::Signals::Vec3Value > > > const &

        __setitem__(Physics_Signals_Vec3Value_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_Vec3Value_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_Vec3Value_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::value_type"""
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_Vec3Value_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_Vec3Value_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_Vec3Value_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_Vec3Value_Vector self, Physics_Signals_Vec3Value_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > > &

        """
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_Vec3Value_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_Vec3Value_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_Vec3Value_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_Vec3Value_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_Vec3Value_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_Vec3Value_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_Vec3Value_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_Vec3Value_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::iterator

        erase(Physics_Signals_Vec3Value_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_Vec3Value_Vector self) -> Physics_Signals_Vec3Value_Vector
        __init__(Physics_Signals_Vec3Value_Vector self, Physics_Signals_Vec3Value_Vector other) -> Physics_Signals_Vec3Value_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > > const &

        __init__(Physics_Signals_Vec3Value_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::size_type size) -> Physics_Signals_Vec3Value_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::size_type

        __init__(Physics_Signals_Vec3Value_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::value_type const & value) -> Physics_Signals_Vec3Value_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_Vec3Value_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_Vec3Value_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_Vec3Value_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_Vec3Value_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_Vec3Value_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_Vec3Value_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_Vec3Value_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::size_type

        resize(Physics_Signals_Vec3Value_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_Vec3Value_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::value_type const &

        insert(Physics_Signals_Vec3Value_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_Vec3Value_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_Vec3Value_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Vec3Value > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_Vec3Value_Vector

# Register Physics_Signals_Vec3Value_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_Vec3Value_Vector_swigregister(Physics_Signals_Vec3Value_Vector)

class Physics_Signals_Velocity1DValue_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_Velocity1DValue_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_Velocity1DValue_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_Velocity1DValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Velocity1DValue_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_Velocity1DValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Velocity1DValue_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_Velocity1DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Velocity1DValue_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_Velocity1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::difference_type j) -> Physics_Signals_Velocity1DValue_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Velocity1DValue_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_Velocity1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::difference_type

        __setslice__(Physics_Signals_Velocity1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::difference_type j, Physics_Signals_Velocity1DValue_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue >,std::allocator< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > > > const &

        """
        return _PhysicsSwig.Physics_Signals_Velocity1DValue_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_Velocity1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Velocity1DValue_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_Velocity1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::difference_type

        __delitem__(Physics_Signals_Velocity1DValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_Velocity1DValue_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_Velocity1DValue_Vector self, PySliceObject * slice) -> Physics_Signals_Velocity1DValue_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_Velocity1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Velocity1DValue_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_Velocity1DValue_Vector self, PySliceObject * slice, Physics_Signals_Velocity1DValue_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue >,std::allocator< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > > > const &

        __setitem__(Physics_Signals_Velocity1DValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_Velocity1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Velocity1DValue_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_Velocity1DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::value_type"""
        return _PhysicsSwig.Physics_Signals_Velocity1DValue_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_Velocity1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Velocity1DValue_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_Velocity1DValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Velocity1DValue_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_Velocity1DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Velocity1DValue_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_Velocity1DValue_Vector self, Physics_Signals_Velocity1DValue_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > > &

        """
        return _PhysicsSwig.Physics_Signals_Velocity1DValue_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_Velocity1DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Velocity1DValue_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_Velocity1DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Velocity1DValue_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_Velocity1DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Velocity1DValue_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_Velocity1DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Velocity1DValue_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_Velocity1DValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Velocity1DValue_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_Velocity1DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_Velocity1DValue_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_Velocity1DValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Velocity1DValue_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_Velocity1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::iterator

        erase(Physics_Signals_Velocity1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_Velocity1DValue_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_Velocity1DValue_Vector self) -> Physics_Signals_Velocity1DValue_Vector
        __init__(Physics_Signals_Velocity1DValue_Vector self, Physics_Signals_Velocity1DValue_Vector other) -> Physics_Signals_Velocity1DValue_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > > const &

        __init__(Physics_Signals_Velocity1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::size_type size) -> Physics_Signals_Velocity1DValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::size_type

        __init__(Physics_Signals_Velocity1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::value_type const & value) -> Physics_Signals_Velocity1DValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_Velocity1DValue_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_Velocity1DValue_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_Velocity1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Velocity1DValue_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_Velocity1DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Velocity1DValue_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_Velocity1DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Velocity1DValue_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_Velocity1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Velocity1DValue_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_Velocity1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::size_type

        resize(Physics_Signals_Velocity1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Velocity1DValue_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_Velocity1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::value_type const &

        insert(Physics_Signals_Velocity1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Velocity1DValue_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_Velocity1DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_Velocity1DValue_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_Velocity1DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity1DValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Velocity1DValue_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_Velocity1DValue_Vector

# Register Physics_Signals_Velocity1DValue_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_Velocity1DValue_Vector_swigregister(Physics_Signals_Velocity1DValue_Vector)

class Physics_Signals_Velocity3DValue_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_Velocity3DValue_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_Velocity3DValue_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_Velocity3DValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Velocity3DValue_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_Velocity3DValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Velocity3DValue_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_Velocity3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Velocity3DValue_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_Velocity3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::difference_type j) -> Physics_Signals_Velocity3DValue_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Velocity3DValue_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_Velocity3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::difference_type

        __setslice__(Physics_Signals_Velocity3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::difference_type j, Physics_Signals_Velocity3DValue_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue >,std::allocator< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > > > const &

        """
        return _PhysicsSwig.Physics_Signals_Velocity3DValue_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_Velocity3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Velocity3DValue_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_Velocity3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::difference_type

        __delitem__(Physics_Signals_Velocity3DValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_Velocity3DValue_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_Velocity3DValue_Vector self, PySliceObject * slice) -> Physics_Signals_Velocity3DValue_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_Velocity3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Velocity3DValue_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_Velocity3DValue_Vector self, PySliceObject * slice, Physics_Signals_Velocity3DValue_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue >,std::allocator< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > > > const &

        __setitem__(Physics_Signals_Velocity3DValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_Velocity3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Velocity3DValue_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_Velocity3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::value_type"""
        return _PhysicsSwig.Physics_Signals_Velocity3DValue_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_Velocity3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Velocity3DValue_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_Velocity3DValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Velocity3DValue_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_Velocity3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Velocity3DValue_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_Velocity3DValue_Vector self, Physics_Signals_Velocity3DValue_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > > &

        """
        return _PhysicsSwig.Physics_Signals_Velocity3DValue_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_Velocity3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Velocity3DValue_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_Velocity3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Velocity3DValue_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_Velocity3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Velocity3DValue_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_Velocity3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Velocity3DValue_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_Velocity3DValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Velocity3DValue_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_Velocity3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_Velocity3DValue_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_Velocity3DValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Velocity3DValue_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_Velocity3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::iterator

        erase(Physics_Signals_Velocity3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_Velocity3DValue_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_Velocity3DValue_Vector self) -> Physics_Signals_Velocity3DValue_Vector
        __init__(Physics_Signals_Velocity3DValue_Vector self, Physics_Signals_Velocity3DValue_Vector other) -> Physics_Signals_Velocity3DValue_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > > const &

        __init__(Physics_Signals_Velocity3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::size_type size) -> Physics_Signals_Velocity3DValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::size_type

        __init__(Physics_Signals_Velocity3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::value_type const & value) -> Physics_Signals_Velocity3DValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_Velocity3DValue_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_Velocity3DValue_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_Velocity3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Velocity3DValue_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_Velocity3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Velocity3DValue_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_Velocity3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Velocity3DValue_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_Velocity3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Velocity3DValue_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_Velocity3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::size_type

        resize(Physics_Signals_Velocity3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Velocity3DValue_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_Velocity3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::value_type const &

        insert(Physics_Signals_Velocity3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Velocity3DValue_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_Velocity3DValue_Vector self, std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_Velocity3DValue_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_Velocity3DValue_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::Signals::Velocity3DValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Velocity3DValue_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_Velocity3DValue_Vector

# Register Physics_Signals_Velocity3DValue_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_Velocity3DValue_Vector_swigregister(Physics_Signals_Velocity3DValue_Vector)

class Physics_System_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics::System > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_System_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_System_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_System_Vector self) -> bool"""
        return _PhysicsSwig.Physics_System_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_System_Vector self) -> bool"""
        return _PhysicsSwig.Physics_System_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_System_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::System > >::size_type"""
        return _PhysicsSwig.Physics_System_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_System_Vector self, std::vector< std::shared_ptr< openplx::Physics::System > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::System > >::difference_type j) -> Physics_System_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::System > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::System > >::difference_type

        """
        return _PhysicsSwig.Physics_System_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_System_Vector self, std::vector< std::shared_ptr< openplx::Physics::System > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::System > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::System > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::System > >::difference_type

        __setslice__(Physics_System_Vector self, std::vector< std::shared_ptr< openplx::Physics::System > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::System > >::difference_type j, Physics_System_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::System > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::System > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics::System >,std::allocator< std::shared_ptr< openplx::Physics::System > > > const &

        """
        return _PhysicsSwig.Physics_System_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_System_Vector self, std::vector< std::shared_ptr< openplx::Physics::System > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::System > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::System > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics::System > >::difference_type

        """
        return _PhysicsSwig.Physics_System_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_System_Vector self, std::vector< std::shared_ptr< openplx::Physics::System > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::System > >::difference_type

        __delitem__(Physics_System_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_System_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_System_Vector self, PySliceObject * slice) -> Physics_System_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_System_Vector self, std::vector< std::shared_ptr< openplx::Physics::System > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics::System > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::System > >::difference_type

        """
        return _PhysicsSwig.Physics_System_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_System_Vector self, PySliceObject * slice, Physics_System_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics::System >,std::allocator< std::shared_ptr< openplx::Physics::System > > > const &

        __setitem__(Physics_System_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_System_Vector self, std::vector< std::shared_ptr< openplx::Physics::System > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics::System > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics::System > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics::System > >::value_type const &

        """
        return _PhysicsSwig.Physics_System_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_System_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::System > >::value_type"""
        return _PhysicsSwig.Physics_System_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_System_Vector self, std::vector< std::shared_ptr< openplx::Physics::System > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::System > >::value_type const &

        """
        return _PhysicsSwig.Physics_System_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_System_Vector self) -> bool"""
        return _PhysicsSwig.Physics_System_Vector_empty(self)

    def size(self):
        r"""size(Physics_System_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::System > >::size_type"""
        return _PhysicsSwig.Physics_System_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_System_Vector self, Physics_System_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics::System > > &

        """
        return _PhysicsSwig.Physics_System_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_System_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::System > >::iterator"""
        return _PhysicsSwig.Physics_System_Vector_begin(self)

    def end(self):
        r"""end(Physics_System_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::System > >::iterator"""
        return _PhysicsSwig.Physics_System_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_System_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::System > >::reverse_iterator"""
        return _PhysicsSwig.Physics_System_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_System_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::System > >::reverse_iterator"""
        return _PhysicsSwig.Physics_System_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_System_Vector self)"""
        return _PhysicsSwig.Physics_System_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_System_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::System > >::allocator_type"""
        return _PhysicsSwig.Physics_System_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_System_Vector self)"""
        return _PhysicsSwig.Physics_System_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_System_Vector self, std::vector< std::shared_ptr< openplx::Physics::System > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics::System > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::System > >::iterator

        erase(Physics_System_Vector self, std::vector< std::shared_ptr< openplx::Physics::System > >::iterator first, std::vector< std::shared_ptr< openplx::Physics::System > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics::System > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics::System > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics::System > >::iterator

        """
        return _PhysicsSwig.Physics_System_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_System_Vector self) -> Physics_System_Vector
        __init__(Physics_System_Vector self, Physics_System_Vector other) -> Physics_System_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics::System > > const &

        __init__(Physics_System_Vector self, std::vector< std::shared_ptr< openplx::Physics::System > >::size_type size) -> Physics_System_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::System > >::size_type

        __init__(Physics_System_Vector self, std::vector< std::shared_ptr< openplx::Physics::System > >::size_type size, std::vector< std::shared_ptr< openplx::Physics::System > >::value_type const & value) -> Physics_System_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics::System > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics::System > >::value_type const &

        """
        _PhysicsSwig.Physics_System_Vector_swiginit(self, _PhysicsSwig.new_Physics_System_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_System_Vector self, std::vector< std::shared_ptr< openplx::Physics::System > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics::System > >::value_type const &

        """
        return _PhysicsSwig.Physics_System_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_System_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::System > >::value_type const &"""
        return _PhysicsSwig.Physics_System_Vector_front(self)

    def back(self):
        r"""back(Physics_System_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::System > >::value_type const &"""
        return _PhysicsSwig.Physics_System_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_System_Vector self, std::vector< std::shared_ptr< openplx::Physics::System > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::System > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::System > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::System > >::value_type const &

        """
        return _PhysicsSwig.Physics_System_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_System_Vector self, std::vector< std::shared_ptr< openplx::Physics::System > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::System > >::size_type

        resize(Physics_System_Vector self, std::vector< std::shared_ptr< openplx::Physics::System > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics::System > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics::System > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::System > >::value_type const &

        """
        return _PhysicsSwig.Physics_System_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_System_Vector self, std::vector< std::shared_ptr< openplx::Physics::System > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::System > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics::System > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::System > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics::System > >::value_type const &

        insert(Physics_System_Vector self, std::vector< std::shared_ptr< openplx::Physics::System > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics::System > >::size_type n, std::vector< std::shared_ptr< openplx::Physics::System > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics::System > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics::System > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics::System > >::value_type const &

        """
        return _PhysicsSwig.Physics_System_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_System_Vector self, std::vector< std::shared_ptr< openplx::Physics::System > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics::System > >::size_type

        """
        return _PhysicsSwig.Physics_System_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_System_Vector self) -> std::vector< std::shared_ptr< openplx::Physics::System > >::size_type"""
        return _PhysicsSwig.Physics_System_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_System_Vector

# Register Physics_System_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_System_Vector_swigregister(Physics_System_Vector)

class Physics_Bodies_Body(openplx.Core.Object):
    r"""Proxy of C++ openplx::Physics::Bodies::Body class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Bodies_Body self) -> Physics_Bodies_Body"""
        _PhysicsSwig.Physics_Bodies_Body_swiginit(self, _PhysicsSwig.new_Physics_Bodies_Body())

    def inertia(self):
        r"""inertia(Physics_Bodies_Body self) -> std::shared_ptr< openplx::Physics::Bodies::Inertia >"""
        return _PhysicsSwig.Physics_Bodies_Body_inertia(self)

    def kinematics(self):
        r"""kinematics(Physics_Bodies_Body self) -> std::shared_ptr< openplx::Physics::Bodies::Kinematics >"""
        return _PhysicsSwig.Physics_Bodies_Body_kinematics(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Bodies_Body self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Bodies_Body_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Bodies_Body self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Bodies_Body_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Bodies_Body self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Bodies_Body_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Bodies_Body self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Bodies_Body_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Bodies_Body self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Bodies_Body_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Bodies_Body self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Bodies_Body_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Bodies_Body

# Register Physics_Bodies_Body in _PhysicsSwig:
_PhysicsSwig.Physics_Bodies_Body_swigregister(Physics_Bodies_Body)

class Physics_Bodies_Inertia(openplx.Core.Object):
    r"""Proxy of C++ openplx::Physics::Bodies::Inertia class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Bodies_Inertia self) -> Physics_Bodies_Inertia"""
        _PhysicsSwig.Physics_Bodies_Inertia_swiginit(self, _PhysicsSwig.new_Physics_Bodies_Inertia())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Bodies_Inertia self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Bodies_Inertia_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Bodies_Inertia self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Bodies_Inertia_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Bodies_Inertia self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Bodies_Inertia_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Bodies_Inertia self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Bodies_Inertia_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Bodies_Inertia self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Bodies_Inertia_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Bodies_Inertia self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Bodies_Inertia_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Bodies_Inertia

# Register Physics_Bodies_Inertia in _PhysicsSwig:
_PhysicsSwig.Physics_Bodies_Inertia_swigregister(Physics_Bodies_Inertia)

class Physics_Bodies_Kinematics(openplx.Core.Object):
    r"""Proxy of C++ openplx::Physics::Bodies::Kinematics class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Bodies_Kinematics self) -> Physics_Bodies_Kinematics"""
        _PhysicsSwig.Physics_Bodies_Kinematics_swiginit(self, _PhysicsSwig.new_Physics_Bodies_Kinematics())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Bodies_Kinematics self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Bodies_Kinematics_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Bodies_Kinematics self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Bodies_Kinematics_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Bodies_Kinematics self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Bodies_Kinematics_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Bodies_Kinematics self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Bodies_Kinematics_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Bodies_Kinematics self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Bodies_Kinematics_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Bodies_Kinematics self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Bodies_Kinematics_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Bodies_Kinematics

# Register Physics_Bodies_Kinematics in _PhysicsSwig:
_PhysicsSwig.Physics_Bodies_Kinematics_swigregister(Physics_Bodies_Kinematics)

class Physics_Charges_Charge(openplx.Core.Object):
    r"""Proxy of C++ openplx::Physics::Charges::Charge class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Charges_Charge self) -> Physics_Charges_Charge"""
        _PhysicsSwig.Physics_Charges_Charge_swiginit(self, _PhysicsSwig.new_Physics_Charges_Charge())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Charges_Charge self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Charges_Charge_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Charges_Charge self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Charges_Charge_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Charges_Charge self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Charges_Charge_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Charges_Charge self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Charges_Charge_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Charges_Charge self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Charges_Charge_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Charges_Charge self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Charges_Charge_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Charges_Charge

# Register Physics_Charges_Charge in _PhysicsSwig:
_PhysicsSwig.Physics_Charges_Charge_swigregister(Physics_Charges_Charge)

class Physics_Charges_ContactGeometry(Physics_Charges_Charge):
    r"""Proxy of C++ openplx::Physics::Charges::ContactGeometry class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Charges_ContactGeometry self) -> Physics_Charges_ContactGeometry"""
        _PhysicsSwig.Physics_Charges_ContactGeometry_swiginit(self, _PhysicsSwig.new_Physics_Charges_ContactGeometry())

    def material(self):
        r"""material(Physics_Charges_ContactGeometry self) -> std::shared_ptr< openplx::Physics::Charges::Material >"""
        return _PhysicsSwig.Physics_Charges_ContactGeometry_material(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Charges_ContactGeometry self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Charges_ContactGeometry_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Charges_ContactGeometry self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Charges_ContactGeometry_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Charges_ContactGeometry self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Charges_ContactGeometry_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Charges_ContactGeometry self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Charges_ContactGeometry_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Charges_ContactGeometry self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Charges_ContactGeometry_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Charges_ContactGeometry self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Charges_ContactGeometry_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Charges_ContactGeometry

# Register Physics_Charges_ContactGeometry in _PhysicsSwig:
_PhysicsSwig.Physics_Charges_ContactGeometry_swigregister(Physics_Charges_ContactGeometry)

class Physics_Charges_Material(openplx.Core.Object):
    r"""Proxy of C++ openplx::Physics::Charges::Material class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Charges_Material self) -> Physics_Charges_Material"""
        _PhysicsSwig.Physics_Charges_Material_swiginit(self, _PhysicsSwig.new_Physics_Charges_Material())

    def unique_name(self):
        r"""unique_name(Physics_Charges_Material self) -> std::string"""
        return _PhysicsSwig.Physics_Charges_Material_unique_name(self)

    def density(self):
        r"""density(Physics_Charges_Material self) -> double"""
        return _PhysicsSwig.Physics_Charges_Material_density(self)

    def on_init(self, context):
        r"""
        on_init(Physics_Charges_Material self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Charges_Material_on_init(self, context)

    def is_default_material(self):
        r"""is_default_material(Physics_Charges_Material self) -> bool"""
        return _PhysicsSwig.Physics_Charges_Material_is_default_material(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Charges_Material self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Charges_Material_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Charges_Material self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Charges_Material_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Charges_Material self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Charges_Material_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Charges_Material self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Charges_Material_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Charges_Material self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Charges_Material_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Charges_Material self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Charges_Material_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Charges_Material

# Register Physics_Charges_Material in _PhysicsSwig:
_PhysicsSwig.Physics_Charges_Material_swigregister(Physics_Charges_Material)

class Physics_Charges_LinearElasticMaterial(Physics_Charges_Material):
    r"""Proxy of C++ openplx::Physics::Charges::LinearElasticMaterial class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Charges_LinearElasticMaterial self) -> Physics_Charges_LinearElasticMaterial"""
        _PhysicsSwig.Physics_Charges_LinearElasticMaterial_swiginit(self, _PhysicsSwig.new_Physics_Charges_LinearElasticMaterial())

    def youngs_modulus(self):
        r"""youngs_modulus(Physics_Charges_LinearElasticMaterial self) -> double"""
        return _PhysicsSwig.Physics_Charges_LinearElasticMaterial_youngs_modulus(self)

    def flexibility(self):
        r"""flexibility(Physics_Charges_LinearElasticMaterial self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::LinearElastic >"""
        return _PhysicsSwig.Physics_Charges_LinearElasticMaterial_flexibility(self)

    def dissipation(self):
        r"""dissipation(Physics_Charges_LinearElasticMaterial self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation >"""
        return _PhysicsSwig.Physics_Charges_LinearElasticMaterial_dissipation(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Charges_LinearElasticMaterial self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Charges_LinearElasticMaterial_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Charges_LinearElasticMaterial self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Charges_LinearElasticMaterial_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Charges_LinearElasticMaterial self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Charges_LinearElasticMaterial_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Charges_LinearElasticMaterial self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Charges_LinearElasticMaterial_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Charges_LinearElasticMaterial self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Charges_LinearElasticMaterial_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Charges_LinearElasticMaterial self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Charges_LinearElasticMaterial_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Charges_LinearElasticMaterial

# Register Physics_Charges_LinearElasticMaterial in _PhysicsSwig:
_PhysicsSwig.Physics_Charges_LinearElasticMaterial_swigregister(Physics_Charges_LinearElasticMaterial)

class Physics_Interactions_Adhesion_DefaultAdhesion(openplx.Core.Object):
    r"""Proxy of C++ openplx::Physics::Interactions::Adhesion::DefaultAdhesion class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Interactions_Adhesion_DefaultAdhesion self) -> Physics_Interactions_Adhesion_DefaultAdhesion"""
        _PhysicsSwig.Physics_Interactions_Adhesion_DefaultAdhesion_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Adhesion_DefaultAdhesion())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Interactions_Adhesion_DefaultAdhesion self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Interactions_Adhesion_DefaultAdhesion_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Interactions_Adhesion_DefaultAdhesion self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Interactions_Adhesion_DefaultAdhesion_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Interactions_Adhesion_DefaultAdhesion self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Adhesion_DefaultAdhesion_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Interactions_Adhesion_DefaultAdhesion self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Adhesion_DefaultAdhesion_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Interactions_Adhesion_DefaultAdhesion self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Adhesion_DefaultAdhesion_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Interactions_Adhesion_DefaultAdhesion self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Interactions_Adhesion_DefaultAdhesion_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Adhesion_DefaultAdhesion

# Register Physics_Interactions_Adhesion_DefaultAdhesion in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Adhesion_DefaultAdhesion_swigregister(Physics_Interactions_Adhesion_DefaultAdhesion)

class Physics_Interactions_Adhesion_ConstantForceAdhesion(Physics_Interactions_Adhesion_DefaultAdhesion):
    r"""Proxy of C++ openplx::Physics::Interactions::Adhesion::ConstantForceAdhesion class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Interactions_Adhesion_ConstantForceAdhesion self) -> Physics_Interactions_Adhesion_ConstantForceAdhesion"""
        _PhysicsSwig.Physics_Interactions_Adhesion_ConstantForceAdhesion_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Adhesion_ConstantForceAdhesion())

    def force(self):
        r"""force(Physics_Interactions_Adhesion_ConstantForceAdhesion self) -> double"""
        return _PhysicsSwig.Physics_Interactions_Adhesion_ConstantForceAdhesion_force(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Interactions_Adhesion_ConstantForceAdhesion self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Interactions_Adhesion_ConstantForceAdhesion_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Interactions_Adhesion_ConstantForceAdhesion self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Interactions_Adhesion_ConstantForceAdhesion_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Interactions_Adhesion_ConstantForceAdhesion self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Adhesion_ConstantForceAdhesion_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Interactions_Adhesion_ConstantForceAdhesion self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Adhesion_ConstantForceAdhesion_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Interactions_Adhesion_ConstantForceAdhesion self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Adhesion_ConstantForceAdhesion_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Interactions_Adhesion_ConstantForceAdhesion self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Interactions_Adhesion_ConstantForceAdhesion_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Adhesion_ConstantForceAdhesion

# Register Physics_Interactions_Adhesion_ConstantForceAdhesion in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Adhesion_ConstantForceAdhesion_swigregister(Physics_Interactions_Adhesion_ConstantForceAdhesion)

class Physics_Interactions_Clearance_DefaultClearance(openplx.Core.Object):
    r"""Proxy of C++ openplx::Physics::Interactions::Clearance::DefaultClearance class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Interactions_Clearance_DefaultClearance self) -> Physics_Interactions_Clearance_DefaultClearance"""
        _PhysicsSwig.Physics_Interactions_Clearance_DefaultClearance_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Clearance_DefaultClearance())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Interactions_Clearance_DefaultClearance self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_DefaultClearance_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Interactions_Clearance_DefaultClearance self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_DefaultClearance_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Interactions_Clearance_DefaultClearance self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_DefaultClearance_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Interactions_Clearance_DefaultClearance self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_DefaultClearance_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Interactions_Clearance_DefaultClearance self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_DefaultClearance_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Interactions_Clearance_DefaultClearance self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_DefaultClearance_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Clearance_DefaultClearance

# Register Physics_Interactions_Clearance_DefaultClearance in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Clearance_DefaultClearance_swigregister(Physics_Interactions_Clearance_DefaultClearance)

class Physics_Interactions_Clearance_ConstantAngleClearance(Physics_Interactions_Clearance_DefaultClearance):
    r"""Proxy of C++ openplx::Physics::Interactions::Clearance::ConstantAngleClearance class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Interactions_Clearance_ConstantAngleClearance self) -> Physics_Interactions_Clearance_ConstantAngleClearance"""
        _PhysicsSwig.Physics_Interactions_Clearance_ConstantAngleClearance_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Clearance_ConstantAngleClearance())

    def angle(self):
        r"""angle(Physics_Interactions_Clearance_ConstantAngleClearance self) -> double"""
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantAngleClearance_angle(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Interactions_Clearance_ConstantAngleClearance self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantAngleClearance_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Interactions_Clearance_ConstantAngleClearance self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantAngleClearance_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Interactions_Clearance_ConstantAngleClearance self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantAngleClearance_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Interactions_Clearance_ConstantAngleClearance self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantAngleClearance_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Interactions_Clearance_ConstantAngleClearance self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantAngleClearance_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Interactions_Clearance_ConstantAngleClearance self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantAngleClearance_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Clearance_ConstantAngleClearance

# Register Physics_Interactions_Clearance_ConstantAngleClearance in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Clearance_ConstantAngleClearance_swigregister(Physics_Interactions_Clearance_ConstantAngleClearance)

class Physics_Interactions_Clearance_ConstantDistanceClearance(Physics_Interactions_Clearance_DefaultClearance):
    r"""Proxy of C++ openplx::Physics::Interactions::Clearance::ConstantDistanceClearance class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Interactions_Clearance_ConstantDistanceClearance self) -> Physics_Interactions_Clearance_ConstantDistanceClearance"""
        _PhysicsSwig.Physics_Interactions_Clearance_ConstantDistanceClearance_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Clearance_ConstantDistanceClearance())

    def distance(self):
        r"""distance(Physics_Interactions_Clearance_ConstantDistanceClearance self) -> double"""
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantDistanceClearance_distance(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Interactions_Clearance_ConstantDistanceClearance self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantDistanceClearance_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Interactions_Clearance_ConstantDistanceClearance self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantDistanceClearance_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Interactions_Clearance_ConstantDistanceClearance self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantDistanceClearance_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Interactions_Clearance_ConstantDistanceClearance self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantDistanceClearance_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Interactions_Clearance_ConstantDistanceClearance self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantDistanceClearance_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Interactions_Clearance_ConstantDistanceClearance self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Interactions_Clearance_ConstantDistanceClearance_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Clearance_ConstantDistanceClearance

# Register Physics_Interactions_Clearance_ConstantDistanceClearance in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Clearance_ConstantDistanceClearance_swigregister(Physics_Interactions_Clearance_ConstantDistanceClearance)

class Physics_Interactions_Dissipation_DefaultDissipation(openplx.Core.Object):
    r"""Proxy of C++ openplx::Physics::Interactions::Dissipation::DefaultDissipation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Interactions_Dissipation_DefaultDissipation self) -> Physics_Interactions_Dissipation_DefaultDissipation"""
        _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDissipation_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Dissipation_DefaultDissipation())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Interactions_Dissipation_DefaultDissipation self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDissipation_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Interactions_Dissipation_DefaultDissipation self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDissipation_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Interactions_Dissipation_DefaultDissipation self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDissipation_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Interactions_Dissipation_DefaultDissipation self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDissipation_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Interactions_Dissipation_DefaultDissipation self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDissipation_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Interactions_Dissipation_DefaultDissipation self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDissipation_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Dissipation_DefaultDissipation

# Register Physics_Interactions_Dissipation_DefaultDissipation in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Dissipation_DefaultDissipation_swigregister(Physics_Interactions_Dissipation_DefaultDissipation)

class Physics_Interactions_Dissipation_DefaultFriction(Physics_Interactions_Dissipation_DefaultDissipation):
    r"""Proxy of C++ openplx::Physics::Interactions::Dissipation::DefaultFriction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Interactions_Dissipation_DefaultFriction self) -> Physics_Interactions_Dissipation_DefaultFriction"""
        _PhysicsSwig.Physics_Interactions_Dissipation_DefaultFriction_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Dissipation_DefaultFriction())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Interactions_Dissipation_DefaultFriction self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultFriction_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Interactions_Dissipation_DefaultFriction self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultFriction_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Interactions_Dissipation_DefaultFriction self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultFriction_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Interactions_Dissipation_DefaultFriction self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultFriction_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Interactions_Dissipation_DefaultFriction self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultFriction_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Interactions_Dissipation_DefaultFriction self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultFriction_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Dissipation_DefaultFriction

# Register Physics_Interactions_Dissipation_DefaultFriction in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Dissipation_DefaultFriction_swigregister(Physics_Interactions_Dissipation_DefaultFriction)

class Physics_Interactions_Dissipation_AsymmetricLimitFriction(Physics_Interactions_Dissipation_DefaultFriction):
    r"""Proxy of C++ openplx::Physics::Interactions::Dissipation::AsymmetricLimitFriction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Interactions_Dissipation_AsymmetricLimitFriction self) -> Physics_Interactions_Dissipation_AsymmetricLimitFriction"""
        _PhysicsSwig.Physics_Interactions_Dissipation_AsymmetricLimitFriction_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Dissipation_AsymmetricLimitFriction())

    def positive_limit(self):
        r"""positive_limit(Physics_Interactions_Dissipation_AsymmetricLimitFriction self) -> double"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_AsymmetricLimitFriction_positive_limit(self)

    def negative_limit(self):
        r"""negative_limit(Physics_Interactions_Dissipation_AsymmetricLimitFriction self) -> double"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_AsymmetricLimitFriction_negative_limit(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Interactions_Dissipation_AsymmetricLimitFriction self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_AsymmetricLimitFriction_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Interactions_Dissipation_AsymmetricLimitFriction self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_AsymmetricLimitFriction_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Interactions_Dissipation_AsymmetricLimitFriction self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_AsymmetricLimitFriction_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Interactions_Dissipation_AsymmetricLimitFriction self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_AsymmetricLimitFriction_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Interactions_Dissipation_AsymmetricLimitFriction self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_AsymmetricLimitFriction_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Interactions_Dissipation_AsymmetricLimitFriction self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_AsymmetricLimitFriction_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Dissipation_AsymmetricLimitFriction

# Register Physics_Interactions_Dissipation_AsymmetricLimitFriction in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Dissipation_AsymmetricLimitFriction_swigregister(Physics_Interactions_Dissipation_AsymmetricLimitFriction)

class Physics_Interactions_Dissipation_ConstantLimitFriction(Physics_Interactions_Dissipation_DefaultFriction):
    r"""Proxy of C++ openplx::Physics::Interactions::Dissipation::ConstantLimitFriction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Interactions_Dissipation_ConstantLimitFriction self) -> Physics_Interactions_Dissipation_ConstantLimitFriction"""
        _PhysicsSwig.Physics_Interactions_Dissipation_ConstantLimitFriction_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Dissipation_ConstantLimitFriction())

    def limit(self):
        r"""limit(Physics_Interactions_Dissipation_ConstantLimitFriction self) -> double"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantLimitFriction_limit(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Interactions_Dissipation_ConstantLimitFriction self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantLimitFriction_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Interactions_Dissipation_ConstantLimitFriction self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantLimitFriction_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Interactions_Dissipation_ConstantLimitFriction self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantLimitFriction_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Interactions_Dissipation_ConstantLimitFriction self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantLimitFriction_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Interactions_Dissipation_ConstantLimitFriction self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantLimitFriction_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Interactions_Dissipation_ConstantLimitFriction self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantLimitFriction_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Dissipation_ConstantLimitFriction

# Register Physics_Interactions_Dissipation_ConstantLimitFriction in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Dissipation_ConstantLimitFriction_swigregister(Physics_Interactions_Dissipation_ConstantLimitFriction)

class Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction(Physics_Interactions_Dissipation_DefaultFriction):
    r"""Proxy of C++ openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction self) -> Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction"""
        _PhysicsSwig.Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction())

    def viscosity(self):
        r"""viscosity(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction self) -> double"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_viscosity(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction

# Register Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction_swigregister(Physics_Interactions_Dissipation_ConstantViscousSurfaceFriction)

class Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping(Physics_Interactions_Dissipation_DefaultDissipation):
    r"""Proxy of C++ openplx::Physics::Interactions::Dissipation::ConstraintRelaxationTimeDamping class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping self) -> Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping"""
        _PhysicsSwig.Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping())

    def relaxation_time(self):
        r"""relaxation_time(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping self) -> double"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_relaxation_time(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping

# Register Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping_swigregister(Physics_Interactions_Dissipation_ConstraintRelaxationTimeDamping)

class Physics_Interactions_Dissipation_DefaultDryFriction(Physics_Interactions_Dissipation_DefaultFriction):
    r"""Proxy of C++ openplx::Physics::Interactions::Dissipation::DefaultDryFriction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Interactions_Dissipation_DefaultDryFriction self) -> Physics_Interactions_Dissipation_DefaultDryFriction"""
        _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDryFriction_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Dissipation_DefaultDryFriction())

    def coefficient(self):
        r"""coefficient(Physics_Interactions_Dissipation_DefaultDryFriction self) -> double"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDryFriction_coefficient(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Interactions_Dissipation_DefaultDryFriction self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDryFriction_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Interactions_Dissipation_DefaultDryFriction self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDryFriction_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Interactions_Dissipation_DefaultDryFriction self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDryFriction_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Interactions_Dissipation_DefaultDryFriction self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDryFriction_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Interactions_Dissipation_DefaultDryFriction self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDryFriction_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Interactions_Dissipation_DefaultDryFriction self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DefaultDryFriction_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Dissipation_DefaultDryFriction

# Register Physics_Interactions_Dissipation_DefaultDryFriction in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Dissipation_DefaultDryFriction_swigregister(Physics_Interactions_Dissipation_DefaultDryFriction)

class Physics_Interactions_Dissipation_DryBoxFriction(Physics_Interactions_Dissipation_DefaultDryFriction):
    r"""Proxy of C++ openplx::Physics::Interactions::Dissipation::DryBoxFriction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Interactions_Dissipation_DryBoxFriction self) -> Physics_Interactions_Dissipation_DryBoxFriction"""
        _PhysicsSwig.Physics_Interactions_Dissipation_DryBoxFriction_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Dissipation_DryBoxFriction())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Interactions_Dissipation_DryBoxFriction self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryBoxFriction_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Interactions_Dissipation_DryBoxFriction self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryBoxFriction_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Interactions_Dissipation_DryBoxFriction self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryBoxFriction_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Interactions_Dissipation_DryBoxFriction self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryBoxFriction_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Interactions_Dissipation_DryBoxFriction self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryBoxFriction_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Interactions_Dissipation_DryBoxFriction self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryBoxFriction_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Dissipation_DryBoxFriction

# Register Physics_Interactions_Dissipation_DryBoxFriction in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Dissipation_DryBoxFriction_swigregister(Physics_Interactions_Dissipation_DryBoxFriction)

class Physics_Interactions_Dissipation_DryConeFriction(Physics_Interactions_Dissipation_DefaultDryFriction):
    r"""Proxy of C++ openplx::Physics::Interactions::Dissipation::DryConeFriction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Interactions_Dissipation_DryConeFriction self) -> Physics_Interactions_Dissipation_DryConeFriction"""
        _PhysicsSwig.Physics_Interactions_Dissipation_DryConeFriction_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Dissipation_DryConeFriction())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Interactions_Dissipation_DryConeFriction self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConeFriction_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Interactions_Dissipation_DryConeFriction self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConeFriction_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Interactions_Dissipation_DryConeFriction self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConeFriction_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Interactions_Dissipation_DryConeFriction self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConeFriction_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Interactions_Dissipation_DryConeFriction self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConeFriction_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Interactions_Dissipation_DryConeFriction self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConeFriction_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Dissipation_DryConeFriction

# Register Physics_Interactions_Dissipation_DryConeFriction in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Dissipation_DryConeFriction_swigregister(Physics_Interactions_Dissipation_DryConeFriction)

class Physics_Interactions_Dissipation_DryConstantNormalForceFriction(Physics_Interactions_Dissipation_DefaultDryFriction):
    r"""Proxy of C++ openplx::Physics::Interactions::Dissipation::DryConstantNormalForceFriction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Interactions_Dissipation_DryConstantNormalForceFriction self) -> Physics_Interactions_Dissipation_DryConstantNormalForceFriction"""
        _PhysicsSwig.Physics_Interactions_Dissipation_DryConstantNormalForceFriction_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Dissipation_DryConstantNormalForceFriction())

    def normal_force(self):
        r"""normal_force(Physics_Interactions_Dissipation_DryConstantNormalForceFriction self) -> double"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConstantNormalForceFriction_normal_force(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Interactions_Dissipation_DryConstantNormalForceFriction self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConstantNormalForceFriction_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Interactions_Dissipation_DryConstantNormalForceFriction self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConstantNormalForceFriction_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Interactions_Dissipation_DryConstantNormalForceFriction self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConstantNormalForceFriction_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Interactions_Dissipation_DryConstantNormalForceFriction self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConstantNormalForceFriction_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Interactions_Dissipation_DryConstantNormalForceFriction self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConstantNormalForceFriction_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Interactions_Dissipation_DryConstantNormalForceFriction self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryConstantNormalForceFriction_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Dissipation_DryConstantNormalForceFriction

# Register Physics_Interactions_Dissipation_DryConstantNormalForceFriction in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Dissipation_DryConstantNormalForceFriction_swigregister(Physics_Interactions_Dissipation_DryConstantNormalForceFriction)

class Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction(Physics_Interactions_Dissipation_DryConstantNormalForceFriction):
    r"""Proxy of C++ openplx::Physics::Interactions::Dissipation::DryDepthScaledConstantNormalForceFriction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction self) -> Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction"""
        _PhysicsSwig.Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction())

    def depth_factor(self):
        r"""depth_factor(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction self) -> double"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_depth_factor(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction

# Register Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction_swigregister(Physics_Interactions_Dissipation_DryDepthScaledConstantNormalForceFriction)

class Physics_Interactions_Dissipation_DryScaleBoxFriction(Physics_Interactions_Dissipation_DefaultDryFriction):
    r"""Proxy of C++ openplx::Physics::Interactions::Dissipation::DryScaleBoxFriction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Interactions_Dissipation_DryScaleBoxFriction self) -> Physics_Interactions_Dissipation_DryScaleBoxFriction"""
        _PhysicsSwig.Physics_Interactions_Dissipation_DryScaleBoxFriction_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Dissipation_DryScaleBoxFriction())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Interactions_Dissipation_DryScaleBoxFriction self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryScaleBoxFriction_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Interactions_Dissipation_DryScaleBoxFriction self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryScaleBoxFriction_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Interactions_Dissipation_DryScaleBoxFriction self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryScaleBoxFriction_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Interactions_Dissipation_DryScaleBoxFriction self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryScaleBoxFriction_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Interactions_Dissipation_DryScaleBoxFriction self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryScaleBoxFriction_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Interactions_Dissipation_DryScaleBoxFriction self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_DryScaleBoxFriction_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Dissipation_DryScaleBoxFriction

# Register Physics_Interactions_Dissipation_DryScaleBoxFriction in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Dissipation_DryScaleBoxFriction_swigregister(Physics_Interactions_Dissipation_DryScaleBoxFriction)

class Physics_Interactions_Dissipation_MechanicalDamping(Physics_Interactions_Dissipation_DefaultDissipation):
    r"""Proxy of C++ openplx::Physics::Interactions::Dissipation::MechanicalDamping class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Interactions_Dissipation_MechanicalDamping self) -> Physics_Interactions_Dissipation_MechanicalDamping"""
        _PhysicsSwig.Physics_Interactions_Dissipation_MechanicalDamping_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Dissipation_MechanicalDamping())

    def damping_constant(self):
        r"""damping_constant(Physics_Interactions_Dissipation_MechanicalDamping self) -> double"""
        return _PhysicsSwig.Physics_Interactions_Dissipation_MechanicalDamping_damping_constant(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Interactions_Dissipation_MechanicalDamping self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_MechanicalDamping_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Interactions_Dissipation_MechanicalDamping self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_MechanicalDamping_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Interactions_Dissipation_MechanicalDamping self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_MechanicalDamping_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Interactions_Dissipation_MechanicalDamping self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_MechanicalDamping_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Interactions_Dissipation_MechanicalDamping self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_MechanicalDamping_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Interactions_Dissipation_MechanicalDamping self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Interactions_Dissipation_MechanicalDamping_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Dissipation_MechanicalDamping

# Register Physics_Interactions_Dissipation_MechanicalDamping in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Dissipation_MechanicalDamping_swigregister(Physics_Interactions_Dissipation_MechanicalDamping)

class Physics_Interactions_Flexibility_DefaultFlexibility(openplx.Core.Object):
    r"""Proxy of C++ openplx::Physics::Interactions::Flexibility::DefaultFlexibility class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Interactions_Flexibility_DefaultFlexibility self) -> Physics_Interactions_Flexibility_DefaultFlexibility"""
        _PhysicsSwig.Physics_Interactions_Flexibility_DefaultFlexibility_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Flexibility_DefaultFlexibility())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Interactions_Flexibility_DefaultFlexibility self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_DefaultFlexibility_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Interactions_Flexibility_DefaultFlexibility self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_DefaultFlexibility_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Interactions_Flexibility_DefaultFlexibility self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_DefaultFlexibility_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Interactions_Flexibility_DefaultFlexibility self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_DefaultFlexibility_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Interactions_Flexibility_DefaultFlexibility self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_DefaultFlexibility_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Interactions_Flexibility_DefaultFlexibility self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_DefaultFlexibility_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Flexibility_DefaultFlexibility

# Register Physics_Interactions_Flexibility_DefaultFlexibility in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Flexibility_DefaultFlexibility_swigregister(Physics_Interactions_Flexibility_DefaultFlexibility)

class Physics_Interactions_Flexibility_LinearElastic(Physics_Interactions_Flexibility_DefaultFlexibility):
    r"""Proxy of C++ openplx::Physics::Interactions::Flexibility::LinearElastic class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Interactions_Flexibility_LinearElastic self) -> Physics_Interactions_Flexibility_LinearElastic"""
        _PhysicsSwig.Physics_Interactions_Flexibility_LinearElastic_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Flexibility_LinearElastic())

    def stiffness(self):
        r"""stiffness(Physics_Interactions_Flexibility_LinearElastic self) -> double"""
        return _PhysicsSwig.Physics_Interactions_Flexibility_LinearElastic_stiffness(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Interactions_Flexibility_LinearElastic self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_LinearElastic_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Interactions_Flexibility_LinearElastic self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_LinearElastic_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Interactions_Flexibility_LinearElastic self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_LinearElastic_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Interactions_Flexibility_LinearElastic self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_LinearElastic_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Interactions_Flexibility_LinearElastic self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_LinearElastic_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Interactions_Flexibility_LinearElastic self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_LinearElastic_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Flexibility_LinearElastic

# Register Physics_Interactions_Flexibility_LinearElastic in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Flexibility_LinearElastic_swigregister(Physics_Interactions_Flexibility_LinearElastic)

class Physics_Interactions_Flexibility_Rigid(Physics_Interactions_Flexibility_DefaultFlexibility):
    r"""Proxy of C++ openplx::Physics::Interactions::Flexibility::Rigid class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Interactions_Flexibility_Rigid self) -> Physics_Interactions_Flexibility_Rigid"""
        _PhysicsSwig.Physics_Interactions_Flexibility_Rigid_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Flexibility_Rigid())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Interactions_Flexibility_Rigid self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_Rigid_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Interactions_Flexibility_Rigid self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_Rigid_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Interactions_Flexibility_Rigid self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_Rigid_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Interactions_Flexibility_Rigid self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_Rigid_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Interactions_Flexibility_Rigid self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_Rigid_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Interactions_Flexibility_Rigid self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Interactions_Flexibility_Rigid_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Flexibility_Rigid

# Register Physics_Interactions_Flexibility_Rigid in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Flexibility_Rigid_swigregister(Physics_Interactions_Flexibility_Rigid)

class BoolInputTrait(object):
    r"""Proxy of C++ openplx::Physics::Signals::BoolInputTrait class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _PhysicsSwig.delete_BoolInputTrait

    def __init__(self):
        r"""__init__(BoolInputTrait self) -> BoolInputTrait"""
        _PhysicsSwig.BoolInputTrait_swiginit(self, _PhysicsSwig.new_BoolInputTrait())

# Register BoolInputTrait in _PhysicsSwig:
_PhysicsSwig.BoolInputTrait_swigregister(BoolInputTrait)

class BoolOutputTrait(object):
    r"""Proxy of C++ openplx::Physics::Signals::BoolOutputTrait class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _PhysicsSwig.delete_BoolOutputTrait

    def __init__(self):
        r"""__init__(BoolOutputTrait self) -> BoolOutputTrait"""
        _PhysicsSwig.BoolOutputTrait_swiginit(self, _PhysicsSwig.new_BoolOutputTrait())

# Register BoolOutputTrait in _PhysicsSwig:
_PhysicsSwig.BoolOutputTrait_swigregister(BoolOutputTrait)

class Physics_Interactions_Interaction(openplx.Core.Object, BoolInputTrait, BoolOutputTrait):
    r"""Proxy of C++ openplx::Physics::Interactions::Interaction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Interactions_Interaction self) -> Physics_Interactions_Interaction"""
        _PhysicsSwig.Physics_Interactions_Interaction_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Interaction())

    def enabled(self):
        r"""enabled(Physics_Interactions_Interaction self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Interaction_enabled(self)

    def charges(self):
        r"""charges(Physics_Interactions_Interaction self) -> Physics_Charges_Charge_Vector"""
        return _PhysicsSwig.Physics_Interactions_Interaction_charges(self)

    def enable_interaction_input(self):
        r"""enable_interaction_input(Physics_Interactions_Interaction self) -> std::shared_ptr< openplx::Physics::Signals::EnableInteractionInput >"""
        return _PhysicsSwig.Physics_Interactions_Interaction_enable_interaction_input(self)

    def interaction_enabled_output(self):
        r"""interaction_enabled_output(Physics_Interactions_Interaction self) -> std::shared_ptr< openplx::Physics::Signals::InteractionEnabledOutput >"""
        return _PhysicsSwig.Physics_Interactions_Interaction_interaction_enabled_output(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Interactions_Interaction self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Interactions_Interaction_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Interactions_Interaction self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Interactions_Interaction_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Interactions_Interaction self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Interaction_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Interactions_Interaction self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Interaction_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Interactions_Interaction self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Interaction_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Interactions_Interaction self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Interactions_Interaction_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Interaction

# Register Physics_Interactions_Interaction in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Interaction_swigregister(Physics_Interactions_Interaction)

class Physics_Interactions_Interaction1DOF(Physics_Interactions_Interaction):
    r"""Proxy of C++ openplx::Physics::Interactions::Interaction1DOF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Interactions_Interaction1DOF self) -> Physics_Interactions_Interaction1DOF"""
        _PhysicsSwig.Physics_Interactions_Interaction1DOF_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Interaction1DOF())

    def min_effort(self):
        r"""min_effort(Physics_Interactions_Interaction1DOF self) -> double"""
        return _PhysicsSwig.Physics_Interactions_Interaction1DOF_min_effort(self)

    def max_effort(self):
        r"""max_effort(Physics_Interactions_Interaction1DOF self) -> double"""
        return _PhysicsSwig.Physics_Interactions_Interaction1DOF_max_effort(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Interactions_Interaction1DOF self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Interactions_Interaction1DOF_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Interactions_Interaction1DOF self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Interactions_Interaction1DOF_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Interactions_Interaction1DOF self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Interaction1DOF_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Interactions_Interaction1DOF self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Interaction1DOF_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Interactions_Interaction1DOF self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Interaction1DOF_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Interactions_Interaction1DOF self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Interactions_Interaction1DOF_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Interaction1DOF

# Register Physics_Interactions_Interaction1DOF in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Interaction1DOF_swigregister(Physics_Interactions_Interaction1DOF)

class Physics_Interactions_SurfaceContact_Model(openplx.Core.Object):
    r"""Proxy of C++ openplx::Physics::Interactions::SurfaceContact::Model class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Interactions_SurfaceContact_Model self) -> Physics_Interactions_SurfaceContact_Model"""
        _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_swiginit(self, _PhysicsSwig.new_Physics_Interactions_SurfaceContact_Model())

    def material_1(self):
        r"""material_1(Physics_Interactions_SurfaceContact_Model self) -> std::shared_ptr< openplx::Physics::Charges::Material >"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_material_1(self)

    def material_2(self):
        r"""material_2(Physics_Interactions_SurfaceContact_Model self) -> std::shared_ptr< openplx::Physics::Charges::Material >"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_material_2(self)

    def enabled(self):
        r"""enabled(Physics_Interactions_SurfaceContact_Model self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_enabled(self)

    def friction(self):
        r"""friction(Physics_Interactions_SurfaceContact_Model self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultFriction >"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_friction(self)

    def adhesion(self):
        r"""adhesion(Physics_Interactions_SurfaceContact_Model self) -> std::shared_ptr< openplx::Physics::Interactions::Adhesion::DefaultAdhesion >"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_adhesion(self)

    def normal_flexibility(self):
        r"""normal_flexibility(Physics_Interactions_SurfaceContact_Model self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility >"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_normal_flexibility(self)

    def dissipation(self):
        r"""dissipation(Physics_Interactions_SurfaceContact_Model self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation >"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_dissipation(self)

    def clearance(self):
        r"""clearance(Physics_Interactions_SurfaceContact_Model self) -> std::shared_ptr< openplx::Physics::Interactions::Clearance::DefaultClearance >"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_clearance(self)

    def tangential_restitution(self):
        r"""tangential_restitution(Physics_Interactions_SurfaceContact_Model self) -> double"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_tangential_restitution(self)

    def normal_restitution(self):
        r"""normal_restitution(Physics_Interactions_SurfaceContact_Model self) -> double"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_normal_restitution(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Interactions_SurfaceContact_Model self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Interactions_SurfaceContact_Model self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Interactions_SurfaceContact_Model self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Interactions_SurfaceContact_Model self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Interactions_SurfaceContact_Model self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Interactions_SurfaceContact_Model self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_SurfaceContact_Model

# Register Physics_Interactions_SurfaceContact_Model in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_SurfaceContact_Model_swigregister(Physics_Interactions_SurfaceContact_Model)

class Physics_Interactions_SurfaceContact_PatchElasticity(Physics_Interactions_Flexibility_LinearElastic):
    r"""Proxy of C++ openplx::Physics::Interactions::SurfaceContact::PatchElasticity class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Interactions_SurfaceContact_PatchElasticity self) -> Physics_Interactions_SurfaceContact_PatchElasticity"""
        _PhysicsSwig.Physics_Interactions_SurfaceContact_PatchElasticity_swiginit(self, _PhysicsSwig.new_Physics_Interactions_SurfaceContact_PatchElasticity())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Interactions_SurfaceContact_PatchElasticity self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PatchElasticity_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Interactions_SurfaceContact_PatchElasticity self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PatchElasticity_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Interactions_SurfaceContact_PatchElasticity self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PatchElasticity_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Interactions_SurfaceContact_PatchElasticity self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PatchElasticity_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Interactions_SurfaceContact_PatchElasticity self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PatchElasticity_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Interactions_SurfaceContact_PatchElasticity self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PatchElasticity_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_SurfaceContact_PatchElasticity

# Register Physics_Interactions_SurfaceContact_PatchElasticity in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_SurfaceContact_PatchElasticity_swigregister(Physics_Interactions_SurfaceContact_PatchElasticity)

class Physics_Interactions_SurfaceContact_PointwiseElasticity(Physics_Interactions_Flexibility_LinearElastic):
    r"""Proxy of C++ openplx::Physics::Interactions::SurfaceContact::PointwiseElasticity class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Interactions_SurfaceContact_PointwiseElasticity self) -> Physics_Interactions_SurfaceContact_PointwiseElasticity"""
        _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticity_swiginit(self, _PhysicsSwig.new_Physics_Interactions_SurfaceContact_PointwiseElasticity())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Interactions_SurfaceContact_PointwiseElasticity self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticity_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Interactions_SurfaceContact_PointwiseElasticity self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticity_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Interactions_SurfaceContact_PointwiseElasticity self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticity_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Interactions_SurfaceContact_PointwiseElasticity self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticity_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Interactions_SurfaceContact_PointwiseElasticity self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticity_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Interactions_SurfaceContact_PointwiseElasticity self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticity_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_SurfaceContact_PointwiseElasticity

# Register Physics_Interactions_SurfaceContact_PointwiseElasticity in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticity_swigregister(Physics_Interactions_SurfaceContact_PointwiseElasticity)

class Physics_Interactions_Toughness_DefaultToughness(openplx.Core.Object):
    r"""Proxy of C++ openplx::Physics::Interactions::Toughness::DefaultToughness class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Interactions_Toughness_DefaultToughness self) -> Physics_Interactions_Toughness_DefaultToughness"""
        _PhysicsSwig.Physics_Interactions_Toughness_DefaultToughness_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Toughness_DefaultToughness())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Interactions_Toughness_DefaultToughness self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_DefaultToughness_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Interactions_Toughness_DefaultToughness self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_DefaultToughness_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Interactions_Toughness_DefaultToughness self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_DefaultToughness_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Interactions_Toughness_DefaultToughness self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_DefaultToughness_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Interactions_Toughness_DefaultToughness self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_DefaultToughness_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Interactions_Toughness_DefaultToughness self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_DefaultToughness_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Toughness_DefaultToughness

# Register Physics_Interactions_Toughness_DefaultToughness in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Toughness_DefaultToughness_swigregister(Physics_Interactions_Toughness_DefaultToughness)

class Physics_Interactions_Toughness_ThresholdFracture(Physics_Interactions_Toughness_DefaultToughness):
    r"""Proxy of C++ openplx::Physics::Interactions::Toughness::ThresholdFracture class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Interactions_Toughness_ThresholdFracture self) -> Physics_Interactions_Toughness_ThresholdFracture"""
        _PhysicsSwig.Physics_Interactions_Toughness_ThresholdFracture_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Toughness_ThresholdFracture())

    def fracture_point(self):
        r"""fracture_point(Physics_Interactions_Toughness_ThresholdFracture self) -> double"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdFracture_fracture_point(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Interactions_Toughness_ThresholdFracture self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdFracture_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Interactions_Toughness_ThresholdFracture self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdFracture_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Interactions_Toughness_ThresholdFracture self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdFracture_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Interactions_Toughness_ThresholdFracture self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdFracture_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Interactions_Toughness_ThresholdFracture self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdFracture_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Interactions_Toughness_ThresholdFracture self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdFracture_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Toughness_ThresholdFracture

# Register Physics_Interactions_Toughness_ThresholdFracture in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Toughness_ThresholdFracture_swigregister(Physics_Interactions_Toughness_ThresholdFracture)

class Physics_Interactions_Toughness_ThresholdPlastic(Physics_Interactions_Toughness_DefaultToughness):
    r"""Proxy of C++ openplx::Physics::Interactions::Toughness::ThresholdPlastic class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Interactions_Toughness_ThresholdPlastic self) -> Physics_Interactions_Toughness_ThresholdPlastic"""
        _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlastic_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Toughness_ThresholdPlastic())

    def yield_point(self):
        r"""yield_point(Physics_Interactions_Toughness_ThresholdPlastic self) -> double"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlastic_yield_point(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Interactions_Toughness_ThresholdPlastic self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlastic_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Interactions_Toughness_ThresholdPlastic self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlastic_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Interactions_Toughness_ThresholdPlastic self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlastic_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Interactions_Toughness_ThresholdPlastic self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlastic_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Interactions_Toughness_ThresholdPlastic self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlastic_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Interactions_Toughness_ThresholdPlastic self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlastic_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Toughness_ThresholdPlastic

# Register Physics_Interactions_Toughness_ThresholdPlastic in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlastic_swigregister(Physics_Interactions_Toughness_ThresholdPlastic)

class Physics_Interactions_Toughness_ThresholdPlasticFracture(Physics_Interactions_Toughness_DefaultToughness):
    r"""Proxy of C++ openplx::Physics::Interactions::Toughness::ThresholdPlasticFracture class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Interactions_Toughness_ThresholdPlasticFracture self) -> Physics_Interactions_Toughness_ThresholdPlasticFracture"""
        _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlasticFracture_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Toughness_ThresholdPlasticFracture())

    def yield_point(self):
        r"""yield_point(Physics_Interactions_Toughness_ThresholdPlasticFracture self) -> double"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlasticFracture_yield_point(self)

    def fracture_point(self):
        r"""fracture_point(Physics_Interactions_Toughness_ThresholdPlasticFracture self) -> double"""
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlasticFracture_fracture_point(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Interactions_Toughness_ThresholdPlasticFracture self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlasticFracture_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Interactions_Toughness_ThresholdPlasticFracture self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlasticFracture_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Interactions_Toughness_ThresholdPlasticFracture self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlasticFracture_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Interactions_Toughness_ThresholdPlasticFracture self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlasticFracture_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Interactions_Toughness_ThresholdPlasticFracture self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlasticFracture_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Interactions_Toughness_ThresholdPlasticFracture self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlasticFracture_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Toughness_ThresholdPlasticFracture

# Register Physics_Interactions_Toughness_ThresholdPlasticFracture in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Toughness_ThresholdPlasticFracture_swigregister(Physics_Interactions_Toughness_ThresholdPlasticFracture)

class Physics_Interactions_Toughness_Unbreakable(Physics_Interactions_Toughness_DefaultToughness):
    r"""Proxy of C++ openplx::Physics::Interactions::Toughness::Unbreakable class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Interactions_Toughness_Unbreakable self) -> Physics_Interactions_Toughness_Unbreakable"""
        _PhysicsSwig.Physics_Interactions_Toughness_Unbreakable_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Toughness_Unbreakable())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Interactions_Toughness_Unbreakable self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_Unbreakable_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Interactions_Toughness_Unbreakable self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_Unbreakable_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Interactions_Toughness_Unbreakable self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_Unbreakable_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Interactions_Toughness_Unbreakable self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_Unbreakable_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Interactions_Toughness_Unbreakable self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_Unbreakable_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Interactions_Toughness_Unbreakable self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Interactions_Toughness_Unbreakable_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Toughness_Unbreakable

# Register Physics_Interactions_Toughness_Unbreakable in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Toughness_Unbreakable_swigregister(Physics_Interactions_Toughness_Unbreakable)

class Physics_KinematicLock(openplx.Core.Object):
    r"""Proxy of C++ openplx::Physics::KinematicLock class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_KinematicLock self) -> Physics_KinematicLock"""
        _PhysicsSwig.Physics_KinematicLock_swiginit(self, _PhysicsSwig.new_Physics_KinematicLock())

    def bodies(self):
        r"""bodies(Physics_KinematicLock self) -> Physics_Bodies_Body_Vector"""
        return _PhysicsSwig.Physics_KinematicLock_bodies(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_KinematicLock self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_KinematicLock_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_KinematicLock self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_KinematicLock_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_KinematicLock self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_KinematicLock_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_KinematicLock self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_KinematicLock_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_KinematicLock self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_KinematicLock_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_KinematicLock self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_KinematicLock_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_KinematicLock

# Register Physics_KinematicLock in _PhysicsSwig:
_PhysicsSwig.Physics_KinematicLock_swigregister(Physics_KinematicLock)

class Physics_Signals_Value(openplx.Core.Object):
    r"""Proxy of C++ openplx::Physics::Signals::Value class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_Value self) -> Physics_Signals_Value"""
        _PhysicsSwig.Physics_Signals_Value_swiginit(self, _PhysicsSwig.new_Physics_Signals_Value())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_Value self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_Value_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_Value self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_Value_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_Value self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_Value_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_Value self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_Value_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_Value self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_Value_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_Value self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_Value_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_Value

# Register Physics_Signals_Value in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_Value_swigregister(Physics_Signals_Value)

class Physics_Signals_Vec3Value(Physics_Signals_Value):
    r"""Proxy of C++ openplx::Physics::Signals::Vec3Value class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_Vec3Value self) -> Physics_Signals_Vec3Value"""
        _PhysicsSwig.Physics_Signals_Vec3Value_swiginit(self, _PhysicsSwig.new_Physics_Signals_Vec3Value())

    def value(self):
        r"""value(Physics_Signals_Vec3Value self) -> std::shared_ptr< openplx::Math::Vec3 >"""
        return _PhysicsSwig.Physics_Signals_Vec3Value_value(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_Vec3Value self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_Vec3Value_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_Vec3Value self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_Vec3Value_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_Vec3Value self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_Vec3Value_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_Vec3Value self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_Vec3Value_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_Vec3Value self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_Vec3Value_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_Vec3Value self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_Vec3Value_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_Vec3Value

# Register Physics_Signals_Vec3Value in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_Vec3Value_swigregister(Physics_Signals_Vec3Value)

class Physics_Signals_Acceleration3DValue(Physics_Signals_Vec3Value):
    r"""Proxy of C++ openplx::Physics::Signals::Acceleration3DValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_Acceleration3DValue self) -> Physics_Signals_Acceleration3DValue"""
        _PhysicsSwig.Physics_Signals_Acceleration3DValue_swiginit(self, _PhysicsSwig.new_Physics_Signals_Acceleration3DValue())

    @staticmethod
    def create(value):
        r"""
        create(std::shared_ptr< openplx::Math::Vec3 > value) -> std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue >

        Parameters
        ----------
        value: std::shared_ptr< openplx::Math::Vec3 >

        """
        return _PhysicsSwig.Physics_Signals_Acceleration3DValue_create(value)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_Acceleration3DValue self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_Acceleration3DValue_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_Acceleration3DValue self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_Acceleration3DValue_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_Acceleration3DValue self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_Acceleration3DValue_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_Acceleration3DValue self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_Acceleration3DValue_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_Acceleration3DValue self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_Acceleration3DValue_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_Acceleration3DValue self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_Acceleration3DValue_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_Acceleration3DValue

# Register Physics_Signals_Acceleration3DValue in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_Acceleration3DValue_swigregister(Physics_Signals_Acceleration3DValue)

def Physics_Signals_Acceleration3DValue_create(value):
    r"""
    Physics_Signals_Acceleration3DValue_create(std::shared_ptr< openplx::Math::Vec3 > value) -> std::shared_ptr< openplx::Physics::Signals::Acceleration3DValue >

    Parameters
    ----------
    value: std::shared_ptr< openplx::Math::Vec3 >

    """
    return _PhysicsSwig.Physics_Signals_Acceleration3DValue_create(value)

class Physics_Signals_Input(openplx.Core.Object):
    r"""Proxy of C++ openplx::Physics::Signals::Input class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_Input self) -> Physics_Signals_Input"""
        _PhysicsSwig.Physics_Signals_Input_swiginit(self, _PhysicsSwig.new_Physics_Signals_Input())

    def type(self):
        r"""type(Physics_Signals_Input self) -> int64_t"""
        return _PhysicsSwig.Physics_Signals_Input_type(self)

    def reference_id(self):
        r"""reference_id(Physics_Signals_Input self) -> std::string"""
        return _PhysicsSwig.Physics_Signals_Input_reference_id(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_Input self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_Input_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_Input self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_Input_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_Input self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_Input_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_Input self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_Input_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_Input self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_Input_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_Input self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_Input_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_Input

# Register Physics_Signals_Input in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_Input_swigregister(Physics_Signals_Input)

class Physics_Signals_BoolInput(Physics_Signals_Input):
    r"""Proxy of C++ openplx::Physics::Signals::BoolInput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_BoolInput self) -> Physics_Signals_BoolInput"""
        _PhysicsSwig.Physics_Signals_BoolInput_swiginit(self, _PhysicsSwig.new_Physics_Signals_BoolInput())

    def source(self):
        r"""source(Physics_Signals_BoolInput self) -> std::shared_ptr< openplx::Physics::Signals::BoolInputTrait >"""
        return _PhysicsSwig.Physics_Signals_BoolInput_source(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_BoolInput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_BoolInput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_BoolInput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_BoolInput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_BoolInput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_BoolInput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_BoolInput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_BoolInput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_BoolInput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_BoolInput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_BoolInput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_BoolInput_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_BoolInput

# Register Physics_Signals_BoolInput in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_BoolInput_swigregister(Physics_Signals_BoolInput)

class Physics_Signals_ActivateInput(Physics_Signals_BoolInput):
    r"""Proxy of C++ openplx::Physics::Signals::ActivateInput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_ActivateInput self) -> Physics_Signals_ActivateInput"""
        _PhysicsSwig.Physics_Signals_ActivateInput_swiginit(self, _PhysicsSwig.new_Physics_Signals_ActivateInput())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_ActivateInput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_ActivateInput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_ActivateInput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_ActivateInput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_ActivateInput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_ActivateInput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_ActivateInput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_ActivateInput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_ActivateInput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_ActivateInput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_ActivateInput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_ActivateInput_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_ActivateInput

# Register Physics_Signals_ActivateInput in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_ActivateInput_swigregister(Physics_Signals_ActivateInput)

class Physics_Signals_Output(openplx.Core.Object):
    r"""Proxy of C++ openplx::Physics::Signals::Output class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_Output self) -> Physics_Signals_Output"""
        _PhysicsSwig.Physics_Signals_Output_swiginit(self, _PhysicsSwig.new_Physics_Signals_Output())

    def type(self):
        r"""type(Physics_Signals_Output self) -> int64_t"""
        return _PhysicsSwig.Physics_Signals_Output_type(self)

    def enabled(self):
        r"""enabled(Physics_Signals_Output self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Output_enabled(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_Output self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_Output_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_Output self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_Output_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_Output self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_Output_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_Output self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_Output_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_Output self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_Output_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_Output self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_Output_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_Output

# Register Physics_Signals_Output in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_Output_swigregister(Physics_Signals_Output)

class Physics_Signals_BoolOutput(Physics_Signals_Output):
    r"""Proxy of C++ openplx::Physics::Signals::BoolOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_BoolOutput self) -> Physics_Signals_BoolOutput"""
        _PhysicsSwig.Physics_Signals_BoolOutput_swiginit(self, _PhysicsSwig.new_Physics_Signals_BoolOutput())

    def source(self):
        r"""source(Physics_Signals_BoolOutput self) -> std::shared_ptr< openplx::Physics::Signals::BoolOutputTrait >"""
        return _PhysicsSwig.Physics_Signals_BoolOutput_source(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_BoolOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_BoolOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_BoolOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_BoolOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_BoolOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_BoolOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_BoolOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_BoolOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_BoolOutput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_BoolOutput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_BoolOutput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_BoolOutput_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_BoolOutput

# Register Physics_Signals_BoolOutput in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_BoolOutput_swigregister(Physics_Signals_BoolOutput)

class Physics_Signals_ActivatedOutput(Physics_Signals_BoolOutput):
    r"""Proxy of C++ openplx::Physics::Signals::ActivatedOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_ActivatedOutput self) -> Physics_Signals_ActivatedOutput"""
        _PhysicsSwig.Physics_Signals_ActivatedOutput_swiginit(self, _PhysicsSwig.new_Physics_Signals_ActivatedOutput())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_ActivatedOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_ActivatedOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_ActivatedOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_ActivatedOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_ActivatedOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_ActivatedOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_ActivatedOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_ActivatedOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_ActivatedOutput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_ActivatedOutput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_ActivatedOutput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_ActivatedOutput_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_ActivatedOutput

# Register Physics_Signals_ActivatedOutput in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_ActivatedOutput_swigregister(Physics_Signals_ActivatedOutput)

class Physics_Signals_AngleInput(Physics_Signals_Input):
    r"""Proxy of C++ openplx::Physics::Signals::AngleInput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_AngleInput self) -> Physics_Signals_AngleInput"""
        _PhysicsSwig.Physics_Signals_AngleInput_swiginit(self, _PhysicsSwig.new_Physics_Signals_AngleInput())

    def source(self):
        r"""source(Physics_Signals_AngleInput self) -> std::shared_ptr< openplx::Physics::Signals::AngleInputTrait >"""
        return _PhysicsSwig.Physics_Signals_AngleInput_source(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_AngleInput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_AngleInput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_AngleInput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_AngleInput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_AngleInput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_AngleInput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_AngleInput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_AngleInput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_AngleInput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_AngleInput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_AngleInput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_AngleInput_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_AngleInput

# Register Physics_Signals_AngleInput in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_AngleInput_swigregister(Physics_Signals_AngleInput)

class Physics_Signals_AngleOutput(Physics_Signals_Output):
    r"""Proxy of C++ openplx::Physics::Signals::AngleOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_AngleOutput self) -> Physics_Signals_AngleOutput"""
        _PhysicsSwig.Physics_Signals_AngleOutput_swiginit(self, _PhysicsSwig.new_Physics_Signals_AngleOutput())

    def source(self):
        r"""source(Physics_Signals_AngleOutput self) -> std::shared_ptr< openplx::Physics::Signals::AngleOutputTrait >"""
        return _PhysicsSwig.Physics_Signals_AngleOutput_source(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_AngleOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_AngleOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_AngleOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_AngleOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_AngleOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_AngleOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_AngleOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_AngleOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_AngleOutput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_AngleOutput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_AngleOutput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_AngleOutput_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_AngleOutput

# Register Physics_Signals_AngleOutput in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_AngleOutput_swigregister(Physics_Signals_AngleOutput)

class Physics_Signals_RealValue(Physics_Signals_Value):
    r"""Proxy of C++ openplx::Physics::Signals::RealValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_RealValue self) -> Physics_Signals_RealValue"""
        _PhysicsSwig.Physics_Signals_RealValue_swiginit(self, _PhysicsSwig.new_Physics_Signals_RealValue())

    def value(self):
        r"""value(Physics_Signals_RealValue self) -> double"""
        return _PhysicsSwig.Physics_Signals_RealValue_value(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_RealValue self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_RealValue_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_RealValue self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_RealValue_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_RealValue self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_RealValue_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_RealValue self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_RealValue_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_RealValue self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_RealValue_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_RealValue self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_RealValue_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_RealValue

# Register Physics_Signals_RealValue in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_RealValue_swigregister(Physics_Signals_RealValue)

class Physics_Signals_AngleValue(Physics_Signals_RealValue):
    r"""Proxy of C++ openplx::Physics::Signals::AngleValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_AngleValue self) -> Physics_Signals_AngleValue"""
        _PhysicsSwig.Physics_Signals_AngleValue_swiginit(self, _PhysicsSwig.new_Physics_Signals_AngleValue())

    @staticmethod
    def create(value):
        r"""
        create(double value) -> std::shared_ptr< openplx::Physics::Signals::AngleValue >

        Parameters
        ----------
        value: double

        """
        return _PhysicsSwig.Physics_Signals_AngleValue_create(value)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_AngleValue self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_AngleValue_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_AngleValue self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_AngleValue_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_AngleValue self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_AngleValue_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_AngleValue self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_AngleValue_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_AngleValue self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_AngleValue_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_AngleValue self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_AngleValue_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_AngleValue

# Register Physics_Signals_AngleValue in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_AngleValue_swigregister(Physics_Signals_AngleValue)

def Physics_Signals_AngleValue_create(value):
    r"""
    Physics_Signals_AngleValue_create(double value) -> std::shared_ptr< openplx::Physics::Signals::AngleValue >

    Parameters
    ----------
    value: double

    """
    return _PhysicsSwig.Physics_Signals_AngleValue_create(value)

class Physics_Signals_AngularAcceleration3DValue(Physics_Signals_Vec3Value):
    r"""Proxy of C++ openplx::Physics::Signals::AngularAcceleration3DValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_AngularAcceleration3DValue self) -> Physics_Signals_AngularAcceleration3DValue"""
        _PhysicsSwig.Physics_Signals_AngularAcceleration3DValue_swiginit(self, _PhysicsSwig.new_Physics_Signals_AngularAcceleration3DValue())

    @staticmethod
    def create(value):
        r"""
        create(std::shared_ptr< openplx::Math::Vec3 > value) -> std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue >

        Parameters
        ----------
        value: std::shared_ptr< openplx::Math::Vec3 >

        """
        return _PhysicsSwig.Physics_Signals_AngularAcceleration3DValue_create(value)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_AngularAcceleration3DValue self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_AngularAcceleration3DValue_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_AngularAcceleration3DValue self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_AngularAcceleration3DValue_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_AngularAcceleration3DValue self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_AngularAcceleration3DValue_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_AngularAcceleration3DValue self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_AngularAcceleration3DValue_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_AngularAcceleration3DValue self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_AngularAcceleration3DValue_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_AngularAcceleration3DValue self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_AngularAcceleration3DValue_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_AngularAcceleration3DValue

# Register Physics_Signals_AngularAcceleration3DValue in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_AngularAcceleration3DValue_swigregister(Physics_Signals_AngularAcceleration3DValue)

def Physics_Signals_AngularAcceleration3DValue_create(value):
    r"""
    Physics_Signals_AngularAcceleration3DValue_create(std::shared_ptr< openplx::Math::Vec3 > value) -> std::shared_ptr< openplx::Physics::Signals::AngularAcceleration3DValue >

    Parameters
    ----------
    value: std::shared_ptr< openplx::Math::Vec3 >

    """
    return _PhysicsSwig.Physics_Signals_AngularAcceleration3DValue_create(value)

class Physics_Signals_AngularVelocity1DInput(Physics_Signals_Input):
    r"""Proxy of C++ openplx::Physics::Signals::AngularVelocity1DInput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_AngularVelocity1DInput self) -> Physics_Signals_AngularVelocity1DInput"""
        _PhysicsSwig.Physics_Signals_AngularVelocity1DInput_swiginit(self, _PhysicsSwig.new_Physics_Signals_AngularVelocity1DInput())

    def source(self):
        r"""source(Physics_Signals_AngularVelocity1DInput self) -> std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInputTrait >"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DInput_source(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_AngularVelocity1DInput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DInput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_AngularVelocity1DInput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DInput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_AngularVelocity1DInput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DInput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_AngularVelocity1DInput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DInput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_AngularVelocity1DInput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DInput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_AngularVelocity1DInput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DInput_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_AngularVelocity1DInput

# Register Physics_Signals_AngularVelocity1DInput in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_AngularVelocity1DInput_swigregister(Physics_Signals_AngularVelocity1DInput)

class Physics_Signals_AngularVelocity1DOutput(Physics_Signals_Output):
    r"""Proxy of C++ openplx::Physics::Signals::AngularVelocity1DOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_AngularVelocity1DOutput self) -> Physics_Signals_AngularVelocity1DOutput"""
        _PhysicsSwig.Physics_Signals_AngularVelocity1DOutput_swiginit(self, _PhysicsSwig.new_Physics_Signals_AngularVelocity1DOutput())

    def source(self):
        r"""source(Physics_Signals_AngularVelocity1DOutput self) -> std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutputTrait >"""
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DOutput_source(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_AngularVelocity1DOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_AngularVelocity1DOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_AngularVelocity1DOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_AngularVelocity1DOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_AngularVelocity1DOutput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DOutput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_AngularVelocity1DOutput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DOutput_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_AngularVelocity1DOutput

# Register Physics_Signals_AngularVelocity1DOutput in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_AngularVelocity1DOutput_swigregister(Physics_Signals_AngularVelocity1DOutput)

class Physics_Signals_AngularVelocity1DValue(Physics_Signals_RealValue):
    r"""Proxy of C++ openplx::Physics::Signals::AngularVelocity1DValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_AngularVelocity1DValue self) -> Physics_Signals_AngularVelocity1DValue"""
        _PhysicsSwig.Physics_Signals_AngularVelocity1DValue_swiginit(self, _PhysicsSwig.new_Physics_Signals_AngularVelocity1DValue())

    @staticmethod
    def create(value):
        r"""
        create(double value) -> std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue >

        Parameters
        ----------
        value: double

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DValue_create(value)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_AngularVelocity1DValue self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DValue_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_AngularVelocity1DValue self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DValue_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_AngularVelocity1DValue self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DValue_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_AngularVelocity1DValue self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DValue_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_AngularVelocity1DValue self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DValue_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_AngularVelocity1DValue self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity1DValue_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_AngularVelocity1DValue

# Register Physics_Signals_AngularVelocity1DValue in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_AngularVelocity1DValue_swigregister(Physics_Signals_AngularVelocity1DValue)

def Physics_Signals_AngularVelocity1DValue_create(value):
    r"""
    Physics_Signals_AngularVelocity1DValue_create(double value) -> std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DValue >

    Parameters
    ----------
    value: double

    """
    return _PhysicsSwig.Physics_Signals_AngularVelocity1DValue_create(value)

class Physics_Signals_AngularVelocity3DValue(Physics_Signals_Vec3Value):
    r"""Proxy of C++ openplx::Physics::Signals::AngularVelocity3DValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_AngularVelocity3DValue self) -> Physics_Signals_AngularVelocity3DValue"""
        _PhysicsSwig.Physics_Signals_AngularVelocity3DValue_swiginit(self, _PhysicsSwig.new_Physics_Signals_AngularVelocity3DValue())

    @staticmethod
    def create(value):
        r"""
        create(std::shared_ptr< openplx::Math::Vec3 > value) -> std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue >

        Parameters
        ----------
        value: std::shared_ptr< openplx::Math::Vec3 >

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity3DValue_create(value)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_AngularVelocity3DValue self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity3DValue_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_AngularVelocity3DValue self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity3DValue_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_AngularVelocity3DValue self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity3DValue_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_AngularVelocity3DValue self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity3DValue_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_AngularVelocity3DValue self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity3DValue_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_AngularVelocity3DValue self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocity3DValue_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_AngularVelocity3DValue

# Register Physics_Signals_AngularVelocity3DValue in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_AngularVelocity3DValue_swigregister(Physics_Signals_AngularVelocity3DValue)

def Physics_Signals_AngularVelocity3DValue_create(value):
    r"""
    Physics_Signals_AngularVelocity3DValue_create(std::shared_ptr< openplx::Math::Vec3 > value) -> std::shared_ptr< openplx::Physics::Signals::AngularVelocity3DValue >

    Parameters
    ----------
    value: std::shared_ptr< openplx::Math::Vec3 >

    """
    return _PhysicsSwig.Physics_Signals_AngularVelocity3DValue_create(value)

class Physics_Signals_InputSignal(openplx.Core.Object):
    r"""Proxy of C++ openplx::Physics::Signals::InputSignal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_InputSignal self) -> Physics_Signals_InputSignal"""
        _PhysicsSwig.Physics_Signals_InputSignal_swiginit(self, _PhysicsSwig.new_Physics_Signals_InputSignal())

    def target(self):
        r"""target(Physics_Signals_InputSignal self) -> std::shared_ptr< openplx::Physics::Signals::Input >"""
        return _PhysicsSwig.Physics_Signals_InputSignal_target(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_InputSignal self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_InputSignal_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_InputSignal self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_InputSignal_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_InputSignal self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_InputSignal_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_InputSignal self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_InputSignal_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_InputSignal self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_InputSignal_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_InputSignal self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_InputSignal_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_InputSignal

# Register Physics_Signals_InputSignal in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_InputSignal_swigregister(Physics_Signals_InputSignal)

class Physics_Signals_BoolInputSignal(Physics_Signals_InputSignal):
    r"""Proxy of C++ openplx::Physics::Signals::BoolInputSignal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_BoolInputSignal self) -> Physics_Signals_BoolInputSignal"""
        _PhysicsSwig.Physics_Signals_BoolInputSignal_swiginit(self, _PhysicsSwig.new_Physics_Signals_BoolInputSignal())

    def value(self):
        r"""value(Physics_Signals_BoolInputSignal self) -> bool"""
        return _PhysicsSwig.Physics_Signals_BoolInputSignal_value(self)

    @staticmethod
    def create(value, target):
        r"""
        create(bool value, std::shared_ptr< openplx::Physics::Signals::Input > target) -> std::shared_ptr< openplx::Physics::Signals::BoolInputSignal >

        Parameters
        ----------
        value: bool
        target: std::shared_ptr< openplx::Physics::Signals::Input >

        """
        return _PhysicsSwig.Physics_Signals_BoolInputSignal_create(value, target)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_BoolInputSignal self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_BoolInputSignal_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_BoolInputSignal self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_BoolInputSignal_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_BoolInputSignal self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_BoolInputSignal_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_BoolInputSignal self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_BoolInputSignal_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_BoolInputSignal self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_BoolInputSignal_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_BoolInputSignal self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_BoolInputSignal_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_BoolInputSignal

# Register Physics_Signals_BoolInputSignal in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_BoolInputSignal_swigregister(Physics_Signals_BoolInputSignal)

def Physics_Signals_BoolInputSignal_create(value, target):
    r"""
    Physics_Signals_BoolInputSignal_create(bool value, std::shared_ptr< openplx::Physics::Signals::Input > target) -> std::shared_ptr< openplx::Physics::Signals::BoolInputSignal >

    Parameters
    ----------
    value: bool
    target: std::shared_ptr< openplx::Physics::Signals::Input >

    """
    return _PhysicsSwig.Physics_Signals_BoolInputSignal_create(value, target)

class Physics_Signals_BoolValue(Physics_Signals_Value):
    r"""Proxy of C++ openplx::Physics::Signals::BoolValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_BoolValue self) -> Physics_Signals_BoolValue"""
        _PhysicsSwig.Physics_Signals_BoolValue_swiginit(self, _PhysicsSwig.new_Physics_Signals_BoolValue())

    def value(self):
        r"""value(Physics_Signals_BoolValue self) -> bool"""
        return _PhysicsSwig.Physics_Signals_BoolValue_value(self)

    @staticmethod
    def create(value):
        r"""
        create(bool value) -> std::shared_ptr< openplx::Physics::Signals::BoolValue >

        Parameters
        ----------
        value: bool

        """
        return _PhysicsSwig.Physics_Signals_BoolValue_create(value)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_BoolValue self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_BoolValue_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_BoolValue self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_BoolValue_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_BoolValue self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_BoolValue_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_BoolValue self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_BoolValue_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_BoolValue self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_BoolValue_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_BoolValue self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_BoolValue_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_BoolValue

# Register Physics_Signals_BoolValue in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_BoolValue_swigregister(Physics_Signals_BoolValue)

def Physics_Signals_BoolValue_create(value):
    r"""
    Physics_Signals_BoolValue_create(bool value) -> std::shared_ptr< openplx::Physics::Signals::BoolValue >

    Parameters
    ----------
    value: bool

    """
    return _PhysicsSwig.Physics_Signals_BoolValue_create(value)

class Physics_Signals_DistanceValue(Physics_Signals_RealValue):
    r"""Proxy of C++ openplx::Physics::Signals::DistanceValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_DistanceValue self) -> Physics_Signals_DistanceValue"""
        _PhysicsSwig.Physics_Signals_DistanceValue_swiginit(self, _PhysicsSwig.new_Physics_Signals_DistanceValue())

    @staticmethod
    def create(value):
        r"""
        create(double value) -> std::shared_ptr< openplx::Physics::Signals::DistanceValue >

        Parameters
        ----------
        value: double

        """
        return _PhysicsSwig.Physics_Signals_DistanceValue_create(value)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_DistanceValue self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_DistanceValue_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_DistanceValue self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_DistanceValue_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_DistanceValue self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_DistanceValue_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_DistanceValue self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_DistanceValue_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_DistanceValue self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_DistanceValue_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_DistanceValue self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_DistanceValue_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_DistanceValue

# Register Physics_Signals_DistanceValue in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_DistanceValue_swigregister(Physics_Signals_DistanceValue)

def Physics_Signals_DistanceValue_create(value):
    r"""
    Physics_Signals_DistanceValue_create(double value) -> std::shared_ptr< openplx::Physics::Signals::DistanceValue >

    Parameters
    ----------
    value: double

    """
    return _PhysicsSwig.Physics_Signals_DistanceValue_create(value)

class Physics_Signals_DurationInput(Physics_Signals_Input):
    r"""Proxy of C++ openplx::Physics::Signals::DurationInput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_DurationInput self) -> Physics_Signals_DurationInput"""
        _PhysicsSwig.Physics_Signals_DurationInput_swiginit(self, _PhysicsSwig.new_Physics_Signals_DurationInput())

    def source(self):
        r"""source(Physics_Signals_DurationInput self) -> std::shared_ptr< openplx::Physics::Signals::DurationInputTrait >"""
        return _PhysicsSwig.Physics_Signals_DurationInput_source(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_DurationInput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_DurationInput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_DurationInput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_DurationInput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_DurationInput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_DurationInput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_DurationInput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_DurationInput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_DurationInput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_DurationInput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_DurationInput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_DurationInput_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_DurationInput

# Register Physics_Signals_DurationInput in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_DurationInput_swigregister(Physics_Signals_DurationInput)

class Physics_Signals_DurationOutput(Physics_Signals_Output):
    r"""Proxy of C++ openplx::Physics::Signals::DurationOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_DurationOutput self) -> Physics_Signals_DurationOutput"""
        _PhysicsSwig.Physics_Signals_DurationOutput_swiginit(self, _PhysicsSwig.new_Physics_Signals_DurationOutput())

    def source(self):
        r"""source(Physics_Signals_DurationOutput self) -> std::shared_ptr< openplx::Physics::Signals::DurationOutputTrait >"""
        return _PhysicsSwig.Physics_Signals_DurationOutput_source(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_DurationOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_DurationOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_DurationOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_DurationOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_DurationOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_DurationOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_DurationOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_DurationOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_DurationOutput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_DurationOutput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_DurationOutput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_DurationOutput_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_DurationOutput

# Register Physics_Signals_DurationOutput in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_DurationOutput_swigregister(Physics_Signals_DurationOutput)

class Physics_Signals_DurationValue(Physics_Signals_RealValue):
    r"""Proxy of C++ openplx::Physics::Signals::DurationValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_DurationValue self) -> Physics_Signals_DurationValue"""
        _PhysicsSwig.Physics_Signals_DurationValue_swiginit(self, _PhysicsSwig.new_Physics_Signals_DurationValue())

    @staticmethod
    def create(value):
        r"""
        create(double value) -> std::shared_ptr< openplx::Physics::Signals::DurationValue >

        Parameters
        ----------
        value: double

        """
        return _PhysicsSwig.Physics_Signals_DurationValue_create(value)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_DurationValue self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_DurationValue_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_DurationValue self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_DurationValue_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_DurationValue self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_DurationValue_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_DurationValue self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_DurationValue_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_DurationValue self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_DurationValue_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_DurationValue self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_DurationValue_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_DurationValue

# Register Physics_Signals_DurationValue in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_DurationValue_swigregister(Physics_Signals_DurationValue)

def Physics_Signals_DurationValue_create(value):
    r"""
    Physics_Signals_DurationValue_create(double value) -> std::shared_ptr< openplx::Physics::Signals::DurationValue >

    Parameters
    ----------
    value: double

    """
    return _PhysicsSwig.Physics_Signals_DurationValue_create(value)

class Physics_Signals_EnableInteractionInput(Physics_Signals_BoolInput):
    r"""Proxy of C++ openplx::Physics::Signals::EnableInteractionInput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_EnableInteractionInput self) -> Physics_Signals_EnableInteractionInput"""
        _PhysicsSwig.Physics_Signals_EnableInteractionInput_swiginit(self, _PhysicsSwig.new_Physics_Signals_EnableInteractionInput())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_EnableInteractionInput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_EnableInteractionInput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_EnableInteractionInput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_EnableInteractionInput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_EnableInteractionInput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_EnableInteractionInput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_EnableInteractionInput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_EnableInteractionInput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_EnableInteractionInput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_EnableInteractionInput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_EnableInteractionInput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_EnableInteractionInput_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_EnableInteractionInput

# Register Physics_Signals_EnableInteractionInput in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_EnableInteractionInput_swigregister(Physics_Signals_EnableInteractionInput)

class Physics_Signals_EngageInput(Physics_Signals_BoolInput):
    r"""Proxy of C++ openplx::Physics::Signals::EngageInput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_EngageInput self) -> Physics_Signals_EngageInput"""
        _PhysicsSwig.Physics_Signals_EngageInput_swiginit(self, _PhysicsSwig.new_Physics_Signals_EngageInput())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_EngageInput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_EngageInput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_EngageInput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_EngageInput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_EngageInput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_EngageInput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_EngageInput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_EngageInput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_EngageInput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_EngageInput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_EngageInput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_EngageInput_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_EngageInput

# Register Physics_Signals_EngageInput in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_EngageInput_swigregister(Physics_Signals_EngageInput)

class Physics_Signals_EngagedOutput(Physics_Signals_BoolOutput):
    r"""Proxy of C++ openplx::Physics::Signals::EngagedOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_EngagedOutput self) -> Physics_Signals_EngagedOutput"""
        _PhysicsSwig.Physics_Signals_EngagedOutput_swiginit(self, _PhysicsSwig.new_Physics_Signals_EngagedOutput())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_EngagedOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_EngagedOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_EngagedOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_EngagedOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_EngagedOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_EngagedOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_EngagedOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_EngagedOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_EngagedOutput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_EngagedOutput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_EngagedOutput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_EngagedOutput_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_EngagedOutput

# Register Physics_Signals_EngagedOutput in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_EngagedOutput_swigregister(Physics_Signals_EngagedOutput)

class Physics_Signals_Force1DInput(Physics_Signals_Input):
    r"""Proxy of C++ openplx::Physics::Signals::Force1DInput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_Force1DInput self) -> Physics_Signals_Force1DInput"""
        _PhysicsSwig.Physics_Signals_Force1DInput_swiginit(self, _PhysicsSwig.new_Physics_Signals_Force1DInput())

    def source(self):
        r"""source(Physics_Signals_Force1DInput self) -> std::shared_ptr< openplx::Physics::Signals::Force1DInputTrait >"""
        return _PhysicsSwig.Physics_Signals_Force1DInput_source(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_Force1DInput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_Force1DInput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_Force1DInput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_Force1DInput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_Force1DInput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_Force1DInput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_Force1DInput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_Force1DInput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_Force1DInput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_Force1DInput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_Force1DInput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_Force1DInput_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_Force1DInput

# Register Physics_Signals_Force1DInput in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_Force1DInput_swigregister(Physics_Signals_Force1DInput)

class Physics_Signals_Force1DOutput(Physics_Signals_Output):
    r"""Proxy of C++ openplx::Physics::Signals::Force1DOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_Force1DOutput self) -> Physics_Signals_Force1DOutput"""
        _PhysicsSwig.Physics_Signals_Force1DOutput_swiginit(self, _PhysicsSwig.new_Physics_Signals_Force1DOutput())

    def source(self):
        r"""source(Physics_Signals_Force1DOutput self) -> std::shared_ptr< openplx::Physics::Signals::Force1DOutputTrait >"""
        return _PhysicsSwig.Physics_Signals_Force1DOutput_source(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_Force1DOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_Force1DOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_Force1DOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_Force1DOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_Force1DOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_Force1DOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_Force1DOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_Force1DOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_Force1DOutput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_Force1DOutput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_Force1DOutput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_Force1DOutput_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_Force1DOutput

# Register Physics_Signals_Force1DOutput in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_Force1DOutput_swigregister(Physics_Signals_Force1DOutput)

class Physics_Signals_Force1DValue(Physics_Signals_RealValue):
    r"""Proxy of C++ openplx::Physics::Signals::Force1DValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_Force1DValue self) -> Physics_Signals_Force1DValue"""
        _PhysicsSwig.Physics_Signals_Force1DValue_swiginit(self, _PhysicsSwig.new_Physics_Signals_Force1DValue())

    @staticmethod
    def create(value):
        r"""
        create(double value) -> std::shared_ptr< openplx::Physics::Signals::Force1DValue >

        Parameters
        ----------
        value: double

        """
        return _PhysicsSwig.Physics_Signals_Force1DValue_create(value)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_Force1DValue self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_Force1DValue_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_Force1DValue self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_Force1DValue_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_Force1DValue self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_Force1DValue_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_Force1DValue self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_Force1DValue_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_Force1DValue self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_Force1DValue_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_Force1DValue self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_Force1DValue_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_Force1DValue

# Register Physics_Signals_Force1DValue in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_Force1DValue_swigregister(Physics_Signals_Force1DValue)

def Physics_Signals_Force1DValue_create(value):
    r"""
    Physics_Signals_Force1DValue_create(double value) -> std::shared_ptr< openplx::Physics::Signals::Force1DValue >

    Parameters
    ----------
    value: double

    """
    return _PhysicsSwig.Physics_Signals_Force1DValue_create(value)

class Physics_Signals_Force3DValue(Physics_Signals_Vec3Value):
    r"""Proxy of C++ openplx::Physics::Signals::Force3DValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_Force3DValue self) -> Physics_Signals_Force3DValue"""
        _PhysicsSwig.Physics_Signals_Force3DValue_swiginit(self, _PhysicsSwig.new_Physics_Signals_Force3DValue())

    @staticmethod
    def create(value):
        r"""
        create(std::shared_ptr< openplx::Math::Vec3 > value) -> std::shared_ptr< openplx::Physics::Signals::Force3DValue >

        Parameters
        ----------
        value: std::shared_ptr< openplx::Math::Vec3 >

        """
        return _PhysicsSwig.Physics_Signals_Force3DValue_create(value)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_Force3DValue self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_Force3DValue_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_Force3DValue self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_Force3DValue_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_Force3DValue self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_Force3DValue_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_Force3DValue self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_Force3DValue_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_Force3DValue self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_Force3DValue_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_Force3DValue self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_Force3DValue_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_Force3DValue

# Register Physics_Signals_Force3DValue in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_Force3DValue_swigregister(Physics_Signals_Force3DValue)

def Physics_Signals_Force3DValue_create(value):
    r"""
    Physics_Signals_Force3DValue_create(std::shared_ptr< openplx::Math::Vec3 > value) -> std::shared_ptr< openplx::Physics::Signals::Force3DValue >

    Parameters
    ----------
    value: std::shared_ptr< openplx::Math::Vec3 >

    """
    return _PhysicsSwig.Physics_Signals_Force3DValue_create(value)

class Physics_Signals_FractionInput(Physics_Signals_Input):
    r"""Proxy of C++ openplx::Physics::Signals::FractionInput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_FractionInput self) -> Physics_Signals_FractionInput"""
        _PhysicsSwig.Physics_Signals_FractionInput_swiginit(self, _PhysicsSwig.new_Physics_Signals_FractionInput())

    def source(self):
        r"""source(Physics_Signals_FractionInput self) -> std::shared_ptr< openplx::Physics::Signals::FractionInputTrait >"""
        return _PhysicsSwig.Physics_Signals_FractionInput_source(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_FractionInput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_FractionInput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_FractionInput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_FractionInput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_FractionInput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_FractionInput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_FractionInput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_FractionInput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_FractionInput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_FractionInput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_FractionInput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_FractionInput_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_FractionInput

# Register Physics_Signals_FractionInput in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_FractionInput_swigregister(Physics_Signals_FractionInput)

class Physics_Signals_FractionOutput(Physics_Signals_Output):
    r"""Proxy of C++ openplx::Physics::Signals::FractionOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_FractionOutput self) -> Physics_Signals_FractionOutput"""
        _PhysicsSwig.Physics_Signals_FractionOutput_swiginit(self, _PhysicsSwig.new_Physics_Signals_FractionOutput())

    def source(self):
        r"""source(Physics_Signals_FractionOutput self) -> std::shared_ptr< openplx::Physics::Signals::FractionOutputTrait >"""
        return _PhysicsSwig.Physics_Signals_FractionOutput_source(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_FractionOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_FractionOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_FractionOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_FractionOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_FractionOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_FractionOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_FractionOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_FractionOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_FractionOutput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_FractionOutput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_FractionOutput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_FractionOutput_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_FractionOutput

# Register Physics_Signals_FractionOutput in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_FractionOutput_swigregister(Physics_Signals_FractionOutput)

class Physics_Signals_FractionValue(Physics_Signals_RealValue):
    r"""Proxy of C++ openplx::Physics::Signals::FractionValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_FractionValue self) -> Physics_Signals_FractionValue"""
        _PhysicsSwig.Physics_Signals_FractionValue_swiginit(self, _PhysicsSwig.new_Physics_Signals_FractionValue())

    @staticmethod
    def create(value):
        r"""
        create(double value) -> std::shared_ptr< openplx::Physics::Signals::FractionValue >

        Parameters
        ----------
        value: double

        """
        return _PhysicsSwig.Physics_Signals_FractionValue_create(value)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_FractionValue self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_FractionValue_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_FractionValue self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_FractionValue_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_FractionValue self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_FractionValue_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_FractionValue self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_FractionValue_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_FractionValue self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_FractionValue_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_FractionValue self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_FractionValue_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_FractionValue

# Register Physics_Signals_FractionValue in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_FractionValue_swigregister(Physics_Signals_FractionValue)

def Physics_Signals_FractionValue_create(value):
    r"""
    Physics_Signals_FractionValue_create(double value) -> std::shared_ptr< openplx::Physics::Signals::FractionValue >

    Parameters
    ----------
    value: double

    """
    return _PhysicsSwig.Physics_Signals_FractionValue_create(value)

class Physics_Signals_InputOutputType(openplx.Core.Object):
    r"""Proxy of C++ openplx::Physics::Signals::InputOutputType class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_InputOutputType self) -> Physics_Signals_InputOutputType"""
        _PhysicsSwig.Physics_Signals_InputOutputType_swiginit(self, _PhysicsSwig.new_Physics_Signals_InputOutputType())

    def Position1D(self):
        r"""Position1D(Physics_Signals_InputOutputType self) -> int64_t"""
        return _PhysicsSwig.Physics_Signals_InputOutputType_Position1D(self)

    def Position3D(self):
        r"""Position3D(Physics_Signals_InputOutputType self) -> int64_t"""
        return _PhysicsSwig.Physics_Signals_InputOutputType_Position3D(self)

    def RPY(self):
        r"""RPY(Physics_Signals_InputOutputType self) -> int64_t"""
        return _PhysicsSwig.Physics_Signals_InputOutputType_RPY(self)

    def Angle(self):
        r"""Angle(Physics_Signals_InputOutputType self) -> int64_t"""
        return _PhysicsSwig.Physics_Signals_InputOutputType_Angle(self)

    def Velocity1D(self):
        r"""Velocity1D(Physics_Signals_InputOutputType self) -> int64_t"""
        return _PhysicsSwig.Physics_Signals_InputOutputType_Velocity1D(self)

    def Velocity3D(self):
        r"""Velocity3D(Physics_Signals_InputOutputType self) -> int64_t"""
        return _PhysicsSwig.Physics_Signals_InputOutputType_Velocity3D(self)

    def AngularVelocity1D(self):
        r"""AngularVelocity1D(Physics_Signals_InputOutputType self) -> int64_t"""
        return _PhysicsSwig.Physics_Signals_InputOutputType_AngularVelocity1D(self)

    def AngularVelocity3D(self):
        r"""AngularVelocity3D(Physics_Signals_InputOutputType self) -> int64_t"""
        return _PhysicsSwig.Physics_Signals_InputOutputType_AngularVelocity3D(self)

    def Torque1D(self):
        r"""Torque1D(Physics_Signals_InputOutputType self) -> int64_t"""
        return _PhysicsSwig.Physics_Signals_InputOutputType_Torque1D(self)

    def Torque3D(self):
        r"""Torque3D(Physics_Signals_InputOutputType self) -> int64_t"""
        return _PhysicsSwig.Physics_Signals_InputOutputType_Torque3D(self)

    def Force1D(self):
        r"""Force1D(Physics_Signals_InputOutputType self) -> int64_t"""
        return _PhysicsSwig.Physics_Signals_InputOutputType_Force1D(self)

    def Force3D(self):
        r"""Force3D(Physics_Signals_InputOutputType self) -> int64_t"""
        return _PhysicsSwig.Physics_Signals_InputOutputType_Force3D(self)

    def Acceleration3D(self):
        r"""Acceleration3D(Physics_Signals_InputOutputType self) -> int64_t"""
        return _PhysicsSwig.Physics_Signals_InputOutputType_Acceleration3D(self)

    def AngularAcceleration3D(self):
        r"""AngularAcceleration3D(Physics_Signals_InputOutputType self) -> int64_t"""
        return _PhysicsSwig.Physics_Signals_InputOutputType_AngularAcceleration3D(self)

    def Boolean(self):
        r"""Boolean(Physics_Signals_InputOutputType self) -> int64_t"""
        return _PhysicsSwig.Physics_Signals_InputOutputType_Boolean(self)

    def Percentage(self):
        r"""Percentage(Physics_Signals_InputOutputType self) -> int64_t"""
        return _PhysicsSwig.Physics_Signals_InputOutputType_Percentage(self)

    def Composite(self):
        r"""Composite(Physics_Signals_InputOutputType self) -> int64_t"""
        return _PhysicsSwig.Physics_Signals_InputOutputType_Composite(self)

    def Integer(self):
        r"""Integer(Physics_Signals_InputOutputType self) -> int64_t"""
        return _PhysicsSwig.Physics_Signals_InputOutputType_Integer(self)

    def Duration(self):
        r"""Duration(Physics_Signals_InputOutputType self) -> int64_t"""
        return _PhysicsSwig.Physics_Signals_InputOutputType_Duration(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_InputOutputType self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_InputOutputType_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_InputOutputType self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_InputOutputType_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_InputOutputType self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_InputOutputType_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_InputOutputType self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_InputOutputType_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_InputOutputType self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_InputOutputType_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_InputOutputType self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_InputOutputType_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_InputOutputType

# Register Physics_Signals_InputOutputType in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_InputOutputType_swigregister(Physics_Signals_InputOutputType)

class Physics_Signals_IntInput(Physics_Signals_Input):
    r"""Proxy of C++ openplx::Physics::Signals::IntInput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_IntInput self) -> Physics_Signals_IntInput"""
        _PhysicsSwig.Physics_Signals_IntInput_swiginit(self, _PhysicsSwig.new_Physics_Signals_IntInput())

    def source(self):
        r"""source(Physics_Signals_IntInput self) -> std::shared_ptr< openplx::Physics::Signals::IntInputTrait >"""
        return _PhysicsSwig.Physics_Signals_IntInput_source(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_IntInput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_IntInput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_IntInput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_IntInput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_IntInput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_IntInput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_IntInput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_IntInput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_IntInput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_IntInput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_IntInput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_IntInput_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_IntInput

# Register Physics_Signals_IntInput in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_IntInput_swigregister(Physics_Signals_IntInput)

class Physics_Signals_IntInputSignal(Physics_Signals_InputSignal):
    r"""Proxy of C++ openplx::Physics::Signals::IntInputSignal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_IntInputSignal self) -> Physics_Signals_IntInputSignal"""
        _PhysicsSwig.Physics_Signals_IntInputSignal_swiginit(self, _PhysicsSwig.new_Physics_Signals_IntInputSignal())

    def value(self):
        r"""value(Physics_Signals_IntInputSignal self) -> int64_t"""
        return _PhysicsSwig.Physics_Signals_IntInputSignal_value(self)

    @staticmethod
    def create(value, target):
        r"""
        create(int64_t value, std::shared_ptr< openplx::Physics::Signals::Input > target) -> std::shared_ptr< openplx::Physics::Signals::IntInputSignal >

        Parameters
        ----------
        value: int64_t
        target: std::shared_ptr< openplx::Physics::Signals::Input >

        """
        return _PhysicsSwig.Physics_Signals_IntInputSignal_create(value, target)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_IntInputSignal self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_IntInputSignal_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_IntInputSignal self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_IntInputSignal_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_IntInputSignal self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_IntInputSignal_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_IntInputSignal self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_IntInputSignal_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_IntInputSignal self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_IntInputSignal_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_IntInputSignal self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_IntInputSignal_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_IntInputSignal

# Register Physics_Signals_IntInputSignal in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_IntInputSignal_swigregister(Physics_Signals_IntInputSignal)

def Physics_Signals_IntInputSignal_create(value, target):
    r"""
    Physics_Signals_IntInputSignal_create(int64_t value, std::shared_ptr< openplx::Physics::Signals::Input > target) -> std::shared_ptr< openplx::Physics::Signals::IntInputSignal >

    Parameters
    ----------
    value: int64_t
    target: std::shared_ptr< openplx::Physics::Signals::Input >

    """
    return _PhysicsSwig.Physics_Signals_IntInputSignal_create(value, target)

class Physics_Signals_IntOutput(Physics_Signals_Output):
    r"""Proxy of C++ openplx::Physics::Signals::IntOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_IntOutput self) -> Physics_Signals_IntOutput"""
        _PhysicsSwig.Physics_Signals_IntOutput_swiginit(self, _PhysicsSwig.new_Physics_Signals_IntOutput())

    def source(self):
        r"""source(Physics_Signals_IntOutput self) -> std::shared_ptr< openplx::Physics::Signals::IntOutputTrait >"""
        return _PhysicsSwig.Physics_Signals_IntOutput_source(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_IntOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_IntOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_IntOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_IntOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_IntOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_IntOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_IntOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_IntOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_IntOutput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_IntOutput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_IntOutput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_IntOutput_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_IntOutput

# Register Physics_Signals_IntOutput in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_IntOutput_swigregister(Physics_Signals_IntOutput)

class Physics_Signals_IntValue(Physics_Signals_Value):
    r"""Proxy of C++ openplx::Physics::Signals::IntValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_IntValue self) -> Physics_Signals_IntValue"""
        _PhysicsSwig.Physics_Signals_IntValue_swiginit(self, _PhysicsSwig.new_Physics_Signals_IntValue())

    def value(self):
        r"""value(Physics_Signals_IntValue self) -> int64_t"""
        return _PhysicsSwig.Physics_Signals_IntValue_value(self)

    @staticmethod
    def create(value):
        r"""
        create(int64_t value) -> std::shared_ptr< openplx::Physics::Signals::IntValue >

        Parameters
        ----------
        value: int64_t

        """
        return _PhysicsSwig.Physics_Signals_IntValue_create(value)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_IntValue self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_IntValue_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_IntValue self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_IntValue_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_IntValue self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_IntValue_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_IntValue self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_IntValue_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_IntValue self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_IntValue_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_IntValue self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_IntValue_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_IntValue

# Register Physics_Signals_IntValue in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_IntValue_swigregister(Physics_Signals_IntValue)

def Physics_Signals_IntValue_create(value):
    r"""
    Physics_Signals_IntValue_create(int64_t value) -> std::shared_ptr< openplx::Physics::Signals::IntValue >

    Parameters
    ----------
    value: int64_t

    """
    return _PhysicsSwig.Physics_Signals_IntValue_create(value)

class Physics_Signals_InteractionEnabledOutput(Physics_Signals_BoolOutput):
    r"""Proxy of C++ openplx::Physics::Signals::InteractionEnabledOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_InteractionEnabledOutput self) -> Physics_Signals_InteractionEnabledOutput"""
        _PhysicsSwig.Physics_Signals_InteractionEnabledOutput_swiginit(self, _PhysicsSwig.new_Physics_Signals_InteractionEnabledOutput())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_InteractionEnabledOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_InteractionEnabledOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_InteractionEnabledOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_InteractionEnabledOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_InteractionEnabledOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_InteractionEnabledOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_InteractionEnabledOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_InteractionEnabledOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_InteractionEnabledOutput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_InteractionEnabledOutput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_InteractionEnabledOutput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_InteractionEnabledOutput_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_InteractionEnabledOutput

# Register Physics_Signals_InteractionEnabledOutput in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_InteractionEnabledOutput_swigregister(Physics_Signals_InteractionEnabledOutput)

class Physics_Signals_LinearVelocity1DInput(Physics_Signals_Input):
    r"""Proxy of C++ openplx::Physics::Signals::LinearVelocity1DInput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_LinearVelocity1DInput self) -> Physics_Signals_LinearVelocity1DInput"""
        _PhysicsSwig.Physics_Signals_LinearVelocity1DInput_swiginit(self, _PhysicsSwig.new_Physics_Signals_LinearVelocity1DInput())

    def source(self):
        r"""source(Physics_Signals_LinearVelocity1DInput self) -> std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DInputTrait >"""
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DInput_source(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_LinearVelocity1DInput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DInput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_LinearVelocity1DInput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DInput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_LinearVelocity1DInput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DInput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_LinearVelocity1DInput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DInput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_LinearVelocity1DInput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DInput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_LinearVelocity1DInput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DInput_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_LinearVelocity1DInput

# Register Physics_Signals_LinearVelocity1DInput in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_LinearVelocity1DInput_swigregister(Physics_Signals_LinearVelocity1DInput)

class Physics_Signals_LinearVelocity1DOutput(Physics_Signals_Output):
    r"""Proxy of C++ openplx::Physics::Signals::LinearVelocity1DOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_LinearVelocity1DOutput self) -> Physics_Signals_LinearVelocity1DOutput"""
        _PhysicsSwig.Physics_Signals_LinearVelocity1DOutput_swiginit(self, _PhysicsSwig.new_Physics_Signals_LinearVelocity1DOutput())

    def source(self):
        r"""source(Physics_Signals_LinearVelocity1DOutput self) -> std::shared_ptr< openplx::Physics::Signals::LinearVelocity1DOutputTrait >"""
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DOutput_source(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_LinearVelocity1DOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_LinearVelocity1DOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_LinearVelocity1DOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_LinearVelocity1DOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_LinearVelocity1DOutput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DOutput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_LinearVelocity1DOutput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocity1DOutput_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_LinearVelocity1DOutput

# Register Physics_Signals_LinearVelocity1DOutput in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_LinearVelocity1DOutput_swigregister(Physics_Signals_LinearVelocity1DOutput)

class Physics_Signals_OutputSignal(openplx.Core.Object):
    r"""Proxy of C++ openplx::Physics::Signals::OutputSignal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_OutputSignal self) -> Physics_Signals_OutputSignal"""
        _PhysicsSwig.Physics_Signals_OutputSignal_swiginit(self, _PhysicsSwig.new_Physics_Signals_OutputSignal())

    def source(self):
        r"""source(Physics_Signals_OutputSignal self) -> std::shared_ptr< openplx::Physics::Signals::Output >"""
        return _PhysicsSwig.Physics_Signals_OutputSignal_source(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_OutputSignal self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_OutputSignal_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_OutputSignal self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_OutputSignal_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_OutputSignal self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_OutputSignal_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_OutputSignal self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_OutputSignal_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_OutputSignal self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_OutputSignal_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_OutputSignal self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_OutputSignal_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_OutputSignal

# Register Physics_Signals_OutputSignal in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_OutputSignal_swigregister(Physics_Signals_OutputSignal)

class Physics_Signals_Position1DInput(Physics_Signals_Input):
    r"""Proxy of C++ openplx::Physics::Signals::Position1DInput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_Position1DInput self) -> Physics_Signals_Position1DInput"""
        _PhysicsSwig.Physics_Signals_Position1DInput_swiginit(self, _PhysicsSwig.new_Physics_Signals_Position1DInput())

    def source(self):
        r"""source(Physics_Signals_Position1DInput self) -> std::shared_ptr< openplx::Physics::Signals::Position1DInputTrait >"""
        return _PhysicsSwig.Physics_Signals_Position1DInput_source(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_Position1DInput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_Position1DInput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_Position1DInput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_Position1DInput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_Position1DInput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_Position1DInput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_Position1DInput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_Position1DInput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_Position1DInput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_Position1DInput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_Position1DInput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_Position1DInput_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_Position1DInput

# Register Physics_Signals_Position1DInput in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_Position1DInput_swigregister(Physics_Signals_Position1DInput)

class Physics_Signals_Position1DOutput(Physics_Signals_Output):
    r"""Proxy of C++ openplx::Physics::Signals::Position1DOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_Position1DOutput self) -> Physics_Signals_Position1DOutput"""
        _PhysicsSwig.Physics_Signals_Position1DOutput_swiginit(self, _PhysicsSwig.new_Physics_Signals_Position1DOutput())

    def source(self):
        r"""source(Physics_Signals_Position1DOutput self) -> std::shared_ptr< openplx::Physics::Signals::Position1DOutputTrait >"""
        return _PhysicsSwig.Physics_Signals_Position1DOutput_source(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_Position1DOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_Position1DOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_Position1DOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_Position1DOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_Position1DOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_Position1DOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_Position1DOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_Position1DOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_Position1DOutput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_Position1DOutput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_Position1DOutput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_Position1DOutput_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_Position1DOutput

# Register Physics_Signals_Position1DOutput in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_Position1DOutput_swigregister(Physics_Signals_Position1DOutput)

class Physics_Signals_Position3DValue(Physics_Signals_Vec3Value):
    r"""Proxy of C++ openplx::Physics::Signals::Position3DValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_Position3DValue self) -> Physics_Signals_Position3DValue"""
        _PhysicsSwig.Physics_Signals_Position3DValue_swiginit(self, _PhysicsSwig.new_Physics_Signals_Position3DValue())

    @staticmethod
    def create(value):
        r"""
        create(std::shared_ptr< openplx::Math::Vec3 > value) -> std::shared_ptr< openplx::Physics::Signals::Position3DValue >

        Parameters
        ----------
        value: std::shared_ptr< openplx::Math::Vec3 >

        """
        return _PhysicsSwig.Physics_Signals_Position3DValue_create(value)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_Position3DValue self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_Position3DValue_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_Position3DValue self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_Position3DValue_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_Position3DValue self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_Position3DValue_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_Position3DValue self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_Position3DValue_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_Position3DValue self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_Position3DValue_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_Position3DValue self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_Position3DValue_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_Position3DValue

# Register Physics_Signals_Position3DValue in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_Position3DValue_swigregister(Physics_Signals_Position3DValue)

def Physics_Signals_Position3DValue_create(value):
    r"""
    Physics_Signals_Position3DValue_create(std::shared_ptr< openplx::Math::Vec3 > value) -> std::shared_ptr< openplx::Physics::Signals::Position3DValue >

    Parameters
    ----------
    value: std::shared_ptr< openplx::Math::Vec3 >

    """
    return _PhysicsSwig.Physics_Signals_Position3DValue_create(value)

class Physics_Signals_RPYvalue(Physics_Signals_Vec3Value):
    r"""Proxy of C++ openplx::Physics::Signals::RPYvalue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_RPYvalue self) -> Physics_Signals_RPYvalue"""
        _PhysicsSwig.Physics_Signals_RPYvalue_swiginit(self, _PhysicsSwig.new_Physics_Signals_RPYvalue())

    @staticmethod
    def create(value):
        r"""
        create(std::shared_ptr< openplx::Math::Vec3 > value) -> std::shared_ptr< openplx::Physics::Signals::RPYvalue >

        Parameters
        ----------
        value: std::shared_ptr< openplx::Math::Vec3 >

        """
        return _PhysicsSwig.Physics_Signals_RPYvalue_create(value)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_RPYvalue self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_RPYvalue_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_RPYvalue self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_RPYvalue_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_RPYvalue self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_RPYvalue_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_RPYvalue self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_RPYvalue_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_RPYvalue self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_RPYvalue_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_RPYvalue self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_RPYvalue_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_RPYvalue

# Register Physics_Signals_RPYvalue in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_RPYvalue_swigregister(Physics_Signals_RPYvalue)

def Physics_Signals_RPYvalue_create(value):
    r"""
    Physics_Signals_RPYvalue_create(std::shared_ptr< openplx::Math::Vec3 > value) -> std::shared_ptr< openplx::Physics::Signals::RPYvalue >

    Parameters
    ----------
    value: std::shared_ptr< openplx::Math::Vec3 >

    """
    return _PhysicsSwig.Physics_Signals_RPYvalue_create(value)

class Physics_Signals_RealInputSignal(Physics_Signals_InputSignal):
    r"""Proxy of C++ openplx::Physics::Signals::RealInputSignal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_RealInputSignal self) -> Physics_Signals_RealInputSignal"""
        _PhysicsSwig.Physics_Signals_RealInputSignal_swiginit(self, _PhysicsSwig.new_Physics_Signals_RealInputSignal())

    def value(self):
        r"""value(Physics_Signals_RealInputSignal self) -> double"""
        return _PhysicsSwig.Physics_Signals_RealInputSignal_value(self)

    @staticmethod
    def create(value, target):
        r"""
        create(double value, std::shared_ptr< openplx::Physics::Signals::Input > target) -> std::shared_ptr< openplx::Physics::Signals::RealInputSignal >

        Parameters
        ----------
        value: double
        target: std::shared_ptr< openplx::Physics::Signals::Input >

        """
        return _PhysicsSwig.Physics_Signals_RealInputSignal_create(value, target)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_RealInputSignal self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_RealInputSignal_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_RealInputSignal self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_RealInputSignal_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_RealInputSignal self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_RealInputSignal_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_RealInputSignal self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_RealInputSignal_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_RealInputSignal self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_RealInputSignal_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_RealInputSignal self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_RealInputSignal_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_RealInputSignal

# Register Physics_Signals_RealInputSignal in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_RealInputSignal_swigregister(Physics_Signals_RealInputSignal)

def Physics_Signals_RealInputSignal_create(value, target):
    r"""
    Physics_Signals_RealInputSignal_create(double value, std::shared_ptr< openplx::Physics::Signals::Input > target) -> std::shared_ptr< openplx::Physics::Signals::RealInputSignal >

    Parameters
    ----------
    value: double
    target: std::shared_ptr< openplx::Physics::Signals::Input >

    """
    return _PhysicsSwig.Physics_Signals_RealInputSignal_create(value, target)

class Physics_Signals_RelativeVelocity1DOutput(Physics_Signals_Output):
    r"""Proxy of C++ openplx::Physics::Signals::RelativeVelocity1DOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_RelativeVelocity1DOutput self) -> Physics_Signals_RelativeVelocity1DOutput"""
        _PhysicsSwig.Physics_Signals_RelativeVelocity1DOutput_swiginit(self, _PhysicsSwig.new_Physics_Signals_RelativeVelocity1DOutput())

    def source(self):
        r"""source(Physics_Signals_RelativeVelocity1DOutput self) -> std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutputTrait >"""
        return _PhysicsSwig.Physics_Signals_RelativeVelocity1DOutput_source(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_RelativeVelocity1DOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_RelativeVelocity1DOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_RelativeVelocity1DOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_RelativeVelocity1DOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_RelativeVelocity1DOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_RelativeVelocity1DOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_RelativeVelocity1DOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_RelativeVelocity1DOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_RelativeVelocity1DOutput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_RelativeVelocity1DOutput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_RelativeVelocity1DOutput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_RelativeVelocity1DOutput_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_RelativeVelocity1DOutput

# Register Physics_Signals_RelativeVelocity1DOutput in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_RelativeVelocity1DOutput_swigregister(Physics_Signals_RelativeVelocity1DOutput)

class Physics_Signals_Torque1DInput(Physics_Signals_Input):
    r"""Proxy of C++ openplx::Physics::Signals::Torque1DInput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_Torque1DInput self) -> Physics_Signals_Torque1DInput"""
        _PhysicsSwig.Physics_Signals_Torque1DInput_swiginit(self, _PhysicsSwig.new_Physics_Signals_Torque1DInput())

    def source(self):
        r"""source(Physics_Signals_Torque1DInput self) -> std::shared_ptr< openplx::Physics::Signals::Torque1DInputTrait >"""
        return _PhysicsSwig.Physics_Signals_Torque1DInput_source(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_Torque1DInput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_Torque1DInput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_Torque1DInput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_Torque1DInput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_Torque1DInput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_Torque1DInput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_Torque1DInput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_Torque1DInput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_Torque1DInput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_Torque1DInput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_Torque1DInput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_Torque1DInput_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_Torque1DInput

# Register Physics_Signals_Torque1DInput in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_Torque1DInput_swigregister(Physics_Signals_Torque1DInput)

class Physics_Signals_Torque1DOutput(Physics_Signals_Output):
    r"""Proxy of C++ openplx::Physics::Signals::Torque1DOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_Torque1DOutput self) -> Physics_Signals_Torque1DOutput"""
        _PhysicsSwig.Physics_Signals_Torque1DOutput_swiginit(self, _PhysicsSwig.new_Physics_Signals_Torque1DOutput())

    def source(self):
        r"""source(Physics_Signals_Torque1DOutput self) -> std::shared_ptr< openplx::Physics::Signals::Torque1DOutputTrait >"""
        return _PhysicsSwig.Physics_Signals_Torque1DOutput_source(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_Torque1DOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_Torque1DOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_Torque1DOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_Torque1DOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_Torque1DOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_Torque1DOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_Torque1DOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_Torque1DOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_Torque1DOutput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_Torque1DOutput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_Torque1DOutput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_Torque1DOutput_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_Torque1DOutput

# Register Physics_Signals_Torque1DOutput in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_Torque1DOutput_swigregister(Physics_Signals_Torque1DOutput)

class Physics_Signals_Torque1DValue(Physics_Signals_RealValue):
    r"""Proxy of C++ openplx::Physics::Signals::Torque1DValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_Torque1DValue self) -> Physics_Signals_Torque1DValue"""
        _PhysicsSwig.Physics_Signals_Torque1DValue_swiginit(self, _PhysicsSwig.new_Physics_Signals_Torque1DValue())

    @staticmethod
    def create(value):
        r"""
        create(double value) -> std::shared_ptr< openplx::Physics::Signals::Torque1DValue >

        Parameters
        ----------
        value: double

        """
        return _PhysicsSwig.Physics_Signals_Torque1DValue_create(value)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_Torque1DValue self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_Torque1DValue_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_Torque1DValue self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_Torque1DValue_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_Torque1DValue self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_Torque1DValue_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_Torque1DValue self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_Torque1DValue_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_Torque1DValue self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_Torque1DValue_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_Torque1DValue self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_Torque1DValue_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_Torque1DValue

# Register Physics_Signals_Torque1DValue in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_Torque1DValue_swigregister(Physics_Signals_Torque1DValue)

def Physics_Signals_Torque1DValue_create(value):
    r"""
    Physics_Signals_Torque1DValue_create(double value) -> std::shared_ptr< openplx::Physics::Signals::Torque1DValue >

    Parameters
    ----------
    value: double

    """
    return _PhysicsSwig.Physics_Signals_Torque1DValue_create(value)

class Physics_Signals_Torque3DValue(Physics_Signals_Vec3Value):
    r"""Proxy of C++ openplx::Physics::Signals::Torque3DValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_Torque3DValue self) -> Physics_Signals_Torque3DValue"""
        _PhysicsSwig.Physics_Signals_Torque3DValue_swiginit(self, _PhysicsSwig.new_Physics_Signals_Torque3DValue())

    @staticmethod
    def create(value):
        r"""
        create(std::shared_ptr< openplx::Math::Vec3 > value) -> std::shared_ptr< openplx::Physics::Signals::Torque3DValue >

        Parameters
        ----------
        value: std::shared_ptr< openplx::Math::Vec3 >

        """
        return _PhysicsSwig.Physics_Signals_Torque3DValue_create(value)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_Torque3DValue self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_Torque3DValue_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_Torque3DValue self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_Torque3DValue_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_Torque3DValue self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_Torque3DValue_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_Torque3DValue self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_Torque3DValue_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_Torque3DValue self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_Torque3DValue_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_Torque3DValue self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_Torque3DValue_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_Torque3DValue

# Register Physics_Signals_Torque3DValue in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_Torque3DValue_swigregister(Physics_Signals_Torque3DValue)

def Physics_Signals_Torque3DValue_create(value):
    r"""
    Physics_Signals_Torque3DValue_create(std::shared_ptr< openplx::Math::Vec3 > value) -> std::shared_ptr< openplx::Physics::Signals::Torque3DValue >

    Parameters
    ----------
    value: std::shared_ptr< openplx::Math::Vec3 >

    """
    return _PhysicsSwig.Physics_Signals_Torque3DValue_create(value)

class Physics_Signals_ValueOutputSignal(Physics_Signals_OutputSignal):
    r"""Proxy of C++ openplx::Physics::Signals::ValueOutputSignal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_ValueOutputSignal self) -> Physics_Signals_ValueOutputSignal"""
        _PhysicsSwig.Physics_Signals_ValueOutputSignal_swiginit(self, _PhysicsSwig.new_Physics_Signals_ValueOutputSignal())

    def value(self):
        r"""value(Physics_Signals_ValueOutputSignal self) -> std::shared_ptr< openplx::Physics::Signals::Value >"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_value(self)

    @staticmethod
    def create(v, source):
        r"""
        create(std::shared_ptr< openplx::Physics::Signals::Value > v, std::shared_ptr< openplx::Physics::Signals::Output > source) -> std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >

        Parameters
        ----------
        v: std::shared_ptr< openplx::Physics::Signals::Value >
        source: std::shared_ptr< openplx::Physics::Signals::Output >

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_create(v, source)

    @staticmethod
    def from_angle(v, source):
        r"""
        from_angle(double v, std::shared_ptr< openplx::Physics::Signals::Output > source) -> std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >

        Parameters
        ----------
        v: double
        source: std::shared_ptr< openplx::Physics::Signals::Output >

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_from_angle(v, source)

    @staticmethod
    def from_angular_velocity_1d(v, source):
        r"""
        from_angular_velocity_1d(double v, std::shared_ptr< openplx::Physics::Signals::Output > source) -> std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >

        Parameters
        ----------
        v: double
        source: std::shared_ptr< openplx::Physics::Signals::Output >

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_from_angular_velocity_1d(v, source)

    @staticmethod
    def from_distance(v, source):
        r"""
        from_distance(double v, std::shared_ptr< openplx::Physics::Signals::Output > source) -> std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >

        Parameters
        ----------
        v: double
        source: std::shared_ptr< openplx::Physics::Signals::Output >

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_from_distance(v, source)

    @staticmethod
    def from_force_1d(v, source):
        r"""
        from_force_1d(double v, std::shared_ptr< openplx::Physics::Signals::Output > source) -> std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >

        Parameters
        ----------
        v: double
        source: std::shared_ptr< openplx::Physics::Signals::Output >

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_from_force_1d(v, source)

    @staticmethod
    def from_velocity_1d(v, source):
        r"""
        from_velocity_1d(double v, std::shared_ptr< openplx::Physics::Signals::Output > source) -> std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >

        Parameters
        ----------
        v: double
        source: std::shared_ptr< openplx::Physics::Signals::Output >

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_from_velocity_1d(v, source)

    @staticmethod
    def from_torque_1d(v, source):
        r"""
        from_torque_1d(double v, std::shared_ptr< openplx::Physics::Signals::Output > source) -> std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >

        Parameters
        ----------
        v: double
        source: std::shared_ptr< openplx::Physics::Signals::Output >

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_from_torque_1d(v, source)

    @staticmethod
    def from_acceleration_3d(v, source):
        r"""
        from_acceleration_3d(std::shared_ptr< openplx::Math::Vec3 > v, std::shared_ptr< openplx::Physics::Signals::Output > source) -> std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >

        Parameters
        ----------
        v: std::shared_ptr< openplx::Math::Vec3 >
        source: std::shared_ptr< openplx::Physics::Signals::Output >

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_from_acceleration_3d(v, source)

    @staticmethod
    def from_angular_acceleration_3d(v, source):
        r"""
        from_angular_acceleration_3d(std::shared_ptr< openplx::Math::Vec3 > v, std::shared_ptr< openplx::Physics::Signals::Output > source) -> std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >

        Parameters
        ----------
        v: std::shared_ptr< openplx::Math::Vec3 >
        source: std::shared_ptr< openplx::Physics::Signals::Output >

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_from_angular_acceleration_3d(v, source)

    @staticmethod
    def from_angular_velocity_3d(v, source):
        r"""
        from_angular_velocity_3d(std::shared_ptr< openplx::Math::Vec3 > v, std::shared_ptr< openplx::Physics::Signals::Output > source) -> std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >

        Parameters
        ----------
        v: std::shared_ptr< openplx::Math::Vec3 >
        source: std::shared_ptr< openplx::Physics::Signals::Output >

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_from_angular_velocity_3d(v, source)

    @staticmethod
    def from_force_3d(v, source):
        r"""
        from_force_3d(std::shared_ptr< openplx::Math::Vec3 > v, std::shared_ptr< openplx::Physics::Signals::Output > source) -> std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >

        Parameters
        ----------
        v: std::shared_ptr< openplx::Math::Vec3 >
        source: std::shared_ptr< openplx::Physics::Signals::Output >

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_from_force_3d(v, source)

    @staticmethod
    def from_torque_3d(v, source):
        r"""
        from_torque_3d(std::shared_ptr< openplx::Math::Vec3 > v, std::shared_ptr< openplx::Physics::Signals::Output > source) -> std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >

        Parameters
        ----------
        v: std::shared_ptr< openplx::Math::Vec3 >
        source: std::shared_ptr< openplx::Physics::Signals::Output >

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_from_torque_3d(v, source)

    @staticmethod
    def from_velocity_3d(v, source):
        r"""
        from_velocity_3d(std::shared_ptr< openplx::Math::Vec3 > v, std::shared_ptr< openplx::Physics::Signals::Output > source) -> std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >

        Parameters
        ----------
        v: std::shared_ptr< openplx::Math::Vec3 >
        source: std::shared_ptr< openplx::Physics::Signals::Output >

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_from_velocity_3d(v, source)

    @staticmethod
    def from_position_3d(v, source):
        r"""
        from_position_3d(std::shared_ptr< openplx::Math::Vec3 > v, std::shared_ptr< openplx::Physics::Signals::Output > source) -> std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >

        Parameters
        ----------
        v: std::shared_ptr< openplx::Math::Vec3 >
        source: std::shared_ptr< openplx::Physics::Signals::Output >

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_from_position_3d(v, source)

    @staticmethod
    def from_rpy(v, source):
        r"""
        from_rpy(std::shared_ptr< openplx::Math::Vec3 > v, std::shared_ptr< openplx::Physics::Signals::Output > source) -> std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >

        Parameters
        ----------
        v: std::shared_ptr< openplx::Math::Vec3 >
        source: std::shared_ptr< openplx::Physics::Signals::Output >

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_from_rpy(v, source)

    @staticmethod
    def from_int(v, source):
        r"""
        from_int(int64_t v, std::shared_ptr< openplx::Physics::Signals::Output > source) -> std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >

        Parameters
        ----------
        v: int64_t
        source: std::shared_ptr< openplx::Physics::Signals::Output >

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_from_int(v, source)

    @staticmethod
    def from_bool(v, source):
        r"""
        from_bool(bool v, std::shared_ptr< openplx::Physics::Signals::Output > source) -> std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >

        Parameters
        ----------
        v: bool
        source: std::shared_ptr< openplx::Physics::Signals::Output >

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_from_bool(v, source)

    @staticmethod
    def from_fraction(v, source):
        r"""
        from_fraction(double v, std::shared_ptr< openplx::Physics::Signals::Output > source) -> std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >

        Parameters
        ----------
        v: double
        source: std::shared_ptr< openplx::Physics::Signals::Output >

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_from_fraction(v, source)

    @staticmethod
    def from_duration(v, source):
        r"""
        from_duration(double v, std::shared_ptr< openplx::Physics::Signals::Output > source) -> std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >

        Parameters
        ----------
        v: double
        source: std::shared_ptr< openplx::Physics::Signals::Output >

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_from_duration(v, source)

    def is_real(self):
        r"""is_real(Physics_Signals_ValueOutputSignal self) -> bool"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_is_real(self)

    def as_real(self):
        r"""as_real(Physics_Signals_ValueOutputSignal self) -> double"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_as_real(self)

    def as_vec3(self):
        r"""as_vec3(Physics_Signals_ValueOutputSignal self) -> std::shared_ptr< openplx::Math::Vec3 >"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_as_vec3(self)

    def as_angle(self):
        r"""as_angle(Physics_Signals_ValueOutputSignal self) -> double"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_as_angle(self)

    def as_angular_velocity_1d(self):
        r"""as_angular_velocity_1d(Physics_Signals_ValueOutputSignal self) -> double"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_as_angular_velocity_1d(self)

    def as_distance(self):
        r"""as_distance(Physics_Signals_ValueOutputSignal self) -> double"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_as_distance(self)

    def as_force_1d(self):
        r"""as_force_1d(Physics_Signals_ValueOutputSignal self) -> double"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_as_force_1d(self)

    def as_velocity_1d(self):
        r"""as_velocity_1d(Physics_Signals_ValueOutputSignal self) -> double"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_as_velocity_1d(self)

    def as_torque_1d(self):
        r"""as_torque_1d(Physics_Signals_ValueOutputSignal self) -> double"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_as_torque_1d(self)

    def as_acceleration_3d(self):
        r"""as_acceleration_3d(Physics_Signals_ValueOutputSignal self) -> std::shared_ptr< openplx::Math::Vec3 >"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_as_acceleration_3d(self)

    def as_angular_acceleration_3d(self):
        r"""as_angular_acceleration_3d(Physics_Signals_ValueOutputSignal self) -> std::shared_ptr< openplx::Math::Vec3 >"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_as_angular_acceleration_3d(self)

    def as_angular_velocity_3d(self):
        r"""as_angular_velocity_3d(Physics_Signals_ValueOutputSignal self) -> std::shared_ptr< openplx::Math::Vec3 >"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_as_angular_velocity_3d(self)

    def as_force_3d(self):
        r"""as_force_3d(Physics_Signals_ValueOutputSignal self) -> std::shared_ptr< openplx::Math::Vec3 >"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_as_force_3d(self)

    def as_torque_3d(self):
        r"""as_torque_3d(Physics_Signals_ValueOutputSignal self) -> std::shared_ptr< openplx::Math::Vec3 >"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_as_torque_3d(self)

    def as_velocity_3d(self):
        r"""as_velocity_3d(Physics_Signals_ValueOutputSignal self) -> std::shared_ptr< openplx::Math::Vec3 >"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_as_velocity_3d(self)

    def as_position_3d(self):
        r"""as_position_3d(Physics_Signals_ValueOutputSignal self) -> std::shared_ptr< openplx::Math::Vec3 >"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_as_position_3d(self)

    def as_rpy(self):
        r"""as_rpy(Physics_Signals_ValueOutputSignal self) -> std::shared_ptr< openplx::Math::Vec3 >"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_as_rpy(self)

    def as_int(self):
        r"""as_int(Physics_Signals_ValueOutputSignal self) -> int64_t"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_as_int(self)

    def as_bool(self):
        r"""as_bool(Physics_Signals_ValueOutputSignal self) -> bool"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_as_bool(self)

    def as_fraction(self):
        r"""as_fraction(Physics_Signals_ValueOutputSignal self) -> double"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_as_fraction(self)

    def as_duration(self):
        r"""as_duration(Physics_Signals_ValueOutputSignal self) -> double"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_as_duration(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_ValueOutputSignal self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_ValueOutputSignal self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_ValueOutputSignal self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_ValueOutputSignal self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_ValueOutputSignal self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_ValueOutputSignal self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_ValueOutputSignal

# Register Physics_Signals_ValueOutputSignal in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_ValueOutputSignal_swigregister(Physics_Signals_ValueOutputSignal)

def Physics_Signals_ValueOutputSignal_create(v, source):
    r"""
    Physics_Signals_ValueOutputSignal_create(std::shared_ptr< openplx::Physics::Signals::Value > v, std::shared_ptr< openplx::Physics::Signals::Output > source) -> std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >

    Parameters
    ----------
    v: std::shared_ptr< openplx::Physics::Signals::Value >
    source: std::shared_ptr< openplx::Physics::Signals::Output >

    """
    return _PhysicsSwig.Physics_Signals_ValueOutputSignal_create(v, source)

def Physics_Signals_ValueOutputSignal_from_angle(v, source):
    r"""
    Physics_Signals_ValueOutputSignal_from_angle(double v, std::shared_ptr< openplx::Physics::Signals::Output > source) -> std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >

    Parameters
    ----------
    v: double
    source: std::shared_ptr< openplx::Physics::Signals::Output >

    """
    return _PhysicsSwig.Physics_Signals_ValueOutputSignal_from_angle(v, source)

def Physics_Signals_ValueOutputSignal_from_angular_velocity_1d(v, source):
    r"""
    Physics_Signals_ValueOutputSignal_from_angular_velocity_1d(double v, std::shared_ptr< openplx::Physics::Signals::Output > source) -> std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >

    Parameters
    ----------
    v: double
    source: std::shared_ptr< openplx::Physics::Signals::Output >

    """
    return _PhysicsSwig.Physics_Signals_ValueOutputSignal_from_angular_velocity_1d(v, source)

def Physics_Signals_ValueOutputSignal_from_distance(v, source):
    r"""
    Physics_Signals_ValueOutputSignal_from_distance(double v, std::shared_ptr< openplx::Physics::Signals::Output > source) -> std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >

    Parameters
    ----------
    v: double
    source: std::shared_ptr< openplx::Physics::Signals::Output >

    """
    return _PhysicsSwig.Physics_Signals_ValueOutputSignal_from_distance(v, source)

def Physics_Signals_ValueOutputSignal_from_force_1d(v, source):
    r"""
    Physics_Signals_ValueOutputSignal_from_force_1d(double v, std::shared_ptr< openplx::Physics::Signals::Output > source) -> std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >

    Parameters
    ----------
    v: double
    source: std::shared_ptr< openplx::Physics::Signals::Output >

    """
    return _PhysicsSwig.Physics_Signals_ValueOutputSignal_from_force_1d(v, source)

def Physics_Signals_ValueOutputSignal_from_velocity_1d(v, source):
    r"""
    Physics_Signals_ValueOutputSignal_from_velocity_1d(double v, std::shared_ptr< openplx::Physics::Signals::Output > source) -> std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >

    Parameters
    ----------
    v: double
    source: std::shared_ptr< openplx::Physics::Signals::Output >

    """
    return _PhysicsSwig.Physics_Signals_ValueOutputSignal_from_velocity_1d(v, source)

def Physics_Signals_ValueOutputSignal_from_torque_1d(v, source):
    r"""
    Physics_Signals_ValueOutputSignal_from_torque_1d(double v, std::shared_ptr< openplx::Physics::Signals::Output > source) -> std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >

    Parameters
    ----------
    v: double
    source: std::shared_ptr< openplx::Physics::Signals::Output >

    """
    return _PhysicsSwig.Physics_Signals_ValueOutputSignal_from_torque_1d(v, source)

def Physics_Signals_ValueOutputSignal_from_acceleration_3d(v, source):
    r"""
    Physics_Signals_ValueOutputSignal_from_acceleration_3d(std::shared_ptr< openplx::Math::Vec3 > v, std::shared_ptr< openplx::Physics::Signals::Output > source) -> std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >

    Parameters
    ----------
    v: std::shared_ptr< openplx::Math::Vec3 >
    source: std::shared_ptr< openplx::Physics::Signals::Output >

    """
    return _PhysicsSwig.Physics_Signals_ValueOutputSignal_from_acceleration_3d(v, source)

def Physics_Signals_ValueOutputSignal_from_angular_acceleration_3d(v, source):
    r"""
    Physics_Signals_ValueOutputSignal_from_angular_acceleration_3d(std::shared_ptr< openplx::Math::Vec3 > v, std::shared_ptr< openplx::Physics::Signals::Output > source) -> std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >

    Parameters
    ----------
    v: std::shared_ptr< openplx::Math::Vec3 >
    source: std::shared_ptr< openplx::Physics::Signals::Output >

    """
    return _PhysicsSwig.Physics_Signals_ValueOutputSignal_from_angular_acceleration_3d(v, source)

def Physics_Signals_ValueOutputSignal_from_angular_velocity_3d(v, source):
    r"""
    Physics_Signals_ValueOutputSignal_from_angular_velocity_3d(std::shared_ptr< openplx::Math::Vec3 > v, std::shared_ptr< openplx::Physics::Signals::Output > source) -> std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >

    Parameters
    ----------
    v: std::shared_ptr< openplx::Math::Vec3 >
    source: std::shared_ptr< openplx::Physics::Signals::Output >

    """
    return _PhysicsSwig.Physics_Signals_ValueOutputSignal_from_angular_velocity_3d(v, source)

def Physics_Signals_ValueOutputSignal_from_force_3d(v, source):
    r"""
    Physics_Signals_ValueOutputSignal_from_force_3d(std::shared_ptr< openplx::Math::Vec3 > v, std::shared_ptr< openplx::Physics::Signals::Output > source) -> std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >

    Parameters
    ----------
    v: std::shared_ptr< openplx::Math::Vec3 >
    source: std::shared_ptr< openplx::Physics::Signals::Output >

    """
    return _PhysicsSwig.Physics_Signals_ValueOutputSignal_from_force_3d(v, source)

def Physics_Signals_ValueOutputSignal_from_torque_3d(v, source):
    r"""
    Physics_Signals_ValueOutputSignal_from_torque_3d(std::shared_ptr< openplx::Math::Vec3 > v, std::shared_ptr< openplx::Physics::Signals::Output > source) -> std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >

    Parameters
    ----------
    v: std::shared_ptr< openplx::Math::Vec3 >
    source: std::shared_ptr< openplx::Physics::Signals::Output >

    """
    return _PhysicsSwig.Physics_Signals_ValueOutputSignal_from_torque_3d(v, source)

def Physics_Signals_ValueOutputSignal_from_velocity_3d(v, source):
    r"""
    Physics_Signals_ValueOutputSignal_from_velocity_3d(std::shared_ptr< openplx::Math::Vec3 > v, std::shared_ptr< openplx::Physics::Signals::Output > source) -> std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >

    Parameters
    ----------
    v: std::shared_ptr< openplx::Math::Vec3 >
    source: std::shared_ptr< openplx::Physics::Signals::Output >

    """
    return _PhysicsSwig.Physics_Signals_ValueOutputSignal_from_velocity_3d(v, source)

def Physics_Signals_ValueOutputSignal_from_position_3d(v, source):
    r"""
    Physics_Signals_ValueOutputSignal_from_position_3d(std::shared_ptr< openplx::Math::Vec3 > v, std::shared_ptr< openplx::Physics::Signals::Output > source) -> std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >

    Parameters
    ----------
    v: std::shared_ptr< openplx::Math::Vec3 >
    source: std::shared_ptr< openplx::Physics::Signals::Output >

    """
    return _PhysicsSwig.Physics_Signals_ValueOutputSignal_from_position_3d(v, source)

def Physics_Signals_ValueOutputSignal_from_rpy(v, source):
    r"""
    Physics_Signals_ValueOutputSignal_from_rpy(std::shared_ptr< openplx::Math::Vec3 > v, std::shared_ptr< openplx::Physics::Signals::Output > source) -> std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >

    Parameters
    ----------
    v: std::shared_ptr< openplx::Math::Vec3 >
    source: std::shared_ptr< openplx::Physics::Signals::Output >

    """
    return _PhysicsSwig.Physics_Signals_ValueOutputSignal_from_rpy(v, source)

def Physics_Signals_ValueOutputSignal_from_int(v, source):
    r"""
    Physics_Signals_ValueOutputSignal_from_int(int64_t v, std::shared_ptr< openplx::Physics::Signals::Output > source) -> std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >

    Parameters
    ----------
    v: int64_t
    source: std::shared_ptr< openplx::Physics::Signals::Output >

    """
    return _PhysicsSwig.Physics_Signals_ValueOutputSignal_from_int(v, source)

def Physics_Signals_ValueOutputSignal_from_bool(v, source):
    r"""
    Physics_Signals_ValueOutputSignal_from_bool(bool v, std::shared_ptr< openplx::Physics::Signals::Output > source) -> std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >

    Parameters
    ----------
    v: bool
    source: std::shared_ptr< openplx::Physics::Signals::Output >

    """
    return _PhysicsSwig.Physics_Signals_ValueOutputSignal_from_bool(v, source)

def Physics_Signals_ValueOutputSignal_from_fraction(v, source):
    r"""
    Physics_Signals_ValueOutputSignal_from_fraction(double v, std::shared_ptr< openplx::Physics::Signals::Output > source) -> std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >

    Parameters
    ----------
    v: double
    source: std::shared_ptr< openplx::Physics::Signals::Output >

    """
    return _PhysicsSwig.Physics_Signals_ValueOutputSignal_from_fraction(v, source)

def Physics_Signals_ValueOutputSignal_from_duration(v, source):
    r"""
    Physics_Signals_ValueOutputSignal_from_duration(double v, std::shared_ptr< openplx::Physics::Signals::Output > source) -> std::shared_ptr< openplx::Physics::Signals::ValueOutputSignal >

    Parameters
    ----------
    v: double
    source: std::shared_ptr< openplx::Physics::Signals::Output >

    """
    return _PhysicsSwig.Physics_Signals_ValueOutputSignal_from_duration(v, source)

class Physics_Signals_Vec3InputSignal(Physics_Signals_InputSignal):
    r"""Proxy of C++ openplx::Physics::Signals::Vec3InputSignal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_Vec3InputSignal self) -> Physics_Signals_Vec3InputSignal"""
        _PhysicsSwig.Physics_Signals_Vec3InputSignal_swiginit(self, _PhysicsSwig.new_Physics_Signals_Vec3InputSignal())

    def value(self):
        r"""value(Physics_Signals_Vec3InputSignal self) -> std::shared_ptr< openplx::Math::Vec3 >"""
        return _PhysicsSwig.Physics_Signals_Vec3InputSignal_value(self)

    @staticmethod
    def create(value, target):
        r"""
        create(std::shared_ptr< openplx::Math::Vec3 > value, std::shared_ptr< openplx::Physics::Signals::Input > target) -> std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal >

        Parameters
        ----------
        value: std::shared_ptr< openplx::Math::Vec3 >
        target: std::shared_ptr< openplx::Physics::Signals::Input >

        """
        return _PhysicsSwig.Physics_Signals_Vec3InputSignal_create(value, target)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_Vec3InputSignal self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_Vec3InputSignal_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_Vec3InputSignal self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_Vec3InputSignal_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_Vec3InputSignal self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_Vec3InputSignal_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_Vec3InputSignal self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_Vec3InputSignal_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_Vec3InputSignal self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_Vec3InputSignal_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_Vec3InputSignal self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_Vec3InputSignal_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_Vec3InputSignal

# Register Physics_Signals_Vec3InputSignal in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_Vec3InputSignal_swigregister(Physics_Signals_Vec3InputSignal)

def Physics_Signals_Vec3InputSignal_create(value, target):
    r"""
    Physics_Signals_Vec3InputSignal_create(std::shared_ptr< openplx::Math::Vec3 > value, std::shared_ptr< openplx::Physics::Signals::Input > target) -> std::shared_ptr< openplx::Physics::Signals::Vec3InputSignal >

    Parameters
    ----------
    value: std::shared_ptr< openplx::Math::Vec3 >
    target: std::shared_ptr< openplx::Physics::Signals::Input >

    """
    return _PhysicsSwig.Physics_Signals_Vec3InputSignal_create(value, target)

class Physics_Signals_Velocity1DValue(Physics_Signals_RealValue):
    r"""Proxy of C++ openplx::Physics::Signals::Velocity1DValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_Velocity1DValue self) -> Physics_Signals_Velocity1DValue"""
        _PhysicsSwig.Physics_Signals_Velocity1DValue_swiginit(self, _PhysicsSwig.new_Physics_Signals_Velocity1DValue())

    @staticmethod
    def create(value):
        r"""
        create(double value) -> std::shared_ptr< openplx::Physics::Signals::Velocity1DValue >

        Parameters
        ----------
        value: double

        """
        return _PhysicsSwig.Physics_Signals_Velocity1DValue_create(value)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_Velocity1DValue self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_Velocity1DValue_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_Velocity1DValue self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_Velocity1DValue_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_Velocity1DValue self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_Velocity1DValue_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_Velocity1DValue self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_Velocity1DValue_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_Velocity1DValue self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_Velocity1DValue_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_Velocity1DValue self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_Velocity1DValue_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_Velocity1DValue

# Register Physics_Signals_Velocity1DValue in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_Velocity1DValue_swigregister(Physics_Signals_Velocity1DValue)

def Physics_Signals_Velocity1DValue_create(value):
    r"""
    Physics_Signals_Velocity1DValue_create(double value) -> std::shared_ptr< openplx::Physics::Signals::Velocity1DValue >

    Parameters
    ----------
    value: double

    """
    return _PhysicsSwig.Physics_Signals_Velocity1DValue_create(value)

class Physics_Signals_Velocity3DValue(Physics_Signals_Vec3Value):
    r"""Proxy of C++ openplx::Physics::Signals::Velocity3DValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_Signals_Velocity3DValue self) -> Physics_Signals_Velocity3DValue"""
        _PhysicsSwig.Physics_Signals_Velocity3DValue_swiginit(self, _PhysicsSwig.new_Physics_Signals_Velocity3DValue())

    @staticmethod
    def create(value):
        r"""
        create(std::shared_ptr< openplx::Math::Vec3 > value) -> std::shared_ptr< openplx::Physics::Signals::Velocity3DValue >

        Parameters
        ----------
        value: std::shared_ptr< openplx::Math::Vec3 >

        """
        return _PhysicsSwig.Physics_Signals_Velocity3DValue_create(value)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_Signals_Velocity3DValue self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_Signals_Velocity3DValue_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_Signals_Velocity3DValue self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_Signals_Velocity3DValue_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_Signals_Velocity3DValue self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_Signals_Velocity3DValue_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_Signals_Velocity3DValue self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_Signals_Velocity3DValue_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_Signals_Velocity3DValue self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_Signals_Velocity3DValue_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_Signals_Velocity3DValue self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_Signals_Velocity3DValue_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_Velocity3DValue

# Register Physics_Signals_Velocity3DValue in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_Velocity3DValue_swigregister(Physics_Signals_Velocity3DValue)

def Physics_Signals_Velocity3DValue_create(value):
    r"""
    Physics_Signals_Velocity3DValue_create(std::shared_ptr< openplx::Math::Vec3 > value) -> std::shared_ptr< openplx::Physics::Signals::Velocity3DValue >

    Parameters
    ----------
    value: std::shared_ptr< openplx::Math::Vec3 >

    """
    return _PhysicsSwig.Physics_Signals_Velocity3DValue_create(value)

class Physics_System(openplx.Core.Object):
    r"""Proxy of C++ openplx::Physics::System class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics_System self) -> Physics_System"""
        _PhysicsSwig.Physics_System_swiginit(self, _PhysicsSwig.new_Physics_System())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics_System self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _PhysicsSwig.Physics_System_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics_System self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Physics_System_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics_System self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _PhysicsSwig.Physics_System_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics_System self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _PhysicsSwig.Physics_System_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics_System self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _PhysicsSwig.Physics_System_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics_System self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _PhysicsSwig.Physics_System_triggerOnInit(self, context)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_System

# Register Physics_System in _PhysicsSwig:
_PhysicsSwig.Physics_System_swigregister(Physics_System)



