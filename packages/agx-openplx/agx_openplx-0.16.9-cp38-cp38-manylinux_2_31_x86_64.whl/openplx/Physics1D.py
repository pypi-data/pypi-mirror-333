# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Physics1DSwig
else:
    import _Physics1DSwig

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SHARED_PTR_DISOWN = _Physics1DSwig.SHARED_PTR_DISOWN

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Physics1DSwig.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _Physics1DSwig.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _Physics1DSwig.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _Physics1DSwig.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _Physics1DSwig.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _Physics1DSwig.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _Physics1DSwig.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _Physics1DSwig.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _Physics1DSwig.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _Physics1DSwig.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _Physics1DSwig.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _Physics1DSwig.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _Physics1DSwig.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _Physics1DSwig.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _Physics1DSwig.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _Physics1DSwig.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _Physics1DSwig.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Physics1DSwig:
_Physics1DSwig.SwigPyIterator_swigregister(SwigPyIterator)

import openplx.Core
import openplx.Math
import openplx.Physics
class Physics1D_Bodies_Body_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics1D_Bodies_Body_Vector self) -> SwigPyIterator"""
        return _Physics1DSwig.Physics1D_Bodies_Body_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics1D_Bodies_Body_Vector self) -> bool"""
        return _Physics1DSwig.Physics1D_Bodies_Body_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics1D_Bodies_Body_Vector self) -> bool"""
        return _Physics1DSwig.Physics1D_Bodies_Body_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics1D_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::size_type"""
        return _Physics1DSwig.Physics1D_Bodies_Body_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics1D_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::difference_type j) -> Physics1D_Bodies_Body_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::difference_type

        """
        return _Physics1DSwig.Physics1D_Bodies_Body_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics1D_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::difference_type

        __setslice__(Physics1D_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::difference_type j, Physics1D_Bodies_Body_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body >,std::allocator< std::shared_ptr< openplx::Physics1D::Bodies::Body > > > const &

        """
        return _Physics1DSwig.Physics1D_Bodies_Body_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics1D_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::difference_type

        """
        return _Physics1DSwig.Physics1D_Bodies_Body_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics1D_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::difference_type

        __delitem__(Physics1D_Bodies_Body_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics1DSwig.Physics1D_Bodies_Body_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics1D_Bodies_Body_Vector self, PySliceObject * slice) -> Physics1D_Bodies_Body_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics1D_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::difference_type

        """
        return _Physics1DSwig.Physics1D_Bodies_Body_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics1D_Bodies_Body_Vector self, PySliceObject * slice, Physics1D_Bodies_Body_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body >,std::allocator< std::shared_ptr< openplx::Physics1D::Bodies::Body > > > const &

        __setitem__(Physics1D_Bodies_Body_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics1D_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Bodies_Body_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics1D_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::value_type"""
        return _Physics1DSwig.Physics1D_Bodies_Body_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics1D_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Bodies_Body_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics1D_Bodies_Body_Vector self) -> bool"""
        return _Physics1DSwig.Physics1D_Bodies_Body_Vector_empty(self)

    def size(self):
        r"""size(Physics1D_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::size_type"""
        return _Physics1DSwig.Physics1D_Bodies_Body_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics1D_Bodies_Body_Vector self, Physics1D_Bodies_Body_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > > &

        """
        return _Physics1DSwig.Physics1D_Bodies_Body_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics1D_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::iterator"""
        return _Physics1DSwig.Physics1D_Bodies_Body_Vector_begin(self)

    def end(self):
        r"""end(Physics1D_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::iterator"""
        return _Physics1DSwig.Physics1D_Bodies_Body_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics1D_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::reverse_iterator"""
        return _Physics1DSwig.Physics1D_Bodies_Body_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics1D_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::reverse_iterator"""
        return _Physics1DSwig.Physics1D_Bodies_Body_Vector_rend(self)

    def clear(self):
        r"""clear(Physics1D_Bodies_Body_Vector self)"""
        return _Physics1DSwig.Physics1D_Bodies_Body_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics1D_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::allocator_type"""
        return _Physics1DSwig.Physics1D_Bodies_Body_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics1D_Bodies_Body_Vector self)"""
        return _Physics1DSwig.Physics1D_Bodies_Body_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics1D_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::iterator

        erase(Physics1D_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::iterator first, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::iterator

        """
        return _Physics1DSwig.Physics1D_Bodies_Body_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics1D_Bodies_Body_Vector self) -> Physics1D_Bodies_Body_Vector
        __init__(Physics1D_Bodies_Body_Vector self, Physics1D_Bodies_Body_Vector other) -> Physics1D_Bodies_Body_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > > const &

        __init__(Physics1D_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::size_type size) -> Physics1D_Bodies_Body_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::size_type

        __init__(Physics1D_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::size_type size, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::value_type const & value) -> Physics1D_Bodies_Body_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::value_type const &

        """
        _Physics1DSwig.Physics1D_Bodies_Body_Vector_swiginit(self, _Physics1DSwig.new_Physics1D_Bodies_Body_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics1D_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Bodies_Body_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics1D_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::value_type const &"""
        return _Physics1DSwig.Physics1D_Bodies_Body_Vector_front(self)

    def back(self):
        r"""back(Physics1D_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::value_type const &"""
        return _Physics1DSwig.Physics1D_Bodies_Body_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics1D_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::size_type n, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Bodies_Body_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics1D_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::size_type

        resize(Physics1D_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Bodies_Body_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics1D_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::value_type const &

        insert(Physics1D_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::size_type n, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Bodies_Body_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics1D_Bodies_Body_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::size_type

        """
        return _Physics1DSwig.Physics1D_Bodies_Body_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics1D_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Body > >::size_type"""
        return _Physics1DSwig.Physics1D_Bodies_Body_Vector_capacity(self)
    __swig_destroy__ = _Physics1DSwig.delete_Physics1D_Bodies_Body_Vector

# Register Physics1D_Bodies_Body_Vector in _Physics1DSwig:
_Physics1DSwig.Physics1D_Bodies_Body_Vector_swigregister(Physics1D_Bodies_Body_Vector)

class Physics1D_Bodies_Inertia_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics1D_Bodies_Inertia_Vector self) -> SwigPyIterator"""
        return _Physics1DSwig.Physics1D_Bodies_Inertia_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics1D_Bodies_Inertia_Vector self) -> bool"""
        return _Physics1DSwig.Physics1D_Bodies_Inertia_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics1D_Bodies_Inertia_Vector self) -> bool"""
        return _Physics1DSwig.Physics1D_Bodies_Inertia_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics1D_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::size_type"""
        return _Physics1DSwig.Physics1D_Bodies_Inertia_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics1D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::difference_type j) -> Physics1D_Bodies_Inertia_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::difference_type

        """
        return _Physics1DSwig.Physics1D_Bodies_Inertia_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics1D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::difference_type

        __setslice__(Physics1D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::difference_type j, Physics1D_Bodies_Inertia_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia >,std::allocator< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > > > const &

        """
        return _Physics1DSwig.Physics1D_Bodies_Inertia_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics1D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::difference_type

        """
        return _Physics1DSwig.Physics1D_Bodies_Inertia_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics1D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::difference_type

        __delitem__(Physics1D_Bodies_Inertia_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics1DSwig.Physics1D_Bodies_Inertia_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics1D_Bodies_Inertia_Vector self, PySliceObject * slice) -> Physics1D_Bodies_Inertia_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics1D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::difference_type

        """
        return _Physics1DSwig.Physics1D_Bodies_Inertia_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics1D_Bodies_Inertia_Vector self, PySliceObject * slice, Physics1D_Bodies_Inertia_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia >,std::allocator< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > > > const &

        __setitem__(Physics1D_Bodies_Inertia_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics1D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Bodies_Inertia_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics1D_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::value_type"""
        return _Physics1DSwig.Physics1D_Bodies_Inertia_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics1D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Bodies_Inertia_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics1D_Bodies_Inertia_Vector self) -> bool"""
        return _Physics1DSwig.Physics1D_Bodies_Inertia_Vector_empty(self)

    def size(self):
        r"""size(Physics1D_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::size_type"""
        return _Physics1DSwig.Physics1D_Bodies_Inertia_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics1D_Bodies_Inertia_Vector self, Physics1D_Bodies_Inertia_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > > &

        """
        return _Physics1DSwig.Physics1D_Bodies_Inertia_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics1D_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::iterator"""
        return _Physics1DSwig.Physics1D_Bodies_Inertia_Vector_begin(self)

    def end(self):
        r"""end(Physics1D_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::iterator"""
        return _Physics1DSwig.Physics1D_Bodies_Inertia_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics1D_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::reverse_iterator"""
        return _Physics1DSwig.Physics1D_Bodies_Inertia_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics1D_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::reverse_iterator"""
        return _Physics1DSwig.Physics1D_Bodies_Inertia_Vector_rend(self)

    def clear(self):
        r"""clear(Physics1D_Bodies_Inertia_Vector self)"""
        return _Physics1DSwig.Physics1D_Bodies_Inertia_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics1D_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::allocator_type"""
        return _Physics1DSwig.Physics1D_Bodies_Inertia_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics1D_Bodies_Inertia_Vector self)"""
        return _Physics1DSwig.Physics1D_Bodies_Inertia_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics1D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::iterator

        erase(Physics1D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::iterator first, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::iterator

        """
        return _Physics1DSwig.Physics1D_Bodies_Inertia_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics1D_Bodies_Inertia_Vector self) -> Physics1D_Bodies_Inertia_Vector
        __init__(Physics1D_Bodies_Inertia_Vector self, Physics1D_Bodies_Inertia_Vector other) -> Physics1D_Bodies_Inertia_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > > const &

        __init__(Physics1D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::size_type size) -> Physics1D_Bodies_Inertia_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::size_type

        __init__(Physics1D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::size_type size, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::value_type const & value) -> Physics1D_Bodies_Inertia_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::value_type const &

        """
        _Physics1DSwig.Physics1D_Bodies_Inertia_Vector_swiginit(self, _Physics1DSwig.new_Physics1D_Bodies_Inertia_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics1D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Bodies_Inertia_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics1D_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::value_type const &"""
        return _Physics1DSwig.Physics1D_Bodies_Inertia_Vector_front(self)

    def back(self):
        r"""back(Physics1D_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::value_type const &"""
        return _Physics1DSwig.Physics1D_Bodies_Inertia_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics1D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::size_type n, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Bodies_Inertia_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics1D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::size_type

        resize(Physics1D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Bodies_Inertia_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics1D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::value_type const &

        insert(Physics1D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::size_type n, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Bodies_Inertia_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics1D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::size_type

        """
        return _Physics1DSwig.Physics1D_Bodies_Inertia_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics1D_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Inertia > >::size_type"""
        return _Physics1DSwig.Physics1D_Bodies_Inertia_Vector_capacity(self)
    __swig_destroy__ = _Physics1DSwig.delete_Physics1D_Bodies_Inertia_Vector

# Register Physics1D_Bodies_Inertia_Vector in _Physics1DSwig:
_Physics1DSwig.Physics1D_Bodies_Inertia_Vector_swigregister(Physics1D_Bodies_Inertia_Vector)

class Physics1D_Bodies_Kinematics_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics1D_Bodies_Kinematics_Vector self) -> SwigPyIterator"""
        return _Physics1DSwig.Physics1D_Bodies_Kinematics_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics1D_Bodies_Kinematics_Vector self) -> bool"""
        return _Physics1DSwig.Physics1D_Bodies_Kinematics_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics1D_Bodies_Kinematics_Vector self) -> bool"""
        return _Physics1DSwig.Physics1D_Bodies_Kinematics_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics1D_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::size_type"""
        return _Physics1DSwig.Physics1D_Bodies_Kinematics_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics1D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::difference_type j) -> Physics1D_Bodies_Kinematics_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::difference_type

        """
        return _Physics1DSwig.Physics1D_Bodies_Kinematics_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics1D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::difference_type

        __setslice__(Physics1D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::difference_type j, Physics1D_Bodies_Kinematics_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics >,std::allocator< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > > > const &

        """
        return _Physics1DSwig.Physics1D_Bodies_Kinematics_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics1D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::difference_type

        """
        return _Physics1DSwig.Physics1D_Bodies_Kinematics_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics1D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::difference_type

        __delitem__(Physics1D_Bodies_Kinematics_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics1DSwig.Physics1D_Bodies_Kinematics_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics1D_Bodies_Kinematics_Vector self, PySliceObject * slice) -> Physics1D_Bodies_Kinematics_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics1D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::difference_type

        """
        return _Physics1DSwig.Physics1D_Bodies_Kinematics_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics1D_Bodies_Kinematics_Vector self, PySliceObject * slice, Physics1D_Bodies_Kinematics_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics >,std::allocator< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > > > const &

        __setitem__(Physics1D_Bodies_Kinematics_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics1D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Bodies_Kinematics_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics1D_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::value_type"""
        return _Physics1DSwig.Physics1D_Bodies_Kinematics_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics1D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Bodies_Kinematics_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics1D_Bodies_Kinematics_Vector self) -> bool"""
        return _Physics1DSwig.Physics1D_Bodies_Kinematics_Vector_empty(self)

    def size(self):
        r"""size(Physics1D_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::size_type"""
        return _Physics1DSwig.Physics1D_Bodies_Kinematics_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics1D_Bodies_Kinematics_Vector self, Physics1D_Bodies_Kinematics_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > > &

        """
        return _Physics1DSwig.Physics1D_Bodies_Kinematics_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics1D_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::iterator"""
        return _Physics1DSwig.Physics1D_Bodies_Kinematics_Vector_begin(self)

    def end(self):
        r"""end(Physics1D_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::iterator"""
        return _Physics1DSwig.Physics1D_Bodies_Kinematics_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics1D_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::reverse_iterator"""
        return _Physics1DSwig.Physics1D_Bodies_Kinematics_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics1D_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::reverse_iterator"""
        return _Physics1DSwig.Physics1D_Bodies_Kinematics_Vector_rend(self)

    def clear(self):
        r"""clear(Physics1D_Bodies_Kinematics_Vector self)"""
        return _Physics1DSwig.Physics1D_Bodies_Kinematics_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics1D_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::allocator_type"""
        return _Physics1DSwig.Physics1D_Bodies_Kinematics_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics1D_Bodies_Kinematics_Vector self)"""
        return _Physics1DSwig.Physics1D_Bodies_Kinematics_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics1D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::iterator

        erase(Physics1D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::iterator first, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::iterator

        """
        return _Physics1DSwig.Physics1D_Bodies_Kinematics_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics1D_Bodies_Kinematics_Vector self) -> Physics1D_Bodies_Kinematics_Vector
        __init__(Physics1D_Bodies_Kinematics_Vector self, Physics1D_Bodies_Kinematics_Vector other) -> Physics1D_Bodies_Kinematics_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > > const &

        __init__(Physics1D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::size_type size) -> Physics1D_Bodies_Kinematics_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::size_type

        __init__(Physics1D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::size_type size, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::value_type const & value) -> Physics1D_Bodies_Kinematics_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::value_type const &

        """
        _Physics1DSwig.Physics1D_Bodies_Kinematics_Vector_swiginit(self, _Physics1DSwig.new_Physics1D_Bodies_Kinematics_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics1D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Bodies_Kinematics_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics1D_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::value_type const &"""
        return _Physics1DSwig.Physics1D_Bodies_Kinematics_Vector_front(self)

    def back(self):
        r"""back(Physics1D_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::value_type const &"""
        return _Physics1DSwig.Physics1D_Bodies_Kinematics_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics1D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::size_type n, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Bodies_Kinematics_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics1D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::size_type

        resize(Physics1D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Bodies_Kinematics_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics1D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::value_type const &

        insert(Physics1D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::size_type n, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Bodies_Kinematics_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics1D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::size_type

        """
        return _Physics1DSwig.Physics1D_Bodies_Kinematics_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics1D_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::Kinematics > >::size_type"""
        return _Physics1DSwig.Physics1D_Bodies_Kinematics_Vector_capacity(self)
    __swig_destroy__ = _Physics1DSwig.delete_Physics1D_Bodies_Kinematics_Vector

# Register Physics1D_Bodies_Kinematics_Vector in _Physics1DSwig:
_Physics1DSwig.Physics1D_Bodies_Kinematics_Vector_swigregister(Physics1D_Bodies_Kinematics_Vector)

class Physics1D_Bodies_LinearBody_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics1D_Bodies_LinearBody_Vector self) -> SwigPyIterator"""
        return _Physics1DSwig.Physics1D_Bodies_LinearBody_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics1D_Bodies_LinearBody_Vector self) -> bool"""
        return _Physics1DSwig.Physics1D_Bodies_LinearBody_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics1D_Bodies_LinearBody_Vector self) -> bool"""
        return _Physics1DSwig.Physics1D_Bodies_LinearBody_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics1D_Bodies_LinearBody_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::size_type"""
        return _Physics1DSwig.Physics1D_Bodies_LinearBody_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics1D_Bodies_LinearBody_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::difference_type j) -> Physics1D_Bodies_LinearBody_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::difference_type

        """
        return _Physics1DSwig.Physics1D_Bodies_LinearBody_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics1D_Bodies_LinearBody_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::difference_type

        __setslice__(Physics1D_Bodies_LinearBody_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::difference_type j, Physics1D_Bodies_LinearBody_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody >,std::allocator< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > > > const &

        """
        return _Physics1DSwig.Physics1D_Bodies_LinearBody_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics1D_Bodies_LinearBody_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::difference_type

        """
        return _Physics1DSwig.Physics1D_Bodies_LinearBody_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics1D_Bodies_LinearBody_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::difference_type

        __delitem__(Physics1D_Bodies_LinearBody_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics1DSwig.Physics1D_Bodies_LinearBody_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics1D_Bodies_LinearBody_Vector self, PySliceObject * slice) -> Physics1D_Bodies_LinearBody_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics1D_Bodies_LinearBody_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::difference_type

        """
        return _Physics1DSwig.Physics1D_Bodies_LinearBody_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics1D_Bodies_LinearBody_Vector self, PySliceObject * slice, Physics1D_Bodies_LinearBody_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody >,std::allocator< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > > > const &

        __setitem__(Physics1D_Bodies_LinearBody_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics1D_Bodies_LinearBody_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Bodies_LinearBody_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics1D_Bodies_LinearBody_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::value_type"""
        return _Physics1DSwig.Physics1D_Bodies_LinearBody_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics1D_Bodies_LinearBody_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Bodies_LinearBody_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics1D_Bodies_LinearBody_Vector self) -> bool"""
        return _Physics1DSwig.Physics1D_Bodies_LinearBody_Vector_empty(self)

    def size(self):
        r"""size(Physics1D_Bodies_LinearBody_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::size_type"""
        return _Physics1DSwig.Physics1D_Bodies_LinearBody_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics1D_Bodies_LinearBody_Vector self, Physics1D_Bodies_LinearBody_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > > &

        """
        return _Physics1DSwig.Physics1D_Bodies_LinearBody_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics1D_Bodies_LinearBody_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::iterator"""
        return _Physics1DSwig.Physics1D_Bodies_LinearBody_Vector_begin(self)

    def end(self):
        r"""end(Physics1D_Bodies_LinearBody_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::iterator"""
        return _Physics1DSwig.Physics1D_Bodies_LinearBody_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics1D_Bodies_LinearBody_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::reverse_iterator"""
        return _Physics1DSwig.Physics1D_Bodies_LinearBody_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics1D_Bodies_LinearBody_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::reverse_iterator"""
        return _Physics1DSwig.Physics1D_Bodies_LinearBody_Vector_rend(self)

    def clear(self):
        r"""clear(Physics1D_Bodies_LinearBody_Vector self)"""
        return _Physics1DSwig.Physics1D_Bodies_LinearBody_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics1D_Bodies_LinearBody_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::allocator_type"""
        return _Physics1DSwig.Physics1D_Bodies_LinearBody_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics1D_Bodies_LinearBody_Vector self)"""
        return _Physics1DSwig.Physics1D_Bodies_LinearBody_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics1D_Bodies_LinearBody_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::iterator

        erase(Physics1D_Bodies_LinearBody_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::iterator first, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::iterator

        """
        return _Physics1DSwig.Physics1D_Bodies_LinearBody_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics1D_Bodies_LinearBody_Vector self) -> Physics1D_Bodies_LinearBody_Vector
        __init__(Physics1D_Bodies_LinearBody_Vector self, Physics1D_Bodies_LinearBody_Vector other) -> Physics1D_Bodies_LinearBody_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > > const &

        __init__(Physics1D_Bodies_LinearBody_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::size_type size) -> Physics1D_Bodies_LinearBody_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::size_type

        __init__(Physics1D_Bodies_LinearBody_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::size_type size, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::value_type const & value) -> Physics1D_Bodies_LinearBody_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::value_type const &

        """
        _Physics1DSwig.Physics1D_Bodies_LinearBody_Vector_swiginit(self, _Physics1DSwig.new_Physics1D_Bodies_LinearBody_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics1D_Bodies_LinearBody_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Bodies_LinearBody_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics1D_Bodies_LinearBody_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::value_type const &"""
        return _Physics1DSwig.Physics1D_Bodies_LinearBody_Vector_front(self)

    def back(self):
        r"""back(Physics1D_Bodies_LinearBody_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::value_type const &"""
        return _Physics1DSwig.Physics1D_Bodies_LinearBody_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics1D_Bodies_LinearBody_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::size_type n, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Bodies_LinearBody_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics1D_Bodies_LinearBody_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::size_type

        resize(Physics1D_Bodies_LinearBody_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Bodies_LinearBody_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics1D_Bodies_LinearBody_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::value_type const &

        insert(Physics1D_Bodies_LinearBody_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::size_type n, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Bodies_LinearBody_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics1D_Bodies_LinearBody_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::size_type

        """
        return _Physics1DSwig.Physics1D_Bodies_LinearBody_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics1D_Bodies_LinearBody_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearBody > >::size_type"""
        return _Physics1DSwig.Physics1D_Bodies_LinearBody_Vector_capacity(self)
    __swig_destroy__ = _Physics1DSwig.delete_Physics1D_Bodies_LinearBody_Vector

# Register Physics1D_Bodies_LinearBody_Vector in _Physics1DSwig:
_Physics1DSwig.Physics1D_Bodies_LinearBody_Vector_swigregister(Physics1D_Bodies_LinearBody_Vector)

class Physics1D_Bodies_LinearKinematics_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics1D_Bodies_LinearKinematics_Vector self) -> SwigPyIterator"""
        return _Physics1DSwig.Physics1D_Bodies_LinearKinematics_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics1D_Bodies_LinearKinematics_Vector self) -> bool"""
        return _Physics1DSwig.Physics1D_Bodies_LinearKinematics_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics1D_Bodies_LinearKinematics_Vector self) -> bool"""
        return _Physics1DSwig.Physics1D_Bodies_LinearKinematics_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics1D_Bodies_LinearKinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::size_type"""
        return _Physics1DSwig.Physics1D_Bodies_LinearKinematics_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics1D_Bodies_LinearKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::difference_type j) -> Physics1D_Bodies_LinearKinematics_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::difference_type

        """
        return _Physics1DSwig.Physics1D_Bodies_LinearKinematics_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics1D_Bodies_LinearKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::difference_type

        __setslice__(Physics1D_Bodies_LinearKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::difference_type j, Physics1D_Bodies_LinearKinematics_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics >,std::allocator< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > > > const &

        """
        return _Physics1DSwig.Physics1D_Bodies_LinearKinematics_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics1D_Bodies_LinearKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::difference_type

        """
        return _Physics1DSwig.Physics1D_Bodies_LinearKinematics_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics1D_Bodies_LinearKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::difference_type

        __delitem__(Physics1D_Bodies_LinearKinematics_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics1DSwig.Physics1D_Bodies_LinearKinematics_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics1D_Bodies_LinearKinematics_Vector self, PySliceObject * slice) -> Physics1D_Bodies_LinearKinematics_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics1D_Bodies_LinearKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::difference_type

        """
        return _Physics1DSwig.Physics1D_Bodies_LinearKinematics_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics1D_Bodies_LinearKinematics_Vector self, PySliceObject * slice, Physics1D_Bodies_LinearKinematics_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics >,std::allocator< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > > > const &

        __setitem__(Physics1D_Bodies_LinearKinematics_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics1D_Bodies_LinearKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Bodies_LinearKinematics_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics1D_Bodies_LinearKinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::value_type"""
        return _Physics1DSwig.Physics1D_Bodies_LinearKinematics_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics1D_Bodies_LinearKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Bodies_LinearKinematics_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics1D_Bodies_LinearKinematics_Vector self) -> bool"""
        return _Physics1DSwig.Physics1D_Bodies_LinearKinematics_Vector_empty(self)

    def size(self):
        r"""size(Physics1D_Bodies_LinearKinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::size_type"""
        return _Physics1DSwig.Physics1D_Bodies_LinearKinematics_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics1D_Bodies_LinearKinematics_Vector self, Physics1D_Bodies_LinearKinematics_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > > &

        """
        return _Physics1DSwig.Physics1D_Bodies_LinearKinematics_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics1D_Bodies_LinearKinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::iterator"""
        return _Physics1DSwig.Physics1D_Bodies_LinearKinematics_Vector_begin(self)

    def end(self):
        r"""end(Physics1D_Bodies_LinearKinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::iterator"""
        return _Physics1DSwig.Physics1D_Bodies_LinearKinematics_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics1D_Bodies_LinearKinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::reverse_iterator"""
        return _Physics1DSwig.Physics1D_Bodies_LinearKinematics_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics1D_Bodies_LinearKinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::reverse_iterator"""
        return _Physics1DSwig.Physics1D_Bodies_LinearKinematics_Vector_rend(self)

    def clear(self):
        r"""clear(Physics1D_Bodies_LinearKinematics_Vector self)"""
        return _Physics1DSwig.Physics1D_Bodies_LinearKinematics_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics1D_Bodies_LinearKinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::allocator_type"""
        return _Physics1DSwig.Physics1D_Bodies_LinearKinematics_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics1D_Bodies_LinearKinematics_Vector self)"""
        return _Physics1DSwig.Physics1D_Bodies_LinearKinematics_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics1D_Bodies_LinearKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::iterator

        erase(Physics1D_Bodies_LinearKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::iterator first, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::iterator

        """
        return _Physics1DSwig.Physics1D_Bodies_LinearKinematics_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics1D_Bodies_LinearKinematics_Vector self) -> Physics1D_Bodies_LinearKinematics_Vector
        __init__(Physics1D_Bodies_LinearKinematics_Vector self, Physics1D_Bodies_LinearKinematics_Vector other) -> Physics1D_Bodies_LinearKinematics_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > > const &

        __init__(Physics1D_Bodies_LinearKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::size_type size) -> Physics1D_Bodies_LinearKinematics_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::size_type

        __init__(Physics1D_Bodies_LinearKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::size_type size, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::value_type const & value) -> Physics1D_Bodies_LinearKinematics_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::value_type const &

        """
        _Physics1DSwig.Physics1D_Bodies_LinearKinematics_Vector_swiginit(self, _Physics1DSwig.new_Physics1D_Bodies_LinearKinematics_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics1D_Bodies_LinearKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Bodies_LinearKinematics_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics1D_Bodies_LinearKinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::value_type const &"""
        return _Physics1DSwig.Physics1D_Bodies_LinearKinematics_Vector_front(self)

    def back(self):
        r"""back(Physics1D_Bodies_LinearKinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::value_type const &"""
        return _Physics1DSwig.Physics1D_Bodies_LinearKinematics_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics1D_Bodies_LinearKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::size_type n, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Bodies_LinearKinematics_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics1D_Bodies_LinearKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::size_type

        resize(Physics1D_Bodies_LinearKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Bodies_LinearKinematics_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics1D_Bodies_LinearKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::value_type const &

        insert(Physics1D_Bodies_LinearKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::size_type n, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Bodies_LinearKinematics_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics1D_Bodies_LinearKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::size_type

        """
        return _Physics1DSwig.Physics1D_Bodies_LinearKinematics_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics1D_Bodies_LinearKinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics > >::size_type"""
        return _Physics1DSwig.Physics1D_Bodies_LinearKinematics_Vector_capacity(self)
    __swig_destroy__ = _Physics1DSwig.delete_Physics1D_Bodies_LinearKinematics_Vector

# Register Physics1D_Bodies_LinearKinematics_Vector in _Physics1DSwig:
_Physics1DSwig.Physics1D_Bodies_LinearKinematics_Vector_swigregister(Physics1D_Bodies_LinearKinematics_Vector)

class Physics1D_Bodies_RotationalBody_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics1D_Bodies_RotationalBody_Vector self) -> SwigPyIterator"""
        return _Physics1DSwig.Physics1D_Bodies_RotationalBody_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics1D_Bodies_RotationalBody_Vector self) -> bool"""
        return _Physics1DSwig.Physics1D_Bodies_RotationalBody_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics1D_Bodies_RotationalBody_Vector self) -> bool"""
        return _Physics1DSwig.Physics1D_Bodies_RotationalBody_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics1D_Bodies_RotationalBody_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::size_type"""
        return _Physics1DSwig.Physics1D_Bodies_RotationalBody_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics1D_Bodies_RotationalBody_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::difference_type j) -> Physics1D_Bodies_RotationalBody_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::difference_type

        """
        return _Physics1DSwig.Physics1D_Bodies_RotationalBody_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics1D_Bodies_RotationalBody_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::difference_type

        __setslice__(Physics1D_Bodies_RotationalBody_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::difference_type j, Physics1D_Bodies_RotationalBody_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody >,std::allocator< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > > > const &

        """
        return _Physics1DSwig.Physics1D_Bodies_RotationalBody_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics1D_Bodies_RotationalBody_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::difference_type

        """
        return _Physics1DSwig.Physics1D_Bodies_RotationalBody_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics1D_Bodies_RotationalBody_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::difference_type

        __delitem__(Physics1D_Bodies_RotationalBody_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics1DSwig.Physics1D_Bodies_RotationalBody_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics1D_Bodies_RotationalBody_Vector self, PySliceObject * slice) -> Physics1D_Bodies_RotationalBody_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics1D_Bodies_RotationalBody_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::difference_type

        """
        return _Physics1DSwig.Physics1D_Bodies_RotationalBody_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics1D_Bodies_RotationalBody_Vector self, PySliceObject * slice, Physics1D_Bodies_RotationalBody_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody >,std::allocator< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > > > const &

        __setitem__(Physics1D_Bodies_RotationalBody_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics1D_Bodies_RotationalBody_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Bodies_RotationalBody_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics1D_Bodies_RotationalBody_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::value_type"""
        return _Physics1DSwig.Physics1D_Bodies_RotationalBody_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics1D_Bodies_RotationalBody_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Bodies_RotationalBody_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics1D_Bodies_RotationalBody_Vector self) -> bool"""
        return _Physics1DSwig.Physics1D_Bodies_RotationalBody_Vector_empty(self)

    def size(self):
        r"""size(Physics1D_Bodies_RotationalBody_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::size_type"""
        return _Physics1DSwig.Physics1D_Bodies_RotationalBody_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics1D_Bodies_RotationalBody_Vector self, Physics1D_Bodies_RotationalBody_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > > &

        """
        return _Physics1DSwig.Physics1D_Bodies_RotationalBody_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics1D_Bodies_RotationalBody_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::iterator"""
        return _Physics1DSwig.Physics1D_Bodies_RotationalBody_Vector_begin(self)

    def end(self):
        r"""end(Physics1D_Bodies_RotationalBody_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::iterator"""
        return _Physics1DSwig.Physics1D_Bodies_RotationalBody_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics1D_Bodies_RotationalBody_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::reverse_iterator"""
        return _Physics1DSwig.Physics1D_Bodies_RotationalBody_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics1D_Bodies_RotationalBody_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::reverse_iterator"""
        return _Physics1DSwig.Physics1D_Bodies_RotationalBody_Vector_rend(self)

    def clear(self):
        r"""clear(Physics1D_Bodies_RotationalBody_Vector self)"""
        return _Physics1DSwig.Physics1D_Bodies_RotationalBody_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics1D_Bodies_RotationalBody_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::allocator_type"""
        return _Physics1DSwig.Physics1D_Bodies_RotationalBody_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics1D_Bodies_RotationalBody_Vector self)"""
        return _Physics1DSwig.Physics1D_Bodies_RotationalBody_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics1D_Bodies_RotationalBody_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::iterator

        erase(Physics1D_Bodies_RotationalBody_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::iterator first, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::iterator

        """
        return _Physics1DSwig.Physics1D_Bodies_RotationalBody_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics1D_Bodies_RotationalBody_Vector self) -> Physics1D_Bodies_RotationalBody_Vector
        __init__(Physics1D_Bodies_RotationalBody_Vector self, Physics1D_Bodies_RotationalBody_Vector other) -> Physics1D_Bodies_RotationalBody_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > > const &

        __init__(Physics1D_Bodies_RotationalBody_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::size_type size) -> Physics1D_Bodies_RotationalBody_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::size_type

        __init__(Physics1D_Bodies_RotationalBody_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::size_type size, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::value_type const & value) -> Physics1D_Bodies_RotationalBody_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::value_type const &

        """
        _Physics1DSwig.Physics1D_Bodies_RotationalBody_Vector_swiginit(self, _Physics1DSwig.new_Physics1D_Bodies_RotationalBody_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics1D_Bodies_RotationalBody_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Bodies_RotationalBody_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics1D_Bodies_RotationalBody_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::value_type const &"""
        return _Physics1DSwig.Physics1D_Bodies_RotationalBody_Vector_front(self)

    def back(self):
        r"""back(Physics1D_Bodies_RotationalBody_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::value_type const &"""
        return _Physics1DSwig.Physics1D_Bodies_RotationalBody_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics1D_Bodies_RotationalBody_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::size_type n, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Bodies_RotationalBody_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics1D_Bodies_RotationalBody_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::size_type

        resize(Physics1D_Bodies_RotationalBody_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Bodies_RotationalBody_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics1D_Bodies_RotationalBody_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::value_type const &

        insert(Physics1D_Bodies_RotationalBody_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::size_type n, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Bodies_RotationalBody_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics1D_Bodies_RotationalBody_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::size_type

        """
        return _Physics1DSwig.Physics1D_Bodies_RotationalBody_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics1D_Bodies_RotationalBody_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalBody > >::size_type"""
        return _Physics1DSwig.Physics1D_Bodies_RotationalBody_Vector_capacity(self)
    __swig_destroy__ = _Physics1DSwig.delete_Physics1D_Bodies_RotationalBody_Vector

# Register Physics1D_Bodies_RotationalBody_Vector in _Physics1DSwig:
_Physics1DSwig.Physics1D_Bodies_RotationalBody_Vector_swigregister(Physics1D_Bodies_RotationalBody_Vector)

class Physics1D_Bodies_RotationalKinematics_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics1D_Bodies_RotationalKinematics_Vector self) -> SwigPyIterator"""
        return _Physics1DSwig.Physics1D_Bodies_RotationalKinematics_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics1D_Bodies_RotationalKinematics_Vector self) -> bool"""
        return _Physics1DSwig.Physics1D_Bodies_RotationalKinematics_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics1D_Bodies_RotationalKinematics_Vector self) -> bool"""
        return _Physics1DSwig.Physics1D_Bodies_RotationalKinematics_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics1D_Bodies_RotationalKinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::size_type"""
        return _Physics1DSwig.Physics1D_Bodies_RotationalKinematics_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics1D_Bodies_RotationalKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::difference_type j) -> Physics1D_Bodies_RotationalKinematics_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::difference_type

        """
        return _Physics1DSwig.Physics1D_Bodies_RotationalKinematics_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics1D_Bodies_RotationalKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::difference_type

        __setslice__(Physics1D_Bodies_RotationalKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::difference_type j, Physics1D_Bodies_RotationalKinematics_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics >,std::allocator< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > > > const &

        """
        return _Physics1DSwig.Physics1D_Bodies_RotationalKinematics_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics1D_Bodies_RotationalKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::difference_type

        """
        return _Physics1DSwig.Physics1D_Bodies_RotationalKinematics_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics1D_Bodies_RotationalKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::difference_type

        __delitem__(Physics1D_Bodies_RotationalKinematics_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics1DSwig.Physics1D_Bodies_RotationalKinematics_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics1D_Bodies_RotationalKinematics_Vector self, PySliceObject * slice) -> Physics1D_Bodies_RotationalKinematics_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics1D_Bodies_RotationalKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::difference_type

        """
        return _Physics1DSwig.Physics1D_Bodies_RotationalKinematics_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics1D_Bodies_RotationalKinematics_Vector self, PySliceObject * slice, Physics1D_Bodies_RotationalKinematics_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics >,std::allocator< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > > > const &

        __setitem__(Physics1D_Bodies_RotationalKinematics_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics1D_Bodies_RotationalKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Bodies_RotationalKinematics_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics1D_Bodies_RotationalKinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::value_type"""
        return _Physics1DSwig.Physics1D_Bodies_RotationalKinematics_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics1D_Bodies_RotationalKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Bodies_RotationalKinematics_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics1D_Bodies_RotationalKinematics_Vector self) -> bool"""
        return _Physics1DSwig.Physics1D_Bodies_RotationalKinematics_Vector_empty(self)

    def size(self):
        r"""size(Physics1D_Bodies_RotationalKinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::size_type"""
        return _Physics1DSwig.Physics1D_Bodies_RotationalKinematics_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics1D_Bodies_RotationalKinematics_Vector self, Physics1D_Bodies_RotationalKinematics_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > > &

        """
        return _Physics1DSwig.Physics1D_Bodies_RotationalKinematics_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics1D_Bodies_RotationalKinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::iterator"""
        return _Physics1DSwig.Physics1D_Bodies_RotationalKinematics_Vector_begin(self)

    def end(self):
        r"""end(Physics1D_Bodies_RotationalKinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::iterator"""
        return _Physics1DSwig.Physics1D_Bodies_RotationalKinematics_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics1D_Bodies_RotationalKinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::reverse_iterator"""
        return _Physics1DSwig.Physics1D_Bodies_RotationalKinematics_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics1D_Bodies_RotationalKinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::reverse_iterator"""
        return _Physics1DSwig.Physics1D_Bodies_RotationalKinematics_Vector_rend(self)

    def clear(self):
        r"""clear(Physics1D_Bodies_RotationalKinematics_Vector self)"""
        return _Physics1DSwig.Physics1D_Bodies_RotationalKinematics_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics1D_Bodies_RotationalKinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::allocator_type"""
        return _Physics1DSwig.Physics1D_Bodies_RotationalKinematics_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics1D_Bodies_RotationalKinematics_Vector self)"""
        return _Physics1DSwig.Physics1D_Bodies_RotationalKinematics_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics1D_Bodies_RotationalKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::iterator

        erase(Physics1D_Bodies_RotationalKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::iterator first, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::iterator

        """
        return _Physics1DSwig.Physics1D_Bodies_RotationalKinematics_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics1D_Bodies_RotationalKinematics_Vector self) -> Physics1D_Bodies_RotationalKinematics_Vector
        __init__(Physics1D_Bodies_RotationalKinematics_Vector self, Physics1D_Bodies_RotationalKinematics_Vector other) -> Physics1D_Bodies_RotationalKinematics_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > > const &

        __init__(Physics1D_Bodies_RotationalKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::size_type size) -> Physics1D_Bodies_RotationalKinematics_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::size_type

        __init__(Physics1D_Bodies_RotationalKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::size_type size, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::value_type const & value) -> Physics1D_Bodies_RotationalKinematics_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::value_type const &

        """
        _Physics1DSwig.Physics1D_Bodies_RotationalKinematics_Vector_swiginit(self, _Physics1DSwig.new_Physics1D_Bodies_RotationalKinematics_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics1D_Bodies_RotationalKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Bodies_RotationalKinematics_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics1D_Bodies_RotationalKinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::value_type const &"""
        return _Physics1DSwig.Physics1D_Bodies_RotationalKinematics_Vector_front(self)

    def back(self):
        r"""back(Physics1D_Bodies_RotationalKinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::value_type const &"""
        return _Physics1DSwig.Physics1D_Bodies_RotationalKinematics_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics1D_Bodies_RotationalKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::size_type n, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Bodies_RotationalKinematics_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics1D_Bodies_RotationalKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::size_type

        resize(Physics1D_Bodies_RotationalKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Bodies_RotationalKinematics_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics1D_Bodies_RotationalKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::value_type const &

        insert(Physics1D_Bodies_RotationalKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::size_type n, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Bodies_RotationalKinematics_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics1D_Bodies_RotationalKinematics_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::size_type

        """
        return _Physics1DSwig.Physics1D_Bodies_RotationalKinematics_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics1D_Bodies_RotationalKinematics_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics > >::size_type"""
        return _Physics1DSwig.Physics1D_Bodies_RotationalKinematics_Vector_capacity(self)
    __swig_destroy__ = _Physics1DSwig.delete_Physics1D_Bodies_RotationalKinematics_Vector

# Register Physics1D_Bodies_RotationalKinematics_Vector in _Physics1DSwig:
_Physics1DSwig.Physics1D_Bodies_RotationalKinematics_Vector_swigregister(Physics1D_Bodies_RotationalKinematics_Vector)

class Physics1D_Charges_LinearConnector_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics1D_Charges_LinearConnector_Vector self) -> SwigPyIterator"""
        return _Physics1DSwig.Physics1D_Charges_LinearConnector_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics1D_Charges_LinearConnector_Vector self) -> bool"""
        return _Physics1DSwig.Physics1D_Charges_LinearConnector_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics1D_Charges_LinearConnector_Vector self) -> bool"""
        return _Physics1DSwig.Physics1D_Charges_LinearConnector_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics1D_Charges_LinearConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::size_type"""
        return _Physics1DSwig.Physics1D_Charges_LinearConnector_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics1D_Charges_LinearConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::difference_type j) -> Physics1D_Charges_LinearConnector_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::difference_type

        """
        return _Physics1DSwig.Physics1D_Charges_LinearConnector_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics1D_Charges_LinearConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::difference_type

        __setslice__(Physics1D_Charges_LinearConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::difference_type j, Physics1D_Charges_LinearConnector_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector >,std::allocator< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > > > const &

        """
        return _Physics1DSwig.Physics1D_Charges_LinearConnector_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics1D_Charges_LinearConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::difference_type

        """
        return _Physics1DSwig.Physics1D_Charges_LinearConnector_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics1D_Charges_LinearConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::difference_type

        __delitem__(Physics1D_Charges_LinearConnector_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics1DSwig.Physics1D_Charges_LinearConnector_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics1D_Charges_LinearConnector_Vector self, PySliceObject * slice) -> Physics1D_Charges_LinearConnector_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics1D_Charges_LinearConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::difference_type

        """
        return _Physics1DSwig.Physics1D_Charges_LinearConnector_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics1D_Charges_LinearConnector_Vector self, PySliceObject * slice, Physics1D_Charges_LinearConnector_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector >,std::allocator< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > > > const &

        __setitem__(Physics1D_Charges_LinearConnector_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics1D_Charges_LinearConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Charges_LinearConnector_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics1D_Charges_LinearConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::value_type"""
        return _Physics1DSwig.Physics1D_Charges_LinearConnector_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics1D_Charges_LinearConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Charges_LinearConnector_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics1D_Charges_LinearConnector_Vector self) -> bool"""
        return _Physics1DSwig.Physics1D_Charges_LinearConnector_Vector_empty(self)

    def size(self):
        r"""size(Physics1D_Charges_LinearConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::size_type"""
        return _Physics1DSwig.Physics1D_Charges_LinearConnector_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics1D_Charges_LinearConnector_Vector self, Physics1D_Charges_LinearConnector_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > > &

        """
        return _Physics1DSwig.Physics1D_Charges_LinearConnector_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics1D_Charges_LinearConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::iterator"""
        return _Physics1DSwig.Physics1D_Charges_LinearConnector_Vector_begin(self)

    def end(self):
        r"""end(Physics1D_Charges_LinearConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::iterator"""
        return _Physics1DSwig.Physics1D_Charges_LinearConnector_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics1D_Charges_LinearConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::reverse_iterator"""
        return _Physics1DSwig.Physics1D_Charges_LinearConnector_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics1D_Charges_LinearConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::reverse_iterator"""
        return _Physics1DSwig.Physics1D_Charges_LinearConnector_Vector_rend(self)

    def clear(self):
        r"""clear(Physics1D_Charges_LinearConnector_Vector self)"""
        return _Physics1DSwig.Physics1D_Charges_LinearConnector_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics1D_Charges_LinearConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::allocator_type"""
        return _Physics1DSwig.Physics1D_Charges_LinearConnector_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics1D_Charges_LinearConnector_Vector self)"""
        return _Physics1DSwig.Physics1D_Charges_LinearConnector_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics1D_Charges_LinearConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::iterator

        erase(Physics1D_Charges_LinearConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::iterator first, std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::iterator

        """
        return _Physics1DSwig.Physics1D_Charges_LinearConnector_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics1D_Charges_LinearConnector_Vector self) -> Physics1D_Charges_LinearConnector_Vector
        __init__(Physics1D_Charges_LinearConnector_Vector self, Physics1D_Charges_LinearConnector_Vector other) -> Physics1D_Charges_LinearConnector_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > > const &

        __init__(Physics1D_Charges_LinearConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::size_type size) -> Physics1D_Charges_LinearConnector_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::size_type

        __init__(Physics1D_Charges_LinearConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::size_type size, std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::value_type const & value) -> Physics1D_Charges_LinearConnector_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::value_type const &

        """
        _Physics1DSwig.Physics1D_Charges_LinearConnector_Vector_swiginit(self, _Physics1DSwig.new_Physics1D_Charges_LinearConnector_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics1D_Charges_LinearConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Charges_LinearConnector_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics1D_Charges_LinearConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::value_type const &"""
        return _Physics1DSwig.Physics1D_Charges_LinearConnector_Vector_front(self)

    def back(self):
        r"""back(Physics1D_Charges_LinearConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::value_type const &"""
        return _Physics1DSwig.Physics1D_Charges_LinearConnector_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics1D_Charges_LinearConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::size_type n, std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Charges_LinearConnector_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics1D_Charges_LinearConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::size_type

        resize(Physics1D_Charges_LinearConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Charges_LinearConnector_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics1D_Charges_LinearConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::value_type const &

        insert(Physics1D_Charges_LinearConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::size_type n, std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Charges_LinearConnector_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics1D_Charges_LinearConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::size_type

        """
        return _Physics1DSwig.Physics1D_Charges_LinearConnector_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics1D_Charges_LinearConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::LinearConnector > >::size_type"""
        return _Physics1DSwig.Physics1D_Charges_LinearConnector_Vector_capacity(self)
    __swig_destroy__ = _Physics1DSwig.delete_Physics1D_Charges_LinearConnector_Vector

# Register Physics1D_Charges_LinearConnector_Vector in _Physics1DSwig:
_Physics1DSwig.Physics1D_Charges_LinearConnector_Vector_swigregister(Physics1D_Charges_LinearConnector_Vector)

class Physics1D_Charges_MateConnector_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics1D_Charges_MateConnector_Vector self) -> SwigPyIterator"""
        return _Physics1DSwig.Physics1D_Charges_MateConnector_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics1D_Charges_MateConnector_Vector self) -> bool"""
        return _Physics1DSwig.Physics1D_Charges_MateConnector_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics1D_Charges_MateConnector_Vector self) -> bool"""
        return _Physics1DSwig.Physics1D_Charges_MateConnector_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics1D_Charges_MateConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::size_type"""
        return _Physics1DSwig.Physics1D_Charges_MateConnector_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics1D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::difference_type j) -> Physics1D_Charges_MateConnector_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::difference_type

        """
        return _Physics1DSwig.Physics1D_Charges_MateConnector_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics1D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::difference_type

        __setslice__(Physics1D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::difference_type j, Physics1D_Charges_MateConnector_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector >,std::allocator< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > > > const &

        """
        return _Physics1DSwig.Physics1D_Charges_MateConnector_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics1D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::difference_type

        """
        return _Physics1DSwig.Physics1D_Charges_MateConnector_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics1D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::difference_type

        __delitem__(Physics1D_Charges_MateConnector_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics1DSwig.Physics1D_Charges_MateConnector_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics1D_Charges_MateConnector_Vector self, PySliceObject * slice) -> Physics1D_Charges_MateConnector_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics1D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::difference_type

        """
        return _Physics1DSwig.Physics1D_Charges_MateConnector_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics1D_Charges_MateConnector_Vector self, PySliceObject * slice, Physics1D_Charges_MateConnector_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector >,std::allocator< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > > > const &

        __setitem__(Physics1D_Charges_MateConnector_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics1D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Charges_MateConnector_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics1D_Charges_MateConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::value_type"""
        return _Physics1DSwig.Physics1D_Charges_MateConnector_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics1D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Charges_MateConnector_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics1D_Charges_MateConnector_Vector self) -> bool"""
        return _Physics1DSwig.Physics1D_Charges_MateConnector_Vector_empty(self)

    def size(self):
        r"""size(Physics1D_Charges_MateConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::size_type"""
        return _Physics1DSwig.Physics1D_Charges_MateConnector_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics1D_Charges_MateConnector_Vector self, Physics1D_Charges_MateConnector_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > > &

        """
        return _Physics1DSwig.Physics1D_Charges_MateConnector_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics1D_Charges_MateConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::iterator"""
        return _Physics1DSwig.Physics1D_Charges_MateConnector_Vector_begin(self)

    def end(self):
        r"""end(Physics1D_Charges_MateConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::iterator"""
        return _Physics1DSwig.Physics1D_Charges_MateConnector_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics1D_Charges_MateConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::reverse_iterator"""
        return _Physics1DSwig.Physics1D_Charges_MateConnector_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics1D_Charges_MateConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::reverse_iterator"""
        return _Physics1DSwig.Physics1D_Charges_MateConnector_Vector_rend(self)

    def clear(self):
        r"""clear(Physics1D_Charges_MateConnector_Vector self)"""
        return _Physics1DSwig.Physics1D_Charges_MateConnector_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics1D_Charges_MateConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::allocator_type"""
        return _Physics1DSwig.Physics1D_Charges_MateConnector_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics1D_Charges_MateConnector_Vector self)"""
        return _Physics1DSwig.Physics1D_Charges_MateConnector_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics1D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::iterator

        erase(Physics1D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::iterator first, std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::iterator

        """
        return _Physics1DSwig.Physics1D_Charges_MateConnector_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics1D_Charges_MateConnector_Vector self) -> Physics1D_Charges_MateConnector_Vector
        __init__(Physics1D_Charges_MateConnector_Vector self, Physics1D_Charges_MateConnector_Vector other) -> Physics1D_Charges_MateConnector_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > > const &

        __init__(Physics1D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::size_type size) -> Physics1D_Charges_MateConnector_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::size_type

        __init__(Physics1D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::size_type size, std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::value_type const & value) -> Physics1D_Charges_MateConnector_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::value_type const &

        """
        _Physics1DSwig.Physics1D_Charges_MateConnector_Vector_swiginit(self, _Physics1DSwig.new_Physics1D_Charges_MateConnector_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics1D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Charges_MateConnector_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics1D_Charges_MateConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::value_type const &"""
        return _Physics1DSwig.Physics1D_Charges_MateConnector_Vector_front(self)

    def back(self):
        r"""back(Physics1D_Charges_MateConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::value_type const &"""
        return _Physics1DSwig.Physics1D_Charges_MateConnector_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics1D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::size_type n, std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Charges_MateConnector_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics1D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::size_type

        resize(Physics1D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Charges_MateConnector_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics1D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::value_type const &

        insert(Physics1D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::size_type n, std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Charges_MateConnector_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics1D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::size_type

        """
        return _Physics1DSwig.Physics1D_Charges_MateConnector_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics1D_Charges_MateConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::MateConnector > >::size_type"""
        return _Physics1DSwig.Physics1D_Charges_MateConnector_Vector_capacity(self)
    __swig_destroy__ = _Physics1DSwig.delete_Physics1D_Charges_MateConnector_Vector

# Register Physics1D_Charges_MateConnector_Vector in _Physics1DSwig:
_Physics1DSwig.Physics1D_Charges_MateConnector_Vector_swigregister(Physics1D_Charges_MateConnector_Vector)

class Physics1D_Charges_RotationalConnector_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics1D_Charges_RotationalConnector_Vector self) -> SwigPyIterator"""
        return _Physics1DSwig.Physics1D_Charges_RotationalConnector_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics1D_Charges_RotationalConnector_Vector self) -> bool"""
        return _Physics1DSwig.Physics1D_Charges_RotationalConnector_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics1D_Charges_RotationalConnector_Vector self) -> bool"""
        return _Physics1DSwig.Physics1D_Charges_RotationalConnector_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics1D_Charges_RotationalConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::size_type"""
        return _Physics1DSwig.Physics1D_Charges_RotationalConnector_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics1D_Charges_RotationalConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::difference_type j) -> Physics1D_Charges_RotationalConnector_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::difference_type

        """
        return _Physics1DSwig.Physics1D_Charges_RotationalConnector_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics1D_Charges_RotationalConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::difference_type

        __setslice__(Physics1D_Charges_RotationalConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::difference_type j, Physics1D_Charges_RotationalConnector_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector >,std::allocator< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > > > const &

        """
        return _Physics1DSwig.Physics1D_Charges_RotationalConnector_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics1D_Charges_RotationalConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::difference_type

        """
        return _Physics1DSwig.Physics1D_Charges_RotationalConnector_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics1D_Charges_RotationalConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::difference_type

        __delitem__(Physics1D_Charges_RotationalConnector_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics1DSwig.Physics1D_Charges_RotationalConnector_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics1D_Charges_RotationalConnector_Vector self, PySliceObject * slice) -> Physics1D_Charges_RotationalConnector_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics1D_Charges_RotationalConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::difference_type

        """
        return _Physics1DSwig.Physics1D_Charges_RotationalConnector_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics1D_Charges_RotationalConnector_Vector self, PySliceObject * slice, Physics1D_Charges_RotationalConnector_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector >,std::allocator< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > > > const &

        __setitem__(Physics1D_Charges_RotationalConnector_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics1D_Charges_RotationalConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Charges_RotationalConnector_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics1D_Charges_RotationalConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::value_type"""
        return _Physics1DSwig.Physics1D_Charges_RotationalConnector_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics1D_Charges_RotationalConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Charges_RotationalConnector_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics1D_Charges_RotationalConnector_Vector self) -> bool"""
        return _Physics1DSwig.Physics1D_Charges_RotationalConnector_Vector_empty(self)

    def size(self):
        r"""size(Physics1D_Charges_RotationalConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::size_type"""
        return _Physics1DSwig.Physics1D_Charges_RotationalConnector_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics1D_Charges_RotationalConnector_Vector self, Physics1D_Charges_RotationalConnector_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > > &

        """
        return _Physics1DSwig.Physics1D_Charges_RotationalConnector_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics1D_Charges_RotationalConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::iterator"""
        return _Physics1DSwig.Physics1D_Charges_RotationalConnector_Vector_begin(self)

    def end(self):
        r"""end(Physics1D_Charges_RotationalConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::iterator"""
        return _Physics1DSwig.Physics1D_Charges_RotationalConnector_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics1D_Charges_RotationalConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::reverse_iterator"""
        return _Physics1DSwig.Physics1D_Charges_RotationalConnector_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics1D_Charges_RotationalConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::reverse_iterator"""
        return _Physics1DSwig.Physics1D_Charges_RotationalConnector_Vector_rend(self)

    def clear(self):
        r"""clear(Physics1D_Charges_RotationalConnector_Vector self)"""
        return _Physics1DSwig.Physics1D_Charges_RotationalConnector_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics1D_Charges_RotationalConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::allocator_type"""
        return _Physics1DSwig.Physics1D_Charges_RotationalConnector_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics1D_Charges_RotationalConnector_Vector self)"""
        return _Physics1DSwig.Physics1D_Charges_RotationalConnector_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics1D_Charges_RotationalConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::iterator

        erase(Physics1D_Charges_RotationalConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::iterator first, std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::iterator

        """
        return _Physics1DSwig.Physics1D_Charges_RotationalConnector_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics1D_Charges_RotationalConnector_Vector self) -> Physics1D_Charges_RotationalConnector_Vector
        __init__(Physics1D_Charges_RotationalConnector_Vector self, Physics1D_Charges_RotationalConnector_Vector other) -> Physics1D_Charges_RotationalConnector_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > > const &

        __init__(Physics1D_Charges_RotationalConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::size_type size) -> Physics1D_Charges_RotationalConnector_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::size_type

        __init__(Physics1D_Charges_RotationalConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::size_type size, std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::value_type const & value) -> Physics1D_Charges_RotationalConnector_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::value_type const &

        """
        _Physics1DSwig.Physics1D_Charges_RotationalConnector_Vector_swiginit(self, _Physics1DSwig.new_Physics1D_Charges_RotationalConnector_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics1D_Charges_RotationalConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Charges_RotationalConnector_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics1D_Charges_RotationalConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::value_type const &"""
        return _Physics1DSwig.Physics1D_Charges_RotationalConnector_Vector_front(self)

    def back(self):
        r"""back(Physics1D_Charges_RotationalConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::value_type const &"""
        return _Physics1DSwig.Physics1D_Charges_RotationalConnector_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics1D_Charges_RotationalConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::size_type n, std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Charges_RotationalConnector_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics1D_Charges_RotationalConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::size_type

        resize(Physics1D_Charges_RotationalConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Charges_RotationalConnector_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics1D_Charges_RotationalConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::value_type const &

        insert(Physics1D_Charges_RotationalConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::size_type n, std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Charges_RotationalConnector_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics1D_Charges_RotationalConnector_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::size_type

        """
        return _Physics1DSwig.Physics1D_Charges_RotationalConnector_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics1D_Charges_RotationalConnector_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Charges::RotationalConnector > >::size_type"""
        return _Physics1DSwig.Physics1D_Charges_RotationalConnector_Vector_capacity(self)
    __swig_destroy__ = _Physics1DSwig.delete_Physics1D_Charges_RotationalConnector_Vector

# Register Physics1D_Charges_RotationalConnector_Vector in _Physics1DSwig:
_Physics1DSwig.Physics1D_Charges_RotationalConnector_Vector_swigregister(Physics1D_Charges_RotationalConnector_Vector)

class Physics1D_Interactions_Mate_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics1D_Interactions_Mate_Vector self) -> SwigPyIterator"""
        return _Physics1DSwig.Physics1D_Interactions_Mate_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics1D_Interactions_Mate_Vector self) -> bool"""
        return _Physics1DSwig.Physics1D_Interactions_Mate_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics1D_Interactions_Mate_Vector self) -> bool"""
        return _Physics1DSwig.Physics1D_Interactions_Mate_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics1D_Interactions_Mate_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::size_type"""
        return _Physics1DSwig.Physics1D_Interactions_Mate_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics1D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::difference_type j) -> Physics1D_Interactions_Mate_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::difference_type

        """
        return _Physics1DSwig.Physics1D_Interactions_Mate_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics1D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::difference_type

        __setslice__(Physics1D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::difference_type j, Physics1D_Interactions_Mate_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate >,std::allocator< std::shared_ptr< openplx::Physics1D::Interactions::Mate > > > const &

        """
        return _Physics1DSwig.Physics1D_Interactions_Mate_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics1D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::difference_type

        """
        return _Physics1DSwig.Physics1D_Interactions_Mate_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics1D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::difference_type

        __delitem__(Physics1D_Interactions_Mate_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics1DSwig.Physics1D_Interactions_Mate_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics1D_Interactions_Mate_Vector self, PySliceObject * slice) -> Physics1D_Interactions_Mate_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics1D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::difference_type

        """
        return _Physics1DSwig.Physics1D_Interactions_Mate_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics1D_Interactions_Mate_Vector self, PySliceObject * slice, Physics1D_Interactions_Mate_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate >,std::allocator< std::shared_ptr< openplx::Physics1D::Interactions::Mate > > > const &

        __setitem__(Physics1D_Interactions_Mate_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics1D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Interactions_Mate_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics1D_Interactions_Mate_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::value_type"""
        return _Physics1DSwig.Physics1D_Interactions_Mate_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics1D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Interactions_Mate_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics1D_Interactions_Mate_Vector self) -> bool"""
        return _Physics1DSwig.Physics1D_Interactions_Mate_Vector_empty(self)

    def size(self):
        r"""size(Physics1D_Interactions_Mate_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::size_type"""
        return _Physics1DSwig.Physics1D_Interactions_Mate_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics1D_Interactions_Mate_Vector self, Physics1D_Interactions_Mate_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > > &

        """
        return _Physics1DSwig.Physics1D_Interactions_Mate_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics1D_Interactions_Mate_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::iterator"""
        return _Physics1DSwig.Physics1D_Interactions_Mate_Vector_begin(self)

    def end(self):
        r"""end(Physics1D_Interactions_Mate_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::iterator"""
        return _Physics1DSwig.Physics1D_Interactions_Mate_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics1D_Interactions_Mate_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::reverse_iterator"""
        return _Physics1DSwig.Physics1D_Interactions_Mate_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics1D_Interactions_Mate_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::reverse_iterator"""
        return _Physics1DSwig.Physics1D_Interactions_Mate_Vector_rend(self)

    def clear(self):
        r"""clear(Physics1D_Interactions_Mate_Vector self)"""
        return _Physics1DSwig.Physics1D_Interactions_Mate_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics1D_Interactions_Mate_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::allocator_type"""
        return _Physics1DSwig.Physics1D_Interactions_Mate_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics1D_Interactions_Mate_Vector self)"""
        return _Physics1DSwig.Physics1D_Interactions_Mate_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics1D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::iterator

        erase(Physics1D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::iterator first, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::iterator

        """
        return _Physics1DSwig.Physics1D_Interactions_Mate_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics1D_Interactions_Mate_Vector self) -> Physics1D_Interactions_Mate_Vector
        __init__(Physics1D_Interactions_Mate_Vector self, Physics1D_Interactions_Mate_Vector other) -> Physics1D_Interactions_Mate_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > > const &

        __init__(Physics1D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::size_type size) -> Physics1D_Interactions_Mate_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::size_type

        __init__(Physics1D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::size_type size, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::value_type const & value) -> Physics1D_Interactions_Mate_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::value_type const &

        """
        _Physics1DSwig.Physics1D_Interactions_Mate_Vector_swiginit(self, _Physics1DSwig.new_Physics1D_Interactions_Mate_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics1D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Interactions_Mate_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics1D_Interactions_Mate_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::value_type const &"""
        return _Physics1DSwig.Physics1D_Interactions_Mate_Vector_front(self)

    def back(self):
        r"""back(Physics1D_Interactions_Mate_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::value_type const &"""
        return _Physics1DSwig.Physics1D_Interactions_Mate_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics1D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::size_type n, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Interactions_Mate_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics1D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::size_type

        resize(Physics1D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Interactions_Mate_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics1D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::value_type const &

        insert(Physics1D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::size_type n, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Interactions_Mate_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics1D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::size_type

        """
        return _Physics1DSwig.Physics1D_Interactions_Mate_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics1D_Interactions_Mate_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::Mate > >::size_type"""
        return _Physics1DSwig.Physics1D_Interactions_Mate_Vector_capacity(self)
    __swig_destroy__ = _Physics1DSwig.delete_Physics1D_Interactions_Mate_Vector

# Register Physics1D_Interactions_Mate_Vector in _Physics1DSwig:
_Physics1DSwig.Physics1D_Interactions_Mate_Vector_swigregister(Physics1D_Interactions_Mate_Vector)

class Physics1D_Interactions_RotationalVelocityMotor_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics1D_Interactions_RotationalVelocityMotor_Vector self) -> SwigPyIterator"""
        return _Physics1DSwig.Physics1D_Interactions_RotationalVelocityMotor_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics1D_Interactions_RotationalVelocityMotor_Vector self) -> bool"""
        return _Physics1DSwig.Physics1D_Interactions_RotationalVelocityMotor_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics1D_Interactions_RotationalVelocityMotor_Vector self) -> bool"""
        return _Physics1DSwig.Physics1D_Interactions_RotationalVelocityMotor_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics1D_Interactions_RotationalVelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::size_type"""
        return _Physics1DSwig.Physics1D_Interactions_RotationalVelocityMotor_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics1D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::difference_type j) -> Physics1D_Interactions_RotationalVelocityMotor_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::difference_type

        """
        return _Physics1DSwig.Physics1D_Interactions_RotationalVelocityMotor_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics1D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::difference_type

        __setslice__(Physics1D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::difference_type j, Physics1D_Interactions_RotationalVelocityMotor_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor >,std::allocator< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > > > const &

        """
        return _Physics1DSwig.Physics1D_Interactions_RotationalVelocityMotor_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics1D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::difference_type

        """
        return _Physics1DSwig.Physics1D_Interactions_RotationalVelocityMotor_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics1D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::difference_type

        __delitem__(Physics1D_Interactions_RotationalVelocityMotor_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics1DSwig.Physics1D_Interactions_RotationalVelocityMotor_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics1D_Interactions_RotationalVelocityMotor_Vector self, PySliceObject * slice) -> Physics1D_Interactions_RotationalVelocityMotor_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics1D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::difference_type

        """
        return _Physics1DSwig.Physics1D_Interactions_RotationalVelocityMotor_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics1D_Interactions_RotationalVelocityMotor_Vector self, PySliceObject * slice, Physics1D_Interactions_RotationalVelocityMotor_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor >,std::allocator< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > > > const &

        __setitem__(Physics1D_Interactions_RotationalVelocityMotor_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics1D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Interactions_RotationalVelocityMotor_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics1D_Interactions_RotationalVelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::value_type"""
        return _Physics1DSwig.Physics1D_Interactions_RotationalVelocityMotor_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics1D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Interactions_RotationalVelocityMotor_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics1D_Interactions_RotationalVelocityMotor_Vector self) -> bool"""
        return _Physics1DSwig.Physics1D_Interactions_RotationalVelocityMotor_Vector_empty(self)

    def size(self):
        r"""size(Physics1D_Interactions_RotationalVelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::size_type"""
        return _Physics1DSwig.Physics1D_Interactions_RotationalVelocityMotor_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics1D_Interactions_RotationalVelocityMotor_Vector self, Physics1D_Interactions_RotationalVelocityMotor_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > > &

        """
        return _Physics1DSwig.Physics1D_Interactions_RotationalVelocityMotor_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics1D_Interactions_RotationalVelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::iterator"""
        return _Physics1DSwig.Physics1D_Interactions_RotationalVelocityMotor_Vector_begin(self)

    def end(self):
        r"""end(Physics1D_Interactions_RotationalVelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::iterator"""
        return _Physics1DSwig.Physics1D_Interactions_RotationalVelocityMotor_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics1D_Interactions_RotationalVelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::reverse_iterator"""
        return _Physics1DSwig.Physics1D_Interactions_RotationalVelocityMotor_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics1D_Interactions_RotationalVelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::reverse_iterator"""
        return _Physics1DSwig.Physics1D_Interactions_RotationalVelocityMotor_Vector_rend(self)

    def clear(self):
        r"""clear(Physics1D_Interactions_RotationalVelocityMotor_Vector self)"""
        return _Physics1DSwig.Physics1D_Interactions_RotationalVelocityMotor_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics1D_Interactions_RotationalVelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::allocator_type"""
        return _Physics1DSwig.Physics1D_Interactions_RotationalVelocityMotor_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics1D_Interactions_RotationalVelocityMotor_Vector self)"""
        return _Physics1DSwig.Physics1D_Interactions_RotationalVelocityMotor_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics1D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::iterator

        erase(Physics1D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::iterator first, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::iterator

        """
        return _Physics1DSwig.Physics1D_Interactions_RotationalVelocityMotor_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics1D_Interactions_RotationalVelocityMotor_Vector self) -> Physics1D_Interactions_RotationalVelocityMotor_Vector
        __init__(Physics1D_Interactions_RotationalVelocityMotor_Vector self, Physics1D_Interactions_RotationalVelocityMotor_Vector other) -> Physics1D_Interactions_RotationalVelocityMotor_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > > const &

        __init__(Physics1D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::size_type size) -> Physics1D_Interactions_RotationalVelocityMotor_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::size_type

        __init__(Physics1D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::size_type size, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::value_type const & value) -> Physics1D_Interactions_RotationalVelocityMotor_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::value_type const &

        """
        _Physics1DSwig.Physics1D_Interactions_RotationalVelocityMotor_Vector_swiginit(self, _Physics1DSwig.new_Physics1D_Interactions_RotationalVelocityMotor_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics1D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Interactions_RotationalVelocityMotor_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics1D_Interactions_RotationalVelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::value_type const &"""
        return _Physics1DSwig.Physics1D_Interactions_RotationalVelocityMotor_Vector_front(self)

    def back(self):
        r"""back(Physics1D_Interactions_RotationalVelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::value_type const &"""
        return _Physics1DSwig.Physics1D_Interactions_RotationalVelocityMotor_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics1D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::size_type n, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Interactions_RotationalVelocityMotor_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics1D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::size_type

        resize(Physics1D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Interactions_RotationalVelocityMotor_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics1D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::value_type const &

        insert(Physics1D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::size_type n, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Interactions_RotationalVelocityMotor_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics1D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::size_type

        """
        return _Physics1DSwig.Physics1D_Interactions_RotationalVelocityMotor_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics1D_Interactions_RotationalVelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::RotationalVelocityMotor > >::size_type"""
        return _Physics1DSwig.Physics1D_Interactions_RotationalVelocityMotor_Vector_capacity(self)
    __swig_destroy__ = _Physics1DSwig.delete_Physics1D_Interactions_RotationalVelocityMotor_Vector

# Register Physics1D_Interactions_RotationalVelocityMotor_Vector in _Physics1DSwig:
_Physics1DSwig.Physics1D_Interactions_RotationalVelocityMotor_Vector_swigregister(Physics1D_Interactions_RotationalVelocityMotor_Vector)

class Physics1D_Interactions_VelocityMotor_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics1D_Interactions_VelocityMotor_Vector self) -> SwigPyIterator"""
        return _Physics1DSwig.Physics1D_Interactions_VelocityMotor_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics1D_Interactions_VelocityMotor_Vector self) -> bool"""
        return _Physics1DSwig.Physics1D_Interactions_VelocityMotor_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics1D_Interactions_VelocityMotor_Vector self) -> bool"""
        return _Physics1DSwig.Physics1D_Interactions_VelocityMotor_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics1D_Interactions_VelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::size_type"""
        return _Physics1DSwig.Physics1D_Interactions_VelocityMotor_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics1D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::difference_type j) -> Physics1D_Interactions_VelocityMotor_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::difference_type

        """
        return _Physics1DSwig.Physics1D_Interactions_VelocityMotor_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics1D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::difference_type

        __setslice__(Physics1D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::difference_type j, Physics1D_Interactions_VelocityMotor_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::difference_type
        v: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor >,std::allocator< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > > > const &

        """
        return _Physics1DSwig.Physics1D_Interactions_VelocityMotor_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics1D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::difference_type
        j: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::difference_type

        """
        return _Physics1DSwig.Physics1D_Interactions_VelocityMotor_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics1D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::difference_type

        __delitem__(Physics1D_Interactions_VelocityMotor_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics1DSwig.Physics1D_Interactions_VelocityMotor_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics1D_Interactions_VelocityMotor_Vector self, PySliceObject * slice) -> Physics1D_Interactions_VelocityMotor_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics1D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::difference_type i) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::difference_type

        """
        return _Physics1DSwig.Physics1D_Interactions_VelocityMotor_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics1D_Interactions_VelocityMotor_Vector self, PySliceObject * slice, Physics1D_Interactions_VelocityMotor_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor >,std::allocator< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > > > const &

        __setitem__(Physics1D_Interactions_VelocityMotor_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics1D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::difference_type i, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::difference_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Interactions_VelocityMotor_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics1D_Interactions_VelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::value_type"""
        return _Physics1DSwig.Physics1D_Interactions_VelocityMotor_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics1D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Interactions_VelocityMotor_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics1D_Interactions_VelocityMotor_Vector self) -> bool"""
        return _Physics1DSwig.Physics1D_Interactions_VelocityMotor_Vector_empty(self)

    def size(self):
        r"""size(Physics1D_Interactions_VelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::size_type"""
        return _Physics1DSwig.Physics1D_Interactions_VelocityMotor_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics1D_Interactions_VelocityMotor_Vector self, Physics1D_Interactions_VelocityMotor_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > > &

        """
        return _Physics1DSwig.Physics1D_Interactions_VelocityMotor_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics1D_Interactions_VelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::iterator"""
        return _Physics1DSwig.Physics1D_Interactions_VelocityMotor_Vector_begin(self)

    def end(self):
        r"""end(Physics1D_Interactions_VelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::iterator"""
        return _Physics1DSwig.Physics1D_Interactions_VelocityMotor_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics1D_Interactions_VelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::reverse_iterator"""
        return _Physics1DSwig.Physics1D_Interactions_VelocityMotor_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics1D_Interactions_VelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::reverse_iterator"""
        return _Physics1DSwig.Physics1D_Interactions_VelocityMotor_Vector_rend(self)

    def clear(self):
        r"""clear(Physics1D_Interactions_VelocityMotor_Vector self)"""
        return _Physics1DSwig.Physics1D_Interactions_VelocityMotor_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics1D_Interactions_VelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::allocator_type"""
        return _Physics1DSwig.Physics1D_Interactions_VelocityMotor_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics1D_Interactions_VelocityMotor_Vector self)"""
        return _Physics1DSwig.Physics1D_Interactions_VelocityMotor_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics1D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::iterator pos) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::iterator

        erase(Physics1D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::iterator first, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::iterator last) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::iterator
        last: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::iterator

        """
        return _Physics1DSwig.Physics1D_Interactions_VelocityMotor_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics1D_Interactions_VelocityMotor_Vector self) -> Physics1D_Interactions_VelocityMotor_Vector
        __init__(Physics1D_Interactions_VelocityMotor_Vector self, Physics1D_Interactions_VelocityMotor_Vector other) -> Physics1D_Interactions_VelocityMotor_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > > const &

        __init__(Physics1D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::size_type size) -> Physics1D_Interactions_VelocityMotor_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::size_type

        __init__(Physics1D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::size_type size, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::value_type const & value) -> Physics1D_Interactions_VelocityMotor_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::size_type
        value: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::value_type const &

        """
        _Physics1DSwig.Physics1D_Interactions_VelocityMotor_Vector_swiginit(self, _Physics1DSwig.new_Physics1D_Interactions_VelocityMotor_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics1D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Interactions_VelocityMotor_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics1D_Interactions_VelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::value_type const &"""
        return _Physics1DSwig.Physics1D_Interactions_VelocityMotor_Vector_front(self)

    def back(self):
        r"""back(Physics1D_Interactions_VelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::value_type const &"""
        return _Physics1DSwig.Physics1D_Interactions_VelocityMotor_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics1D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::size_type n, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Interactions_VelocityMotor_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics1D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::size_type

        resize(Physics1D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::size_type new_size, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Interactions_VelocityMotor_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics1D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::iterator
        x: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::value_type const &

        insert(Physics1D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::iterator pos, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::size_type n, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::iterator
        n: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::size_type
        x: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::value_type const &

        """
        return _Physics1DSwig.Physics1D_Interactions_VelocityMotor_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics1D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::size_type

        """
        return _Physics1DSwig.Physics1D_Interactions_VelocityMotor_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics1D_Interactions_VelocityMotor_Vector self) -> std::vector< std::shared_ptr< openplx::Physics1D::Interactions::VelocityMotor > >::size_type"""
        return _Physics1DSwig.Physics1D_Interactions_VelocityMotor_Vector_capacity(self)
    __swig_destroy__ = _Physics1DSwig.delete_Physics1D_Interactions_VelocityMotor_Vector

# Register Physics1D_Interactions_VelocityMotor_Vector in _Physics1DSwig:
_Physics1DSwig.Physics1D_Interactions_VelocityMotor_Vector_swigregister(Physics1D_Interactions_VelocityMotor_Vector)

class Physics1D_Bodies_Body(openplx.Physics.Physics_Bodies_Body):
    r"""Proxy of C++ openplx::Physics1D::Bodies::Body class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics1D_Bodies_Body self) -> Physics1D_Bodies_Body"""
        _Physics1DSwig.Physics1D_Bodies_Body_swiginit(self, _Physics1DSwig.new_Physics1D_Bodies_Body())

    def inertia(self):
        r"""inertia(Physics1D_Bodies_Body self) -> std::shared_ptr< openplx::Physics1D::Bodies::Inertia >"""
        return _Physics1DSwig.Physics1D_Bodies_Body_inertia(self)

    def kinematics(self):
        r"""kinematics(Physics1D_Bodies_Body self) -> std::shared_ptr< openplx::Physics1D::Bodies::Kinematics >"""
        return _Physics1DSwig.Physics1D_Bodies_Body_kinematics(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics1D_Bodies_Body self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics1DSwig.Physics1D_Bodies_Body_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics1D_Bodies_Body self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics1DSwig.Physics1D_Bodies_Body_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics1D_Bodies_Body self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics1DSwig.Physics1D_Bodies_Body_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics1D_Bodies_Body self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics1DSwig.Physics1D_Bodies_Body_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics1D_Bodies_Body self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics1DSwig.Physics1D_Bodies_Body_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics1D_Bodies_Body self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics1DSwig.Physics1D_Bodies_Body_triggerOnInit(self, context)
    __swig_destroy__ = _Physics1DSwig.delete_Physics1D_Bodies_Body

# Register Physics1D_Bodies_Body in _Physics1DSwig:
_Physics1DSwig.Physics1D_Bodies_Body_swigregister(Physics1D_Bodies_Body)

class Physics1D_Bodies_Inertia(openplx.Physics.Physics_Bodies_Inertia):
    r"""Proxy of C++ openplx::Physics1D::Bodies::Inertia class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics1D_Bodies_Inertia self) -> Physics1D_Bodies_Inertia"""
        _Physics1DSwig.Physics1D_Bodies_Inertia_swiginit(self, _Physics1DSwig.new_Physics1D_Bodies_Inertia())

    def inertia(self):
        r"""inertia(Physics1D_Bodies_Inertia self) -> double"""
        return _Physics1DSwig.Physics1D_Bodies_Inertia_inertia(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics1D_Bodies_Inertia self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics1DSwig.Physics1D_Bodies_Inertia_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics1D_Bodies_Inertia self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics1DSwig.Physics1D_Bodies_Inertia_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics1D_Bodies_Inertia self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics1DSwig.Physics1D_Bodies_Inertia_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics1D_Bodies_Inertia self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics1DSwig.Physics1D_Bodies_Inertia_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics1D_Bodies_Inertia self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics1DSwig.Physics1D_Bodies_Inertia_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics1D_Bodies_Inertia self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics1DSwig.Physics1D_Bodies_Inertia_triggerOnInit(self, context)
    __swig_destroy__ = _Physics1DSwig.delete_Physics1D_Bodies_Inertia

# Register Physics1D_Bodies_Inertia in _Physics1DSwig:
_Physics1DSwig.Physics1D_Bodies_Inertia_swigregister(Physics1D_Bodies_Inertia)

class Physics1D_Bodies_Kinematics(openplx.Physics.Physics_Bodies_Kinematics):
    r"""Proxy of C++ openplx::Physics1D::Bodies::Kinematics class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics1D_Bodies_Kinematics self) -> Physics1D_Bodies_Kinematics"""
        _Physics1DSwig.Physics1D_Bodies_Kinematics_swiginit(self, _Physics1DSwig.new_Physics1D_Bodies_Kinematics())

    def velocity(self):
        r"""velocity(Physics1D_Bodies_Kinematics self) -> double"""
        return _Physics1DSwig.Physics1D_Bodies_Kinematics_velocity(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics1D_Bodies_Kinematics self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics1DSwig.Physics1D_Bodies_Kinematics_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics1D_Bodies_Kinematics self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics1DSwig.Physics1D_Bodies_Kinematics_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics1D_Bodies_Kinematics self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics1DSwig.Physics1D_Bodies_Kinematics_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics1D_Bodies_Kinematics self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics1DSwig.Physics1D_Bodies_Kinematics_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics1D_Bodies_Kinematics self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics1DSwig.Physics1D_Bodies_Kinematics_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics1D_Bodies_Kinematics self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics1DSwig.Physics1D_Bodies_Kinematics_triggerOnInit(self, context)
    __swig_destroy__ = _Physics1DSwig.delete_Physics1D_Bodies_Kinematics

# Register Physics1D_Bodies_Kinematics in _Physics1DSwig:
_Physics1DSwig.Physics1D_Bodies_Kinematics_swigregister(Physics1D_Bodies_Kinematics)

class Physics1D_Bodies_LinearBody(Physics1D_Bodies_Body):
    r"""Proxy of C++ openplx::Physics1D::Bodies::LinearBody class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics1D_Bodies_LinearBody self) -> Physics1D_Bodies_LinearBody"""
        _Physics1DSwig.Physics1D_Bodies_LinearBody_swiginit(self, _Physics1DSwig.new_Physics1D_Bodies_LinearBody())

    def kinematics(self):
        r"""kinematics(Physics1D_Bodies_LinearBody self) -> std::shared_ptr< openplx::Physics1D::Bodies::LinearKinematics >"""
        return _Physics1DSwig.Physics1D_Bodies_LinearBody_kinematics(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics1D_Bodies_LinearBody self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics1DSwig.Physics1D_Bodies_LinearBody_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics1D_Bodies_LinearBody self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics1DSwig.Physics1D_Bodies_LinearBody_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics1D_Bodies_LinearBody self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics1DSwig.Physics1D_Bodies_LinearBody_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics1D_Bodies_LinearBody self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics1DSwig.Physics1D_Bodies_LinearBody_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics1D_Bodies_LinearBody self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics1DSwig.Physics1D_Bodies_LinearBody_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics1D_Bodies_LinearBody self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics1DSwig.Physics1D_Bodies_LinearBody_triggerOnInit(self, context)
    __swig_destroy__ = _Physics1DSwig.delete_Physics1D_Bodies_LinearBody

# Register Physics1D_Bodies_LinearBody in _Physics1DSwig:
_Physics1DSwig.Physics1D_Bodies_LinearBody_swigregister(Physics1D_Bodies_LinearBody)

class Physics1D_Bodies_LinearKinematics(Physics1D_Bodies_Kinematics):
    r"""Proxy of C++ openplx::Physics1D::Bodies::LinearKinematics class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics1D_Bodies_LinearKinematics self) -> Physics1D_Bodies_LinearKinematics"""
        _Physics1DSwig.Physics1D_Bodies_LinearKinematics_swiginit(self, _Physics1DSwig.new_Physics1D_Bodies_LinearKinematics())

    def position(self):
        r"""position(Physics1D_Bodies_LinearKinematics self) -> double"""
        return _Physics1DSwig.Physics1D_Bodies_LinearKinematics_position(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics1D_Bodies_LinearKinematics self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics1DSwig.Physics1D_Bodies_LinearKinematics_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics1D_Bodies_LinearKinematics self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics1DSwig.Physics1D_Bodies_LinearKinematics_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics1D_Bodies_LinearKinematics self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics1DSwig.Physics1D_Bodies_LinearKinematics_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics1D_Bodies_LinearKinematics self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics1DSwig.Physics1D_Bodies_LinearKinematics_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics1D_Bodies_LinearKinematics self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics1DSwig.Physics1D_Bodies_LinearKinematics_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics1D_Bodies_LinearKinematics self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics1DSwig.Physics1D_Bodies_LinearKinematics_triggerOnInit(self, context)
    __swig_destroy__ = _Physics1DSwig.delete_Physics1D_Bodies_LinearKinematics

# Register Physics1D_Bodies_LinearKinematics in _Physics1DSwig:
_Physics1DSwig.Physics1D_Bodies_LinearKinematics_swigregister(Physics1D_Bodies_LinearKinematics)

class Physics1D_Bodies_RotationalBody(Physics1D_Bodies_Body):
    r"""Proxy of C++ openplx::Physics1D::Bodies::RotationalBody class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics1D_Bodies_RotationalBody self) -> Physics1D_Bodies_RotationalBody"""
        _Physics1DSwig.Physics1D_Bodies_RotationalBody_swiginit(self, _Physics1DSwig.new_Physics1D_Bodies_RotationalBody())

    def kinematics(self):
        r"""kinematics(Physics1D_Bodies_RotationalBody self) -> std::shared_ptr< openplx::Physics1D::Bodies::RotationalKinematics >"""
        return _Physics1DSwig.Physics1D_Bodies_RotationalBody_kinematics(self)

    def angle_output(self):
        r"""angle_output(Physics1D_Bodies_RotationalBody self) -> std::shared_ptr< openplx::Physics::Signals::AngleOutput >"""
        return _Physics1DSwig.Physics1D_Bodies_RotationalBody_angle_output(self)

    def angular_velocity_output(self):
        r"""angular_velocity_output(Physics1D_Bodies_RotationalBody self) -> std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput >"""
        return _Physics1DSwig.Physics1D_Bodies_RotationalBody_angular_velocity_output(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics1D_Bodies_RotationalBody self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics1DSwig.Physics1D_Bodies_RotationalBody_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics1D_Bodies_RotationalBody self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics1DSwig.Physics1D_Bodies_RotationalBody_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics1D_Bodies_RotationalBody self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics1DSwig.Physics1D_Bodies_RotationalBody_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics1D_Bodies_RotationalBody self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics1DSwig.Physics1D_Bodies_RotationalBody_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics1D_Bodies_RotationalBody self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics1DSwig.Physics1D_Bodies_RotationalBody_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics1D_Bodies_RotationalBody self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics1DSwig.Physics1D_Bodies_RotationalBody_triggerOnInit(self, context)
    __swig_destroy__ = _Physics1DSwig.delete_Physics1D_Bodies_RotationalBody

# Register Physics1D_Bodies_RotationalBody in _Physics1DSwig:
_Physics1DSwig.Physics1D_Bodies_RotationalBody_swigregister(Physics1D_Bodies_RotationalBody)

class Physics1D_Bodies_RotationalKinematics(Physics1D_Bodies_Kinematics):
    r"""Proxy of C++ openplx::Physics1D::Bodies::RotationalKinematics class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics1D_Bodies_RotationalKinematics self) -> Physics1D_Bodies_RotationalKinematics"""
        _Physics1DSwig.Physics1D_Bodies_RotationalKinematics_swiginit(self, _Physics1DSwig.new_Physics1D_Bodies_RotationalKinematics())

    def angle(self):
        r"""angle(Physics1D_Bodies_RotationalKinematics self) -> double"""
        return _Physics1DSwig.Physics1D_Bodies_RotationalKinematics_angle(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics1D_Bodies_RotationalKinematics self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics1DSwig.Physics1D_Bodies_RotationalKinematics_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics1D_Bodies_RotationalKinematics self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics1DSwig.Physics1D_Bodies_RotationalKinematics_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics1D_Bodies_RotationalKinematics self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics1DSwig.Physics1D_Bodies_RotationalKinematics_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics1D_Bodies_RotationalKinematics self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics1DSwig.Physics1D_Bodies_RotationalKinematics_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics1D_Bodies_RotationalKinematics self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics1DSwig.Physics1D_Bodies_RotationalKinematics_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics1D_Bodies_RotationalKinematics self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics1DSwig.Physics1D_Bodies_RotationalKinematics_triggerOnInit(self, context)
    __swig_destroy__ = _Physics1DSwig.delete_Physics1D_Bodies_RotationalKinematics

# Register Physics1D_Bodies_RotationalKinematics in _Physics1DSwig:
_Physics1DSwig.Physics1D_Bodies_RotationalKinematics_swigregister(Physics1D_Bodies_RotationalKinematics)

class Physics1D_Charges_MateConnector(openplx.Physics.Physics_Charges_Charge):
    r"""Proxy of C++ openplx::Physics1D::Charges::MateConnector class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics1D_Charges_MateConnector self) -> Physics1D_Charges_MateConnector"""
        _Physics1DSwig.Physics1D_Charges_MateConnector_swiginit(self, _Physics1DSwig.new_Physics1D_Charges_MateConnector())

    def value(self):
        r"""value(Physics1D_Charges_MateConnector self) -> double"""
        return _Physics1DSwig.Physics1D_Charges_MateConnector_value(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics1D_Charges_MateConnector self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics1DSwig.Physics1D_Charges_MateConnector_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics1D_Charges_MateConnector self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics1DSwig.Physics1D_Charges_MateConnector_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics1D_Charges_MateConnector self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics1DSwig.Physics1D_Charges_MateConnector_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics1D_Charges_MateConnector self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics1DSwig.Physics1D_Charges_MateConnector_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics1D_Charges_MateConnector self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics1DSwig.Physics1D_Charges_MateConnector_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics1D_Charges_MateConnector self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics1DSwig.Physics1D_Charges_MateConnector_triggerOnInit(self, context)
    __swig_destroy__ = _Physics1DSwig.delete_Physics1D_Charges_MateConnector

# Register Physics1D_Charges_MateConnector in _Physics1DSwig:
_Physics1DSwig.Physics1D_Charges_MateConnector_swigregister(Physics1D_Charges_MateConnector)

class Physics1D_Charges_LinearConnector(Physics1D_Charges_MateConnector):
    r"""Proxy of C++ openplx::Physics1D::Charges::LinearConnector class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics1D_Charges_LinearConnector self) -> Physics1D_Charges_LinearConnector"""
        _Physics1DSwig.Physics1D_Charges_LinearConnector_swiginit(self, _Physics1DSwig.new_Physics1D_Charges_LinearConnector())

    def position(self):
        r"""position(Physics1D_Charges_LinearConnector self) -> double"""
        return _Physics1DSwig.Physics1D_Charges_LinearConnector_position(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics1D_Charges_LinearConnector self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics1DSwig.Physics1D_Charges_LinearConnector_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics1D_Charges_LinearConnector self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics1DSwig.Physics1D_Charges_LinearConnector_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics1D_Charges_LinearConnector self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics1DSwig.Physics1D_Charges_LinearConnector_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics1D_Charges_LinearConnector self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics1DSwig.Physics1D_Charges_LinearConnector_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics1D_Charges_LinearConnector self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics1DSwig.Physics1D_Charges_LinearConnector_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics1D_Charges_LinearConnector self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics1DSwig.Physics1D_Charges_LinearConnector_triggerOnInit(self, context)
    __swig_destroy__ = _Physics1DSwig.delete_Physics1D_Charges_LinearConnector

# Register Physics1D_Charges_LinearConnector in _Physics1DSwig:
_Physics1DSwig.Physics1D_Charges_LinearConnector_swigregister(Physics1D_Charges_LinearConnector)

class Physics1D_Charges_RotationalConnector(Physics1D_Charges_MateConnector):
    r"""Proxy of C++ openplx::Physics1D::Charges::RotationalConnector class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics1D_Charges_RotationalConnector self) -> Physics1D_Charges_RotationalConnector"""
        _Physics1DSwig.Physics1D_Charges_RotationalConnector_swiginit(self, _Physics1DSwig.new_Physics1D_Charges_RotationalConnector())

    def angle(self):
        r"""angle(Physics1D_Charges_RotationalConnector self) -> double"""
        return _Physics1DSwig.Physics1D_Charges_RotationalConnector_angle(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics1D_Charges_RotationalConnector self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics1DSwig.Physics1D_Charges_RotationalConnector_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics1D_Charges_RotationalConnector self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics1DSwig.Physics1D_Charges_RotationalConnector_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics1D_Charges_RotationalConnector self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics1DSwig.Physics1D_Charges_RotationalConnector_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics1D_Charges_RotationalConnector self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics1DSwig.Physics1D_Charges_RotationalConnector_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics1D_Charges_RotationalConnector self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics1DSwig.Physics1D_Charges_RotationalConnector_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics1D_Charges_RotationalConnector self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics1DSwig.Physics1D_Charges_RotationalConnector_triggerOnInit(self, context)
    __swig_destroy__ = _Physics1DSwig.delete_Physics1D_Charges_RotationalConnector

# Register Physics1D_Charges_RotationalConnector in _Physics1DSwig:
_Physics1DSwig.Physics1D_Charges_RotationalConnector_swigregister(Physics1D_Charges_RotationalConnector)

class Physics1D_Interactions_Mate(openplx.Physics.Physics_Interactions_Interaction):
    r"""Proxy of C++ openplx::Physics1D::Interactions::Mate class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics1D_Interactions_Mate self) -> Physics1D_Interactions_Mate"""
        _Physics1DSwig.Physics1D_Interactions_Mate_swiginit(self, _Physics1DSwig.new_Physics1D_Interactions_Mate())

    def charges(self):
        r"""charges(Physics1D_Interactions_Mate self) -> Physics1D_Charges_MateConnector_Vector"""
        return _Physics1DSwig.Physics1D_Interactions_Mate_charges(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics1D_Interactions_Mate self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics1DSwig.Physics1D_Interactions_Mate_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics1D_Interactions_Mate self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics1DSwig.Physics1D_Interactions_Mate_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics1D_Interactions_Mate self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics1DSwig.Physics1D_Interactions_Mate_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics1D_Interactions_Mate self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics1DSwig.Physics1D_Interactions_Mate_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics1D_Interactions_Mate self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics1DSwig.Physics1D_Interactions_Mate_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics1D_Interactions_Mate self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics1DSwig.Physics1D_Interactions_Mate_triggerOnInit(self, context)
    __swig_destroy__ = _Physics1DSwig.delete_Physics1D_Interactions_Mate

# Register Physics1D_Interactions_Mate in _Physics1DSwig:
_Physics1DSwig.Physics1D_Interactions_Mate_swigregister(Physics1D_Interactions_Mate)

class Physics1D_Interactions_VelocityMotor(openplx.Physics.Physics_Interactions_Interaction1DOF):
    r"""Proxy of C++ openplx::Physics1D::Interactions::VelocityMotor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics1D_Interactions_VelocityMotor self) -> Physics1D_Interactions_VelocityMotor"""
        _Physics1DSwig.Physics1D_Interactions_VelocityMotor_swiginit(self, _Physics1DSwig.new_Physics1D_Interactions_VelocityMotor())

    def target_speed(self):
        r"""target_speed(Physics1D_Interactions_VelocityMotor self) -> double"""
        return _Physics1DSwig.Physics1D_Interactions_VelocityMotor_target_speed(self)

    def charges(self):
        r"""charges(Physics1D_Interactions_VelocityMotor self) -> Physics1D_Charges_MateConnector_Vector"""
        return _Physics1DSwig.Physics1D_Interactions_VelocityMotor_charges(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics1D_Interactions_VelocityMotor self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics1DSwig.Physics1D_Interactions_VelocityMotor_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics1D_Interactions_VelocityMotor self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics1DSwig.Physics1D_Interactions_VelocityMotor_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics1D_Interactions_VelocityMotor self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics1DSwig.Physics1D_Interactions_VelocityMotor_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics1D_Interactions_VelocityMotor self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics1DSwig.Physics1D_Interactions_VelocityMotor_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics1D_Interactions_VelocityMotor self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics1DSwig.Physics1D_Interactions_VelocityMotor_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics1D_Interactions_VelocityMotor self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics1DSwig.Physics1D_Interactions_VelocityMotor_triggerOnInit(self, context)
    __swig_destroy__ = _Physics1DSwig.delete_Physics1D_Interactions_VelocityMotor

# Register Physics1D_Interactions_VelocityMotor in _Physics1DSwig:
_Physics1DSwig.Physics1D_Interactions_VelocityMotor_swigregister(Physics1D_Interactions_VelocityMotor)

class Physics1D_Interactions_RotationalVelocityMotor(Physics1D_Interactions_VelocityMotor):
    r"""Proxy of C++ openplx::Physics1D::Interactions::RotationalVelocityMotor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Physics1D_Interactions_RotationalVelocityMotor self) -> Physics1D_Interactions_RotationalVelocityMotor"""
        _Physics1DSwig.Physics1D_Interactions_RotationalVelocityMotor_swiginit(self, _Physics1DSwig.new_Physics1D_Interactions_RotationalVelocityMotor())

    def target_angular_velocity_input(self):
        r"""target_angular_velocity_input(Physics1D_Interactions_RotationalVelocityMotor self) -> std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DInput >"""
        return _Physics1DSwig.Physics1D_Interactions_RotationalVelocityMotor_target_angular_velocity_input(self)

    def target_angular_velocity_output(self):
        r"""target_angular_velocity_output(Physics1D_Interactions_RotationalVelocityMotor self) -> std::shared_ptr< openplx::Physics::Signals::AngularVelocity1DOutput >"""
        return _Physics1DSwig.Physics1D_Interactions_RotationalVelocityMotor_target_angular_velocity_output(self)

    def torque_output(self):
        r"""torque_output(Physics1D_Interactions_RotationalVelocityMotor self) -> std::shared_ptr< openplx::Physics::Signals::Torque1DOutput >"""
        return _Physics1DSwig.Physics1D_Interactions_RotationalVelocityMotor_torque_output(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Physics1D_Interactions_RotationalVelocityMotor self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _Physics1DSwig.Physics1D_Interactions_RotationalVelocityMotor_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Physics1D_Interactions_RotationalVelocityMotor self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics1DSwig.Physics1D_Interactions_RotationalVelocityMotor_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Physics1D_Interactions_RotationalVelocityMotor self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _Physics1DSwig.Physics1D_Interactions_RotationalVelocityMotor_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Physics1D_Interactions_RotationalVelocityMotor self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _Physics1DSwig.Physics1D_Interactions_RotationalVelocityMotor_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Physics1D_Interactions_RotationalVelocityMotor self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _Physics1DSwig.Physics1D_Interactions_RotationalVelocityMotor_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(Physics1D_Interactions_RotationalVelocityMotor self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _Physics1DSwig.Physics1D_Interactions_RotationalVelocityMotor_triggerOnInit(self, context)
    __swig_destroy__ = _Physics1DSwig.delete_Physics1D_Interactions_RotationalVelocityMotor

# Register Physics1D_Interactions_RotationalVelocityMotor in _Physics1DSwig:
_Physics1DSwig.Physics1D_Interactions_RotationalVelocityMotor_swigregister(Physics1D_Interactions_RotationalVelocityMotor)



