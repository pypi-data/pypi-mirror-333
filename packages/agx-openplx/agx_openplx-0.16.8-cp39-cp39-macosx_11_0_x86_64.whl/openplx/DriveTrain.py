# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _DriveTrainSwig
else:
    import _DriveTrainSwig

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SHARED_PTR_DISOWN = _DriveTrainSwig.SHARED_PTR_DISOWN

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _DriveTrainSwig.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _DriveTrainSwig.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _DriveTrainSwig.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _DriveTrainSwig.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _DriveTrainSwig.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _DriveTrainSwig.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _DriveTrainSwig.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _DriveTrainSwig.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _DriveTrainSwig.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _DriveTrainSwig.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _DriveTrainSwig.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _DriveTrainSwig.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _DriveTrainSwig.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _DriveTrainSwig.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _DriveTrainSwig.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _DriveTrainSwig.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _DriveTrainSwig.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _DriveTrainSwig:
_DriveTrainSwig.SwigPyIterator_swigregister(SwigPyIterator)

import openplx.Core
import openplx.Math
import openplx.Physics
import openplx.Physics1D
import openplx.Physics3D
class DriveTrain_Actuator_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DriveTrain_Actuator_Vector self) -> SwigPyIterator"""
        return _DriveTrainSwig.DriveTrain_Actuator_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DriveTrain_Actuator_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Actuator_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DriveTrain_Actuator_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Actuator_Vector___bool__(self)

    def __len__(self):
        r"""__len__(DriveTrain_Actuator_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Actuator_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(DriveTrain_Actuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::difference_type j) -> DriveTrain_Actuator_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Actuator_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DriveTrain_Actuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::difference_type

        __setslice__(DriveTrain_Actuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::difference_type j, DriveTrain_Actuator_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::difference_type
        v: std::vector< std::shared_ptr< openplx::DriveTrain::Actuator >,std::allocator< std::shared_ptr< openplx::DriveTrain::Actuator > > > const &

        """
        return _DriveTrainSwig.DriveTrain_Actuator_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(DriveTrain_Actuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Actuator_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DriveTrain_Actuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::difference_type

        __delitem__(DriveTrain_Actuator_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _DriveTrainSwig.DriveTrain_Actuator_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DriveTrain_Actuator_Vector self, PySliceObject * slice) -> DriveTrain_Actuator_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DriveTrain_Actuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::difference_type i) -> std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Actuator_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DriveTrain_Actuator_Vector self, PySliceObject * slice, DriveTrain_Actuator_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::DriveTrain::Actuator >,std::allocator< std::shared_ptr< openplx::DriveTrain::Actuator > > > const &

        __setitem__(DriveTrain_Actuator_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DriveTrain_Actuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::difference_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Actuator_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(DriveTrain_Actuator_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::value_type"""
        return _DriveTrainSwig.DriveTrain_Actuator_Vector_pop(self)

    def append(self, x):
        r"""
        append(DriveTrain_Actuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Actuator_Vector_append(self, x)

    def empty(self):
        r"""empty(DriveTrain_Actuator_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Actuator_Vector_empty(self)

    def size(self):
        r"""size(DriveTrain_Actuator_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Actuator_Vector_size(self)

    def swap(self, v):
        r"""
        swap(DriveTrain_Actuator_Vector self, DriveTrain_Actuator_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > > &

        """
        return _DriveTrainSwig.DriveTrain_Actuator_Vector_swap(self, v)

    def begin(self):
        r"""begin(DriveTrain_Actuator_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::iterator"""
        return _DriveTrainSwig.DriveTrain_Actuator_Vector_begin(self)

    def end(self):
        r"""end(DriveTrain_Actuator_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::iterator"""
        return _DriveTrainSwig.DriveTrain_Actuator_Vector_end(self)

    def rbegin(self):
        r"""rbegin(DriveTrain_Actuator_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_Actuator_Vector_rbegin(self)

    def rend(self):
        r"""rend(DriveTrain_Actuator_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_Actuator_Vector_rend(self)

    def clear(self):
        r"""clear(DriveTrain_Actuator_Vector self)"""
        return _DriveTrainSwig.DriveTrain_Actuator_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DriveTrain_Actuator_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::allocator_type"""
        return _DriveTrainSwig.DriveTrain_Actuator_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DriveTrain_Actuator_Vector self)"""
        return _DriveTrainSwig.DriveTrain_Actuator_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DriveTrain_Actuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::iterator pos) -> std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::iterator

        erase(DriveTrain_Actuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::iterator first, std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::iterator last) -> std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::iterator
        last: std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::iterator

        """
        return _DriveTrainSwig.DriveTrain_Actuator_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DriveTrain_Actuator_Vector self) -> DriveTrain_Actuator_Vector
        __init__(DriveTrain_Actuator_Vector self, DriveTrain_Actuator_Vector other) -> DriveTrain_Actuator_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > > const &

        __init__(DriveTrain_Actuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::size_type size) -> DriveTrain_Actuator_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::size_type

        __init__(DriveTrain_Actuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::size_type size, std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::value_type const & value) -> DriveTrain_Actuator_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::size_type
        value: std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::value_type const &

        """
        _DriveTrainSwig.DriveTrain_Actuator_Vector_swiginit(self, _DriveTrainSwig.new_DriveTrain_Actuator_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(DriveTrain_Actuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Actuator_Vector_push_back(self, x)

    def front(self):
        r"""front(DriveTrain_Actuator_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_Actuator_Vector_front(self)

    def back(self):
        r"""back(DriveTrain_Actuator_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_Actuator_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(DriveTrain_Actuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Actuator_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DriveTrain_Actuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::size_type

        resize(DriveTrain_Actuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::size_type new_size, std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Actuator_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DriveTrain_Actuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::iterator
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::value_type const &

        insert(DriveTrain_Actuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::iterator
        n: std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Actuator_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(DriveTrain_Actuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::size_type

        """
        return _DriveTrainSwig.DriveTrain_Actuator_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(DriveTrain_Actuator_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Actuator > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Actuator_Vector_capacity(self)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_Actuator_Vector

# Register DriveTrain_Actuator_Vector in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_Actuator_Vector_swigregister(DriveTrain_Actuator_Vector)

class DriveTrain_AutomaticClutch_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DriveTrain_AutomaticClutch_Vector self) -> SwigPyIterator"""
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DriveTrain_AutomaticClutch_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DriveTrain_AutomaticClutch_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_Vector___bool__(self)

    def __len__(self):
        r"""__len__(DriveTrain_AutomaticClutch_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::size_type"""
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(DriveTrain_AutomaticClutch_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::difference_type j) -> DriveTrain_AutomaticClutch_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DriveTrain_AutomaticClutch_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::difference_type

        __setslice__(DriveTrain_AutomaticClutch_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::difference_type j, DriveTrain_AutomaticClutch_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::difference_type
        v: std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch >,std::allocator< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > > > const &

        """
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(DriveTrain_AutomaticClutch_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DriveTrain_AutomaticClutch_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::difference_type

        __delitem__(DriveTrain_AutomaticClutch_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DriveTrain_AutomaticClutch_Vector self, PySliceObject * slice) -> DriveTrain_AutomaticClutch_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DriveTrain_AutomaticClutch_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::difference_type i) -> std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DriveTrain_AutomaticClutch_Vector self, PySliceObject * slice, DriveTrain_AutomaticClutch_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch >,std::allocator< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > > > const &

        __setitem__(DriveTrain_AutomaticClutch_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DriveTrain_AutomaticClutch_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::difference_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(DriveTrain_AutomaticClutch_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::value_type"""
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_Vector_pop(self)

    def append(self, x):
        r"""
        append(DriveTrain_AutomaticClutch_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_Vector_append(self, x)

    def empty(self):
        r"""empty(DriveTrain_AutomaticClutch_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_Vector_empty(self)

    def size(self):
        r"""size(DriveTrain_AutomaticClutch_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::size_type"""
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_Vector_size(self)

    def swap(self, v):
        r"""
        swap(DriveTrain_AutomaticClutch_Vector self, DriveTrain_AutomaticClutch_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > > &

        """
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_Vector_swap(self, v)

    def begin(self):
        r"""begin(DriveTrain_AutomaticClutch_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::iterator"""
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_Vector_begin(self)

    def end(self):
        r"""end(DriveTrain_AutomaticClutch_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::iterator"""
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_Vector_end(self)

    def rbegin(self):
        r"""rbegin(DriveTrain_AutomaticClutch_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_Vector_rbegin(self)

    def rend(self):
        r"""rend(DriveTrain_AutomaticClutch_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_Vector_rend(self)

    def clear(self):
        r"""clear(DriveTrain_AutomaticClutch_Vector self)"""
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DriveTrain_AutomaticClutch_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::allocator_type"""
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DriveTrain_AutomaticClutch_Vector self)"""
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DriveTrain_AutomaticClutch_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::iterator pos) -> std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::iterator

        erase(DriveTrain_AutomaticClutch_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::iterator first, std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::iterator last) -> std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::iterator
        last: std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::iterator

        """
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DriveTrain_AutomaticClutch_Vector self) -> DriveTrain_AutomaticClutch_Vector
        __init__(DriveTrain_AutomaticClutch_Vector self, DriveTrain_AutomaticClutch_Vector other) -> DriveTrain_AutomaticClutch_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > > const &

        __init__(DriveTrain_AutomaticClutch_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::size_type size) -> DriveTrain_AutomaticClutch_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::size_type

        __init__(DriveTrain_AutomaticClutch_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::size_type size, std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::value_type const & value) -> DriveTrain_AutomaticClutch_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::size_type
        value: std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::value_type const &

        """
        _DriveTrainSwig.DriveTrain_AutomaticClutch_Vector_swiginit(self, _DriveTrainSwig.new_DriveTrain_AutomaticClutch_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(DriveTrain_AutomaticClutch_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_Vector_push_back(self, x)

    def front(self):
        r"""front(DriveTrain_AutomaticClutch_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_Vector_front(self)

    def back(self):
        r"""back(DriveTrain_AutomaticClutch_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(DriveTrain_AutomaticClutch_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DriveTrain_AutomaticClutch_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::size_type

        resize(DriveTrain_AutomaticClutch_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::size_type new_size, std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DriveTrain_AutomaticClutch_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::iterator
        x: std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::value_type const &

        insert(DriveTrain_AutomaticClutch_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::iterator
        n: std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(DriveTrain_AutomaticClutch_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::size_type

        """
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(DriveTrain_AutomaticClutch_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::AutomaticClutch > >::size_type"""
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_Vector_capacity(self)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_AutomaticClutch_Vector

# Register DriveTrain_AutomaticClutch_Vector in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_AutomaticClutch_Vector_swigregister(DriveTrain_AutomaticClutch_Vector)

class DriveTrain_CombustionEngine_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DriveTrain_CombustionEngine_Vector self) -> SwigPyIterator"""
        return _DriveTrainSwig.DriveTrain_CombustionEngine_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DriveTrain_CombustionEngine_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_CombustionEngine_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DriveTrain_CombustionEngine_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_CombustionEngine_Vector___bool__(self)

    def __len__(self):
        r"""__len__(DriveTrain_CombustionEngine_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::size_type"""
        return _DriveTrainSwig.DriveTrain_CombustionEngine_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(DriveTrain_CombustionEngine_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::difference_type j) -> DriveTrain_CombustionEngine_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_CombustionEngine_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DriveTrain_CombustionEngine_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::difference_type

        __setslice__(DriveTrain_CombustionEngine_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::difference_type j, DriveTrain_CombustionEngine_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::difference_type
        v: std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine >,std::allocator< std::shared_ptr< openplx::DriveTrain::CombustionEngine > > > const &

        """
        return _DriveTrainSwig.DriveTrain_CombustionEngine_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(DriveTrain_CombustionEngine_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_CombustionEngine_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DriveTrain_CombustionEngine_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::difference_type

        __delitem__(DriveTrain_CombustionEngine_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _DriveTrainSwig.DriveTrain_CombustionEngine_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DriveTrain_CombustionEngine_Vector self, PySliceObject * slice) -> DriveTrain_CombustionEngine_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DriveTrain_CombustionEngine_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::difference_type i) -> std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_CombustionEngine_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DriveTrain_CombustionEngine_Vector self, PySliceObject * slice, DriveTrain_CombustionEngine_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine >,std::allocator< std::shared_ptr< openplx::DriveTrain::CombustionEngine > > > const &

        __setitem__(DriveTrain_CombustionEngine_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DriveTrain_CombustionEngine_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::difference_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_CombustionEngine_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(DriveTrain_CombustionEngine_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::value_type"""
        return _DriveTrainSwig.DriveTrain_CombustionEngine_Vector_pop(self)

    def append(self, x):
        r"""
        append(DriveTrain_CombustionEngine_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_CombustionEngine_Vector_append(self, x)

    def empty(self):
        r"""empty(DriveTrain_CombustionEngine_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_CombustionEngine_Vector_empty(self)

    def size(self):
        r"""size(DriveTrain_CombustionEngine_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::size_type"""
        return _DriveTrainSwig.DriveTrain_CombustionEngine_Vector_size(self)

    def swap(self, v):
        r"""
        swap(DriveTrain_CombustionEngine_Vector self, DriveTrain_CombustionEngine_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > > &

        """
        return _DriveTrainSwig.DriveTrain_CombustionEngine_Vector_swap(self, v)

    def begin(self):
        r"""begin(DriveTrain_CombustionEngine_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::iterator"""
        return _DriveTrainSwig.DriveTrain_CombustionEngine_Vector_begin(self)

    def end(self):
        r"""end(DriveTrain_CombustionEngine_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::iterator"""
        return _DriveTrainSwig.DriveTrain_CombustionEngine_Vector_end(self)

    def rbegin(self):
        r"""rbegin(DriveTrain_CombustionEngine_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_CombustionEngine_Vector_rbegin(self)

    def rend(self):
        r"""rend(DriveTrain_CombustionEngine_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_CombustionEngine_Vector_rend(self)

    def clear(self):
        r"""clear(DriveTrain_CombustionEngine_Vector self)"""
        return _DriveTrainSwig.DriveTrain_CombustionEngine_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DriveTrain_CombustionEngine_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::allocator_type"""
        return _DriveTrainSwig.DriveTrain_CombustionEngine_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DriveTrain_CombustionEngine_Vector self)"""
        return _DriveTrainSwig.DriveTrain_CombustionEngine_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DriveTrain_CombustionEngine_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::iterator pos) -> std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::iterator

        erase(DriveTrain_CombustionEngine_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::iterator first, std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::iterator last) -> std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::iterator
        last: std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::iterator

        """
        return _DriveTrainSwig.DriveTrain_CombustionEngine_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DriveTrain_CombustionEngine_Vector self) -> DriveTrain_CombustionEngine_Vector
        __init__(DriveTrain_CombustionEngine_Vector self, DriveTrain_CombustionEngine_Vector other) -> DriveTrain_CombustionEngine_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > > const &

        __init__(DriveTrain_CombustionEngine_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::size_type size) -> DriveTrain_CombustionEngine_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::size_type

        __init__(DriveTrain_CombustionEngine_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::size_type size, std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::value_type const & value) -> DriveTrain_CombustionEngine_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::size_type
        value: std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::value_type const &

        """
        _DriveTrainSwig.DriveTrain_CombustionEngine_Vector_swiginit(self, _DriveTrainSwig.new_DriveTrain_CombustionEngine_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(DriveTrain_CombustionEngine_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_CombustionEngine_Vector_push_back(self, x)

    def front(self):
        r"""front(DriveTrain_CombustionEngine_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_CombustionEngine_Vector_front(self)

    def back(self):
        r"""back(DriveTrain_CombustionEngine_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_CombustionEngine_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(DriveTrain_CombustionEngine_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_CombustionEngine_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DriveTrain_CombustionEngine_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::size_type

        resize(DriveTrain_CombustionEngine_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::size_type new_size, std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_CombustionEngine_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DriveTrain_CombustionEngine_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::iterator
        x: std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::value_type const &

        insert(DriveTrain_CombustionEngine_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::iterator
        n: std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_CombustionEngine_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(DriveTrain_CombustionEngine_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::size_type

        """
        return _DriveTrainSwig.DriveTrain_CombustionEngine_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(DriveTrain_CombustionEngine_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::CombustionEngine > >::size_type"""
        return _DriveTrainSwig.DriveTrain_CombustionEngine_Vector_capacity(self)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_CombustionEngine_Vector

# Register DriveTrain_CombustionEngine_Vector in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_CombustionEngine_Vector_swigregister(DriveTrain_CombustionEngine_Vector)

class DriveTrain_Differential_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::DriveTrain::Differential > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DriveTrain_Differential_Vector self) -> SwigPyIterator"""
        return _DriveTrainSwig.DriveTrain_Differential_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DriveTrain_Differential_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Differential_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DriveTrain_Differential_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Differential_Vector___bool__(self)

    def __len__(self):
        r"""__len__(DriveTrain_Differential_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Differential_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(DriveTrain_Differential_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::difference_type j) -> DriveTrain_Differential_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Differential_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DriveTrain_Differential_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::difference_type

        __setslice__(DriveTrain_Differential_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::difference_type j, DriveTrain_Differential_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::difference_type
        v: std::vector< std::shared_ptr< openplx::DriveTrain::Differential >,std::allocator< std::shared_ptr< openplx::DriveTrain::Differential > > > const &

        """
        return _DriveTrainSwig.DriveTrain_Differential_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(DriveTrain_Differential_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Differential_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DriveTrain_Differential_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::difference_type

        __delitem__(DriveTrain_Differential_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _DriveTrainSwig.DriveTrain_Differential_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DriveTrain_Differential_Vector self, PySliceObject * slice) -> DriveTrain_Differential_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DriveTrain_Differential_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::difference_type i) -> std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Differential_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DriveTrain_Differential_Vector self, PySliceObject * slice, DriveTrain_Differential_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::DriveTrain::Differential >,std::allocator< std::shared_ptr< openplx::DriveTrain::Differential > > > const &

        __setitem__(DriveTrain_Differential_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DriveTrain_Differential_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::difference_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Differential_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(DriveTrain_Differential_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::value_type"""
        return _DriveTrainSwig.DriveTrain_Differential_Vector_pop(self)

    def append(self, x):
        r"""
        append(DriveTrain_Differential_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Differential_Vector_append(self, x)

    def empty(self):
        r"""empty(DriveTrain_Differential_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Differential_Vector_empty(self)

    def size(self):
        r"""size(DriveTrain_Differential_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Differential_Vector_size(self)

    def swap(self, v):
        r"""
        swap(DriveTrain_Differential_Vector self, DriveTrain_Differential_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::DriveTrain::Differential > > &

        """
        return _DriveTrainSwig.DriveTrain_Differential_Vector_swap(self, v)

    def begin(self):
        r"""begin(DriveTrain_Differential_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::iterator"""
        return _DriveTrainSwig.DriveTrain_Differential_Vector_begin(self)

    def end(self):
        r"""end(DriveTrain_Differential_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::iterator"""
        return _DriveTrainSwig.DriveTrain_Differential_Vector_end(self)

    def rbegin(self):
        r"""rbegin(DriveTrain_Differential_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_Differential_Vector_rbegin(self)

    def rend(self):
        r"""rend(DriveTrain_Differential_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_Differential_Vector_rend(self)

    def clear(self):
        r"""clear(DriveTrain_Differential_Vector self)"""
        return _DriveTrainSwig.DriveTrain_Differential_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DriveTrain_Differential_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::allocator_type"""
        return _DriveTrainSwig.DriveTrain_Differential_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DriveTrain_Differential_Vector self)"""
        return _DriveTrainSwig.DriveTrain_Differential_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DriveTrain_Differential_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::iterator pos) -> std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::iterator

        erase(DriveTrain_Differential_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::iterator first, std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::iterator last) -> std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::iterator
        last: std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::iterator

        """
        return _DriveTrainSwig.DriveTrain_Differential_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DriveTrain_Differential_Vector self) -> DriveTrain_Differential_Vector
        __init__(DriveTrain_Differential_Vector self, DriveTrain_Differential_Vector other) -> DriveTrain_Differential_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::DriveTrain::Differential > > const &

        __init__(DriveTrain_Differential_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::size_type size) -> DriveTrain_Differential_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::size_type

        __init__(DriveTrain_Differential_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::size_type size, std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::value_type const & value) -> DriveTrain_Differential_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::size_type
        value: std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::value_type const &

        """
        _DriveTrainSwig.DriveTrain_Differential_Vector_swiginit(self, _DriveTrainSwig.new_DriveTrain_Differential_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(DriveTrain_Differential_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Differential_Vector_push_back(self, x)

    def front(self):
        r"""front(DriveTrain_Differential_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_Differential_Vector_front(self)

    def back(self):
        r"""back(DriveTrain_Differential_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_Differential_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(DriveTrain_Differential_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Differential_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DriveTrain_Differential_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::size_type

        resize(DriveTrain_Differential_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::size_type new_size, std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Differential_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DriveTrain_Differential_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::iterator
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::value_type const &

        insert(DriveTrain_Differential_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::iterator
        n: std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Differential_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(DriveTrain_Differential_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::size_type

        """
        return _DriveTrainSwig.DriveTrain_Differential_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(DriveTrain_Differential_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Differential > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Differential_Vector_capacity(self)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_Differential_Vector

# Register DriveTrain_Differential_Vector in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_Differential_Vector_swigregister(DriveTrain_Differential_Vector)

class DriveTrain_EmpiricalTorqueConverter_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DriveTrain_EmpiricalTorqueConverter_Vector self) -> SwigPyIterator"""
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DriveTrain_EmpiricalTorqueConverter_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DriveTrain_EmpiricalTorqueConverter_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_Vector___bool__(self)

    def __len__(self):
        r"""__len__(DriveTrain_EmpiricalTorqueConverter_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::size_type"""
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(DriveTrain_EmpiricalTorqueConverter_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::difference_type j) -> DriveTrain_EmpiricalTorqueConverter_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DriveTrain_EmpiricalTorqueConverter_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::difference_type

        __setslice__(DriveTrain_EmpiricalTorqueConverter_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::difference_type j, DriveTrain_EmpiricalTorqueConverter_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::difference_type
        v: std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter >,std::allocator< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > > > const &

        """
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(DriveTrain_EmpiricalTorqueConverter_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DriveTrain_EmpiricalTorqueConverter_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::difference_type

        __delitem__(DriveTrain_EmpiricalTorqueConverter_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DriveTrain_EmpiricalTorqueConverter_Vector self, PySliceObject * slice) -> DriveTrain_EmpiricalTorqueConverter_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DriveTrain_EmpiricalTorqueConverter_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::difference_type i) -> std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DriveTrain_EmpiricalTorqueConverter_Vector self, PySliceObject * slice, DriveTrain_EmpiricalTorqueConverter_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter >,std::allocator< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > > > const &

        __setitem__(DriveTrain_EmpiricalTorqueConverter_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DriveTrain_EmpiricalTorqueConverter_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::difference_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(DriveTrain_EmpiricalTorqueConverter_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::value_type"""
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_Vector_pop(self)

    def append(self, x):
        r"""
        append(DriveTrain_EmpiricalTorqueConverter_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_Vector_append(self, x)

    def empty(self):
        r"""empty(DriveTrain_EmpiricalTorqueConverter_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_Vector_empty(self)

    def size(self):
        r"""size(DriveTrain_EmpiricalTorqueConverter_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::size_type"""
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_Vector_size(self)

    def swap(self, v):
        r"""
        swap(DriveTrain_EmpiricalTorqueConverter_Vector self, DriveTrain_EmpiricalTorqueConverter_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > > &

        """
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_Vector_swap(self, v)

    def begin(self):
        r"""begin(DriveTrain_EmpiricalTorqueConverter_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::iterator"""
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_Vector_begin(self)

    def end(self):
        r"""end(DriveTrain_EmpiricalTorqueConverter_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::iterator"""
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_Vector_end(self)

    def rbegin(self):
        r"""rbegin(DriveTrain_EmpiricalTorqueConverter_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_Vector_rbegin(self)

    def rend(self):
        r"""rend(DriveTrain_EmpiricalTorqueConverter_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_Vector_rend(self)

    def clear(self):
        r"""clear(DriveTrain_EmpiricalTorqueConverter_Vector self)"""
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DriveTrain_EmpiricalTorqueConverter_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::allocator_type"""
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DriveTrain_EmpiricalTorqueConverter_Vector self)"""
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DriveTrain_EmpiricalTorqueConverter_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::iterator pos) -> std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::iterator

        erase(DriveTrain_EmpiricalTorqueConverter_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::iterator first, std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::iterator last) -> std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::iterator
        last: std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::iterator

        """
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DriveTrain_EmpiricalTorqueConverter_Vector self) -> DriveTrain_EmpiricalTorqueConverter_Vector
        __init__(DriveTrain_EmpiricalTorqueConverter_Vector self, DriveTrain_EmpiricalTorqueConverter_Vector other) -> DriveTrain_EmpiricalTorqueConverter_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > > const &

        __init__(DriveTrain_EmpiricalTorqueConverter_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::size_type size) -> DriveTrain_EmpiricalTorqueConverter_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::size_type

        __init__(DriveTrain_EmpiricalTorqueConverter_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::size_type size, std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::value_type const & value) -> DriveTrain_EmpiricalTorqueConverter_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::size_type
        value: std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::value_type const &

        """
        _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_Vector_swiginit(self, _DriveTrainSwig.new_DriveTrain_EmpiricalTorqueConverter_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(DriveTrain_EmpiricalTorqueConverter_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_Vector_push_back(self, x)

    def front(self):
        r"""front(DriveTrain_EmpiricalTorqueConverter_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_Vector_front(self)

    def back(self):
        r"""back(DriveTrain_EmpiricalTorqueConverter_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(DriveTrain_EmpiricalTorqueConverter_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DriveTrain_EmpiricalTorqueConverter_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::size_type

        resize(DriveTrain_EmpiricalTorqueConverter_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::size_type new_size, std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DriveTrain_EmpiricalTorqueConverter_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::iterator
        x: std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::value_type const &

        insert(DriveTrain_EmpiricalTorqueConverter_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::iterator
        n: std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(DriveTrain_EmpiricalTorqueConverter_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::size_type

        """
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(DriveTrain_EmpiricalTorqueConverter_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter > >::size_type"""
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_Vector_capacity(self)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_EmpiricalTorqueConverter_Vector

# Register DriveTrain_EmpiricalTorqueConverter_Vector in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_Vector_swigregister(DriveTrain_EmpiricalTorqueConverter_Vector)

class DriveTrain_FlexibleGear_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DriveTrain_FlexibleGear_Vector self) -> SwigPyIterator"""
        return _DriveTrainSwig.DriveTrain_FlexibleGear_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DriveTrain_FlexibleGear_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_FlexibleGear_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DriveTrain_FlexibleGear_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_FlexibleGear_Vector___bool__(self)

    def __len__(self):
        r"""__len__(DriveTrain_FlexibleGear_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::size_type"""
        return _DriveTrainSwig.DriveTrain_FlexibleGear_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(DriveTrain_FlexibleGear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::difference_type j) -> DriveTrain_FlexibleGear_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_FlexibleGear_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DriveTrain_FlexibleGear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::difference_type

        __setslice__(DriveTrain_FlexibleGear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::difference_type j, DriveTrain_FlexibleGear_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::difference_type
        v: std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear >,std::allocator< std::shared_ptr< openplx::DriveTrain::FlexibleGear > > > const &

        """
        return _DriveTrainSwig.DriveTrain_FlexibleGear_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(DriveTrain_FlexibleGear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_FlexibleGear_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DriveTrain_FlexibleGear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::difference_type

        __delitem__(DriveTrain_FlexibleGear_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _DriveTrainSwig.DriveTrain_FlexibleGear_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DriveTrain_FlexibleGear_Vector self, PySliceObject * slice) -> DriveTrain_FlexibleGear_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DriveTrain_FlexibleGear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::difference_type i) -> std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_FlexibleGear_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DriveTrain_FlexibleGear_Vector self, PySliceObject * slice, DriveTrain_FlexibleGear_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear >,std::allocator< std::shared_ptr< openplx::DriveTrain::FlexibleGear > > > const &

        __setitem__(DriveTrain_FlexibleGear_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DriveTrain_FlexibleGear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::difference_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_FlexibleGear_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(DriveTrain_FlexibleGear_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::value_type"""
        return _DriveTrainSwig.DriveTrain_FlexibleGear_Vector_pop(self)

    def append(self, x):
        r"""
        append(DriveTrain_FlexibleGear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_FlexibleGear_Vector_append(self, x)

    def empty(self):
        r"""empty(DriveTrain_FlexibleGear_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_FlexibleGear_Vector_empty(self)

    def size(self):
        r"""size(DriveTrain_FlexibleGear_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::size_type"""
        return _DriveTrainSwig.DriveTrain_FlexibleGear_Vector_size(self)

    def swap(self, v):
        r"""
        swap(DriveTrain_FlexibleGear_Vector self, DriveTrain_FlexibleGear_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > > &

        """
        return _DriveTrainSwig.DriveTrain_FlexibleGear_Vector_swap(self, v)

    def begin(self):
        r"""begin(DriveTrain_FlexibleGear_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::iterator"""
        return _DriveTrainSwig.DriveTrain_FlexibleGear_Vector_begin(self)

    def end(self):
        r"""end(DriveTrain_FlexibleGear_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::iterator"""
        return _DriveTrainSwig.DriveTrain_FlexibleGear_Vector_end(self)

    def rbegin(self):
        r"""rbegin(DriveTrain_FlexibleGear_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_FlexibleGear_Vector_rbegin(self)

    def rend(self):
        r"""rend(DriveTrain_FlexibleGear_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_FlexibleGear_Vector_rend(self)

    def clear(self):
        r"""clear(DriveTrain_FlexibleGear_Vector self)"""
        return _DriveTrainSwig.DriveTrain_FlexibleGear_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DriveTrain_FlexibleGear_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::allocator_type"""
        return _DriveTrainSwig.DriveTrain_FlexibleGear_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DriveTrain_FlexibleGear_Vector self)"""
        return _DriveTrainSwig.DriveTrain_FlexibleGear_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DriveTrain_FlexibleGear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::iterator pos) -> std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::iterator

        erase(DriveTrain_FlexibleGear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::iterator first, std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::iterator last) -> std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::iterator
        last: std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::iterator

        """
        return _DriveTrainSwig.DriveTrain_FlexibleGear_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DriveTrain_FlexibleGear_Vector self) -> DriveTrain_FlexibleGear_Vector
        __init__(DriveTrain_FlexibleGear_Vector self, DriveTrain_FlexibleGear_Vector other) -> DriveTrain_FlexibleGear_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > > const &

        __init__(DriveTrain_FlexibleGear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::size_type size) -> DriveTrain_FlexibleGear_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::size_type

        __init__(DriveTrain_FlexibleGear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::size_type size, std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::value_type const & value) -> DriveTrain_FlexibleGear_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::size_type
        value: std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::value_type const &

        """
        _DriveTrainSwig.DriveTrain_FlexibleGear_Vector_swiginit(self, _DriveTrainSwig.new_DriveTrain_FlexibleGear_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(DriveTrain_FlexibleGear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_FlexibleGear_Vector_push_back(self, x)

    def front(self):
        r"""front(DriveTrain_FlexibleGear_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_FlexibleGear_Vector_front(self)

    def back(self):
        r"""back(DriveTrain_FlexibleGear_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_FlexibleGear_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(DriveTrain_FlexibleGear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_FlexibleGear_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DriveTrain_FlexibleGear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::size_type

        resize(DriveTrain_FlexibleGear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::size_type new_size, std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_FlexibleGear_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DriveTrain_FlexibleGear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::iterator
        x: std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::value_type const &

        insert(DriveTrain_FlexibleGear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::iterator
        n: std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_FlexibleGear_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(DriveTrain_FlexibleGear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::size_type

        """
        return _DriveTrainSwig.DriveTrain_FlexibleGear_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(DriveTrain_FlexibleGear_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::FlexibleGear > >::size_type"""
        return _DriveTrainSwig.DriveTrain_FlexibleGear_Vector_capacity(self)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_FlexibleGear_Vector

# Register DriveTrain_FlexibleGear_Vector in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_FlexibleGear_Vector_swigregister(DriveTrain_FlexibleGear_Vector)

class DriveTrain_Gear_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::DriveTrain::Gear > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DriveTrain_Gear_Vector self) -> SwigPyIterator"""
        return _DriveTrainSwig.DriveTrain_Gear_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DriveTrain_Gear_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Gear_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DriveTrain_Gear_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Gear_Vector___bool__(self)

    def __len__(self):
        r"""__len__(DriveTrain_Gear_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Gear_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(DriveTrain_Gear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::difference_type j) -> DriveTrain_Gear_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Gear_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DriveTrain_Gear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::difference_type

        __setslice__(DriveTrain_Gear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::difference_type j, DriveTrain_Gear_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::difference_type
        v: std::vector< std::shared_ptr< openplx::DriveTrain::Gear >,std::allocator< std::shared_ptr< openplx::DriveTrain::Gear > > > const &

        """
        return _DriveTrainSwig.DriveTrain_Gear_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(DriveTrain_Gear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Gear_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DriveTrain_Gear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::difference_type

        __delitem__(DriveTrain_Gear_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _DriveTrainSwig.DriveTrain_Gear_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DriveTrain_Gear_Vector self, PySliceObject * slice) -> DriveTrain_Gear_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DriveTrain_Gear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::difference_type i) -> std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Gear_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DriveTrain_Gear_Vector self, PySliceObject * slice, DriveTrain_Gear_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::DriveTrain::Gear >,std::allocator< std::shared_ptr< openplx::DriveTrain::Gear > > > const &

        __setitem__(DriveTrain_Gear_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DriveTrain_Gear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::difference_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Gear_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(DriveTrain_Gear_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::value_type"""
        return _DriveTrainSwig.DriveTrain_Gear_Vector_pop(self)

    def append(self, x):
        r"""
        append(DriveTrain_Gear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Gear_Vector_append(self, x)

    def empty(self):
        r"""empty(DriveTrain_Gear_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Gear_Vector_empty(self)

    def size(self):
        r"""size(DriveTrain_Gear_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Gear_Vector_size(self)

    def swap(self, v):
        r"""
        swap(DriveTrain_Gear_Vector self, DriveTrain_Gear_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::DriveTrain::Gear > > &

        """
        return _DriveTrainSwig.DriveTrain_Gear_Vector_swap(self, v)

    def begin(self):
        r"""begin(DriveTrain_Gear_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::iterator"""
        return _DriveTrainSwig.DriveTrain_Gear_Vector_begin(self)

    def end(self):
        r"""end(DriveTrain_Gear_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::iterator"""
        return _DriveTrainSwig.DriveTrain_Gear_Vector_end(self)

    def rbegin(self):
        r"""rbegin(DriveTrain_Gear_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_Gear_Vector_rbegin(self)

    def rend(self):
        r"""rend(DriveTrain_Gear_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_Gear_Vector_rend(self)

    def clear(self):
        r"""clear(DriveTrain_Gear_Vector self)"""
        return _DriveTrainSwig.DriveTrain_Gear_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DriveTrain_Gear_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::allocator_type"""
        return _DriveTrainSwig.DriveTrain_Gear_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DriveTrain_Gear_Vector self)"""
        return _DriveTrainSwig.DriveTrain_Gear_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DriveTrain_Gear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::iterator pos) -> std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::iterator

        erase(DriveTrain_Gear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::iterator first, std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::iterator last) -> std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::iterator
        last: std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::iterator

        """
        return _DriveTrainSwig.DriveTrain_Gear_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DriveTrain_Gear_Vector self) -> DriveTrain_Gear_Vector
        __init__(DriveTrain_Gear_Vector self, DriveTrain_Gear_Vector other) -> DriveTrain_Gear_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::DriveTrain::Gear > > const &

        __init__(DriveTrain_Gear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::size_type size) -> DriveTrain_Gear_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::size_type

        __init__(DriveTrain_Gear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::size_type size, std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::value_type const & value) -> DriveTrain_Gear_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::size_type
        value: std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::value_type const &

        """
        _DriveTrainSwig.DriveTrain_Gear_Vector_swiginit(self, _DriveTrainSwig.new_DriveTrain_Gear_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(DriveTrain_Gear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Gear_Vector_push_back(self, x)

    def front(self):
        r"""front(DriveTrain_Gear_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_Gear_Vector_front(self)

    def back(self):
        r"""back(DriveTrain_Gear_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_Gear_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(DriveTrain_Gear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Gear_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DriveTrain_Gear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::size_type

        resize(DriveTrain_Gear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::size_type new_size, std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Gear_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DriveTrain_Gear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::iterator
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::value_type const &

        insert(DriveTrain_Gear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::iterator
        n: std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Gear_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(DriveTrain_Gear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::size_type

        """
        return _DriveTrainSwig.DriveTrain_Gear_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(DriveTrain_Gear_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Gear > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Gear_Vector_capacity(self)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_Gear_Vector

# Register DriveTrain_Gear_Vector in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_Gear_Vector_swigregister(DriveTrain_Gear_Vector)

class DriveTrain_GearBox_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DriveTrain_GearBox_Vector self) -> SwigPyIterator"""
        return _DriveTrainSwig.DriveTrain_GearBox_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DriveTrain_GearBox_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_GearBox_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DriveTrain_GearBox_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_GearBox_Vector___bool__(self)

    def __len__(self):
        r"""__len__(DriveTrain_GearBox_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::size_type"""
        return _DriveTrainSwig.DriveTrain_GearBox_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(DriveTrain_GearBox_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::difference_type j) -> DriveTrain_GearBox_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_GearBox_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DriveTrain_GearBox_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::difference_type

        __setslice__(DriveTrain_GearBox_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::difference_type j, DriveTrain_GearBox_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::difference_type
        v: std::vector< std::shared_ptr< openplx::DriveTrain::GearBox >,std::allocator< std::shared_ptr< openplx::DriveTrain::GearBox > > > const &

        """
        return _DriveTrainSwig.DriveTrain_GearBox_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(DriveTrain_GearBox_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_GearBox_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DriveTrain_GearBox_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::difference_type

        __delitem__(DriveTrain_GearBox_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _DriveTrainSwig.DriveTrain_GearBox_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DriveTrain_GearBox_Vector self, PySliceObject * slice) -> DriveTrain_GearBox_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DriveTrain_GearBox_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::difference_type i) -> std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_GearBox_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DriveTrain_GearBox_Vector self, PySliceObject * slice, DriveTrain_GearBox_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::DriveTrain::GearBox >,std::allocator< std::shared_ptr< openplx::DriveTrain::GearBox > > > const &

        __setitem__(DriveTrain_GearBox_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DriveTrain_GearBox_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::difference_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_GearBox_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(DriveTrain_GearBox_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::value_type"""
        return _DriveTrainSwig.DriveTrain_GearBox_Vector_pop(self)

    def append(self, x):
        r"""
        append(DriveTrain_GearBox_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_GearBox_Vector_append(self, x)

    def empty(self):
        r"""empty(DriveTrain_GearBox_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_GearBox_Vector_empty(self)

    def size(self):
        r"""size(DriveTrain_GearBox_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::size_type"""
        return _DriveTrainSwig.DriveTrain_GearBox_Vector_size(self)

    def swap(self, v):
        r"""
        swap(DriveTrain_GearBox_Vector self, DriveTrain_GearBox_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > > &

        """
        return _DriveTrainSwig.DriveTrain_GearBox_Vector_swap(self, v)

    def begin(self):
        r"""begin(DriveTrain_GearBox_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::iterator"""
        return _DriveTrainSwig.DriveTrain_GearBox_Vector_begin(self)

    def end(self):
        r"""end(DriveTrain_GearBox_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::iterator"""
        return _DriveTrainSwig.DriveTrain_GearBox_Vector_end(self)

    def rbegin(self):
        r"""rbegin(DriveTrain_GearBox_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_GearBox_Vector_rbegin(self)

    def rend(self):
        r"""rend(DriveTrain_GearBox_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_GearBox_Vector_rend(self)

    def clear(self):
        r"""clear(DriveTrain_GearBox_Vector self)"""
        return _DriveTrainSwig.DriveTrain_GearBox_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DriveTrain_GearBox_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::allocator_type"""
        return _DriveTrainSwig.DriveTrain_GearBox_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DriveTrain_GearBox_Vector self)"""
        return _DriveTrainSwig.DriveTrain_GearBox_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DriveTrain_GearBox_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::iterator pos) -> std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::iterator

        erase(DriveTrain_GearBox_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::iterator first, std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::iterator last) -> std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::iterator
        last: std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::iterator

        """
        return _DriveTrainSwig.DriveTrain_GearBox_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DriveTrain_GearBox_Vector self) -> DriveTrain_GearBox_Vector
        __init__(DriveTrain_GearBox_Vector self, DriveTrain_GearBox_Vector other) -> DriveTrain_GearBox_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > > const &

        __init__(DriveTrain_GearBox_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::size_type size) -> DriveTrain_GearBox_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::size_type

        __init__(DriveTrain_GearBox_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::size_type size, std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::value_type const & value) -> DriveTrain_GearBox_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::size_type
        value: std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::value_type const &

        """
        _DriveTrainSwig.DriveTrain_GearBox_Vector_swiginit(self, _DriveTrainSwig.new_DriveTrain_GearBox_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(DriveTrain_GearBox_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_GearBox_Vector_push_back(self, x)

    def front(self):
        r"""front(DriveTrain_GearBox_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_GearBox_Vector_front(self)

    def back(self):
        r"""back(DriveTrain_GearBox_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_GearBox_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(DriveTrain_GearBox_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_GearBox_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DriveTrain_GearBox_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::size_type

        resize(DriveTrain_GearBox_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::size_type new_size, std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_GearBox_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DriveTrain_GearBox_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::iterator
        x: std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::value_type const &

        insert(DriveTrain_GearBox_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::iterator
        n: std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_GearBox_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(DriveTrain_GearBox_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::size_type

        """
        return _DriveTrainSwig.DriveTrain_GearBox_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(DriveTrain_GearBox_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::GearBox > >::size_type"""
        return _DriveTrainSwig.DriveTrain_GearBox_Vector_capacity(self)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_GearBox_Vector

# Register DriveTrain_GearBox_Vector in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_GearBox_Vector_swigregister(DriveTrain_GearBox_Vector)

class DriveTrain_HingeActuator_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DriveTrain_HingeActuator_Vector self) -> SwigPyIterator"""
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DriveTrain_HingeActuator_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DriveTrain_HingeActuator_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector___bool__(self)

    def __len__(self):
        r"""__len__(DriveTrain_HingeActuator_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::size_type"""
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(DriveTrain_HingeActuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::difference_type j) -> DriveTrain_HingeActuator_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DriveTrain_HingeActuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::difference_type

        __setslice__(DriveTrain_HingeActuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::difference_type j, DriveTrain_HingeActuator_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::difference_type
        v: std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator >,std::allocator< std::shared_ptr< openplx::DriveTrain::HingeActuator > > > const &

        """
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(DriveTrain_HingeActuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DriveTrain_HingeActuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::difference_type

        __delitem__(DriveTrain_HingeActuator_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DriveTrain_HingeActuator_Vector self, PySliceObject * slice) -> DriveTrain_HingeActuator_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DriveTrain_HingeActuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::difference_type i) -> std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DriveTrain_HingeActuator_Vector self, PySliceObject * slice, DriveTrain_HingeActuator_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator >,std::allocator< std::shared_ptr< openplx::DriveTrain::HingeActuator > > > const &

        __setitem__(DriveTrain_HingeActuator_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DriveTrain_HingeActuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::difference_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(DriveTrain_HingeActuator_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::value_type"""
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector_pop(self)

    def append(self, x):
        r"""
        append(DriveTrain_HingeActuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector_append(self, x)

    def empty(self):
        r"""empty(DriveTrain_HingeActuator_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector_empty(self)

    def size(self):
        r"""size(DriveTrain_HingeActuator_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::size_type"""
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector_size(self)

    def swap(self, v):
        r"""
        swap(DriveTrain_HingeActuator_Vector self, DriveTrain_HingeActuator_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > > &

        """
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector_swap(self, v)

    def begin(self):
        r"""begin(DriveTrain_HingeActuator_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::iterator"""
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector_begin(self)

    def end(self):
        r"""end(DriveTrain_HingeActuator_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::iterator"""
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector_end(self)

    def rbegin(self):
        r"""rbegin(DriveTrain_HingeActuator_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector_rbegin(self)

    def rend(self):
        r"""rend(DriveTrain_HingeActuator_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector_rend(self)

    def clear(self):
        r"""clear(DriveTrain_HingeActuator_Vector self)"""
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DriveTrain_HingeActuator_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::allocator_type"""
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DriveTrain_HingeActuator_Vector self)"""
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DriveTrain_HingeActuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::iterator pos) -> std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::iterator

        erase(DriveTrain_HingeActuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::iterator first, std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::iterator last) -> std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::iterator
        last: std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::iterator

        """
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DriveTrain_HingeActuator_Vector self) -> DriveTrain_HingeActuator_Vector
        __init__(DriveTrain_HingeActuator_Vector self, DriveTrain_HingeActuator_Vector other) -> DriveTrain_HingeActuator_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > > const &

        __init__(DriveTrain_HingeActuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::size_type size) -> DriveTrain_HingeActuator_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::size_type

        __init__(DriveTrain_HingeActuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::size_type size, std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::value_type const & value) -> DriveTrain_HingeActuator_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::size_type
        value: std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::value_type const &

        """
        _DriveTrainSwig.DriveTrain_HingeActuator_Vector_swiginit(self, _DriveTrainSwig.new_DriveTrain_HingeActuator_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(DriveTrain_HingeActuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector_push_back(self, x)

    def front(self):
        r"""front(DriveTrain_HingeActuator_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector_front(self)

    def back(self):
        r"""back(DriveTrain_HingeActuator_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(DriveTrain_HingeActuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DriveTrain_HingeActuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::size_type

        resize(DriveTrain_HingeActuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::size_type new_size, std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DriveTrain_HingeActuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::iterator
        x: std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::value_type const &

        insert(DriveTrain_HingeActuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::iterator
        n: std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(DriveTrain_HingeActuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::size_type

        """
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(DriveTrain_HingeActuator_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::HingeActuator > >::size_type"""
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector_capacity(self)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_HingeActuator_Vector

# Register DriveTrain_HingeActuator_Vector in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_HingeActuator_Vector_swigregister(DriveTrain_HingeActuator_Vector)

class DriveTrain_ManualClutch_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DriveTrain_ManualClutch_Vector self) -> SwigPyIterator"""
        return _DriveTrainSwig.DriveTrain_ManualClutch_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DriveTrain_ManualClutch_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_ManualClutch_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DriveTrain_ManualClutch_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_ManualClutch_Vector___bool__(self)

    def __len__(self):
        r"""__len__(DriveTrain_ManualClutch_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::size_type"""
        return _DriveTrainSwig.DriveTrain_ManualClutch_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(DriveTrain_ManualClutch_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::difference_type j) -> DriveTrain_ManualClutch_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_ManualClutch_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DriveTrain_ManualClutch_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::difference_type

        __setslice__(DriveTrain_ManualClutch_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::difference_type j, DriveTrain_ManualClutch_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::difference_type
        v: std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch >,std::allocator< std::shared_ptr< openplx::DriveTrain::ManualClutch > > > const &

        """
        return _DriveTrainSwig.DriveTrain_ManualClutch_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(DriveTrain_ManualClutch_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_ManualClutch_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DriveTrain_ManualClutch_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::difference_type

        __delitem__(DriveTrain_ManualClutch_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _DriveTrainSwig.DriveTrain_ManualClutch_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DriveTrain_ManualClutch_Vector self, PySliceObject * slice) -> DriveTrain_ManualClutch_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DriveTrain_ManualClutch_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::difference_type i) -> std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_ManualClutch_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DriveTrain_ManualClutch_Vector self, PySliceObject * slice, DriveTrain_ManualClutch_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch >,std::allocator< std::shared_ptr< openplx::DriveTrain::ManualClutch > > > const &

        __setitem__(DriveTrain_ManualClutch_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DriveTrain_ManualClutch_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::difference_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_ManualClutch_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(DriveTrain_ManualClutch_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::value_type"""
        return _DriveTrainSwig.DriveTrain_ManualClutch_Vector_pop(self)

    def append(self, x):
        r"""
        append(DriveTrain_ManualClutch_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_ManualClutch_Vector_append(self, x)

    def empty(self):
        r"""empty(DriveTrain_ManualClutch_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_ManualClutch_Vector_empty(self)

    def size(self):
        r"""size(DriveTrain_ManualClutch_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::size_type"""
        return _DriveTrainSwig.DriveTrain_ManualClutch_Vector_size(self)

    def swap(self, v):
        r"""
        swap(DriveTrain_ManualClutch_Vector self, DriveTrain_ManualClutch_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > > &

        """
        return _DriveTrainSwig.DriveTrain_ManualClutch_Vector_swap(self, v)

    def begin(self):
        r"""begin(DriveTrain_ManualClutch_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::iterator"""
        return _DriveTrainSwig.DriveTrain_ManualClutch_Vector_begin(self)

    def end(self):
        r"""end(DriveTrain_ManualClutch_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::iterator"""
        return _DriveTrainSwig.DriveTrain_ManualClutch_Vector_end(self)

    def rbegin(self):
        r"""rbegin(DriveTrain_ManualClutch_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_ManualClutch_Vector_rbegin(self)

    def rend(self):
        r"""rend(DriveTrain_ManualClutch_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_ManualClutch_Vector_rend(self)

    def clear(self):
        r"""clear(DriveTrain_ManualClutch_Vector self)"""
        return _DriveTrainSwig.DriveTrain_ManualClutch_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DriveTrain_ManualClutch_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::allocator_type"""
        return _DriveTrainSwig.DriveTrain_ManualClutch_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DriveTrain_ManualClutch_Vector self)"""
        return _DriveTrainSwig.DriveTrain_ManualClutch_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DriveTrain_ManualClutch_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::iterator pos) -> std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::iterator

        erase(DriveTrain_ManualClutch_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::iterator first, std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::iterator last) -> std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::iterator
        last: std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::iterator

        """
        return _DriveTrainSwig.DriveTrain_ManualClutch_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DriveTrain_ManualClutch_Vector self) -> DriveTrain_ManualClutch_Vector
        __init__(DriveTrain_ManualClutch_Vector self, DriveTrain_ManualClutch_Vector other) -> DriveTrain_ManualClutch_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > > const &

        __init__(DriveTrain_ManualClutch_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::size_type size) -> DriveTrain_ManualClutch_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::size_type

        __init__(DriveTrain_ManualClutch_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::size_type size, std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::value_type const & value) -> DriveTrain_ManualClutch_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::size_type
        value: std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::value_type const &

        """
        _DriveTrainSwig.DriveTrain_ManualClutch_Vector_swiginit(self, _DriveTrainSwig.new_DriveTrain_ManualClutch_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(DriveTrain_ManualClutch_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_ManualClutch_Vector_push_back(self, x)

    def front(self):
        r"""front(DriveTrain_ManualClutch_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_ManualClutch_Vector_front(self)

    def back(self):
        r"""back(DriveTrain_ManualClutch_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_ManualClutch_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(DriveTrain_ManualClutch_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_ManualClutch_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DriveTrain_ManualClutch_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::size_type

        resize(DriveTrain_ManualClutch_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::size_type new_size, std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_ManualClutch_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DriveTrain_ManualClutch_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::iterator
        x: std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::value_type const &

        insert(DriveTrain_ManualClutch_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::iterator
        n: std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_ManualClutch_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(DriveTrain_ManualClutch_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::size_type

        """
        return _DriveTrainSwig.DriveTrain_ManualClutch_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(DriveTrain_ManualClutch_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::ManualClutch > >::size_type"""
        return _DriveTrainSwig.DriveTrain_ManualClutch_Vector_capacity(self)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_ManualClutch_Vector

# Register DriveTrain_ManualClutch_Vector in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_ManualClutch_Vector_swigregister(DriveTrain_ManualClutch_Vector)

class DriveTrain_PrismaticActuator_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DriveTrain_PrismaticActuator_Vector self) -> SwigPyIterator"""
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DriveTrain_PrismaticActuator_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DriveTrain_PrismaticActuator_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector___bool__(self)

    def __len__(self):
        r"""__len__(DriveTrain_PrismaticActuator_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::size_type"""
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(DriveTrain_PrismaticActuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::difference_type j) -> DriveTrain_PrismaticActuator_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DriveTrain_PrismaticActuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::difference_type

        __setslice__(DriveTrain_PrismaticActuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::difference_type j, DriveTrain_PrismaticActuator_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::difference_type
        v: std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator >,std::allocator< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > > > const &

        """
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(DriveTrain_PrismaticActuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DriveTrain_PrismaticActuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::difference_type

        __delitem__(DriveTrain_PrismaticActuator_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DriveTrain_PrismaticActuator_Vector self, PySliceObject * slice) -> DriveTrain_PrismaticActuator_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DriveTrain_PrismaticActuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::difference_type i) -> std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DriveTrain_PrismaticActuator_Vector self, PySliceObject * slice, DriveTrain_PrismaticActuator_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator >,std::allocator< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > > > const &

        __setitem__(DriveTrain_PrismaticActuator_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DriveTrain_PrismaticActuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::difference_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(DriveTrain_PrismaticActuator_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::value_type"""
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_pop(self)

    def append(self, x):
        r"""
        append(DriveTrain_PrismaticActuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_append(self, x)

    def empty(self):
        r"""empty(DriveTrain_PrismaticActuator_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_empty(self)

    def size(self):
        r"""size(DriveTrain_PrismaticActuator_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::size_type"""
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_size(self)

    def swap(self, v):
        r"""
        swap(DriveTrain_PrismaticActuator_Vector self, DriveTrain_PrismaticActuator_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > > &

        """
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_swap(self, v)

    def begin(self):
        r"""begin(DriveTrain_PrismaticActuator_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::iterator"""
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_begin(self)

    def end(self):
        r"""end(DriveTrain_PrismaticActuator_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::iterator"""
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_end(self)

    def rbegin(self):
        r"""rbegin(DriveTrain_PrismaticActuator_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_rbegin(self)

    def rend(self):
        r"""rend(DriveTrain_PrismaticActuator_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_rend(self)

    def clear(self):
        r"""clear(DriveTrain_PrismaticActuator_Vector self)"""
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DriveTrain_PrismaticActuator_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::allocator_type"""
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DriveTrain_PrismaticActuator_Vector self)"""
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DriveTrain_PrismaticActuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::iterator pos) -> std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::iterator

        erase(DriveTrain_PrismaticActuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::iterator first, std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::iterator last) -> std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::iterator
        last: std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::iterator

        """
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DriveTrain_PrismaticActuator_Vector self) -> DriveTrain_PrismaticActuator_Vector
        __init__(DriveTrain_PrismaticActuator_Vector self, DriveTrain_PrismaticActuator_Vector other) -> DriveTrain_PrismaticActuator_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > > const &

        __init__(DriveTrain_PrismaticActuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::size_type size) -> DriveTrain_PrismaticActuator_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::size_type

        __init__(DriveTrain_PrismaticActuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::size_type size, std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::value_type const & value) -> DriveTrain_PrismaticActuator_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::size_type
        value: std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::value_type const &

        """
        _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_swiginit(self, _DriveTrainSwig.new_DriveTrain_PrismaticActuator_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(DriveTrain_PrismaticActuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_push_back(self, x)

    def front(self):
        r"""front(DriveTrain_PrismaticActuator_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_front(self)

    def back(self):
        r"""back(DriveTrain_PrismaticActuator_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(DriveTrain_PrismaticActuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DriveTrain_PrismaticActuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::size_type

        resize(DriveTrain_PrismaticActuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::size_type new_size, std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DriveTrain_PrismaticActuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::iterator
        x: std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::value_type const &

        insert(DriveTrain_PrismaticActuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::iterator
        n: std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(DriveTrain_PrismaticActuator_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::size_type

        """
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(DriveTrain_PrismaticActuator_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::PrismaticActuator > >::size_type"""
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_capacity(self)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_PrismaticActuator_Vector

# Register DriveTrain_PrismaticActuator_Vector in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_swigregister(DriveTrain_PrismaticActuator_Vector)

class DriveTrain_Shaft_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DriveTrain_Shaft_Vector self) -> SwigPyIterator"""
        return _DriveTrainSwig.DriveTrain_Shaft_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DriveTrain_Shaft_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Shaft_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DriveTrain_Shaft_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Shaft_Vector___bool__(self)

    def __len__(self):
        r"""__len__(DriveTrain_Shaft_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Shaft_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(DriveTrain_Shaft_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::difference_type j) -> DriveTrain_Shaft_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Shaft_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DriveTrain_Shaft_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::difference_type

        __setslice__(DriveTrain_Shaft_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::difference_type j, DriveTrain_Shaft_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::difference_type
        v: std::vector< std::shared_ptr< openplx::DriveTrain::Shaft >,std::allocator< std::shared_ptr< openplx::DriveTrain::Shaft > > > const &

        """
        return _DriveTrainSwig.DriveTrain_Shaft_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(DriveTrain_Shaft_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Shaft_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DriveTrain_Shaft_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::difference_type

        __delitem__(DriveTrain_Shaft_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _DriveTrainSwig.DriveTrain_Shaft_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DriveTrain_Shaft_Vector self, PySliceObject * slice) -> DriveTrain_Shaft_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DriveTrain_Shaft_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::difference_type i) -> std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Shaft_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DriveTrain_Shaft_Vector self, PySliceObject * slice, DriveTrain_Shaft_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::DriveTrain::Shaft >,std::allocator< std::shared_ptr< openplx::DriveTrain::Shaft > > > const &

        __setitem__(DriveTrain_Shaft_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DriveTrain_Shaft_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::difference_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Shaft_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(DriveTrain_Shaft_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::value_type"""
        return _DriveTrainSwig.DriveTrain_Shaft_Vector_pop(self)

    def append(self, x):
        r"""
        append(DriveTrain_Shaft_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Shaft_Vector_append(self, x)

    def empty(self):
        r"""empty(DriveTrain_Shaft_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Shaft_Vector_empty(self)

    def size(self):
        r"""size(DriveTrain_Shaft_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Shaft_Vector_size(self)

    def swap(self, v):
        r"""
        swap(DriveTrain_Shaft_Vector self, DriveTrain_Shaft_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > > &

        """
        return _DriveTrainSwig.DriveTrain_Shaft_Vector_swap(self, v)

    def begin(self):
        r"""begin(DriveTrain_Shaft_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::iterator"""
        return _DriveTrainSwig.DriveTrain_Shaft_Vector_begin(self)

    def end(self):
        r"""end(DriveTrain_Shaft_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::iterator"""
        return _DriveTrainSwig.DriveTrain_Shaft_Vector_end(self)

    def rbegin(self):
        r"""rbegin(DriveTrain_Shaft_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_Shaft_Vector_rbegin(self)

    def rend(self):
        r"""rend(DriveTrain_Shaft_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_Shaft_Vector_rend(self)

    def clear(self):
        r"""clear(DriveTrain_Shaft_Vector self)"""
        return _DriveTrainSwig.DriveTrain_Shaft_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DriveTrain_Shaft_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::allocator_type"""
        return _DriveTrainSwig.DriveTrain_Shaft_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DriveTrain_Shaft_Vector self)"""
        return _DriveTrainSwig.DriveTrain_Shaft_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DriveTrain_Shaft_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::iterator pos) -> std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::iterator

        erase(DriveTrain_Shaft_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::iterator first, std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::iterator last) -> std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::iterator
        last: std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::iterator

        """
        return _DriveTrainSwig.DriveTrain_Shaft_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DriveTrain_Shaft_Vector self) -> DriveTrain_Shaft_Vector
        __init__(DriveTrain_Shaft_Vector self, DriveTrain_Shaft_Vector other) -> DriveTrain_Shaft_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > > const &

        __init__(DriveTrain_Shaft_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::size_type size) -> DriveTrain_Shaft_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::size_type

        __init__(DriveTrain_Shaft_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::size_type size, std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::value_type const & value) -> DriveTrain_Shaft_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::size_type
        value: std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::value_type const &

        """
        _DriveTrainSwig.DriveTrain_Shaft_Vector_swiginit(self, _DriveTrainSwig.new_DriveTrain_Shaft_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(DriveTrain_Shaft_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Shaft_Vector_push_back(self, x)

    def front(self):
        r"""front(DriveTrain_Shaft_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_Shaft_Vector_front(self)

    def back(self):
        r"""back(DriveTrain_Shaft_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_Shaft_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(DriveTrain_Shaft_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Shaft_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DriveTrain_Shaft_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::size_type

        resize(DriveTrain_Shaft_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::size_type new_size, std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Shaft_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DriveTrain_Shaft_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::iterator
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::value_type const &

        insert(DriveTrain_Shaft_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::iterator
        n: std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Shaft_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(DriveTrain_Shaft_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::size_type

        """
        return _DriveTrainSwig.DriveTrain_Shaft_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(DriveTrain_Shaft_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Shaft > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Shaft_Vector_capacity(self)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_Shaft_Vector

# Register DriveTrain_Shaft_Vector in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_Shaft_Vector_swigregister(DriveTrain_Shaft_Vector)

class DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector self) -> SwigPyIterator"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::difference_type j) -> DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::difference_type

        __setslice__(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::difference_type j, DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput >,std::allocator< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > > > const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::difference_type

        __delitem__(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector self, PySliceObject * slice) -> DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector self, PySliceObject * slice, DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput >,std::allocator< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > > > const &

        __setitem__(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::value_type"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector_pop(self)

    def append(self, x):
        r"""
        append(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector_append(self, x)

    def empty(self):
        r"""empty(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector_empty(self)

    def size(self):
        r"""size(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector self, DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > > &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector_swap(self, v)

    def begin(self):
        r"""begin(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::iterator"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector_begin(self)

    def end(self):
        r"""end(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::iterator"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector_rbegin(self)

    def rend(self):
        r"""rend(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector_rend(self)

    def clear(self):
        r"""clear(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector self)"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::allocator_type"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector self)"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::iterator

        erase(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::iterator first, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::iterator last) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::iterator
        last: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::iterator

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector self) -> DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector
        __init__(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector self, DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector other) -> DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > > const &

        __init__(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::size_type size) -> DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::size_type

        __init__(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::size_type size, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::value_type const & value) -> DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::size_type
        value: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::value_type const &

        """
        _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector_swiginit(self, _DriveTrainSwig.new_DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector_push_back(self, x)

    def front(self):
        r"""front(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector_front(self)

    def back(self):
        r"""back(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::size_type

        resize(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::size_type new_size, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::iterator
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::value_type const &

        insert(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::iterator
        n: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::size_type

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector_capacity(self)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector

# Register DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector_swigregister(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_Vector)

class DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector self) -> SwigPyIterator"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::difference_type j) -> DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::difference_type

        __setslice__(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::difference_type j, DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput >,std::allocator< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > > > const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::difference_type

        __delitem__(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector self, PySliceObject * slice) -> DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector self, PySliceObject * slice, DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput >,std::allocator< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > > > const &

        __setitem__(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::value_type"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector_empty(self)

    def size(self):
        r"""size(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector self, DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > > &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::iterator"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector_begin(self)

    def end(self):
        r"""end(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::iterator"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector_rend(self)

    def clear(self):
        r"""clear(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector self)"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::allocator_type"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector self)"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::iterator

        erase(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::iterator first, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::iterator last) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::iterator
        last: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::iterator

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector self) -> DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector
        __init__(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector self, DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector other) -> DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > > const &

        __init__(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::size_type size) -> DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::size_type

        __init__(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::size_type size, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::value_type const & value) -> DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::size_type
        value: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::value_type const &

        """
        _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector_swiginit(self, _DriveTrainSwig.new_DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector_front(self)

    def back(self):
        r"""back(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::size_type

        resize(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::size_type new_size, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::iterator
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::value_type const &

        insert(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::iterator
        n: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::size_type

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector_capacity(self)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector

# Register DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector_swigregister(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_Vector)

class DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector self) -> SwigPyIterator"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::difference_type j) -> DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::difference_type

        __setslice__(DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::difference_type j, DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput >,std::allocator< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > > > const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::difference_type

        __delitem__(DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector self, PySliceObject * slice) -> DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector self, PySliceObject * slice, DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput >,std::allocator< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > > > const &

        __setitem__(DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::value_type"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector_pop(self)

    def append(self, x):
        r"""
        append(DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector_append(self, x)

    def empty(self):
        r"""empty(DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector_empty(self)

    def size(self):
        r"""size(DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector self, DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > > &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector_swap(self, v)

    def begin(self):
        r"""begin(DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::iterator"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector_begin(self)

    def end(self):
        r"""end(DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::iterator"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector_rbegin(self)

    def rend(self):
        r"""rend(DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector_rend(self)

    def clear(self):
        r"""clear(DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector self)"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::allocator_type"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector self)"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::iterator

        erase(DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::iterator first, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::iterator last) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::iterator
        last: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::iterator

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector self) -> DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector
        __init__(DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector self, DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector other) -> DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > > const &

        __init__(DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::size_type size) -> DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::size_type

        __init__(DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::size_type size, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::value_type const & value) -> DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::size_type
        value: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::value_type const &

        """
        _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector_swiginit(self, _DriveTrainSwig.new_DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector_push_back(self, x)

    def front(self):
        r"""front(DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector_front(self)

    def back(self):
        r"""back(DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::size_type

        resize(DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::size_type new_size, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::iterator
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::value_type const &

        insert(DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::iterator
        n: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::size_type

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector_capacity(self)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector

# Register DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector_swigregister(DriveTrain_Signals_AutomaticClutchEngagementDurationInput_Vector)

class DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector self) -> SwigPyIterator"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::difference_type j) -> DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::difference_type

        __setslice__(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::difference_type j, DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput >,std::allocator< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > > > const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::difference_type

        __delitem__(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector self, PySliceObject * slice) -> DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector self, PySliceObject * slice, DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput >,std::allocator< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > > > const &

        __setitem__(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::value_type"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector_empty(self)

    def size(self):
        r"""size(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector self, DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > > &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::iterator"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector_begin(self)

    def end(self):
        r"""end(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::iterator"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector_rend(self)

    def clear(self):
        r"""clear(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector self)"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::allocator_type"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector self)"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::iterator

        erase(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::iterator first, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::iterator last) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::iterator
        last: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::iterator

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector self) -> DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector
        __init__(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector self, DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector other) -> DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > > const &

        __init__(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::size_type size) -> DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::size_type

        __init__(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::size_type size, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::value_type const & value) -> DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::size_type
        value: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::value_type const &

        """
        _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector_swiginit(self, _DriveTrainSwig.new_DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector_front(self)

    def back(self):
        r"""back(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::size_type

        resize(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::size_type new_size, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::iterator
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::value_type const &

        insert(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::iterator
        n: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::size_type

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector_capacity(self)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector

# Register DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector_swigregister(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_Vector)

class DriveTrain_Signals_TorqueConverterLockUpInput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DriveTrain_Signals_TorqueConverterLockUpInput_Vector self) -> SwigPyIterator"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockUpInput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DriveTrain_Signals_TorqueConverterLockUpInput_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockUpInput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DriveTrain_Signals_TorqueConverterLockUpInput_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockUpInput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(DriveTrain_Signals_TorqueConverterLockUpInput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockUpInput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(DriveTrain_Signals_TorqueConverterLockUpInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::difference_type j) -> DriveTrain_Signals_TorqueConverterLockUpInput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockUpInput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DriveTrain_Signals_TorqueConverterLockUpInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::difference_type

        __setslice__(DriveTrain_Signals_TorqueConverterLockUpInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::difference_type j, DriveTrain_Signals_TorqueConverterLockUpInput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput >,std::allocator< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > > > const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockUpInput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(DriveTrain_Signals_TorqueConverterLockUpInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockUpInput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DriveTrain_Signals_TorqueConverterLockUpInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::difference_type

        __delitem__(DriveTrain_Signals_TorqueConverterLockUpInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockUpInput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DriveTrain_Signals_TorqueConverterLockUpInput_Vector self, PySliceObject * slice) -> DriveTrain_Signals_TorqueConverterLockUpInput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DriveTrain_Signals_TorqueConverterLockUpInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockUpInput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DriveTrain_Signals_TorqueConverterLockUpInput_Vector self, PySliceObject * slice, DriveTrain_Signals_TorqueConverterLockUpInput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput >,std::allocator< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > > > const &

        __setitem__(DriveTrain_Signals_TorqueConverterLockUpInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DriveTrain_Signals_TorqueConverterLockUpInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockUpInput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(DriveTrain_Signals_TorqueConverterLockUpInput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::value_type"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockUpInput_Vector_pop(self)

    def append(self, x):
        r"""
        append(DriveTrain_Signals_TorqueConverterLockUpInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockUpInput_Vector_append(self, x)

    def empty(self):
        r"""empty(DriveTrain_Signals_TorqueConverterLockUpInput_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockUpInput_Vector_empty(self)

    def size(self):
        r"""size(DriveTrain_Signals_TorqueConverterLockUpInput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockUpInput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(DriveTrain_Signals_TorqueConverterLockUpInput_Vector self, DriveTrain_Signals_TorqueConverterLockUpInput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > > &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockUpInput_Vector_swap(self, v)

    def begin(self):
        r"""begin(DriveTrain_Signals_TorqueConverterLockUpInput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::iterator"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockUpInput_Vector_begin(self)

    def end(self):
        r"""end(DriveTrain_Signals_TorqueConverterLockUpInput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::iterator"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockUpInput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(DriveTrain_Signals_TorqueConverterLockUpInput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockUpInput_Vector_rbegin(self)

    def rend(self):
        r"""rend(DriveTrain_Signals_TorqueConverterLockUpInput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockUpInput_Vector_rend(self)

    def clear(self):
        r"""clear(DriveTrain_Signals_TorqueConverterLockUpInput_Vector self)"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockUpInput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DriveTrain_Signals_TorqueConverterLockUpInput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::allocator_type"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockUpInput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DriveTrain_Signals_TorqueConverterLockUpInput_Vector self)"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockUpInput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DriveTrain_Signals_TorqueConverterLockUpInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::iterator

        erase(DriveTrain_Signals_TorqueConverterLockUpInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::iterator first, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::iterator last) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::iterator
        last: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::iterator

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockUpInput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DriveTrain_Signals_TorqueConverterLockUpInput_Vector self) -> DriveTrain_Signals_TorqueConverterLockUpInput_Vector
        __init__(DriveTrain_Signals_TorqueConverterLockUpInput_Vector self, DriveTrain_Signals_TorqueConverterLockUpInput_Vector other) -> DriveTrain_Signals_TorqueConverterLockUpInput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > > const &

        __init__(DriveTrain_Signals_TorqueConverterLockUpInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::size_type size) -> DriveTrain_Signals_TorqueConverterLockUpInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::size_type

        __init__(DriveTrain_Signals_TorqueConverterLockUpInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::size_type size, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::value_type const & value) -> DriveTrain_Signals_TorqueConverterLockUpInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::size_type
        value: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::value_type const &

        """
        _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockUpInput_Vector_swiginit(self, _DriveTrainSwig.new_DriveTrain_Signals_TorqueConverterLockUpInput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(DriveTrain_Signals_TorqueConverterLockUpInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockUpInput_Vector_push_back(self, x)

    def front(self):
        r"""front(DriveTrain_Signals_TorqueConverterLockUpInput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockUpInput_Vector_front(self)

    def back(self):
        r"""back(DriveTrain_Signals_TorqueConverterLockUpInput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockUpInput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(DriveTrain_Signals_TorqueConverterLockUpInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockUpInput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DriveTrain_Signals_TorqueConverterLockUpInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::size_type

        resize(DriveTrain_Signals_TorqueConverterLockUpInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::size_type new_size, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockUpInput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DriveTrain_Signals_TorqueConverterLockUpInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::iterator
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::value_type const &

        insert(DriveTrain_Signals_TorqueConverterLockUpInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::iterator
        n: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockUpInput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(DriveTrain_Signals_TorqueConverterLockUpInput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::size_type

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockUpInput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(DriveTrain_Signals_TorqueConverterLockUpInput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockUpInput_Vector_capacity(self)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_Signals_TorqueConverterLockUpInput_Vector

# Register DriveTrain_Signals_TorqueConverterLockUpInput_Vector in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockUpInput_Vector_swigregister(DriveTrain_Signals_TorqueConverterLockUpInput_Vector)

class DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector self) -> SwigPyIterator"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::difference_type j) -> DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::difference_type

        __setslice__(DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::difference_type j, DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput >,std::allocator< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > > > const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::difference_type

        __delitem__(DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector self, PySliceObject * slice) -> DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector self, PySliceObject * slice, DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput >,std::allocator< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > > > const &

        __setitem__(DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::value_type"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector_empty(self)

    def size(self):
        r"""size(DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector self, DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > > &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::iterator"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector_begin(self)

    def end(self):
        r"""end(DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::iterator"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector_rend(self)

    def clear(self):
        r"""clear(DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector self)"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::allocator_type"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector self)"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::iterator

        erase(DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::iterator first, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::iterator last) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::iterator
        last: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::iterator

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector self) -> DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector
        __init__(DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector self, DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector other) -> DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > > const &

        __init__(DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::size_type size) -> DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::size_type

        __init__(DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::size_type size, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::value_type const & value) -> DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::size_type
        value: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::value_type const &

        """
        _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector_swiginit(self, _DriveTrainSwig.new_DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector_front(self)

    def back(self):
        r"""back(DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::size_type

        resize(DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::size_type new_size, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::iterator
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::value_type const &

        insert(DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::iterator
        n: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::size_type

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector_capacity(self)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector

# Register DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector_swigregister(DriveTrain_Signals_TorqueConverterLockedUpOutput_Vector)

class DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector self) -> SwigPyIterator"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::difference_type j) -> DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::difference_type

        __setslice__(DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::difference_type j, DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput >,std::allocator< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > > > const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::difference_type

        __delitem__(DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector self, PySliceObject * slice) -> DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector self, PySliceObject * slice, DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput >,std::allocator< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > > > const &

        __setitem__(DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::value_type"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector_empty(self)

    def size(self):
        r"""size(DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector self, DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > > &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::iterator"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector_begin(self)

    def end(self):
        r"""end(DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::iterator"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector_rend(self)

    def clear(self):
        r"""clear(DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector self)"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::allocator_type"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector self)"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::iterator

        erase(DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::iterator first, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::iterator last) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::iterator
        last: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::iterator

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector self) -> DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector
        __init__(DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector self, DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector other) -> DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > > const &

        __init__(DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::size_type size) -> DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::size_type

        __init__(DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::size_type size, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::value_type const & value) -> DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::size_type
        value: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::value_type const &

        """
        _DriveTrainSwig.DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector_swiginit(self, _DriveTrainSwig.new_DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector_front(self)

    def back(self):
        r"""back(DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::size_type

        resize(DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::size_type new_size, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::iterator
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::value_type const &

        insert(DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::iterator
        n: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::size_type

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector_capacity(self)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector

# Register DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector_swigregister(DriveTrain_Signals_TorqueConverterPumpTorqueOutput_Vector)

class DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector self) -> SwigPyIterator"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::difference_type j) -> DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::difference_type

        __setslice__(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::difference_type j, DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::difference_type
        v: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput >,std::allocator< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > > > const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::difference_type

        __delitem__(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector self, PySliceObject * slice) -> DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::difference_type i) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector self, PySliceObject * slice, DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput >,std::allocator< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > > > const &

        __setitem__(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::difference_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::value_type"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector_empty(self)

    def size(self):
        r"""size(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector self, DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > > &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::iterator"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector_begin(self)

    def end(self):
        r"""end(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::iterator"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector_rend(self)

    def clear(self):
        r"""clear(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector self)"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::allocator_type"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector self)"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::iterator pos) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::iterator

        erase(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::iterator first, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::iterator last) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::iterator
        last: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::iterator

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector self) -> DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector
        __init__(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector self, DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector other) -> DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > > const &

        __init__(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::size_type size) -> DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::size_type

        __init__(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::size_type size, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::value_type const & value) -> DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::size_type
        value: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::value_type const &

        """
        _DriveTrainSwig.DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector_swiginit(self, _DriveTrainSwig.new_DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector_front(self)

    def back(self):
        r"""back(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::size_type

        resize(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::size_type new_size, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::iterator
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::value_type const &

        insert(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::iterator
        n: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::size_type

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector_capacity(self)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector

# Register DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector_swigregister(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_Vector)

class DriveTrain_TorqueLimitedSlipDifferential_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DriveTrain_TorqueLimitedSlipDifferential_Vector self) -> SwigPyIterator"""
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DriveTrain_TorqueLimitedSlipDifferential_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DriveTrain_TorqueLimitedSlipDifferential_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector___bool__(self)

    def __len__(self):
        r"""__len__(DriveTrain_TorqueLimitedSlipDifferential_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::size_type"""
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(DriveTrain_TorqueLimitedSlipDifferential_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::difference_type j) -> DriveTrain_TorqueLimitedSlipDifferential_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DriveTrain_TorqueLimitedSlipDifferential_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::difference_type

        __setslice__(DriveTrain_TorqueLimitedSlipDifferential_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::difference_type j, DriveTrain_TorqueLimitedSlipDifferential_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::difference_type
        v: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential >,std::allocator< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > > > const &

        """
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(DriveTrain_TorqueLimitedSlipDifferential_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DriveTrain_TorqueLimitedSlipDifferential_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::difference_type

        __delitem__(DriveTrain_TorqueLimitedSlipDifferential_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DriveTrain_TorqueLimitedSlipDifferential_Vector self, PySliceObject * slice) -> DriveTrain_TorqueLimitedSlipDifferential_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DriveTrain_TorqueLimitedSlipDifferential_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::difference_type i) -> std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DriveTrain_TorqueLimitedSlipDifferential_Vector self, PySliceObject * slice, DriveTrain_TorqueLimitedSlipDifferential_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential >,std::allocator< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > > > const &

        __setitem__(DriveTrain_TorqueLimitedSlipDifferential_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DriveTrain_TorqueLimitedSlipDifferential_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::difference_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(DriveTrain_TorqueLimitedSlipDifferential_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::value_type"""
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_pop(self)

    def append(self, x):
        r"""
        append(DriveTrain_TorqueLimitedSlipDifferential_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_append(self, x)

    def empty(self):
        r"""empty(DriveTrain_TorqueLimitedSlipDifferential_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_empty(self)

    def size(self):
        r"""size(DriveTrain_TorqueLimitedSlipDifferential_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::size_type"""
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_size(self)

    def swap(self, v):
        r"""
        swap(DriveTrain_TorqueLimitedSlipDifferential_Vector self, DriveTrain_TorqueLimitedSlipDifferential_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > > &

        """
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_swap(self, v)

    def begin(self):
        r"""begin(DriveTrain_TorqueLimitedSlipDifferential_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::iterator"""
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_begin(self)

    def end(self):
        r"""end(DriveTrain_TorqueLimitedSlipDifferential_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::iterator"""
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_end(self)

    def rbegin(self):
        r"""rbegin(DriveTrain_TorqueLimitedSlipDifferential_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_rbegin(self)

    def rend(self):
        r"""rend(DriveTrain_TorqueLimitedSlipDifferential_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_rend(self)

    def clear(self):
        r"""clear(DriveTrain_TorqueLimitedSlipDifferential_Vector self)"""
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DriveTrain_TorqueLimitedSlipDifferential_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::allocator_type"""
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DriveTrain_TorqueLimitedSlipDifferential_Vector self)"""
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DriveTrain_TorqueLimitedSlipDifferential_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::iterator pos) -> std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::iterator

        erase(DriveTrain_TorqueLimitedSlipDifferential_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::iterator first, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::iterator last) -> std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::iterator
        last: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::iterator

        """
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DriveTrain_TorqueLimitedSlipDifferential_Vector self) -> DriveTrain_TorqueLimitedSlipDifferential_Vector
        __init__(DriveTrain_TorqueLimitedSlipDifferential_Vector self, DriveTrain_TorqueLimitedSlipDifferential_Vector other) -> DriveTrain_TorqueLimitedSlipDifferential_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > > const &

        __init__(DriveTrain_TorqueLimitedSlipDifferential_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::size_type size) -> DriveTrain_TorqueLimitedSlipDifferential_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::size_type

        __init__(DriveTrain_TorqueLimitedSlipDifferential_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::size_type size, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::value_type const & value) -> DriveTrain_TorqueLimitedSlipDifferential_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::size_type
        value: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::value_type const &

        """
        _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_swiginit(self, _DriveTrainSwig.new_DriveTrain_TorqueLimitedSlipDifferential_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(DriveTrain_TorqueLimitedSlipDifferential_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_push_back(self, x)

    def front(self):
        r"""front(DriveTrain_TorqueLimitedSlipDifferential_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_front(self)

    def back(self):
        r"""back(DriveTrain_TorqueLimitedSlipDifferential_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(DriveTrain_TorqueLimitedSlipDifferential_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DriveTrain_TorqueLimitedSlipDifferential_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::size_type

        resize(DriveTrain_TorqueLimitedSlipDifferential_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::size_type new_size, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DriveTrain_TorqueLimitedSlipDifferential_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::iterator
        x: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::value_type const &

        insert(DriveTrain_TorqueLimitedSlipDifferential_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::iterator
        n: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(DriveTrain_TorqueLimitedSlipDifferential_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::size_type

        """
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(DriveTrain_TorqueLimitedSlipDifferential_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::TorqueLimitedSlipDifferential > >::size_type"""
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_capacity(self)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_TorqueLimitedSlipDifferential_Vector

# Register DriveTrain_TorqueLimitedSlipDifferential_Vector in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_swigregister(DriveTrain_TorqueLimitedSlipDifferential_Vector)

class DriveTrain_TorqueMotor_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DriveTrain_TorqueMotor_Vector self) -> SwigPyIterator"""
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DriveTrain_TorqueMotor_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DriveTrain_TorqueMotor_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector___bool__(self)

    def __len__(self):
        r"""__len__(DriveTrain_TorqueMotor_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::size_type"""
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(DriveTrain_TorqueMotor_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::difference_type j) -> DriveTrain_TorqueMotor_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DriveTrain_TorqueMotor_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::difference_type

        __setslice__(DriveTrain_TorqueMotor_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::difference_type j, DriveTrain_TorqueMotor_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::difference_type
        v: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor >,std::allocator< std::shared_ptr< openplx::DriveTrain::TorqueMotor > > > const &

        """
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(DriveTrain_TorqueMotor_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DriveTrain_TorqueMotor_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::difference_type

        __delitem__(DriveTrain_TorqueMotor_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DriveTrain_TorqueMotor_Vector self, PySliceObject * slice) -> DriveTrain_TorqueMotor_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DriveTrain_TorqueMotor_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::difference_type i) -> std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DriveTrain_TorqueMotor_Vector self, PySliceObject * slice, DriveTrain_TorqueMotor_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor >,std::allocator< std::shared_ptr< openplx::DriveTrain::TorqueMotor > > > const &

        __setitem__(DriveTrain_TorqueMotor_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DriveTrain_TorqueMotor_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::difference_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(DriveTrain_TorqueMotor_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::value_type"""
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_pop(self)

    def append(self, x):
        r"""
        append(DriveTrain_TorqueMotor_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_append(self, x)

    def empty(self):
        r"""empty(DriveTrain_TorqueMotor_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_empty(self)

    def size(self):
        r"""size(DriveTrain_TorqueMotor_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::size_type"""
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_size(self)

    def swap(self, v):
        r"""
        swap(DriveTrain_TorqueMotor_Vector self, DriveTrain_TorqueMotor_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > > &

        """
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_swap(self, v)

    def begin(self):
        r"""begin(DriveTrain_TorqueMotor_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::iterator"""
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_begin(self)

    def end(self):
        r"""end(DriveTrain_TorqueMotor_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::iterator"""
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_end(self)

    def rbegin(self):
        r"""rbegin(DriveTrain_TorqueMotor_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_rbegin(self)

    def rend(self):
        r"""rend(DriveTrain_TorqueMotor_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_rend(self)

    def clear(self):
        r"""clear(DriveTrain_TorqueMotor_Vector self)"""
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DriveTrain_TorqueMotor_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::allocator_type"""
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DriveTrain_TorqueMotor_Vector self)"""
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DriveTrain_TorqueMotor_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::iterator pos) -> std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::iterator

        erase(DriveTrain_TorqueMotor_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::iterator first, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::iterator last) -> std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::iterator
        last: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::iterator

        """
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DriveTrain_TorqueMotor_Vector self) -> DriveTrain_TorqueMotor_Vector
        __init__(DriveTrain_TorqueMotor_Vector self, DriveTrain_TorqueMotor_Vector other) -> DriveTrain_TorqueMotor_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > > const &

        __init__(DriveTrain_TorqueMotor_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::size_type size) -> DriveTrain_TorqueMotor_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::size_type

        __init__(DriveTrain_TorqueMotor_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::size_type size, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::value_type const & value) -> DriveTrain_TorqueMotor_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::size_type
        value: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::value_type const &

        """
        _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_swiginit(self, _DriveTrainSwig.new_DriveTrain_TorqueMotor_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(DriveTrain_TorqueMotor_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_push_back(self, x)

    def front(self):
        r"""front(DriveTrain_TorqueMotor_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_front(self)

    def back(self):
        r"""back(DriveTrain_TorqueMotor_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(DriveTrain_TorqueMotor_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DriveTrain_TorqueMotor_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::size_type

        resize(DriveTrain_TorqueMotor_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::size_type new_size, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DriveTrain_TorqueMotor_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::iterator
        x: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::value_type const &

        insert(DriveTrain_TorqueMotor_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::iterator
        n: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(DriveTrain_TorqueMotor_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::size_type

        """
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(DriveTrain_TorqueMotor_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::TorqueMotor > >::size_type"""
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_capacity(self)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_TorqueMotor_Vector

# Register DriveTrain_TorqueMotor_Vector in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_TorqueMotor_Vector_swigregister(DriveTrain_TorqueMotor_Vector)

class DriveTrain_VelocityRatioGeometryFactorPair_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DriveTrain_VelocityRatioGeometryFactorPair_Vector self) -> SwigPyIterator"""
        return _DriveTrainSwig.DriveTrain_VelocityRatioGeometryFactorPair_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DriveTrain_VelocityRatioGeometryFactorPair_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_VelocityRatioGeometryFactorPair_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DriveTrain_VelocityRatioGeometryFactorPair_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_VelocityRatioGeometryFactorPair_Vector___bool__(self)

    def __len__(self):
        r"""__len__(DriveTrain_VelocityRatioGeometryFactorPair_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::size_type"""
        return _DriveTrainSwig.DriveTrain_VelocityRatioGeometryFactorPair_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(DriveTrain_VelocityRatioGeometryFactorPair_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::difference_type j) -> DriveTrain_VelocityRatioGeometryFactorPair_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_VelocityRatioGeometryFactorPair_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DriveTrain_VelocityRatioGeometryFactorPair_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::difference_type

        __setslice__(DriveTrain_VelocityRatioGeometryFactorPair_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::difference_type j, DriveTrain_VelocityRatioGeometryFactorPair_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::difference_type
        v: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair >,std::allocator< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > > > const &

        """
        return _DriveTrainSwig.DriveTrain_VelocityRatioGeometryFactorPair_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(DriveTrain_VelocityRatioGeometryFactorPair_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_VelocityRatioGeometryFactorPair_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DriveTrain_VelocityRatioGeometryFactorPair_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::difference_type

        __delitem__(DriveTrain_VelocityRatioGeometryFactorPair_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _DriveTrainSwig.DriveTrain_VelocityRatioGeometryFactorPair_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DriveTrain_VelocityRatioGeometryFactorPair_Vector self, PySliceObject * slice) -> DriveTrain_VelocityRatioGeometryFactorPair_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DriveTrain_VelocityRatioGeometryFactorPair_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::difference_type i) -> std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_VelocityRatioGeometryFactorPair_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DriveTrain_VelocityRatioGeometryFactorPair_Vector self, PySliceObject * slice, DriveTrain_VelocityRatioGeometryFactorPair_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair >,std::allocator< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > > > const &

        __setitem__(DriveTrain_VelocityRatioGeometryFactorPair_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DriveTrain_VelocityRatioGeometryFactorPair_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::difference_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_VelocityRatioGeometryFactorPair_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(DriveTrain_VelocityRatioGeometryFactorPair_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::value_type"""
        return _DriveTrainSwig.DriveTrain_VelocityRatioGeometryFactorPair_Vector_pop(self)

    def append(self, x):
        r"""
        append(DriveTrain_VelocityRatioGeometryFactorPair_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_VelocityRatioGeometryFactorPair_Vector_append(self, x)

    def empty(self):
        r"""empty(DriveTrain_VelocityRatioGeometryFactorPair_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_VelocityRatioGeometryFactorPair_Vector_empty(self)

    def size(self):
        r"""size(DriveTrain_VelocityRatioGeometryFactorPair_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::size_type"""
        return _DriveTrainSwig.DriveTrain_VelocityRatioGeometryFactorPair_Vector_size(self)

    def swap(self, v):
        r"""
        swap(DriveTrain_VelocityRatioGeometryFactorPair_Vector self, DriveTrain_VelocityRatioGeometryFactorPair_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > > &

        """
        return _DriveTrainSwig.DriveTrain_VelocityRatioGeometryFactorPair_Vector_swap(self, v)

    def begin(self):
        r"""begin(DriveTrain_VelocityRatioGeometryFactorPair_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::iterator"""
        return _DriveTrainSwig.DriveTrain_VelocityRatioGeometryFactorPair_Vector_begin(self)

    def end(self):
        r"""end(DriveTrain_VelocityRatioGeometryFactorPair_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::iterator"""
        return _DriveTrainSwig.DriveTrain_VelocityRatioGeometryFactorPair_Vector_end(self)

    def rbegin(self):
        r"""rbegin(DriveTrain_VelocityRatioGeometryFactorPair_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_VelocityRatioGeometryFactorPair_Vector_rbegin(self)

    def rend(self):
        r"""rend(DriveTrain_VelocityRatioGeometryFactorPair_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_VelocityRatioGeometryFactorPair_Vector_rend(self)

    def clear(self):
        r"""clear(DriveTrain_VelocityRatioGeometryFactorPair_Vector self)"""
        return _DriveTrainSwig.DriveTrain_VelocityRatioGeometryFactorPair_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DriveTrain_VelocityRatioGeometryFactorPair_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::allocator_type"""
        return _DriveTrainSwig.DriveTrain_VelocityRatioGeometryFactorPair_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DriveTrain_VelocityRatioGeometryFactorPair_Vector self)"""
        return _DriveTrainSwig.DriveTrain_VelocityRatioGeometryFactorPair_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DriveTrain_VelocityRatioGeometryFactorPair_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::iterator pos) -> std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::iterator

        erase(DriveTrain_VelocityRatioGeometryFactorPair_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::iterator first, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::iterator last) -> std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::iterator
        last: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::iterator

        """
        return _DriveTrainSwig.DriveTrain_VelocityRatioGeometryFactorPair_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DriveTrain_VelocityRatioGeometryFactorPair_Vector self) -> DriveTrain_VelocityRatioGeometryFactorPair_Vector
        __init__(DriveTrain_VelocityRatioGeometryFactorPair_Vector self, DriveTrain_VelocityRatioGeometryFactorPair_Vector other) -> DriveTrain_VelocityRatioGeometryFactorPair_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > > const &

        __init__(DriveTrain_VelocityRatioGeometryFactorPair_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::size_type size) -> DriveTrain_VelocityRatioGeometryFactorPair_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::size_type

        __init__(DriveTrain_VelocityRatioGeometryFactorPair_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::size_type size, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::value_type const & value) -> DriveTrain_VelocityRatioGeometryFactorPair_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::size_type
        value: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::value_type const &

        """
        _DriveTrainSwig.DriveTrain_VelocityRatioGeometryFactorPair_Vector_swiginit(self, _DriveTrainSwig.new_DriveTrain_VelocityRatioGeometryFactorPair_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(DriveTrain_VelocityRatioGeometryFactorPair_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_VelocityRatioGeometryFactorPair_Vector_push_back(self, x)

    def front(self):
        r"""front(DriveTrain_VelocityRatioGeometryFactorPair_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_VelocityRatioGeometryFactorPair_Vector_front(self)

    def back(self):
        r"""back(DriveTrain_VelocityRatioGeometryFactorPair_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_VelocityRatioGeometryFactorPair_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(DriveTrain_VelocityRatioGeometryFactorPair_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_VelocityRatioGeometryFactorPair_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DriveTrain_VelocityRatioGeometryFactorPair_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::size_type

        resize(DriveTrain_VelocityRatioGeometryFactorPair_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::size_type new_size, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_VelocityRatioGeometryFactorPair_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DriveTrain_VelocityRatioGeometryFactorPair_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::iterator
        x: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::value_type const &

        insert(DriveTrain_VelocityRatioGeometryFactorPair_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::iterator
        n: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_VelocityRatioGeometryFactorPair_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(DriveTrain_VelocityRatioGeometryFactorPair_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::size_type

        """
        return _DriveTrainSwig.DriveTrain_VelocityRatioGeometryFactorPair_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(DriveTrain_VelocityRatioGeometryFactorPair_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair > >::size_type"""
        return _DriveTrainSwig.DriveTrain_VelocityRatioGeometryFactorPair_Vector_capacity(self)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_VelocityRatioGeometryFactorPair_Vector

# Register DriveTrain_VelocityRatioGeometryFactorPair_Vector in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_VelocityRatioGeometryFactorPair_Vector_swigregister(DriveTrain_VelocityRatioGeometryFactorPair_Vector)

class DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector self) -> SwigPyIterator"""
        return _DriveTrainSwig.DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector___bool__(self)

    def __len__(self):
        r"""__len__(DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::size_type"""
        return _DriveTrainSwig.DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::difference_type j) -> DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::difference_type

        __setslice__(DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::difference_type j, DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::difference_type
        v: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair >,std::allocator< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > > > const &

        """
        return _DriveTrainSwig.DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::difference_type

        __delitem__(DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _DriveTrainSwig.DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector self, PySliceObject * slice) -> DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::difference_type i) -> std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector self, PySliceObject * slice, DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair >,std::allocator< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > > > const &

        __setitem__(DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::difference_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::value_type"""
        return _DriveTrainSwig.DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector_pop(self)

    def append(self, x):
        r"""
        append(DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector_append(self, x)

    def empty(self):
        r"""empty(DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector_empty(self)

    def size(self):
        r"""size(DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::size_type"""
        return _DriveTrainSwig.DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector_size(self)

    def swap(self, v):
        r"""
        swap(DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector self, DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > > &

        """
        return _DriveTrainSwig.DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector_swap(self, v)

    def begin(self):
        r"""begin(DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::iterator"""
        return _DriveTrainSwig.DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector_begin(self)

    def end(self):
        r"""end(DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::iterator"""
        return _DriveTrainSwig.DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector_end(self)

    def rbegin(self):
        r"""rbegin(DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector_rbegin(self)

    def rend(self):
        r"""rend(DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector_rend(self)

    def clear(self):
        r"""clear(DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector self)"""
        return _DriveTrainSwig.DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::allocator_type"""
        return _DriveTrainSwig.DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector self)"""
        return _DriveTrainSwig.DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::iterator pos) -> std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::iterator

        erase(DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::iterator first, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::iterator last) -> std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::iterator
        last: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::iterator

        """
        return _DriveTrainSwig.DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector self) -> DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector
        __init__(DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector self, DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector other) -> DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > > const &

        __init__(DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::size_type size) -> DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::size_type

        __init__(DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::size_type size, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::value_type const & value) -> DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::size_type
        value: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::value_type const &

        """
        _DriveTrainSwig.DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector_swiginit(self, _DriveTrainSwig.new_DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector_push_back(self, x)

    def front(self):
        r"""front(DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector_front(self)

    def back(self):
        r"""back(DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::size_type

        resize(DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::size_type new_size, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::iterator
        x: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::value_type const &

        insert(DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::iterator
        n: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::size_type

        """
        return _DriveTrainSwig.DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair > >::size_type"""
        return _DriveTrainSwig.DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector_capacity(self)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector

# Register DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector_swigregister(DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector)

class DriveTrain_ViscousGear_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DriveTrain_ViscousGear_Vector self) -> SwigPyIterator"""
        return _DriveTrainSwig.DriveTrain_ViscousGear_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DriveTrain_ViscousGear_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_ViscousGear_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DriveTrain_ViscousGear_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_ViscousGear_Vector___bool__(self)

    def __len__(self):
        r"""__len__(DriveTrain_ViscousGear_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::size_type"""
        return _DriveTrainSwig.DriveTrain_ViscousGear_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(DriveTrain_ViscousGear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::difference_type j) -> DriveTrain_ViscousGear_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_ViscousGear_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DriveTrain_ViscousGear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::difference_type

        __setslice__(DriveTrain_ViscousGear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::difference_type j, DriveTrain_ViscousGear_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::difference_type
        v: std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear >,std::allocator< std::shared_ptr< openplx::DriveTrain::ViscousGear > > > const &

        """
        return _DriveTrainSwig.DriveTrain_ViscousGear_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(DriveTrain_ViscousGear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::difference_type
        j: std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_ViscousGear_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DriveTrain_ViscousGear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::difference_type

        __delitem__(DriveTrain_ViscousGear_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _DriveTrainSwig.DriveTrain_ViscousGear_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DriveTrain_ViscousGear_Vector self, PySliceObject * slice) -> DriveTrain_ViscousGear_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DriveTrain_ViscousGear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::difference_type i) -> std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_ViscousGear_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DriveTrain_ViscousGear_Vector self, PySliceObject * slice, DriveTrain_ViscousGear_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear >,std::allocator< std::shared_ptr< openplx::DriveTrain::ViscousGear > > > const &

        __setitem__(DriveTrain_ViscousGear_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DriveTrain_ViscousGear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::difference_type i, std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::difference_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_ViscousGear_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(DriveTrain_ViscousGear_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::value_type"""
        return _DriveTrainSwig.DriveTrain_ViscousGear_Vector_pop(self)

    def append(self, x):
        r"""
        append(DriveTrain_ViscousGear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_ViscousGear_Vector_append(self, x)

    def empty(self):
        r"""empty(DriveTrain_ViscousGear_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_ViscousGear_Vector_empty(self)

    def size(self):
        r"""size(DriveTrain_ViscousGear_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::size_type"""
        return _DriveTrainSwig.DriveTrain_ViscousGear_Vector_size(self)

    def swap(self, v):
        r"""
        swap(DriveTrain_ViscousGear_Vector self, DriveTrain_ViscousGear_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > > &

        """
        return _DriveTrainSwig.DriveTrain_ViscousGear_Vector_swap(self, v)

    def begin(self):
        r"""begin(DriveTrain_ViscousGear_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::iterator"""
        return _DriveTrainSwig.DriveTrain_ViscousGear_Vector_begin(self)

    def end(self):
        r"""end(DriveTrain_ViscousGear_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::iterator"""
        return _DriveTrainSwig.DriveTrain_ViscousGear_Vector_end(self)

    def rbegin(self):
        r"""rbegin(DriveTrain_ViscousGear_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_ViscousGear_Vector_rbegin(self)

    def rend(self):
        r"""rend(DriveTrain_ViscousGear_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_ViscousGear_Vector_rend(self)

    def clear(self):
        r"""clear(DriveTrain_ViscousGear_Vector self)"""
        return _DriveTrainSwig.DriveTrain_ViscousGear_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DriveTrain_ViscousGear_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::allocator_type"""
        return _DriveTrainSwig.DriveTrain_ViscousGear_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DriveTrain_ViscousGear_Vector self)"""
        return _DriveTrainSwig.DriveTrain_ViscousGear_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DriveTrain_ViscousGear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::iterator pos) -> std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::iterator

        erase(DriveTrain_ViscousGear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::iterator first, std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::iterator last) -> std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::iterator
        last: std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::iterator

        """
        return _DriveTrainSwig.DriveTrain_ViscousGear_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DriveTrain_ViscousGear_Vector self) -> DriveTrain_ViscousGear_Vector
        __init__(DriveTrain_ViscousGear_Vector self, DriveTrain_ViscousGear_Vector other) -> DriveTrain_ViscousGear_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > > const &

        __init__(DriveTrain_ViscousGear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::size_type size) -> DriveTrain_ViscousGear_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::size_type

        __init__(DriveTrain_ViscousGear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::size_type size, std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::value_type const & value) -> DriveTrain_ViscousGear_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::size_type
        value: std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::value_type const &

        """
        _DriveTrainSwig.DriveTrain_ViscousGear_Vector_swiginit(self, _DriveTrainSwig.new_DriveTrain_ViscousGear_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(DriveTrain_ViscousGear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_ViscousGear_Vector_push_back(self, x)

    def front(self):
        r"""front(DriveTrain_ViscousGear_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_ViscousGear_Vector_front(self)

    def back(self):
        r"""back(DriveTrain_ViscousGear_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_ViscousGear_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(DriveTrain_ViscousGear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_ViscousGear_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DriveTrain_ViscousGear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::size_type

        resize(DriveTrain_ViscousGear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::size_type new_size, std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_ViscousGear_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DriveTrain_ViscousGear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::value_type const & x) -> std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::iterator
        x: std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::value_type const &

        insert(DriveTrain_ViscousGear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::iterator pos, std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::size_type n, std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::iterator
        n: std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::size_type
        x: std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_ViscousGear_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(DriveTrain_ViscousGear_Vector self, std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::size_type

        """
        return _DriveTrainSwig.DriveTrain_ViscousGear_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(DriveTrain_ViscousGear_Vector self) -> std::vector< std::shared_ptr< openplx::DriveTrain::ViscousGear > >::size_type"""
        return _DriveTrainSwig.DriveTrain_ViscousGear_Vector_capacity(self)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_ViscousGear_Vector

# Register DriveTrain_ViscousGear_Vector in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_ViscousGear_Vector_swigregister(DriveTrain_ViscousGear_Vector)

class DriveTrain_Actuator(openplx.Core.Object):
    r"""Proxy of C++ openplx::DriveTrain::Actuator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(DriveTrain_Actuator self) -> DriveTrain_Actuator"""
        _DriveTrainSwig.DriveTrain_Actuator_swiginit(self, _DriveTrainSwig.new_DriveTrain_Actuator())

    def connector_1d(self):
        r"""connector_1d(DriveTrain_Actuator self) -> std::shared_ptr< openplx::Physics1D::Charges::MateConnector >"""
        return _DriveTrainSwig.DriveTrain_Actuator_connector_1d(self)

    def mate_3d(self):
        r"""mate_3d(DriveTrain_Actuator self) -> std::shared_ptr< openplx::Physics3D::Interactions::Mate >"""
        return _DriveTrainSwig.DriveTrain_Actuator_mate_3d(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(DriveTrain_Actuator self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _DriveTrainSwig.DriveTrain_Actuator_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(DriveTrain_Actuator self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _DriveTrainSwig.DriveTrain_Actuator_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(DriveTrain_Actuator self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _DriveTrainSwig.DriveTrain_Actuator_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(DriveTrain_Actuator self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _DriveTrainSwig.DriveTrain_Actuator_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(DriveTrain_Actuator self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _DriveTrainSwig.DriveTrain_Actuator_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(DriveTrain_Actuator self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _DriveTrainSwig.DriveTrain_Actuator_triggerOnInit(self, context)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_Actuator

# Register DriveTrain_Actuator in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_Actuator_swigregister(DriveTrain_Actuator)

class DriveTrain_ManualClutch(openplx.Physics1D.Physics1D_Interactions_Mate):
    r"""Proxy of C++ openplx::DriveTrain::ManualClutch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(DriveTrain_ManualClutch self) -> DriveTrain_ManualClutch"""
        _DriveTrainSwig.DriveTrain_ManualClutch_swiginit(self, _DriveTrainSwig.new_DriveTrain_ManualClutch())

    def initial_engagement_fraction(self):
        r"""initial_engagement_fraction(DriveTrain_ManualClutch self) -> double"""
        return _DriveTrainSwig.DriveTrain_ManualClutch_initial_engagement_fraction(self)

    def torque_capacity(self):
        r"""torque_capacity(DriveTrain_ManualClutch self) -> double"""
        return _DriveTrainSwig.DriveTrain_ManualClutch_torque_capacity(self)

    def min_relative_slip_ratio(self):
        r"""min_relative_slip_ratio(DriveTrain_ManualClutch self) -> double"""
        return _DriveTrainSwig.DriveTrain_ManualClutch_min_relative_slip_ratio(self)

    def slip_velocity_output(self):
        r"""slip_velocity_output(DriveTrain_ManualClutch self) -> std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput >"""
        return _DriveTrainSwig.DriveTrain_ManualClutch_slip_velocity_output(self)

    def torque_output(self):
        r"""torque_output(DriveTrain_ManualClutch self) -> std::shared_ptr< openplx::Physics::Signals::Torque1DOutput >"""
        return _DriveTrainSwig.DriveTrain_ManualClutch_torque_output(self)

    def engagement_fraction_input(self):
        r"""engagement_fraction_input(DriveTrain_ManualClutch self) -> std::shared_ptr< openplx::Physics::Signals::FractionInput >"""
        return _DriveTrainSwig.DriveTrain_ManualClutch_engagement_fraction_input(self)

    def engagement_fraction_output(self):
        r"""engagement_fraction_output(DriveTrain_ManualClutch self) -> std::shared_ptr< openplx::Physics::Signals::FractionOutput >"""
        return _DriveTrainSwig.DriveTrain_ManualClutch_engagement_fraction_output(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(DriveTrain_ManualClutch self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _DriveTrainSwig.DriveTrain_ManualClutch_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(DriveTrain_ManualClutch self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _DriveTrainSwig.DriveTrain_ManualClutch_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(DriveTrain_ManualClutch self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _DriveTrainSwig.DriveTrain_ManualClutch_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(DriveTrain_ManualClutch self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _DriveTrainSwig.DriveTrain_ManualClutch_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(DriveTrain_ManualClutch self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _DriveTrainSwig.DriveTrain_ManualClutch_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(DriveTrain_ManualClutch self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _DriveTrainSwig.DriveTrain_ManualClutch_triggerOnInit(self, context)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_ManualClutch

# Register DriveTrain_ManualClutch in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_ManualClutch_swigregister(DriveTrain_ManualClutch)

class DriveTrain_AutomaticClutch(DriveTrain_ManualClutch):
    r"""Proxy of C++ openplx::DriveTrain::AutomaticClutch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(DriveTrain_AutomaticClutch self) -> DriveTrain_AutomaticClutch"""
        _DriveTrainSwig.DriveTrain_AutomaticClutch_swiginit(self, _DriveTrainSwig.new_DriveTrain_AutomaticClutch())

    def engagement_duration(self):
        r"""engagement_duration(DriveTrain_AutomaticClutch self) -> double"""
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_engagement_duration(self)

    def disengagement_duration(self):
        r"""disengagement_duration(DriveTrain_AutomaticClutch self) -> double"""
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_disengagement_duration(self)

    def initially_engaged(self):
        r"""initially_engaged(DriveTrain_AutomaticClutch self) -> bool"""
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_initially_engaged(self)

    def engage_input(self):
        r"""engage_input(DriveTrain_AutomaticClutch self) -> std::shared_ptr< openplx::Physics::Signals::EngageInput >"""
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_engage_input(self)

    def engaged_output(self):
        r"""engaged_output(DriveTrain_AutomaticClutch self) -> std::shared_ptr< openplx::Physics::Signals::EngagedOutput >"""
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_engaged_output(self)

    def engagement_duration_input(self):
        r"""engagement_duration_input(DriveTrain_AutomaticClutch self) -> std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput >"""
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_engagement_duration_input(self)

    def engagement_duration_output(self):
        r"""engagement_duration_output(DriveTrain_AutomaticClutch self) -> std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput >"""
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_engagement_duration_output(self)

    def disengagement_duration_input(self):
        r"""disengagement_duration_input(DriveTrain_AutomaticClutch self) -> std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput >"""
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_disengagement_duration_input(self)

    def disengagement_duration_output(self):
        r"""disengagement_duration_output(DriveTrain_AutomaticClutch self) -> std::shared_ptr< openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput >"""
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_disengagement_duration_output(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(DriveTrain_AutomaticClutch self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(DriveTrain_AutomaticClutch self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(DriveTrain_AutomaticClutch self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(DriveTrain_AutomaticClutch self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(DriveTrain_AutomaticClutch self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(DriveTrain_AutomaticClutch self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _DriveTrainSwig.DriveTrain_AutomaticClutch_triggerOnInit(self, context)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_AutomaticClutch

# Register DriveTrain_AutomaticClutch in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_AutomaticClutch_swigregister(DriveTrain_AutomaticClutch)

class DriveTrain_CombustionEngine(openplx.Physics.Physics_Interactions_Interaction1DOF):
    r"""Proxy of C++ openplx::DriveTrain::CombustionEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(DriveTrain_CombustionEngine self) -> DriveTrain_CombustionEngine"""
        _DriveTrainSwig.DriveTrain_CombustionEngine_swiginit(self, _DriveTrainSwig.new_DriveTrain_CombustionEngine())

    def displacement_volume(self):
        r"""displacement_volume(DriveTrain_CombustionEngine self) -> double"""
        return _DriveTrainSwig.DriveTrain_CombustionEngine_displacement_volume(self)

    def max_torque(self):
        r"""max_torque(DriveTrain_CombustionEngine self) -> double"""
        return _DriveTrainSwig.DriveTrain_CombustionEngine_max_torque(self)

    def max_torque_RPM(self):
        r"""max_torque_RPM(DriveTrain_CombustionEngine self) -> double"""
        return _DriveTrainSwig.DriveTrain_CombustionEngine_max_torque_RPM(self)

    def max_power_RPM(self):
        r"""max_power_RPM(DriveTrain_CombustionEngine self) -> double"""
        return _DriveTrainSwig.DriveTrain_CombustionEngine_max_power_RPM(self)

    def idle_RPM(self):
        r"""idle_RPM(DriveTrain_CombustionEngine self) -> double"""
        return _DriveTrainSwig.DriveTrain_CombustionEngine_idle_RPM(self)

    def crank_shaft_inertia(self):
        r"""crank_shaft_inertia(DriveTrain_CombustionEngine self) -> double"""
        return _DriveTrainSwig.DriveTrain_CombustionEngine_crank_shaft_inertia(self)

    def initial_throttle(self):
        r"""initial_throttle(DriveTrain_CombustionEngine self) -> double"""
        return _DriveTrainSwig.DriveTrain_CombustionEngine_initial_throttle(self)

    def torque_output(self):
        r"""torque_output(DriveTrain_CombustionEngine self) -> std::shared_ptr< openplx::Physics::Signals::Torque1DOutput >"""
        return _DriveTrainSwig.DriveTrain_CombustionEngine_torque_output(self)

    def throttle_input(self):
        r"""throttle_input(DriveTrain_CombustionEngine self) -> std::shared_ptr< openplx::Physics::Signals::FractionInput >"""
        return _DriveTrainSwig.DriveTrain_CombustionEngine_throttle_input(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(DriveTrain_CombustionEngine self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _DriveTrainSwig.DriveTrain_CombustionEngine_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(DriveTrain_CombustionEngine self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _DriveTrainSwig.DriveTrain_CombustionEngine_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(DriveTrain_CombustionEngine self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _DriveTrainSwig.DriveTrain_CombustionEngine_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(DriveTrain_CombustionEngine self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _DriveTrainSwig.DriveTrain_CombustionEngine_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(DriveTrain_CombustionEngine self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _DriveTrainSwig.DriveTrain_CombustionEngine_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(DriveTrain_CombustionEngine self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _DriveTrainSwig.DriveTrain_CombustionEngine_triggerOnInit(self, context)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_CombustionEngine

# Register DriveTrain_CombustionEngine in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_CombustionEngine_swigregister(DriveTrain_CombustionEngine)

class DriveTrain_Differential(openplx.Physics1D.Physics1D_Interactions_Mate):
    r"""Proxy of C++ openplx::DriveTrain::Differential class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(DriveTrain_Differential self) -> DriveTrain_Differential"""
        _DriveTrainSwig.DriveTrain_Differential_swiginit(self, _DriveTrainSwig.new_DriveTrain_Differential())

    def drive_shaft(self):
        r"""drive_shaft(DriveTrain_Differential self) -> std::shared_ptr< openplx::DriveTrain::Shaft >"""
        return _DriveTrainSwig.DriveTrain_Differential_drive_shaft(self)

    def left_axle_shaft(self):
        r"""left_axle_shaft(DriveTrain_Differential self) -> std::shared_ptr< openplx::DriveTrain::Shaft >"""
        return _DriveTrainSwig.DriveTrain_Differential_left_axle_shaft(self)

    def right_axle_shaft(self):
        r"""right_axle_shaft(DriveTrain_Differential self) -> std::shared_ptr< openplx::DriveTrain::Shaft >"""
        return _DriveTrainSwig.DriveTrain_Differential_right_axle_shaft(self)

    def gear_ratio(self):
        r"""gear_ratio(DriveTrain_Differential self) -> double"""
        return _DriveTrainSwig.DriveTrain_Differential_gear_ratio(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(DriveTrain_Differential self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _DriveTrainSwig.DriveTrain_Differential_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(DriveTrain_Differential self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _DriveTrainSwig.DriveTrain_Differential_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(DriveTrain_Differential self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _DriveTrainSwig.DriveTrain_Differential_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(DriveTrain_Differential self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _DriveTrainSwig.DriveTrain_Differential_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(DriveTrain_Differential self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _DriveTrainSwig.DriveTrain_Differential_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(DriveTrain_Differential self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _DriveTrainSwig.DriveTrain_Differential_triggerOnInit(self, context)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_Differential

# Register DriveTrain_Differential in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_Differential_swigregister(DriveTrain_Differential)

class DriveTrain_EmpiricalTorqueConverter(openplx.Physics1D.Physics1D_Interactions_Mate):
    r"""Proxy of C++ openplx::DriveTrain::EmpiricalTorqueConverter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(DriveTrain_EmpiricalTorqueConverter self) -> DriveTrain_EmpiricalTorqueConverter"""
        _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_swiginit(self, _DriveTrainSwig.new_DriveTrain_EmpiricalTorqueConverter())

    def oil_density(self):
        r"""oil_density(DriveTrain_EmpiricalTorqueConverter self) -> double"""
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_oil_density(self)

    def diameter(self):
        r"""diameter(DriveTrain_EmpiricalTorqueConverter self) -> double"""
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_diameter(self)

    def lock_up_time(self):
        r"""lock_up_time(DriveTrain_EmpiricalTorqueConverter self) -> double"""
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_lock_up_time(self)

    def lock_up_input(self):
        r"""lock_up_input(DriveTrain_EmpiricalTorqueConverter self) -> std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockUpInput >"""
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_lock_up_input(self)

    def locked_up_output(self):
        r"""locked_up_output(DriveTrain_EmpiricalTorqueConverter self) -> std::shared_ptr< openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput >"""
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_locked_up_output(self)

    def velocity_ratio_torque_multiplier_list(self):
        r"""velocity_ratio_torque_multiplier_list(DriveTrain_EmpiricalTorqueConverter self) -> DriveTrain_VelocityRatioTorqueMultiplicationPair_Vector"""
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_velocity_ratio_torque_multiplier_list(self)

    def velocity_ratio_geometry_factor_list(self):
        r"""velocity_ratio_geometry_factor_list(DriveTrain_EmpiricalTorqueConverter self) -> DriveTrain_VelocityRatioGeometryFactorPair_Vector"""
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_velocity_ratio_geometry_factor_list(self)

    def factor_pair1(self):
        r"""factor_pair1(DriveTrain_EmpiricalTorqueConverter self) -> std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair >"""
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_factor_pair1(self)

    def factor_pair2(self):
        r"""factor_pair2(DriveTrain_EmpiricalTorqueConverter self) -> std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair >"""
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_factor_pair2(self)

    def factor_pair3(self):
        r"""factor_pair3(DriveTrain_EmpiricalTorqueConverter self) -> std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair >"""
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_factor_pair3(self)

    def factor_pair4(self):
        r"""factor_pair4(DriveTrain_EmpiricalTorqueConverter self) -> std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair >"""
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_factor_pair4(self)

    def factor_pair5(self):
        r"""factor_pair5(DriveTrain_EmpiricalTorqueConverter self) -> std::shared_ptr< openplx::DriveTrain::VelocityRatioGeometryFactorPair >"""
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_factor_pair5(self)

    def mult_pair1(self):
        r"""mult_pair1(DriveTrain_EmpiricalTorqueConverter self) -> std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair >"""
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_mult_pair1(self)

    def mult_pair2(self):
        r"""mult_pair2(DriveTrain_EmpiricalTorqueConverter self) -> std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair >"""
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_mult_pair2(self)

    def mult_pair3(self):
        r"""mult_pair3(DriveTrain_EmpiricalTorqueConverter self) -> std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair >"""
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_mult_pair3(self)

    def mult_pair4(self):
        r"""mult_pair4(DriveTrain_EmpiricalTorqueConverter self) -> std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair >"""
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_mult_pair4(self)

    def mult_pair5(self):
        r"""mult_pair5(DriveTrain_EmpiricalTorqueConverter self) -> std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair >"""
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_mult_pair5(self)

    def mult_pair6(self):
        r"""mult_pair6(DriveTrain_EmpiricalTorqueConverter self) -> std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair >"""
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_mult_pair6(self)

    def mult_pair7(self):
        r"""mult_pair7(DriveTrain_EmpiricalTorqueConverter self) -> std::shared_ptr< openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair >"""
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_mult_pair7(self)

    def slip_velocity_output(self):
        r"""slip_velocity_output(DriveTrain_EmpiricalTorqueConverter self) -> std::shared_ptr< openplx::Physics::Signals::RelativeVelocity1DOutput >"""
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_slip_velocity_output(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(DriveTrain_EmpiricalTorqueConverter self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(DriveTrain_EmpiricalTorqueConverter self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(DriveTrain_EmpiricalTorqueConverter self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(DriveTrain_EmpiricalTorqueConverter self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(DriveTrain_EmpiricalTorqueConverter self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(DriveTrain_EmpiricalTorqueConverter self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_triggerOnInit(self, context)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_EmpiricalTorqueConverter

# Register DriveTrain_EmpiricalTorqueConverter in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_EmpiricalTorqueConverter_swigregister(DriveTrain_EmpiricalTorqueConverter)

class DriveTrain_Gear(openplx.Physics1D.Physics1D_Interactions_Mate):
    r"""Proxy of C++ openplx::DriveTrain::Gear class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(DriveTrain_Gear self) -> DriveTrain_Gear"""
        _DriveTrainSwig.DriveTrain_Gear_swiginit(self, _DriveTrainSwig.new_DriveTrain_Gear())

    def ratio(self):
        r"""ratio(DriveTrain_Gear self) -> double"""
        return _DriveTrainSwig.DriveTrain_Gear_ratio(self)

    def torque_output(self):
        r"""torque_output(DriveTrain_Gear self) -> std::shared_ptr< openplx::Physics::Signals::Torque1DOutput >"""
        return _DriveTrainSwig.DriveTrain_Gear_torque_output(self)

    def ratio_input(self):
        r"""ratio_input(DriveTrain_Gear self) -> std::shared_ptr< openplx::Physics::Signals::FractionInput >"""
        return _DriveTrainSwig.DriveTrain_Gear_ratio_input(self)

    def ratio_output(self):
        r"""ratio_output(DriveTrain_Gear self) -> std::shared_ptr< openplx::Physics::Signals::FractionOutput >"""
        return _DriveTrainSwig.DriveTrain_Gear_ratio_output(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(DriveTrain_Gear self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _DriveTrainSwig.DriveTrain_Gear_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(DriveTrain_Gear self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _DriveTrainSwig.DriveTrain_Gear_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(DriveTrain_Gear self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _DriveTrainSwig.DriveTrain_Gear_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(DriveTrain_Gear self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _DriveTrainSwig.DriveTrain_Gear_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(DriveTrain_Gear self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _DriveTrainSwig.DriveTrain_Gear_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(DriveTrain_Gear self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _DriveTrainSwig.DriveTrain_Gear_triggerOnInit(self, context)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_Gear

# Register DriveTrain_Gear in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_Gear_swigregister(DriveTrain_Gear)

class DriveTrain_FlexibleGear(DriveTrain_Gear):
    r"""Proxy of C++ openplx::DriveTrain::FlexibleGear class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(DriveTrain_FlexibleGear self) -> DriveTrain_FlexibleGear"""
        _DriveTrainSwig.DriveTrain_FlexibleGear_swiginit(self, _DriveTrainSwig.new_DriveTrain_FlexibleGear())

    def flexibility(self):
        r"""flexibility(DriveTrain_FlexibleGear self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility >"""
        return _DriveTrainSwig.DriveTrain_FlexibleGear_flexibility(self)

    def dissipation(self):
        r"""dissipation(DriveTrain_FlexibleGear self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation >"""
        return _DriveTrainSwig.DriveTrain_FlexibleGear_dissipation(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(DriveTrain_FlexibleGear self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _DriveTrainSwig.DriveTrain_FlexibleGear_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(DriveTrain_FlexibleGear self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _DriveTrainSwig.DriveTrain_FlexibleGear_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(DriveTrain_FlexibleGear self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _DriveTrainSwig.DriveTrain_FlexibleGear_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(DriveTrain_FlexibleGear self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _DriveTrainSwig.DriveTrain_FlexibleGear_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(DriveTrain_FlexibleGear self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _DriveTrainSwig.DriveTrain_FlexibleGear_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(DriveTrain_FlexibleGear self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _DriveTrainSwig.DriveTrain_FlexibleGear_triggerOnInit(self, context)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_FlexibleGear

# Register DriveTrain_FlexibleGear in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_FlexibleGear_swigregister(DriveTrain_FlexibleGear)

class DriveTrain_GearBox(openplx.Physics1D.Physics1D_Interactions_Mate):
    r"""Proxy of C++ openplx::DriveTrain::GearBox class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(DriveTrain_GearBox self) -> DriveTrain_GearBox"""
        _DriveTrainSwig.DriveTrain_GearBox_swiginit(self, _DriveTrainSwig.new_DriveTrain_GearBox())

    def forward_gears(self):
        r"""forward_gears(DriveTrain_GearBox self) -> DoubleVector"""
        return _DriveTrainSwig.DriveTrain_GearBox_forward_gears(self)

    def reverse_gears(self):
        r"""reverse_gears(DriveTrain_GearBox self) -> DoubleVector"""
        return _DriveTrainSwig.DriveTrain_GearBox_reverse_gears(self)

    def initial_gear(self):
        r"""initial_gear(DriveTrain_GearBox self) -> int64_t"""
        return _DriveTrainSwig.DriveTrain_GearBox_initial_gear(self)

    def flexibility(self):
        r"""flexibility(DriveTrain_GearBox self) -> std::shared_ptr< openplx::Physics::Interactions::Flexibility::DefaultFlexibility >"""
        return _DriveTrainSwig.DriveTrain_GearBox_flexibility(self)

    def dissipation(self):
        r"""dissipation(DriveTrain_GearBox self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::DefaultDissipation >"""
        return _DriveTrainSwig.DriveTrain_GearBox_dissipation(self)

    def torque_output(self):
        r"""torque_output(DriveTrain_GearBox self) -> std::shared_ptr< openplx::Physics::Signals::Torque1DOutput >"""
        return _DriveTrainSwig.DriveTrain_GearBox_torque_output(self)

    def gear_selection_input(self):
        r"""gear_selection_input(DriveTrain_GearBox self) -> std::shared_ptr< openplx::Physics::Signals::IntInput >"""
        return _DriveTrainSwig.DriveTrain_GearBox_gear_selection_input(self)

    def gear_selection_output(self):
        r"""gear_selection_output(DriveTrain_GearBox self) -> std::shared_ptr< openplx::Physics::Signals::IntOutput >"""
        return _DriveTrainSwig.DriveTrain_GearBox_gear_selection_output(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(DriveTrain_GearBox self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _DriveTrainSwig.DriveTrain_GearBox_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(DriveTrain_GearBox self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _DriveTrainSwig.DriveTrain_GearBox_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(DriveTrain_GearBox self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _DriveTrainSwig.DriveTrain_GearBox_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(DriveTrain_GearBox self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _DriveTrainSwig.DriveTrain_GearBox_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(DriveTrain_GearBox self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _DriveTrainSwig.DriveTrain_GearBox_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(DriveTrain_GearBox self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _DriveTrainSwig.DriveTrain_GearBox_triggerOnInit(self, context)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_GearBox

# Register DriveTrain_GearBox in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_GearBox_swigregister(DriveTrain_GearBox)

class DriveTrain_HingeActuator(DriveTrain_Actuator):
    r"""Proxy of C++ openplx::DriveTrain::HingeActuator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(DriveTrain_HingeActuator self) -> DriveTrain_HingeActuator"""
        _DriveTrainSwig.DriveTrain_HingeActuator_swiginit(self, _DriveTrainSwig.new_DriveTrain_HingeActuator())

    def mate_3d(self):
        r"""mate_3d(DriveTrain_HingeActuator self) -> std::shared_ptr< openplx::Physics3D::Interactions::Hinge >"""
        return _DriveTrainSwig.DriveTrain_HingeActuator_mate_3d(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(DriveTrain_HingeActuator self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _DriveTrainSwig.DriveTrain_HingeActuator_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(DriveTrain_HingeActuator self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _DriveTrainSwig.DriveTrain_HingeActuator_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(DriveTrain_HingeActuator self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _DriveTrainSwig.DriveTrain_HingeActuator_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(DriveTrain_HingeActuator self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _DriveTrainSwig.DriveTrain_HingeActuator_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(DriveTrain_HingeActuator self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _DriveTrainSwig.DriveTrain_HingeActuator_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(DriveTrain_HingeActuator self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _DriveTrainSwig.DriveTrain_HingeActuator_triggerOnInit(self, context)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_HingeActuator

# Register DriveTrain_HingeActuator in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_HingeActuator_swigregister(DriveTrain_HingeActuator)

class DriveTrain_PrismaticActuator(DriveTrain_Actuator):
    r"""Proxy of C++ openplx::DriveTrain::PrismaticActuator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(DriveTrain_PrismaticActuator self) -> DriveTrain_PrismaticActuator"""
        _DriveTrainSwig.DriveTrain_PrismaticActuator_swiginit(self, _DriveTrainSwig.new_DriveTrain_PrismaticActuator())

    def mate_3d(self):
        r"""mate_3d(DriveTrain_PrismaticActuator self) -> std::shared_ptr< openplx::Physics3D::Interactions::Prismatic >"""
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_mate_3d(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(DriveTrain_PrismaticActuator self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(DriveTrain_PrismaticActuator self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(DriveTrain_PrismaticActuator self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(DriveTrain_PrismaticActuator self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(DriveTrain_PrismaticActuator self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(DriveTrain_PrismaticActuator self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_triggerOnInit(self, context)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_PrismaticActuator

# Register DriveTrain_PrismaticActuator in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_PrismaticActuator_swigregister(DriveTrain_PrismaticActuator)

class DriveTrain_Shaft(openplx.Physics1D.Physics1D_Bodies_RotationalBody):
    r"""Proxy of C++ openplx::DriveTrain::Shaft class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(DriveTrain_Shaft self) -> DriveTrain_Shaft"""
        _DriveTrainSwig.DriveTrain_Shaft_swiginit(self, _DriveTrainSwig.new_DriveTrain_Shaft())

    def input(self):
        r"""input(DriveTrain_Shaft self) -> std::shared_ptr< openplx::Physics1D::Charges::MateConnector >"""
        return _DriveTrainSwig.DriveTrain_Shaft_input(self)

    def output(self):
        r"""output(DriveTrain_Shaft self) -> std::shared_ptr< openplx::Physics1D::Charges::MateConnector >"""
        return _DriveTrainSwig.DriveTrain_Shaft_output(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(DriveTrain_Shaft self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _DriveTrainSwig.DriveTrain_Shaft_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(DriveTrain_Shaft self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _DriveTrainSwig.DriveTrain_Shaft_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(DriveTrain_Shaft self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _DriveTrainSwig.DriveTrain_Shaft_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(DriveTrain_Shaft self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _DriveTrainSwig.DriveTrain_Shaft_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(DriveTrain_Shaft self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _DriveTrainSwig.DriveTrain_Shaft_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(DriveTrain_Shaft self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _DriveTrainSwig.DriveTrain_Shaft_triggerOnInit(self, context)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_Shaft

# Register DriveTrain_Shaft in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_Shaft_swigregister(DriveTrain_Shaft)

class DriveTrain_Signals_AutomaticClutchDisengagementDurationInput(openplx.Physics.Physics_Signals_DurationInput):
    r"""Proxy of C++ openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationInput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput self) -> DriveTrain_Signals_AutomaticClutchDisengagementDurationInput"""
        _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_swiginit(self, _DriveTrainSwig.new_DriveTrain_Signals_AutomaticClutchDisengagementDurationInput())

    def setDynamic(self, key, value):
        r"""
        setDynamic(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_triggerOnInit(self, context)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_Signals_AutomaticClutchDisengagementDurationInput

# Register DriveTrain_Signals_AutomaticClutchDisengagementDurationInput in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationInput_swigregister(DriveTrain_Signals_AutomaticClutchDisengagementDurationInput)

class DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput(openplx.Physics.Physics_Signals_DurationOutput):
    r"""Proxy of C++ openplx::DriveTrain::Signals::AutomaticClutchDisengagementDurationOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput self) -> DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput"""
        _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_swiginit(self, _DriveTrainSwig.new_DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput())

    def setDynamic(self, key, value):
        r"""
        setDynamic(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_triggerOnInit(self, context)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput

# Register DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput_swigregister(DriveTrain_Signals_AutomaticClutchDisengagementDurationOutput)

class DriveTrain_Signals_AutomaticClutchEngagementDurationInput(openplx.Physics.Physics_Signals_DurationInput):
    r"""Proxy of C++ openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationInput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(DriveTrain_Signals_AutomaticClutchEngagementDurationInput self) -> DriveTrain_Signals_AutomaticClutchEngagementDurationInput"""
        _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationInput_swiginit(self, _DriveTrainSwig.new_DriveTrain_Signals_AutomaticClutchEngagementDurationInput())

    def setDynamic(self, key, value):
        r"""
        setDynamic(DriveTrain_Signals_AutomaticClutchEngagementDurationInput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationInput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(DriveTrain_Signals_AutomaticClutchEngagementDurationInput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationInput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(DriveTrain_Signals_AutomaticClutchEngagementDurationInput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationInput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(DriveTrain_Signals_AutomaticClutchEngagementDurationInput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationInput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(DriveTrain_Signals_AutomaticClutchEngagementDurationInput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationInput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(DriveTrain_Signals_AutomaticClutchEngagementDurationInput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationInput_triggerOnInit(self, context)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_Signals_AutomaticClutchEngagementDurationInput

# Register DriveTrain_Signals_AutomaticClutchEngagementDurationInput in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationInput_swigregister(DriveTrain_Signals_AutomaticClutchEngagementDurationInput)

class DriveTrain_Signals_AutomaticClutchEngagementDurationOutput(openplx.Physics.Physics_Signals_DurationOutput):
    r"""Proxy of C++ openplx::DriveTrain::Signals::AutomaticClutchEngagementDurationOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput self) -> DriveTrain_Signals_AutomaticClutchEngagementDurationOutput"""
        _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_swiginit(self, _DriveTrainSwig.new_DriveTrain_Signals_AutomaticClutchEngagementDurationOutput())

    def setDynamic(self, key, value):
        r"""
        setDynamic(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_triggerOnInit(self, context)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_Signals_AutomaticClutchEngagementDurationOutput

# Register DriveTrain_Signals_AutomaticClutchEngagementDurationOutput in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_Signals_AutomaticClutchEngagementDurationOutput_swigregister(DriveTrain_Signals_AutomaticClutchEngagementDurationOutput)

class DriveTrain_Signals_TorqueConverterLockUpInput(openplx.Physics.Physics_Signals_BoolInput):
    r"""Proxy of C++ openplx::DriveTrain::Signals::TorqueConverterLockUpInput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(DriveTrain_Signals_TorqueConverterLockUpInput self) -> DriveTrain_Signals_TorqueConverterLockUpInput"""
        _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockUpInput_swiginit(self, _DriveTrainSwig.new_DriveTrain_Signals_TorqueConverterLockUpInput())

    def setDynamic(self, key, value):
        r"""
        setDynamic(DriveTrain_Signals_TorqueConverterLockUpInput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockUpInput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(DriveTrain_Signals_TorqueConverterLockUpInput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockUpInput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(DriveTrain_Signals_TorqueConverterLockUpInput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockUpInput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(DriveTrain_Signals_TorqueConverterLockUpInput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockUpInput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(DriveTrain_Signals_TorqueConverterLockUpInput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockUpInput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(DriveTrain_Signals_TorqueConverterLockUpInput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockUpInput_triggerOnInit(self, context)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_Signals_TorqueConverterLockUpInput

# Register DriveTrain_Signals_TorqueConverterLockUpInput in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockUpInput_swigregister(DriveTrain_Signals_TorqueConverterLockUpInput)

class DriveTrain_Signals_TorqueConverterLockedUpOutput(openplx.Physics.Physics_Signals_BoolOutput):
    r"""Proxy of C++ openplx::DriveTrain::Signals::TorqueConverterLockedUpOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(DriveTrain_Signals_TorqueConverterLockedUpOutput self) -> DriveTrain_Signals_TorqueConverterLockedUpOutput"""
        _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockedUpOutput_swiginit(self, _DriveTrainSwig.new_DriveTrain_Signals_TorqueConverterLockedUpOutput())

    def setDynamic(self, key, value):
        r"""
        setDynamic(DriveTrain_Signals_TorqueConverterLockedUpOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockedUpOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(DriveTrain_Signals_TorqueConverterLockedUpOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockedUpOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(DriveTrain_Signals_TorqueConverterLockedUpOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockedUpOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(DriveTrain_Signals_TorqueConverterLockedUpOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockedUpOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(DriveTrain_Signals_TorqueConverterLockedUpOutput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockedUpOutput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(DriveTrain_Signals_TorqueConverterLockedUpOutput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockedUpOutput_triggerOnInit(self, context)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_Signals_TorqueConverterLockedUpOutput

# Register DriveTrain_Signals_TorqueConverterLockedUpOutput in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_Signals_TorqueConverterLockedUpOutput_swigregister(DriveTrain_Signals_TorqueConverterLockedUpOutput)

class DriveTrain_Signals_TorqueConverterPumpTorqueOutput(openplx.Physics.Physics_Signals_Output):
    r"""Proxy of C++ openplx::DriveTrain::Signals::TorqueConverterPumpTorqueOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(DriveTrain_Signals_TorqueConverterPumpTorqueOutput self) -> DriveTrain_Signals_TorqueConverterPumpTorqueOutput"""
        _DriveTrainSwig.DriveTrain_Signals_TorqueConverterPumpTorqueOutput_swiginit(self, _DriveTrainSwig.new_DriveTrain_Signals_TorqueConverterPumpTorqueOutput())

    def torque_converter(self):
        r"""torque_converter(DriveTrain_Signals_TorqueConverterPumpTorqueOutput self) -> std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter >"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterPumpTorqueOutput_torque_converter(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(DriveTrain_Signals_TorqueConverterPumpTorqueOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterPumpTorqueOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(DriveTrain_Signals_TorqueConverterPumpTorqueOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterPumpTorqueOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(DriveTrain_Signals_TorqueConverterPumpTorqueOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterPumpTorqueOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(DriveTrain_Signals_TorqueConverterPumpTorqueOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterPumpTorqueOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(DriveTrain_Signals_TorqueConverterPumpTorqueOutput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterPumpTorqueOutput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(DriveTrain_Signals_TorqueConverterPumpTorqueOutput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterPumpTorqueOutput_triggerOnInit(self, context)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_Signals_TorqueConverterPumpTorqueOutput

# Register DriveTrain_Signals_TorqueConverterPumpTorqueOutput in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_Signals_TorqueConverterPumpTorqueOutput_swigregister(DriveTrain_Signals_TorqueConverterPumpTorqueOutput)

class DriveTrain_Signals_TorqueConverterTurbineTorqueOutput(openplx.Physics.Physics_Signals_Output):
    r"""Proxy of C++ openplx::DriveTrain::Signals::TorqueConverterTurbineTorqueOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput self) -> DriveTrain_Signals_TorqueConverterTurbineTorqueOutput"""
        _DriveTrainSwig.DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_swiginit(self, _DriveTrainSwig.new_DriveTrain_Signals_TorqueConverterTurbineTorqueOutput())

    def torque_converter(self):
        r"""torque_converter(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput self) -> std::shared_ptr< openplx::DriveTrain::EmpiricalTorqueConverter >"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_torque_converter(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_triggerOnInit(self, context)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_Signals_TorqueConverterTurbineTorqueOutput

# Register DriveTrain_Signals_TorqueConverterTurbineTorqueOutput in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_Signals_TorqueConverterTurbineTorqueOutput_swigregister(DriveTrain_Signals_TorqueConverterTurbineTorqueOutput)

class DriveTrain_TorqueLimitedSlipDifferential(DriveTrain_Differential):
    r"""Proxy of C++ openplx::DriveTrain::TorqueLimitedSlipDifferential class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(DriveTrain_TorqueLimitedSlipDifferential self) -> DriveTrain_TorqueLimitedSlipDifferential"""
        _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_swiginit(self, _DriveTrainSwig.new_DriveTrain_TorqueLimitedSlipDifferential())

    def breakaway_torque(self):
        r"""breakaway_torque(DriveTrain_TorqueLimitedSlipDifferential self) -> double"""
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_breakaway_torque(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(DriveTrain_TorqueLimitedSlipDifferential self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(DriveTrain_TorqueLimitedSlipDifferential self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(DriveTrain_TorqueLimitedSlipDifferential self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(DriveTrain_TorqueLimitedSlipDifferential self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(DriveTrain_TorqueLimitedSlipDifferential self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(DriveTrain_TorqueLimitedSlipDifferential self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_triggerOnInit(self, context)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_TorqueLimitedSlipDifferential

# Register DriveTrain_TorqueLimitedSlipDifferential in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_swigregister(DriveTrain_TorqueLimitedSlipDifferential)

class DriveTrain_TorqueMotor(openplx.Physics.Physics_Interactions_Interaction1DOF):
    r"""Proxy of C++ openplx::DriveTrain::TorqueMotor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(DriveTrain_TorqueMotor self) -> DriveTrain_TorqueMotor"""
        _DriveTrainSwig.DriveTrain_TorqueMotor_swiginit(self, _DriveTrainSwig.new_DriveTrain_TorqueMotor())

    def torque_input(self):
        r"""torque_input(DriveTrain_TorqueMotor self) -> std::shared_ptr< openplx::Physics::Signals::Torque1DInput >"""
        return _DriveTrainSwig.DriveTrain_TorqueMotor_torque_input(self)

    def torque_output(self):
        r"""torque_output(DriveTrain_TorqueMotor self) -> std::shared_ptr< openplx::Physics::Signals::Torque1DOutput >"""
        return _DriveTrainSwig.DriveTrain_TorqueMotor_torque_output(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(DriveTrain_TorqueMotor self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _DriveTrainSwig.DriveTrain_TorqueMotor_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(DriveTrain_TorqueMotor self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _DriveTrainSwig.DriveTrain_TorqueMotor_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(DriveTrain_TorqueMotor self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _DriveTrainSwig.DriveTrain_TorqueMotor_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(DriveTrain_TorqueMotor self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _DriveTrainSwig.DriveTrain_TorqueMotor_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(DriveTrain_TorqueMotor self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _DriveTrainSwig.DriveTrain_TorqueMotor_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(DriveTrain_TorqueMotor self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _DriveTrainSwig.DriveTrain_TorqueMotor_triggerOnInit(self, context)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_TorqueMotor

# Register DriveTrain_TorqueMotor in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_TorqueMotor_swigregister(DriveTrain_TorqueMotor)

class DriveTrain_VelocityRatioGeometryFactorPair(openplx.Core.Object):
    r"""Proxy of C++ openplx::DriveTrain::VelocityRatioGeometryFactorPair class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(DriveTrain_VelocityRatioGeometryFactorPair self) -> DriveTrain_VelocityRatioGeometryFactorPair"""
        _DriveTrainSwig.DriveTrain_VelocityRatioGeometryFactorPair_swiginit(self, _DriveTrainSwig.new_DriveTrain_VelocityRatioGeometryFactorPair())

    def velocity_ratio(self):
        r"""velocity_ratio(DriveTrain_VelocityRatioGeometryFactorPair self) -> double"""
        return _DriveTrainSwig.DriveTrain_VelocityRatioGeometryFactorPair_velocity_ratio(self)

    def geometry_factor(self):
        r"""geometry_factor(DriveTrain_VelocityRatioGeometryFactorPair self) -> double"""
        return _DriveTrainSwig.DriveTrain_VelocityRatioGeometryFactorPair_geometry_factor(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(DriveTrain_VelocityRatioGeometryFactorPair self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _DriveTrainSwig.DriveTrain_VelocityRatioGeometryFactorPair_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(DriveTrain_VelocityRatioGeometryFactorPair self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _DriveTrainSwig.DriveTrain_VelocityRatioGeometryFactorPair_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(DriveTrain_VelocityRatioGeometryFactorPair self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _DriveTrainSwig.DriveTrain_VelocityRatioGeometryFactorPair_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(DriveTrain_VelocityRatioGeometryFactorPair self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _DriveTrainSwig.DriveTrain_VelocityRatioGeometryFactorPair_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(DriveTrain_VelocityRatioGeometryFactorPair self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _DriveTrainSwig.DriveTrain_VelocityRatioGeometryFactorPair_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(DriveTrain_VelocityRatioGeometryFactorPair self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _DriveTrainSwig.DriveTrain_VelocityRatioGeometryFactorPair_triggerOnInit(self, context)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_VelocityRatioGeometryFactorPair

# Register DriveTrain_VelocityRatioGeometryFactorPair in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_VelocityRatioGeometryFactorPair_swigregister(DriveTrain_VelocityRatioGeometryFactorPair)

class DriveTrain_VelocityRatioTorqueMultiplicationPair(openplx.Core.Object):
    r"""Proxy of C++ openplx::DriveTrain::VelocityRatioTorqueMultiplicationPair class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(DriveTrain_VelocityRatioTorqueMultiplicationPair self) -> DriveTrain_VelocityRatioTorqueMultiplicationPair"""
        _DriveTrainSwig.DriveTrain_VelocityRatioTorqueMultiplicationPair_swiginit(self, _DriveTrainSwig.new_DriveTrain_VelocityRatioTorqueMultiplicationPair())

    def velocity_ratio(self):
        r"""velocity_ratio(DriveTrain_VelocityRatioTorqueMultiplicationPair self) -> double"""
        return _DriveTrainSwig.DriveTrain_VelocityRatioTorqueMultiplicationPair_velocity_ratio(self)

    def multiplier(self):
        r"""multiplier(DriveTrain_VelocityRatioTorqueMultiplicationPair self) -> double"""
        return _DriveTrainSwig.DriveTrain_VelocityRatioTorqueMultiplicationPair_multiplier(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(DriveTrain_VelocityRatioTorqueMultiplicationPair self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _DriveTrainSwig.DriveTrain_VelocityRatioTorqueMultiplicationPair_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(DriveTrain_VelocityRatioTorqueMultiplicationPair self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _DriveTrainSwig.DriveTrain_VelocityRatioTorqueMultiplicationPair_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(DriveTrain_VelocityRatioTorqueMultiplicationPair self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _DriveTrainSwig.DriveTrain_VelocityRatioTorqueMultiplicationPair_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(DriveTrain_VelocityRatioTorqueMultiplicationPair self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _DriveTrainSwig.DriveTrain_VelocityRatioTorqueMultiplicationPair_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(DriveTrain_VelocityRatioTorqueMultiplicationPair self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _DriveTrainSwig.DriveTrain_VelocityRatioTorqueMultiplicationPair_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(DriveTrain_VelocityRatioTorqueMultiplicationPair self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _DriveTrainSwig.DriveTrain_VelocityRatioTorqueMultiplicationPair_triggerOnInit(self, context)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_VelocityRatioTorqueMultiplicationPair

# Register DriveTrain_VelocityRatioTorqueMultiplicationPair in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_VelocityRatioTorqueMultiplicationPair_swigregister(DriveTrain_VelocityRatioTorqueMultiplicationPair)

class DriveTrain_ViscousGear(DriveTrain_Gear):
    r"""Proxy of C++ openplx::DriveTrain::ViscousGear class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(DriveTrain_ViscousGear self) -> DriveTrain_ViscousGear"""
        _DriveTrainSwig.DriveTrain_ViscousGear_swiginit(self, _DriveTrainSwig.new_DriveTrain_ViscousGear())

    def dissipation(self):
        r"""dissipation(DriveTrain_ViscousGear self) -> std::shared_ptr< openplx::Physics::Interactions::Dissipation::ConstantViscousSurfaceFriction >"""
        return _DriveTrainSwig.DriveTrain_ViscousGear_dissipation(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(DriveTrain_ViscousGear self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: openplx::Core::Any &&

        """
        return _DriveTrainSwig.DriveTrain_ViscousGear_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(DriveTrain_ViscousGear self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _DriveTrainSwig.DriveTrain_ViscousGear_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(DriveTrain_ViscousGear self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< openplx::Core::Any,std::allocator< openplx::Core::Any > > const &

        """
        return _DriveTrainSwig.DriveTrain_ViscousGear_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(DriveTrain_ViscousGear self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< openplx::Core::Object >,std::allocator< std::shared_ptr< openplx::Core::Object > > > &

        """
        return _DriveTrainSwig.DriveTrain_ViscousGear_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(DriveTrain_ViscousGear self, std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,openplx::Core::Any >,std::allocator< std::pair< std::string,openplx::Core::Any > > > &

        """
        return _DriveTrainSwig.DriveTrain_ViscousGear_extractEntriesTo(self, output)

    def triggerOnInit(self, context):
        r"""
        triggerOnInit(DriveTrain_ViscousGear self, openplx::RuntimeContext const & context)

        Parameters
        ----------
        context: openplx::RuntimeContext const &

        """
        return _DriveTrainSwig.DriveTrain_ViscousGear_triggerOnInit(self, context)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_ViscousGear

# Register DriveTrain_ViscousGear in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_ViscousGear_swigregister(DriveTrain_ViscousGear)



