# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetDatabaseResult',
    'AwaitableGetDatabaseResult',
    'get_database',
    'get_database_output',
]

@pulumi.output_type
class GetDatabaseResult:
    """
    A collection of values returned by getDatabase.
    """
    def __init__(__self__, account_id=None, cluster_id=None, id=None, max_columns_per_table=None, max_tables=None, name=None, partition_templates=None, retention_period=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if max_columns_per_table and not isinstance(max_columns_per_table, int):
            raise TypeError("Expected argument 'max_columns_per_table' to be a int")
        pulumi.set(__self__, "max_columns_per_table", max_columns_per_table)
        if max_tables and not isinstance(max_tables, int):
            raise TypeError("Expected argument 'max_tables' to be a int")
        pulumi.set(__self__, "max_tables", max_tables)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if partition_templates and not isinstance(partition_templates, list):
            raise TypeError("Expected argument 'partition_templates' to be a list")
        pulumi.set(__self__, "partition_templates", partition_templates)
        if retention_period and not isinstance(retention_period, int):
            raise TypeError("Expected argument 'retention_period' to be a int")
        pulumi.set(__self__, "retention_period", retention_period)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        """
        The ID of the account that the database belongs to.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        The ID of the cluster that the database belongs to.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maxColumnsPerTable")
    def max_columns_per_table(self) -> int:
        """
        The maximum number of columns per table for the cluster database.
        """
        return pulumi.get(self, "max_columns_per_table")

    @property
    @pulumi.getter(name="maxTables")
    def max_tables(self) -> int:
        """
        The maximum number of tables for the cluster database.
        """
        return pulumi.get(self, "max_tables")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the cluster database.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="partitionTemplates")
    def partition_templates(self) -> Sequence['outputs.GetDatabasePartitionTemplateResult']:
        """
        The template partitioning of the cluster database.
        """
        return pulumi.get(self, "partition_templates")

    @property
    @pulumi.getter(name="retentionPeriod")
    def retention_period(self) -> int:
        """
        The retention period of the cluster database in nanoseconds.
        """
        return pulumi.get(self, "retention_period")


class AwaitableGetDatabaseResult(GetDatabaseResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDatabaseResult(
            account_id=self.account_id,
            cluster_id=self.cluster_id,
            id=self.id,
            max_columns_per_table=self.max_columns_per_table,
            max_tables=self.max_tables,
            name=self.name,
            partition_templates=self.partition_templates,
            retention_period=self.retention_period)


def get_database(name: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDatabaseResult:
    """
    Retrieves a database. Use this data source to retrieve information for a specific database.


    :param str name: The name of the cluster database.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('influxdb3:index/getDatabase:getDatabase', __args__, opts=opts, typ=GetDatabaseResult).value

    return AwaitableGetDatabaseResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        id=pulumi.get(__ret__, 'id'),
        max_columns_per_table=pulumi.get(__ret__, 'max_columns_per_table'),
        max_tables=pulumi.get(__ret__, 'max_tables'),
        name=pulumi.get(__ret__, 'name'),
        partition_templates=pulumi.get(__ret__, 'partition_templates'),
        retention_period=pulumi.get(__ret__, 'retention_period'))
def get_database_output(name: Optional[pulumi.Input[str]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDatabaseResult]:
    """
    Retrieves a database. Use this data source to retrieve information for a specific database.


    :param str name: The name of the cluster database.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('influxdb3:index/getDatabase:getDatabase', __args__, opts=opts, typ=GetDatabaseResult)
    return __ret__.apply(lambda __response__: GetDatabaseResult(
        account_id=pulumi.get(__response__, 'account_id'),
        cluster_id=pulumi.get(__response__, 'cluster_id'),
        id=pulumi.get(__response__, 'id'),
        max_columns_per_table=pulumi.get(__response__, 'max_columns_per_table'),
        max_tables=pulumi.get(__response__, 'max_tables'),
        name=pulumi.get(__response__, 'name'),
        partition_templates=pulumi.get(__response__, 'partition_templates'),
        retention_period=pulumi.get(__response__, 'retention_period')))
