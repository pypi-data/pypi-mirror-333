# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'DatabasePartitionTemplateArgs',
    'DatabasePartitionTemplateArgsDict',
    'TokenPermissionArgs',
    'TokenPermissionArgsDict',
]

MYPY = False

if not MYPY:
    class DatabasePartitionTemplateArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        The type of template part. Valid values are `bucket`, `tag` or `time`.
        """
        value: pulumi.Input[str]
        """
        The value of template part. **Note:** For `bucket` partition template type use `jsonencode()` function to encode the value to a string.
        """
elif False:
    DatabasePartitionTemplateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatabasePartitionTemplateArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] type: The type of template part. Valid values are `bucket`, `tag` or `time`.
        :param pulumi.Input[str] value: The value of template part. **Note:** For `bucket` partition template type use `jsonencode()` function to encode the value to a string.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of template part. Valid values are `bucket`, `tag` or `time`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value of template part. **Note:** For `bucket` partition template type use `jsonencode()` function to encode the value to a string.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TokenPermissionArgsDict(TypedDict):
        action: pulumi.Input[str]
        """
        The action the database token permission allows. Valid values are `read` or `write`.
        """
        resource: pulumi.Input[str]
        """
        The resource the database token permission applies to. `*` refers to all databases.
        """
elif False:
    TokenPermissionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TokenPermissionArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 resource: pulumi.Input[str]):
        """
        :param pulumi.Input[str] action: The action the database token permission allows. Valid values are `read` or `write`.
        :param pulumi.Input[str] resource: The resource the database token permission applies to. `*` refers to all databases.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "resource", resource)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        """
        The action the database token permission allows. Valid values are `read` or `write`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        """
        The resource the database token permission applies to. `*` refers to all databases.
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)


