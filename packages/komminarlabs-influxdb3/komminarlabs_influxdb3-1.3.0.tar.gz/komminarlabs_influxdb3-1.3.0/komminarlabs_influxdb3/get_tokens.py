# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetTokensResult',
    'AwaitableGetTokensResult',
    'get_tokens',
    'get_tokens_output',
]

@pulumi.output_type
class GetTokensResult:
    """
    A collection of values returned by getTokens.
    """
    def __init__(__self__, id=None, tokens=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if tokens and not isinstance(tokens, list):
            raise TypeError("Expected argument 'tokens' to be a list")
        pulumi.set(__self__, "tokens", tokens)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def tokens(self) -> Sequence['outputs.GetTokensTokenResult']:
        return pulumi.get(self, "tokens")


class AwaitableGetTokensResult(GetTokensResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTokensResult(
            id=self.id,
            tokens=self.tokens)


def get_tokens(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTokensResult:
    """
    Gets all database tokens for a cluster.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('influxdb3:index/getTokens:getTokens', __args__, opts=opts, typ=GetTokensResult).value

    return AwaitableGetTokensResult(
        id=pulumi.get(__ret__, 'id'),
        tokens=pulumi.get(__ret__, 'tokens'))
def get_tokens_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTokensResult]:
    """
    Gets all database tokens for a cluster.
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('influxdb3:index/getTokens:getTokens', __args__, opts=opts, typ=GetTokensResult)
    return __ret__.apply(lambda __response__: GetTokensResult(
        id=pulumi.get(__response__, 'id'),
        tokens=pulumi.get(__response__, 'tokens')))
