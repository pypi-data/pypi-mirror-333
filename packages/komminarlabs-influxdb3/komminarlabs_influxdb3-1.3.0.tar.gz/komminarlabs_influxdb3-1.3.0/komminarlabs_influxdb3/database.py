# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DatabaseArgs', 'Database']

@pulumi.input_type
class DatabaseArgs:
    def __init__(__self__, *,
                 max_columns_per_table: Optional[pulumi.Input[int]] = None,
                 max_tables: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 partition_templates: Optional[pulumi.Input[Sequence[pulumi.Input['DatabasePartitionTemplateArgs']]]] = None,
                 retention_period: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Database resource.
        :param pulumi.Input[int] max_columns_per_table: The maximum number of columns per table for the cluster database. The default is `200`
        :param pulumi.Input[int] max_tables: The maximum number of tables for the cluster database. The default is `500`
        :param pulumi.Input[str] name: The name of the cluster database. The Length should be between `[ 1 .. 64 ]` characters. **Note:** Database names can't be updated. An update will result in resource replacement. After a database is deleted, you cannot [reuse](https://docs.influxdata.com/influxdb/cloud-dedicated/admin/databases/delete/#cannot-reuse-database-names) the same name for a new database.
        :param pulumi.Input[Sequence[pulumi.Input['DatabasePartitionTemplateArgs']]] partition_templates: A template for [partitioning](https://docs.influxdata.com/influxdb/cloud-dedicated/admin/custom-partitions/partition-templates/) a cluster database. **Note:** A partition template can include up to 7 total tag and tag bucket parts and only 1 time part. You can only apply a partition template when creating a database. You [can't update a partition template](https://docs.influxdata.com/influxdb/cloud-dedicated/admin/databases/create/#partition-templates-can-only-be-applied-on-create) on an existing database. An update will result in resource replacement.
        :param pulumi.Input[int] retention_period: The retention period of the cluster database in nanoseconds. The default is `0`. If the retention period is not set or is set to `0`, the database will have infinite retention.
        """
        if max_columns_per_table is not None:
            pulumi.set(__self__, "max_columns_per_table", max_columns_per_table)
        if max_tables is not None:
            pulumi.set(__self__, "max_tables", max_tables)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if partition_templates is not None:
            pulumi.set(__self__, "partition_templates", partition_templates)
        if retention_period is not None:
            pulumi.set(__self__, "retention_period", retention_period)

    @property
    @pulumi.getter(name="maxColumnsPerTable")
    def max_columns_per_table(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of columns per table for the cluster database. The default is `200`
        """
        return pulumi.get(self, "max_columns_per_table")

    @max_columns_per_table.setter
    def max_columns_per_table(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_columns_per_table", value)

    @property
    @pulumi.getter(name="maxTables")
    def max_tables(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of tables for the cluster database. The default is `500`
        """
        return pulumi.get(self, "max_tables")

    @max_tables.setter
    def max_tables(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_tables", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the cluster database. The Length should be between `[ 1 .. 64 ]` characters. **Note:** Database names can't be updated. An update will result in resource replacement. After a database is deleted, you cannot [reuse](https://docs.influxdata.com/influxdb/cloud-dedicated/admin/databases/delete/#cannot-reuse-database-names) the same name for a new database.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="partitionTemplates")
    def partition_templates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatabasePartitionTemplateArgs']]]]:
        """
        A template for [partitioning](https://docs.influxdata.com/influxdb/cloud-dedicated/admin/custom-partitions/partition-templates/) a cluster database. **Note:** A partition template can include up to 7 total tag and tag bucket parts and only 1 time part. You can only apply a partition template when creating a database. You [can't update a partition template](https://docs.influxdata.com/influxdb/cloud-dedicated/admin/databases/create/#partition-templates-can-only-be-applied-on-create) on an existing database. An update will result in resource replacement.
        """
        return pulumi.get(self, "partition_templates")

    @partition_templates.setter
    def partition_templates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatabasePartitionTemplateArgs']]]]):
        pulumi.set(self, "partition_templates", value)

    @property
    @pulumi.getter(name="retentionPeriod")
    def retention_period(self) -> Optional[pulumi.Input[int]]:
        """
        The retention period of the cluster database in nanoseconds. The default is `0`. If the retention period is not set or is set to `0`, the database will have infinite retention.
        """
        return pulumi.get(self, "retention_period")

    @retention_period.setter
    def retention_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retention_period", value)


@pulumi.input_type
class _DatabaseState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 max_columns_per_table: Optional[pulumi.Input[int]] = None,
                 max_tables: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 partition_templates: Optional[pulumi.Input[Sequence[pulumi.Input['DatabasePartitionTemplateArgs']]]] = None,
                 retention_period: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Database resources.
        :param pulumi.Input[str] account_id: The ID of the account that the database belongs to.
        :param pulumi.Input[str] cluster_id: The ID of the cluster that the database belongs to.
        :param pulumi.Input[int] max_columns_per_table: The maximum number of columns per table for the cluster database. The default is `200`
        :param pulumi.Input[int] max_tables: The maximum number of tables for the cluster database. The default is `500`
        :param pulumi.Input[str] name: The name of the cluster database. The Length should be between `[ 1 .. 64 ]` characters. **Note:** Database names can't be updated. An update will result in resource replacement. After a database is deleted, you cannot [reuse](https://docs.influxdata.com/influxdb/cloud-dedicated/admin/databases/delete/#cannot-reuse-database-names) the same name for a new database.
        :param pulumi.Input[Sequence[pulumi.Input['DatabasePartitionTemplateArgs']]] partition_templates: A template for [partitioning](https://docs.influxdata.com/influxdb/cloud-dedicated/admin/custom-partitions/partition-templates/) a cluster database. **Note:** A partition template can include up to 7 total tag and tag bucket parts and only 1 time part. You can only apply a partition template when creating a database. You [can't update a partition template](https://docs.influxdata.com/influxdb/cloud-dedicated/admin/databases/create/#partition-templates-can-only-be-applied-on-create) on an existing database. An update will result in resource replacement.
        :param pulumi.Input[int] retention_period: The retention period of the cluster database in nanoseconds. The default is `0`. If the retention period is not set or is set to `0`, the database will have infinite retention.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if max_columns_per_table is not None:
            pulumi.set(__self__, "max_columns_per_table", max_columns_per_table)
        if max_tables is not None:
            pulumi.set(__self__, "max_tables", max_tables)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if partition_templates is not None:
            pulumi.set(__self__, "partition_templates", partition_templates)
        if retention_period is not None:
            pulumi.set(__self__, "retention_period", retention_period)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the account that the database belongs to.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the cluster that the database belongs to.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="maxColumnsPerTable")
    def max_columns_per_table(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of columns per table for the cluster database. The default is `200`
        """
        return pulumi.get(self, "max_columns_per_table")

    @max_columns_per_table.setter
    def max_columns_per_table(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_columns_per_table", value)

    @property
    @pulumi.getter(name="maxTables")
    def max_tables(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of tables for the cluster database. The default is `500`
        """
        return pulumi.get(self, "max_tables")

    @max_tables.setter
    def max_tables(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_tables", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the cluster database. The Length should be between `[ 1 .. 64 ]` characters. **Note:** Database names can't be updated. An update will result in resource replacement. After a database is deleted, you cannot [reuse](https://docs.influxdata.com/influxdb/cloud-dedicated/admin/databases/delete/#cannot-reuse-database-names) the same name for a new database.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="partitionTemplates")
    def partition_templates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatabasePartitionTemplateArgs']]]]:
        """
        A template for [partitioning](https://docs.influxdata.com/influxdb/cloud-dedicated/admin/custom-partitions/partition-templates/) a cluster database. **Note:** A partition template can include up to 7 total tag and tag bucket parts and only 1 time part. You can only apply a partition template when creating a database. You [can't update a partition template](https://docs.influxdata.com/influxdb/cloud-dedicated/admin/databases/create/#partition-templates-can-only-be-applied-on-create) on an existing database. An update will result in resource replacement.
        """
        return pulumi.get(self, "partition_templates")

    @partition_templates.setter
    def partition_templates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatabasePartitionTemplateArgs']]]]):
        pulumi.set(self, "partition_templates", value)

    @property
    @pulumi.getter(name="retentionPeriod")
    def retention_period(self) -> Optional[pulumi.Input[int]]:
        """
        The retention period of the cluster database in nanoseconds. The default is `0`. If the retention period is not set or is set to `0`, the database will have infinite retention.
        """
        return pulumi.get(self, "retention_period")

    @retention_period.setter
    def retention_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retention_period", value)


class Database(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 max_columns_per_table: Optional[pulumi.Input[int]] = None,
                 max_tables: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 partition_templates: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DatabasePartitionTemplateArgs', 'DatabasePartitionTemplateArgsDict']]]]] = None,
                 retention_period: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Creates and manages a database.

        ## Example Usage

        ```python
        import pulumi
        import json
        import komminarlabs_influxdb3 as influxdb3

        signals = influxdb3.Database("signals",
            name="signals",
            retention_period=604800,
            partition_templates=[
                {
                    "type": "tag",
                    "value": "line",
                },
                {
                    "type": "tag",
                    "value": "station",
                },
                {
                    "type": "time",
                    "value": "%Y-%m-%d",
                },
                {
                    "type": "bucket",
                    "value": json.dumps({
                        "tagName": "temperature",
                        "numberOfBuckets": 10,
                    }),
                },
            ])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] max_columns_per_table: The maximum number of columns per table for the cluster database. The default is `200`
        :param pulumi.Input[int] max_tables: The maximum number of tables for the cluster database. The default is `500`
        :param pulumi.Input[str] name: The name of the cluster database. The Length should be between `[ 1 .. 64 ]` characters. **Note:** Database names can't be updated. An update will result in resource replacement. After a database is deleted, you cannot [reuse](https://docs.influxdata.com/influxdb/cloud-dedicated/admin/databases/delete/#cannot-reuse-database-names) the same name for a new database.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DatabasePartitionTemplateArgs', 'DatabasePartitionTemplateArgsDict']]]] partition_templates: A template for [partitioning](https://docs.influxdata.com/influxdb/cloud-dedicated/admin/custom-partitions/partition-templates/) a cluster database. **Note:** A partition template can include up to 7 total tag and tag bucket parts and only 1 time part. You can only apply a partition template when creating a database. You [can't update a partition template](https://docs.influxdata.com/influxdb/cloud-dedicated/admin/databases/create/#partition-templates-can-only-be-applied-on-create) on an existing database. An update will result in resource replacement.
        :param pulumi.Input[int] retention_period: The retention period of the cluster database in nanoseconds. The default is `0`. If the retention period is not set or is set to `0`, the database will have infinite retention.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[DatabaseArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates and manages a database.

        ## Example Usage

        ```python
        import pulumi
        import json
        import komminarlabs_influxdb3 as influxdb3

        signals = influxdb3.Database("signals",
            name="signals",
            retention_period=604800,
            partition_templates=[
                {
                    "type": "tag",
                    "value": "line",
                },
                {
                    "type": "tag",
                    "value": "station",
                },
                {
                    "type": "time",
                    "value": "%Y-%m-%d",
                },
                {
                    "type": "bucket",
                    "value": json.dumps({
                        "tagName": "temperature",
                        "numberOfBuckets": 10,
                    }),
                },
            ])
        ```

        :param str resource_name: The name of the resource.
        :param DatabaseArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DatabaseArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 max_columns_per_table: Optional[pulumi.Input[int]] = None,
                 max_tables: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 partition_templates: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DatabasePartitionTemplateArgs', 'DatabasePartitionTemplateArgsDict']]]]] = None,
                 retention_period: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DatabaseArgs.__new__(DatabaseArgs)

            __props__.__dict__["max_columns_per_table"] = max_columns_per_table
            __props__.__dict__["max_tables"] = max_tables
            __props__.__dict__["name"] = name
            __props__.__dict__["partition_templates"] = partition_templates
            __props__.__dict__["retention_period"] = retention_period
            __props__.__dict__["account_id"] = None
            __props__.__dict__["cluster_id"] = None
        super(Database, __self__).__init__(
            'influxdb3:index/database:Database',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[str]] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            max_columns_per_table: Optional[pulumi.Input[int]] = None,
            max_tables: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            partition_templates: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DatabasePartitionTemplateArgs', 'DatabasePartitionTemplateArgsDict']]]]] = None,
            retention_period: Optional[pulumi.Input[int]] = None) -> 'Database':
        """
        Get an existing Database resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_id: The ID of the account that the database belongs to.
        :param pulumi.Input[str] cluster_id: The ID of the cluster that the database belongs to.
        :param pulumi.Input[int] max_columns_per_table: The maximum number of columns per table for the cluster database. The default is `200`
        :param pulumi.Input[int] max_tables: The maximum number of tables for the cluster database. The default is `500`
        :param pulumi.Input[str] name: The name of the cluster database. The Length should be between `[ 1 .. 64 ]` characters. **Note:** Database names can't be updated. An update will result in resource replacement. After a database is deleted, you cannot [reuse](https://docs.influxdata.com/influxdb/cloud-dedicated/admin/databases/delete/#cannot-reuse-database-names) the same name for a new database.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DatabasePartitionTemplateArgs', 'DatabasePartitionTemplateArgsDict']]]] partition_templates: A template for [partitioning](https://docs.influxdata.com/influxdb/cloud-dedicated/admin/custom-partitions/partition-templates/) a cluster database. **Note:** A partition template can include up to 7 total tag and tag bucket parts and only 1 time part. You can only apply a partition template when creating a database. You [can't update a partition template](https://docs.influxdata.com/influxdb/cloud-dedicated/admin/databases/create/#partition-templates-can-only-be-applied-on-create) on an existing database. An update will result in resource replacement.
        :param pulumi.Input[int] retention_period: The retention period of the cluster database in nanoseconds. The default is `0`. If the retention period is not set or is set to `0`, the database will have infinite retention.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DatabaseState.__new__(_DatabaseState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["max_columns_per_table"] = max_columns_per_table
        __props__.__dict__["max_tables"] = max_tables
        __props__.__dict__["name"] = name
        __props__.__dict__["partition_templates"] = partition_templates
        __props__.__dict__["retention_period"] = retention_period
        return Database(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[str]:
        """
        The ID of the account that the database belongs to.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        The ID of the cluster that the database belongs to.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="maxColumnsPerTable")
    def max_columns_per_table(self) -> pulumi.Output[int]:
        """
        The maximum number of columns per table for the cluster database. The default is `200`
        """
        return pulumi.get(self, "max_columns_per_table")

    @property
    @pulumi.getter(name="maxTables")
    def max_tables(self) -> pulumi.Output[int]:
        """
        The maximum number of tables for the cluster database. The default is `500`
        """
        return pulumi.get(self, "max_tables")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the cluster database. The Length should be between `[ 1 .. 64 ]` characters. **Note:** Database names can't be updated. An update will result in resource replacement. After a database is deleted, you cannot [reuse](https://docs.influxdata.com/influxdb/cloud-dedicated/admin/databases/delete/#cannot-reuse-database-names) the same name for a new database.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="partitionTemplates")
    def partition_templates(self) -> pulumi.Output[Sequence['outputs.DatabasePartitionTemplate']]:
        """
        A template for [partitioning](https://docs.influxdata.com/influxdb/cloud-dedicated/admin/custom-partitions/partition-templates/) a cluster database. **Note:** A partition template can include up to 7 total tag and tag bucket parts and only 1 time part. You can only apply a partition template when creating a database. You [can't update a partition template](https://docs.influxdata.com/influxdb/cloud-dedicated/admin/databases/create/#partition-templates-can-only-be-applied-on-create) on an existing database. An update will result in resource replacement.
        """
        return pulumi.get(self, "partition_templates")

    @property
    @pulumi.getter(name="retentionPeriod")
    def retention_period(self) -> pulumi.Output[int]:
        """
        The retention period of the cluster database in nanoseconds. The default is `0`. If the retention period is not set or is set to `0`, the database will have infinite retention.
        """
        return pulumi.get(self, "retention_period")

