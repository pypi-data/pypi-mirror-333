# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _BoneMorphometryPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkBoneCommonPython
else:
    import _itkBoneCommonPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkRGBAPixelPython
import itk.itkIndexPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkSimpleDataObjectDecoratorPython
import itk.itkArrayPython
import itk.itkImageSourceCommonPython
class vectoritkImageVF53(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageVF53_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkBoneCommonPython.vectoritkImageVF53_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkBoneCommonPython.vectoritkImageVF53___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkBoneCommonPython.vectoritkImageVF53___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageVF53_Pointer >::size_type"""
        return _itkBoneCommonPython.vectoritkImageVF53___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageVF53

        Parameters
        ----------
        i: std::vector< itkImageVF53_Pointer >::difference_type
        j: std::vector< itkImageVF53_Pointer >::difference_type

        """
        return _itkBoneCommonPython.vectoritkImageVF53___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVF53_Pointer >::difference_type
        j: std::vector< itkImageVF53_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageVF53_Pointer >::difference_type
        j: std::vector< itkImageVF53_Pointer >::difference_type
        v: std::vector< itkImageVF53_Pointer,std::allocator< itkImageVF53_Pointer > > const &

        """
        return _itkBoneCommonPython.vectoritkImageVF53___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVF53_Pointer >::difference_type
        j: std::vector< itkImageVF53_Pointer >::difference_type

        """
        return _itkBoneCommonPython.vectoritkImageVF53___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageVF53_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkBoneCommonPython.vectoritkImageVF53___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageVF53

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageVF53_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageVF53_Pointer >::difference_type

        """
        return _itkBoneCommonPython.vectoritkImageVF53___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageVF53_Pointer,std::allocator< itkImageVF53_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageVF53_Pointer >::difference_type
        x: std::vector< itkImageVF53_Pointer >::value_type const &

        """
        return _itkBoneCommonPython.vectoritkImageVF53___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageVF53_Pointer >::value_type"""
        return _itkBoneCommonPython.vectoritkImageVF53_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVF53_Pointer >::value_type const &

        """
        return _itkBoneCommonPython.vectoritkImageVF53_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkBoneCommonPython.vectoritkImageVF53_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageVF53_Pointer >::size_type"""
        return _itkBoneCommonPython.vectoritkImageVF53_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageVF53_Pointer > &

        """
        return _itkBoneCommonPython.vectoritkImageVF53_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageVF53_Pointer >::iterator"""
        return _itkBoneCommonPython.vectoritkImageVF53_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageVF53_Pointer >::iterator"""
        return _itkBoneCommonPython.vectoritkImageVF53_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageVF53_Pointer >::reverse_iterator"""
        return _itkBoneCommonPython.vectoritkImageVF53_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageVF53_Pointer >::reverse_iterator"""
        return _itkBoneCommonPython.vectoritkImageVF53_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkBoneCommonPython.vectoritkImageVF53_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageVF53_Pointer >::allocator_type"""
        return _itkBoneCommonPython.vectoritkImageVF53_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkBoneCommonPython.vectoritkImageVF53_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageVF53_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVF53_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageVF53_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageVF53_Pointer >::iterator
        last: std::vector< itkImageVF53_Pointer >::iterator

        """
        return _itkBoneCommonPython.vectoritkImageVF53_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageVF53
        __init__(self, other) -> vectoritkImageVF53

        Parameters
        ----------
        other: std::vector< itkImageVF53_Pointer > const &

        __init__(self, size) -> vectoritkImageVF53

        Parameters
        ----------
        size: std::vector< itkImageVF53_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageVF53

        Parameters
        ----------
        size: std::vector< itkImageVF53_Pointer >::size_type
        value: std::vector< itkImageVF53_Pointer >::value_type const &

        """
        _itkBoneCommonPython.vectoritkImageVF53_swiginit(self, _itkBoneCommonPython.new_vectoritkImageVF53(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVF53_Pointer >::value_type const &

        """
        return _itkBoneCommonPython.vectoritkImageVF53_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageVF53_Pointer >::value_type const &"""
        return _itkBoneCommonPython.vectoritkImageVF53_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageVF53_Pointer >::value_type const &"""
        return _itkBoneCommonPython.vectoritkImageVF53_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageVF53_Pointer >::size_type
        x: std::vector< itkImageVF53_Pointer >::value_type const &

        """
        return _itkBoneCommonPython.vectoritkImageVF53_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageVF53_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageVF53_Pointer >::size_type
        x: std::vector< itkImageVF53_Pointer >::value_type const &

        """
        return _itkBoneCommonPython.vectoritkImageVF53_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageVF53_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVF53_Pointer >::iterator
        x: std::vector< itkImageVF53_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageVF53_Pointer >::iterator
        n: std::vector< itkImageVF53_Pointer >::size_type
        x: std::vector< itkImageVF53_Pointer >::value_type const &

        """
        return _itkBoneCommonPython.vectoritkImageVF53_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageVF53_Pointer >::size_type

        """
        return _itkBoneCommonPython.vectoritkImageVF53_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageVF53_Pointer >::size_type"""
        return _itkBoneCommonPython.vectoritkImageVF53_capacity(self)
    __swig_destroy__ = _itkBoneCommonPython.delete_vectoritkImageVF53

# Register vectoritkImageVF53 in _itkBoneCommonPython:
_itkBoneCommonPython.vectoritkImageVF53_swigregister(vectoritkImageVF53)

def itkImageFileWriterIVF53_New():
    return itkImageFileWriterIVF53.New()

class itkImageFileWriterIVF53(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageFileWriterIVF53 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageFileWriterIVF53_Pointer"""
        return _itkBoneCommonPython.itkImageFileWriterIVF53___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageFileWriterIVF53_Pointer"""
        return _itkBoneCommonPython.itkImageFileWriterIVF53_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF53 const *

        """
        return _itkBoneCommonPython.itkImageFileWriterIVF53_SetInput(self, input)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF53
        GetInput(self, idx) -> itkImageVF53

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkBoneCommonPython.itkImageFileWriterIVF53_GetInput(self, *args)

    def SetFileName(self, *args):
        r"""
        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: char const *

        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: std::string const &

        """
        return _itkBoneCommonPython.itkImageFileWriterIVF53_SetFileName(self, *args)

    def GetFileName(self):
        r"""GetFileName(self) -> char const *"""
        return _itkBoneCommonPython.itkImageFileWriterIVF53_GetFileName(self)

    def SetImageIO(self, io):
        r"""
        SetImageIO(self, io)

        Parameters
        ----------
        io: itkImageIOBase *

        """
        return _itkBoneCommonPython.itkImageFileWriterIVF53_SetImageIO(self, io)

    def GetModifiableImageIO(self):
        r"""GetModifiableImageIO(self) -> itkImageIOBase"""
        return _itkBoneCommonPython.itkImageFileWriterIVF53_GetModifiableImageIO(self)

    def GetImageIO(self, *args):
        r"""
        GetImageIO(self) -> itkImageIOBase
        GetImageIO(self) -> itkImageIOBase
        """
        return _itkBoneCommonPython.itkImageFileWriterIVF53_GetImageIO(self, *args)

    def Write(self):
        r"""Write(self)"""
        return _itkBoneCommonPython.itkImageFileWriterIVF53_Write(self)

    def SetIORegion(self, region):
        r"""
        SetIORegion(self, region)

        Parameters
        ----------
        region: itkImageIORegion const &

        """
        return _itkBoneCommonPython.itkImageFileWriterIVF53_SetIORegion(self, region)

    def GetIORegion(self):
        r"""GetIORegion(self) -> itkImageIORegion"""
        return _itkBoneCommonPython.itkImageFileWriterIVF53_GetIORegion(self)

    def SetNumberOfStreamDivisions(self, _arg):
        r"""
        SetNumberOfStreamDivisions(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkBoneCommonPython.itkImageFileWriterIVF53_SetNumberOfStreamDivisions(self, _arg)

    def GetNumberOfStreamDivisions(self):
        r"""GetNumberOfStreamDivisions(self) -> unsigned int const &"""
        return _itkBoneCommonPython.itkImageFileWriterIVF53_GetNumberOfStreamDivisions(self)

    def SetUseCompression(self, _arg):
        r"""
        SetUseCompression(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkBoneCommonPython.itkImageFileWriterIVF53_SetUseCompression(self, _arg)

    def GetUseCompression(self):
        r"""GetUseCompression(self) -> bool const &"""
        return _itkBoneCommonPython.itkImageFileWriterIVF53_GetUseCompression(self)

    def UseCompressionOn(self):
        r"""UseCompressionOn(self)"""
        return _itkBoneCommonPython.itkImageFileWriterIVF53_UseCompressionOn(self)

    def UseCompressionOff(self):
        r"""UseCompressionOff(self)"""
        return _itkBoneCommonPython.itkImageFileWriterIVF53_UseCompressionOff(self)

    def SetCompressionLevel(self, _arg):
        r"""
        SetCompressionLevel(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkBoneCommonPython.itkImageFileWriterIVF53_SetCompressionLevel(self, _arg)

    def GetCompressionLevel(self):
        r"""GetCompressionLevel(self) -> int const &"""
        return _itkBoneCommonPython.itkImageFileWriterIVF53_GetCompressionLevel(self)

    def SetUseInputMetaDataDictionary(self, _arg):
        r"""
        SetUseInputMetaDataDictionary(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkBoneCommonPython.itkImageFileWriterIVF53_SetUseInputMetaDataDictionary(self, _arg)

    def GetUseInputMetaDataDictionary(self):
        r"""GetUseInputMetaDataDictionary(self) -> bool const &"""
        return _itkBoneCommonPython.itkImageFileWriterIVF53_GetUseInputMetaDataDictionary(self)

    def UseInputMetaDataDictionaryOn(self):
        r"""UseInputMetaDataDictionaryOn(self)"""
        return _itkBoneCommonPython.itkImageFileWriterIVF53_UseInputMetaDataDictionaryOn(self)

    def UseInputMetaDataDictionaryOff(self):
        r"""UseInputMetaDataDictionaryOff(self)"""
        return _itkBoneCommonPython.itkImageFileWriterIVF53_UseInputMetaDataDictionaryOff(self)
    __swig_destroy__ = _itkBoneCommonPython.delete_itkImageFileWriterIVF53

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFileWriterIVF53

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBoneCommonPython.itkImageFileWriterIVF53_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterIVF53

        Create a new object of the class itkImageFileWriterIVF53 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterIVF53.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterIVF53.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterIVF53.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterIVF53 in _itkBoneCommonPython:
_itkBoneCommonPython.itkImageFileWriterIVF53_swigregister(itkImageFileWriterIVF53)
class itkImageIOBase(itk.ITKCommonBasePython.itkLightProcessObject):
    r"""Proxy of C++ itkImageIOBase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetFileName(self, *args):
        r"""
        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: char const *

        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: std::string const &

        """
        return _itkBoneCommonPython.itkImageIOBase_SetFileName(self, *args)

    def GetFileName(self):
        r"""GetFileName(self) -> char const *"""
        return _itkBoneCommonPython.itkImageIOBase_GetFileName(self)

    def SetNumberOfDimensions(self, arg0):
        r"""
        SetNumberOfDimensions(self, arg0)

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkBoneCommonPython.itkImageIOBase_SetNumberOfDimensions(self, arg0)

    def GetNumberOfDimensions(self):
        r"""GetNumberOfDimensions(self) -> unsigned int"""
        return _itkBoneCommonPython.itkImageIOBase_GetNumberOfDimensions(self)

    def SetDimensions(self, i, dim):
        r"""
        SetDimensions(self, i, dim)

        Parameters
        ----------
        i: unsigned int
        dim: unsigned long

        """
        return _itkBoneCommonPython.itkImageIOBase_SetDimensions(self, i, dim)

    def GetDimensions(self, i):
        r"""
        GetDimensions(self, i) -> unsigned long

        Parameters
        ----------
        i: unsigned int

        """
        return _itkBoneCommonPython.itkImageIOBase_GetDimensions(self, i)

    def SetOrigin(self, i, origin):
        r"""
        SetOrigin(self, i, origin)

        Parameters
        ----------
        i: unsigned int
        origin: double

        """
        return _itkBoneCommonPython.itkImageIOBase_SetOrigin(self, i, origin)

    def GetOrigin(self, i):
        r"""
        GetOrigin(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _itkBoneCommonPython.itkImageIOBase_GetOrigin(self, i)

    def SetSpacing(self, i, spacing):
        r"""
        SetSpacing(self, i, spacing)

        Parameters
        ----------
        i: unsigned int
        spacing: double

        """
        return _itkBoneCommonPython.itkImageIOBase_SetSpacing(self, i, spacing)

    def GetSpacing(self, i):
        r"""
        GetSpacing(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _itkBoneCommonPython.itkImageIOBase_GetSpacing(self, i)

    def SetDirection(self, *args):
        r"""
        SetDirection(self, i, direction)

        Parameters
        ----------
        i: unsigned int
        direction: std::vector< double,std::allocator< double > > const &

        SetDirection(self, i, direction)

        Parameters
        ----------
        i: unsigned int
        direction: vnl_vectorD const &

        """
        return _itkBoneCommonPython.itkImageIOBase_SetDirection(self, *args)

    def GetDirection(self, i):
        r"""
        GetDirection(self, i) -> vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _itkBoneCommonPython.itkImageIOBase_GetDirection(self, i)

    def GetDefaultDirection(self, k):
        r"""
        GetDefaultDirection(self, k) -> vectorD

        Parameters
        ----------
        k: unsigned int

        """
        return _itkBoneCommonPython.itkImageIOBase_GetDefaultDirection(self, k)

    def SetIORegion(self, _arg):
        r"""
        SetIORegion(self, _arg)

        Parameters
        ----------
        _arg: itkImageIORegion

        """
        return _itkBoneCommonPython.itkImageIOBase_SetIORegion(self, _arg)

    def GetIORegion(self):
        r"""GetIORegion(self) -> itkImageIORegion"""
        return _itkBoneCommonPython.itkImageIOBase_GetIORegion(self)

    def SetPixelType(self, _arg):
        r"""
        SetPixelType(self, _arg)

        Parameters
        ----------
        _arg: enum itkCommonEnums::IOPixel const

        """
        return _itkBoneCommonPython.itkImageIOBase_SetPixelType(self, _arg)

    def GetPixelType(self):
        r"""GetPixelType(self) -> itkCommonEnums::IOPixel"""
        return _itkBoneCommonPython.itkImageIOBase_GetPixelType(self)

    def SetComponentType(self, _arg):
        r"""
        SetComponentType(self, _arg)

        Parameters
        ----------
        _arg: enum itkCommonEnums::IOComponent const

        """
        return _itkBoneCommonPython.itkImageIOBase_SetComponentType(self, _arg)

    def GetComponentType(self):
        r"""GetComponentType(self) -> itkCommonEnums::IOComponent"""
        return _itkBoneCommonPython.itkImageIOBase_GetComponentType(self)

    def GetComponentTypeInfo(self):
        r"""GetComponentTypeInfo(self) -> std::type_info const &"""
        return _itkBoneCommonPython.itkImageIOBase_GetComponentTypeInfo(self)

    def SetNumberOfComponents(self, _arg):
        r"""
        SetNumberOfComponents(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkBoneCommonPython.itkImageIOBase_SetNumberOfComponents(self, _arg)

    def GetNumberOfComponents(self):
        r"""GetNumberOfComponents(self) -> unsigned int const &"""
        return _itkBoneCommonPython.itkImageIOBase_GetNumberOfComponents(self)

    def SetUseCompression(self, _arg):
        r"""
        SetUseCompression(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkBoneCommonPython.itkImageIOBase_SetUseCompression(self, _arg)

    def GetUseCompression(self):
        r"""GetUseCompression(self) -> bool"""
        return _itkBoneCommonPython.itkImageIOBase_GetUseCompression(self)

    def UseCompressionOn(self):
        r"""UseCompressionOn(self)"""
        return _itkBoneCommonPython.itkImageIOBase_UseCompressionOn(self)

    def UseCompressionOff(self):
        r"""UseCompressionOff(self)"""
        return _itkBoneCommonPython.itkImageIOBase_UseCompressionOff(self)

    def SetCompressionLevel(self, _arg):
        r"""
        SetCompressionLevel(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkBoneCommonPython.itkImageIOBase_SetCompressionLevel(self, _arg)

    def GetCompressionLevel(self):
        r"""GetCompressionLevel(self) -> int"""
        return _itkBoneCommonPython.itkImageIOBase_GetCompressionLevel(self)

    def SetCompressor(self, _c):
        r"""
        SetCompressor(self, _c)

        Parameters
        ----------
        _c: std::string

        """
        return _itkBoneCommonPython.itkImageIOBase_SetCompressor(self, _c)

    def GetCompressor(self):
        r"""GetCompressor(self) -> std::string const &"""
        return _itkBoneCommonPython.itkImageIOBase_GetCompressor(self)

    def SetUseStreamedReading(self, _arg):
        r"""
        SetUseStreamedReading(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkBoneCommonPython.itkImageIOBase_SetUseStreamedReading(self, _arg)

    def GetUseStreamedReading(self):
        r"""GetUseStreamedReading(self) -> bool"""
        return _itkBoneCommonPython.itkImageIOBase_GetUseStreamedReading(self)

    def UseStreamedReadingOn(self):
        r"""UseStreamedReadingOn(self)"""
        return _itkBoneCommonPython.itkImageIOBase_UseStreamedReadingOn(self)

    def UseStreamedReadingOff(self):
        r"""UseStreamedReadingOff(self)"""
        return _itkBoneCommonPython.itkImageIOBase_UseStreamedReadingOff(self)

    def SetUseStreamedWriting(self, _arg):
        r"""
        SetUseStreamedWriting(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkBoneCommonPython.itkImageIOBase_SetUseStreamedWriting(self, _arg)

    def GetUseStreamedWriting(self):
        r"""GetUseStreamedWriting(self) -> bool"""
        return _itkBoneCommonPython.itkImageIOBase_GetUseStreamedWriting(self)

    def UseStreamedWritingOn(self):
        r"""UseStreamedWritingOn(self)"""
        return _itkBoneCommonPython.itkImageIOBase_UseStreamedWritingOn(self)

    def UseStreamedWritingOff(self):
        r"""UseStreamedWritingOff(self)"""
        return _itkBoneCommonPython.itkImageIOBase_UseStreamedWritingOff(self)

    def SetExpandRGBPalette(self, _arg):
        r"""
        SetExpandRGBPalette(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkBoneCommonPython.itkImageIOBase_SetExpandRGBPalette(self, _arg)

    def GetExpandRGBPalette(self):
        r"""GetExpandRGBPalette(self) -> bool"""
        return _itkBoneCommonPython.itkImageIOBase_GetExpandRGBPalette(self)

    def ExpandRGBPaletteOn(self):
        r"""ExpandRGBPaletteOn(self)"""
        return _itkBoneCommonPython.itkImageIOBase_ExpandRGBPaletteOn(self)

    def ExpandRGBPaletteOff(self):
        r"""ExpandRGBPaletteOff(self)"""
        return _itkBoneCommonPython.itkImageIOBase_ExpandRGBPaletteOff(self)

    def SetWritePalette(self, _arg):
        r"""
        SetWritePalette(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkBoneCommonPython.itkImageIOBase_SetWritePalette(self, _arg)

    def GetWritePalette(self):
        r"""GetWritePalette(self) -> bool"""
        return _itkBoneCommonPython.itkImageIOBase_GetWritePalette(self)

    def WritePaletteOn(self):
        r"""WritePaletteOn(self)"""
        return _itkBoneCommonPython.itkImageIOBase_WritePaletteOn(self)

    def WritePaletteOff(self):
        r"""WritePaletteOff(self)"""
        return _itkBoneCommonPython.itkImageIOBase_WritePaletteOff(self)

    def GetIsReadAsScalarPlusPalette(self):
        r"""GetIsReadAsScalarPlusPalette(self) -> bool"""
        return _itkBoneCommonPython.itkImageIOBase_GetIsReadAsScalarPlusPalette(self)

    @staticmethod
    def GetComponentTypeAsString(arg0):
        r"""
        GetComponentTypeAsString(arg0) -> std::string

        Parameters
        ----------
        arg0: enum itkCommonEnums::IOComponent

        """
        return _itkBoneCommonPython.itkImageIOBase_GetComponentTypeAsString(arg0)

    @staticmethod
    def GetComponentTypeFromString(typeString):
        r"""
        GetComponentTypeFromString(typeString) -> itkCommonEnums::IOComponent

        Parameters
        ----------
        typeString: std::string const &

        """
        return _itkBoneCommonPython.itkImageIOBase_GetComponentTypeFromString(typeString)

    @staticmethod
    def GetPixelTypeAsString(arg0):
        r"""
        GetPixelTypeAsString(arg0) -> std::string

        Parameters
        ----------
        arg0: enum itkCommonEnums::IOPixel

        """
        return _itkBoneCommonPython.itkImageIOBase_GetPixelTypeAsString(arg0)

    @staticmethod
    def GetPixelTypeFromString(pixelString):
        r"""
        GetPixelTypeFromString(pixelString) -> itkCommonEnums::IOPixel

        Parameters
        ----------
        pixelString: std::string const &

        """
        return _itkBoneCommonPython.itkImageIOBase_GetPixelTypeFromString(pixelString)

    def SetFileType(self, _arg):
        r"""
        SetFileType(self, _arg)

        Parameters
        ----------
        _arg: enum itkCommonEnums::IOFile const

        """
        return _itkBoneCommonPython.itkImageIOBase_SetFileType(self, _arg)

    def GetFileType(self):
        r"""GetFileType(self) -> itkCommonEnums::IOFile"""
        return _itkBoneCommonPython.itkImageIOBase_GetFileType(self)

    def SetFileTypeToASCII(self):
        r"""SetFileTypeToASCII(self)"""
        return _itkBoneCommonPython.itkImageIOBase_SetFileTypeToASCII(self)

    def SetFileTypeToBinary(self):
        r"""SetFileTypeToBinary(self)"""
        return _itkBoneCommonPython.itkImageIOBase_SetFileTypeToBinary(self)

    def SetByteOrder(self, _arg):
        r"""
        SetByteOrder(self, _arg)

        Parameters
        ----------
        _arg: enum itkCommonEnums::IOByteOrder const

        """
        return _itkBoneCommonPython.itkImageIOBase_SetByteOrder(self, _arg)

    def GetByteOrder(self):
        r"""GetByteOrder(self) -> itkCommonEnums::IOByteOrder"""
        return _itkBoneCommonPython.itkImageIOBase_GetByteOrder(self)

    def SetByteOrderToBigEndian(self):
        r"""SetByteOrderToBigEndian(self)"""
        return _itkBoneCommonPython.itkImageIOBase_SetByteOrderToBigEndian(self)

    def SetByteOrderToLittleEndian(self):
        r"""SetByteOrderToLittleEndian(self)"""
        return _itkBoneCommonPython.itkImageIOBase_SetByteOrderToLittleEndian(self)

    def GetFileTypeAsString(self, arg0):
        r"""
        GetFileTypeAsString(self, arg0) -> std::string

        Parameters
        ----------
        arg0: enum itkCommonEnums::IOFile

        """
        return _itkBoneCommonPython.itkImageIOBase_GetFileTypeAsString(self, arg0)

    def GetByteOrderAsString(self, arg0):
        r"""
        GetByteOrderAsString(self, arg0) -> std::string

        Parameters
        ----------
        arg0: enum itkCommonEnums::IOByteOrder

        """
        return _itkBoneCommonPython.itkImageIOBase_GetByteOrderAsString(self, arg0)

    def GetPixelStride(self):
        r"""GetPixelStride(self) -> long"""
        return _itkBoneCommonPython.itkImageIOBase_GetPixelStride(self)

    def GetImageSizeInPixels(self):
        r"""GetImageSizeInPixels(self) -> long"""
        return _itkBoneCommonPython.itkImageIOBase_GetImageSizeInPixels(self)

    def GetImageSizeInBytes(self):
        r"""GetImageSizeInBytes(self) -> long"""
        return _itkBoneCommonPython.itkImageIOBase_GetImageSizeInBytes(self)

    def GetImageSizeInComponents(self):
        r"""GetImageSizeInComponents(self) -> long"""
        return _itkBoneCommonPython.itkImageIOBase_GetImageSizeInComponents(self)

    def GetComponentSize(self):
        r"""GetComponentSize(self) -> unsigned int"""
        return _itkBoneCommonPython.itkImageIOBase_GetComponentSize(self)

    def CanReadFile(self, arg0):
        r"""
        CanReadFile(self, arg0) -> bool

        Parameters
        ----------
        arg0: char const *

        """
        return _itkBoneCommonPython.itkImageIOBase_CanReadFile(self, arg0)

    def CanStreamRead(self):
        r"""CanStreamRead(self) -> bool"""
        return _itkBoneCommonPython.itkImageIOBase_CanStreamRead(self)

    def ReadImageInformation(self):
        r"""ReadImageInformation(self)"""
        return _itkBoneCommonPython.itkImageIOBase_ReadImageInformation(self)

    def Read(self, buffer):
        r"""
        Read(self, buffer)

        Parameters
        ----------
        buffer: void *

        """
        return _itkBoneCommonPython.itkImageIOBase_Read(self, buffer)

    def CanWriteFile(self, arg0):
        r"""
        CanWriteFile(self, arg0) -> bool

        Parameters
        ----------
        arg0: char const *

        """
        return _itkBoneCommonPython.itkImageIOBase_CanWriteFile(self, arg0)

    def CanStreamWrite(self):
        r"""CanStreamWrite(self) -> bool"""
        return _itkBoneCommonPython.itkImageIOBase_CanStreamWrite(self)

    def WriteImageInformation(self):
        r"""WriteImageInformation(self)"""
        return _itkBoneCommonPython.itkImageIOBase_WriteImageInformation(self)

    def Write(self, buffer):
        r"""
        Write(self, buffer)

        Parameters
        ----------
        buffer: void const *

        """
        return _itkBoneCommonPython.itkImageIOBase_Write(self, buffer)

    def SupportsDimension(self, dim):
        r"""
        SupportsDimension(self, dim) -> bool

        Parameters
        ----------
        dim: unsigned long

        """
        return _itkBoneCommonPython.itkImageIOBase_SupportsDimension(self, dim)

    def GenerateStreamableReadRegionFromRequestedRegion(self, requested):
        r"""
        GenerateStreamableReadRegionFromRequestedRegion(self, requested) -> itkImageIORegion

        Parameters
        ----------
        requested: itkImageIORegion const &

        """
        return _itkBoneCommonPython.itkImageIOBase_GenerateStreamableReadRegionFromRequestedRegion(self, requested)

    def GetActualNumberOfSplitsForWriting(self, numberOfRequestedSplits, pasteRegion, largestPossibleRegion):
        r"""
        GetActualNumberOfSplitsForWriting(self, numberOfRequestedSplits, pasteRegion, largestPossibleRegion) -> unsigned int

        Parameters
        ----------
        numberOfRequestedSplits: unsigned int
        pasteRegion: itkImageIORegion const &
        largestPossibleRegion: itkImageIORegion const &

        """
        return _itkBoneCommonPython.itkImageIOBase_GetActualNumberOfSplitsForWriting(self, numberOfRequestedSplits, pasteRegion, largestPossibleRegion)

    def GetSplitRegionForWriting(self, ithPiece, numberOfActualSplits, pasteRegion, largestPossibleRegion):
        r"""
        GetSplitRegionForWriting(self, ithPiece, numberOfActualSplits, pasteRegion, largestPossibleRegion) -> itkImageIORegion

        Parameters
        ----------
        ithPiece: unsigned int
        numberOfActualSplits: unsigned int
        pasteRegion: itkImageIORegion const &
        largestPossibleRegion: itkImageIORegion const &

        """
        return _itkBoneCommonPython.itkImageIOBase_GetSplitRegionForWriting(self, ithPiece, numberOfActualSplits, pasteRegion, largestPossibleRegion)

    def GetSupportedReadExtensions(self):
        r"""GetSupportedReadExtensions(self) -> vectorstring"""
        return _itkBoneCommonPython.itkImageIOBase_GetSupportedReadExtensions(self)

    def GetSupportedWriteExtensions(self):
        r"""GetSupportedWriteExtensions(self) -> vectorstring"""
        return _itkBoneCommonPython.itkImageIOBase_GetSupportedWriteExtensions(self)

# Register itkImageIOBase in _itkBoneCommonPython:
_itkBoneCommonPython.itkImageIOBase_swigregister(itkImageIOBase)
class itkImageSourceIVF53(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageSourceIVF53 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetOutput(self, *args):
        r"""
        GetOutput(self) -> itkImageVF53
        GetOutput(self) -> itkImageVF53
        GetOutput(self, idx) -> itkImageVF53

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkBoneCommonPython.itkImageSourceIVF53_GetOutput(self, *args)

    def GraftOutput(self, *args):
        r"""
        GraftOutput(self, graft)

        Parameters
        ----------
        graft: itkDataObject *

        GraftOutput(self, key, graft)

        Parameters
        ----------
        key: std::string const &
        graft: itkDataObject *

        """
        return _itkBoneCommonPython.itkImageSourceIVF53_GraftOutput(self, *args)

    def GraftNthOutput(self, idx, graft):
        r"""
        GraftNthOutput(self, idx, graft)

        Parameters
        ----------
        idx: unsigned int
        graft: itkDataObject *

        """
        return _itkBoneCommonPython.itkImageSourceIVF53_GraftNthOutput(self, idx, graft)

    def MakeOutput(self, *args):
        r"""
        MakeOutput(self, idx) -> itkDataObject_Pointer

        Parameters
        ----------
        idx: unsigned long

        MakeOutput(self, arg0) -> itkDataObject_Pointer

        Parameters
        ----------
        arg0: std::string const &

        """
        return _itkBoneCommonPython.itkImageSourceIVF53_MakeOutput(self, *args)
    __swig_destroy__ = _itkBoneCommonPython.delete_itkImageSourceIVF53

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageSourceIVF53

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBoneCommonPython.itkImageSourceIVF53_cast(obj)

# Register itkImageSourceIVF53 in _itkBoneCommonPython:
_itkBoneCommonPython.itkImageSourceIVF53_swigregister(itkImageSourceIVF53)

def itkImageVF53_New():
    return itkImageVF53.New()

class itkImageVF53(itk.itkImagePython.itkImageBase3):
    r"""Proxy of C++ itkImageVF53 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageVF53_Pointer"""
        return _itkBoneCommonPython.itkImageVF53___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageVF53_Pointer"""
        return _itkBoneCommonPython.itkImageVF53_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkBoneCommonPython.itkImageVF53_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVectorF5 const &

        """
        return _itkBoneCommonPython.itkImageVF53_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: itkVectorF5 const &

        """
        return _itkBoneCommonPython.itkImageVF53_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVectorF5

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> itkVectorF5

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkBoneCommonPython.itkImageVF53_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorF5
        GetBufferPointer(self) -> itkVectorF5
        """
        return _itkBoneCommonPython.itkImageVF53_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,5 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,5 > > const *
        """
        return _itkBoneCommonPython.itkImageVF53_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,itk::Vector< float,5 > > *

        """
        return _itkBoneCommonPython.itkImageVF53_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageVF53 const *

        """
        return _itkBoneCommonPython.itkImageVF53_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,5 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,5 > > const
        """
        return _itkBoneCommonPython.itkImageVF53_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,5 >,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,5 >,3 > > const
        """
        return _itkBoneCommonPython.itkImageVF53_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkBoneCommonPython.delete_itkImageVF53

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageVF53

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBoneCommonPython.itkImageVF53_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageVF53

        Create a new object of the class itkImageVF53 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF53.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageVF53.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageVF53.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageVF53 in _itkBoneCommonPython:
_itkBoneCommonPython.itkImageVF53_swigregister(itkImageVF53)

def itkImageFileReaderIVF53_New():
    return itkImageFileReaderIVF53.New()

class itkImageFileReaderIVF53(itkImageSourceIVF53):
    r"""Proxy of C++ itkImageFileReaderIVF53 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageFileReaderIVF53_Pointer"""
        return _itkBoneCommonPython.itkImageFileReaderIVF53___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageFileReaderIVF53_Pointer"""
        return _itkBoneCommonPython.itkImageFileReaderIVF53_Clone(self)

    def SetFileNameInput(self, _arg):
        r"""
        SetFileNameInput(self, _arg)

        Parameters
        ----------
        _arg: itkSimpleDataObjectDecoratorstring const *

        """
        return _itkBoneCommonPython.itkImageFileReaderIVF53_SetFileNameInput(self, _arg)

    def SetFileName(self, *args):
        r"""
        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: itkSimpleDataObjectDecoratorstring const *

        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: std::string const &

        """
        return _itkBoneCommonPython.itkImageFileReaderIVF53_SetFileName(self, *args)

    def GetFileNameInput(self):
        r"""GetFileNameInput(self) -> itkSimpleDataObjectDecoratorstring"""
        return _itkBoneCommonPython.itkImageFileReaderIVF53_GetFileNameInput(self)

    def GetFileName(self):
        r"""GetFileName(self) -> std::string const &"""
        return _itkBoneCommonPython.itkImageFileReaderIVF53_GetFileName(self)

    def SetImageIO(self, imageIO):
        r"""
        SetImageIO(self, imageIO)

        Parameters
        ----------
        imageIO: itkImageIOBase *

        """
        return _itkBoneCommonPython.itkImageFileReaderIVF53_SetImageIO(self, imageIO)

    def GetModifiableImageIO(self):
        r"""GetModifiableImageIO(self) -> itkImageIOBase"""
        return _itkBoneCommonPython.itkImageFileReaderIVF53_GetModifiableImageIO(self)

    def GetImageIO(self, *args):
        r"""
        GetImageIO(self) -> itkImageIOBase
        GetImageIO(self) -> itkImageIOBase
        """
        return _itkBoneCommonPython.itkImageFileReaderIVF53_GetImageIO(self, *args)

    def SetUseStreaming(self, _arg):
        r"""
        SetUseStreaming(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkBoneCommonPython.itkImageFileReaderIVF53_SetUseStreaming(self, _arg)

    def GetUseStreaming(self):
        r"""GetUseStreaming(self) -> bool const &"""
        return _itkBoneCommonPython.itkImageFileReaderIVF53_GetUseStreaming(self)

    def UseStreamingOn(self):
        r"""UseStreamingOn(self)"""
        return _itkBoneCommonPython.itkImageFileReaderIVF53_UseStreamingOn(self)

    def UseStreamingOff(self):
        r"""UseStreamingOff(self)"""
        return _itkBoneCommonPython.itkImageFileReaderIVF53_UseStreamingOff(self)
    __swig_destroy__ = _itkBoneCommonPython.delete_itkImageFileReaderIVF53

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFileReaderIVF53

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBoneCommonPython.itkImageFileReaderIVF53_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderIVF53

        Create a new object of the class itkImageFileReaderIVF53 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderIVF53.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderIVF53.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderIVF53.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderIVF53 in _itkBoneCommonPython:
_itkBoneCommonPython.itkImageFileReaderIVF53_swigregister(itkImageFileReaderIVF53)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def image_source(*args, **kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ImageSource"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ImageSource.New(*args, **kwargs)

    return instance.__internal_call__()

def image_source_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.BoneMorphometry.ImageSource
    image_source.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    image_source.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def image_file_writer(*args,  file_name: str=..., image_io=..., io_region=..., number_of_stream_divisions: int=..., use_compression: bool=..., compression_level: int=..., use_input_meta_data_dictionary: bool=...,**kwargs):
    """Functional interface for ImageFileWriter"""
    import itk

    kwarg_typehints = { 'file_name':file_name,'image_io':image_io,'io_region':io_region,'number_of_stream_divisions':number_of_stream_divisions,'use_compression':use_compression,'compression_level':compression_level,'use_input_meta_data_dictionary':use_input_meta_data_dictionary }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ImageFileWriter.New(*args, **kwargs)

    return instance.__internal_call__()

def image_file_writer_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.BoneMorphometry.ImageFileWriter
    image_file_writer.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    image_file_writer.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def image_file_reader(*args,  file_name_input=..., file_name: str=..., image_io=..., use_streaming: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ImageFileReader"""
    import itk

    kwarg_typehints = { 'file_name_input':file_name_input,'file_name':file_name,'image_io':image_io,'use_streaming':use_streaming }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ImageFileReader.New(*args, **kwargs)

    return instance.__internal_call__()

def image_file_reader_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.BoneMorphometry.ImageFileReader
    image_file_reader.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    image_file_reader.__doc__ = filter_object.__doc__



