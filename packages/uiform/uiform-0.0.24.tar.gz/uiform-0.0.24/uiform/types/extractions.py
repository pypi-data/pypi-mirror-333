import datetime
import nanoid # type: ignore
from typing import Literal, Any
from uiform.types.documents.extractions import DocumentExtractRequest
from uiform.types.chat import ChatCompletionUiformMessage
from pydantic import BaseModel, Field
from openai.types.chat import ChatCompletion
from uiform.types.documents.extractions import DocumentExtractResponse
from .image_settings import ImageSettings
from .modalities import Modality

class ExtractionSource(BaseModel):
    type: Literal["api","annotation","automation.link","automation.email","automation.cron","automation.outlook","automation.endpoint", "schema.extract"] = Field( description="Type of extraction")
    id: str|None = Field( default=None,description="ID the trigger of the extraction")

class Extraction(BaseModel):
    id: str = Field(default_factory=lambda: "extr_" + nanoid.generate(), description="Unique identifier of the analysis")
    messages: list[ChatCompletionUiformMessage] = Field(default_factory=list)
    messages_gcs: str = Field(..., description="GCS path to the messages")
    file_gcs: str   = Field(..., description="GCS path to the file")
    file_id: str = Field(..., description="ID of the file")
    status: Literal["success", "failed"] = Field(..., description="Whether the analysis was successful")
    completion: DocumentExtractResponse | ChatCompletion = Field(..., description="Response generated by the analysis")
    json_schema: Any = Field(..., description="Response format (JSON Schema or pydantic_v2.BaseModel)")
    model: str = Field(..., description="Model used for the analysis")
    temperature: float = Field(default=0.0, description="Temperature used for the analysis")
    source: ExtractionSource = Field(..., description="Source of the extraction")
    image_settings : ImageSettings = Field(default=ImageSettings(), description="Preprocessing operations applied to image before sending them to the llm")
    modality: Modality = Field(default="native", description="Modality of the extraction")
    # Infered
    schema_id: str = Field(..., description="Version of the schema used for the analysis")
    schema_data_id: str = Field(..., description="Version of the schema data used for the analysis")
    created_at: datetime.datetime = Field(default_factory=lambda: datetime.datetime.now(datetime.timezone.utc))
    organization_id: str = Field(..., description="Organization ID of the user or application")
