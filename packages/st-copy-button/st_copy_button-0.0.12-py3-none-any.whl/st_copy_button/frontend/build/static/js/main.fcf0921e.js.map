{"version":3,"file":"static/js/main.fcf0921e.js","mappings":"mBAGA,SAASA,EAA6BC,EAAcC,GAClDC,QAAQC,IAAIH,EAAMC,GAClB,MAAMG,EAAUC,OAAOC,OACrB,CACEC,oBAAoB,EACpBP,KAAMA,GAERC,GAEFO,OAAOC,OAAOC,YAAYN,EAAS,IACrC,CAEA,MAAMO,EACe,WACjBZ,EAA6B,2BAA4B,CAAEa,WAAY,GACzE,EAHID,EAIY,SAAUE,GACxBd,EAA6B,2BAA4B,CAAEc,UAC7D,EANIF,EAOe,SAAUG,GAC3Bf,EAA6B,8BAA+B,CAAEe,SAChE,EATIH,EAUU,mBAVVA,EAWI,CACNI,iBAAkB,SAAUf,EAAcgB,GACxCR,OAAOO,iBAAiB,WAAW,SAAUE,GACvCA,EAAMhB,KAAKD,OAASA,IACrBiB,EAAcC,OAASD,EAAMhB,KAC9Be,EAASC,GAEb,GACF,GAyBJ,MAAME,EAAOC,SAASC,KAAKC,YAAYF,SAASG,cAAc,SACxDC,EAAcL,EAAKG,YAAYF,SAASG,cAAc,WACtDE,EAASN,EAAKG,YAAYF,SAASG,cAAc,WAEvDC,EAAYE,UAAY,iBACxBD,EAAOC,UAAY,iBAEnB,IAAIC,GAAiB,EA8CrBhB,EAAoBI,iBAAiBJ,GA5CrC,SAAkBM,GAChB,IAAKU,EAAgB,CACnB,MAAM1B,EAAQgB,EAAkCC,QAC1C,KAAEU,EAAI,kBAAEC,EAAiB,iBAAEC,EAAgB,UAAEC,GAAc9B,EAAK+B,MAGlE,MAAEC,GAAUhC,EACdgC,IAEFb,SAASc,gBAAgBC,MAAMC,YAAY,kBAAmBH,EAAMI,cACpEjB,SAASc,gBAAgBC,MAAMC,YAAY,qBAAsBH,EAAMK,iBACvElB,SAASc,gBAAgBC,MAAMC,YAAY,eAAgBH,EAAMM,WAEjEnB,SAASc,gBAAgBC,MAAMC,YAAY,mBA1C/C,SAAkBI,GAChB,IAAIC,EAAI,EAAGC,EAAI,EAAGC,EAAI,EAetB,OAXmB,KAFnBH,EAAMA,EAAII,QAAQ,IAAK,KAEfC,QACNJ,EAAIK,SAASN,EAAI,GAAKA,EAAI,GAAI,IAC9BE,EAAII,SAASN,EAAI,GAAKA,EAAI,GAAI,IAC9BG,EAAIG,SAASN,EAAI,GAAKA,EAAI,GAAI,KAGR,IAAfA,EAAIK,SACXJ,EAAIK,SAASN,EAAIO,UAAU,EAAG,GAAI,IAClCL,EAAII,SAASN,EAAIO,UAAU,EAAG,GAAI,IAClCJ,EAAIG,SAASN,EAAIO,UAAU,EAAG,GAAI,KAE7B,GAAGN,MAAMC,MAAMC,GACxB,CAyBmEK,CAASf,EAAMM,YAC9EnB,SAASc,gBAAgBC,MAAMC,YAAY,+BAAgCH,EAAMgB,2BAGjFxB,EAAOyB,YAAcrB,EAEjBE,GACFP,EAAY0B,YAActB,EAC1BJ,EAAYW,MAAMgB,QAAU,UAE5B3B,EAAYW,MAAMgB,QAAU,OAG9B,MAAMC,EAAkB,WACtBC,UAAUC,UAAUC,UAAU3B,EAAK4B,QACnC/B,EAAOyB,YAAcpB,EACrBnB,GAA+B,GAC/B8C,YAAW,KACJhC,IACLA,EAAOyB,YAAcrB,EAAiB,GACrC,IACL,EAEAJ,EAAOV,iBAAiB,QAASqC,GACjC5B,EAAYT,iBAAiB,QAASqC,GAEtCzB,GAAiB,CACnB,CACAhB,EAA4B,GAC9B,IAGAA,IACAA,EAA4B,G","sources":["index.tsx"],"sourcesContent":["import { RenderData } from \"streamlit-component-lib\";\n\n// Define the Streamlit API directly\nfunction sendMessageToStreamlitClient(type: string, data: any) {\n  console.log(type, data);\n  const outData = Object.assign(\n    {\n      isStreamlitMessage: true,\n      type: type,\n    },\n    data\n  );\n  window.parent.postMessage(outData, \"*\");\n}\n\nconst StreamlitAPI = {\n  setComponentReady: function () {\n    sendMessageToStreamlitClient(\"streamlit:componentReady\", { apiVersion: 1 });\n  },\n  setFrameHeight: function (height: number) {\n    sendMessageToStreamlitClient(\"streamlit:setFrameHeight\", { height });\n  },\n  setComponentValue: function (value: any) {\n    sendMessageToStreamlitClient(\"streamlit:setComponentValue\", { value });\n  },\n  RENDER_EVENT: \"streamlit:render\",\n  events: {\n    addEventListener: function (type: string, callback: (event: CustomEvent) => void) {\n      window.addEventListener(\"message\", function (event: MessageEvent) {\n        if (event.data.type === type) {\n          (event as any).detail = event.data;\n          callback(event as unknown as CustomEvent);\n        }\n      });\n    },\n  },\n};\n\n// Convert hex to rgba for the button border\nfunction hexToRgb(hex: string): string {\n  let r = 0, g = 0, b = 0;\n  // Remove '#' if present\n  hex = hex.replace('#', '');\n  // 3-digit hex\n  if (hex.length === 3) {\n    r = parseInt(hex[0] + hex[0], 16);\n    g = parseInt(hex[1] + hex[1], 16);\n    b = parseInt(hex[2] + hex[2], 16);\n  }\n  // 6-digit hex\n  else if (hex.length === 6) {\n    r = parseInt(hex.substring(0, 2), 16);\n    g = parseInt(hex.substring(2, 4), 16);\n    b = parseInt(hex.substring(4, 6), 16);\n  }\n  return `${r}, ${g}, ${b}`;\n}\n\n// Copy button logic\nconst span = document.body.appendChild(document.createElement(\"span\"));\nconst textElement = span.appendChild(document.createElement(\"button\"));\nconst button = span.appendChild(document.createElement(\"button\"));\n\ntextElement.className = \"st-copy-button\";\nbutton.className = \"st-copy-button\";\n\nlet windowRendered = false;\n\nfunction onRender(event: Event): void {\n  if (!windowRendered) {\n    const data = (event as CustomEvent<RenderData>).detail;\n    const { text, before_copy_label, after_copy_label, show_text } = data.args;\n\n  // Extract theme data from RenderData\n  const { theme } = data;\n  if (theme) {\n    // Set CSS variables based on Streamlit theme\n    document.documentElement.style.setProperty('--primary-color', theme.primaryColor);\n    document.documentElement.style.setProperty('--background-color', theme.backgroundColor);\n    document.documentElement.style.setProperty('--text-color', theme.textColor);\n    // rbg is needed to apply alpha in the CSS\n    document.documentElement.style.setProperty('--text-color-rgb', hexToRgb(theme.textColor));\n    document.documentElement.style.setProperty('--secondary-background-color', theme.secondaryBackgroundColor);\n  }\n\n    button.textContent = before_copy_label;\n\n    if (show_text) {\n      textElement.textContent = text;\n      textElement.style.display = \"inline\";\n    } else {\n      textElement.style.display = \"none\";\n    }\n\n    const copyToClipboard = function () {\n      navigator.clipboard.writeText(text.trim());\n      button.textContent = after_copy_label;\n      StreamlitAPI.setComponentValue(true);\n      setTimeout(() => {\n        if (!button) return;\n        button.textContent = before_copy_label;\n      }, 1000);\n    };\n\n    button.addEventListener(\"click\", copyToClipboard);\n    textElement.addEventListener(\"click\", copyToClipboard);\n\n    windowRendered = true;\n  }\n  StreamlitAPI.setFrameHeight(40);\n}\n\nStreamlitAPI.events.addEventListener(StreamlitAPI.RENDER_EVENT, onRender);\nStreamlitAPI.setComponentReady();\nStreamlitAPI.setFrameHeight(40);\n"],"names":["sendMessageToStreamlitClient","type","data","console","log","outData","Object","assign","isStreamlitMessage","window","parent","postMessage","StreamlitAPI","apiVersion","height","value","addEventListener","callback","event","detail","span","document","body","appendChild","createElement","textElement","button","className","windowRendered","text","before_copy_label","after_copy_label","show_text","args","theme","documentElement","style","setProperty","primaryColor","backgroundColor","textColor","hex","r","g","b","replace","length","parseInt","substring","hexToRgb","secondaryBackgroundColor","textContent","display","copyToClipboard","navigator","clipboard","writeText","trim","setTimeout"],"sourceRoot":""}