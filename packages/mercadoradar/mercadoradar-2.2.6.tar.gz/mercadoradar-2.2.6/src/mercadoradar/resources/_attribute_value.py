"""
Auto generated by Mercado Radar SDK Generator
2025-03-11 18:50:44
"""
from typing import Optional, Any

from ..models._attribute_value import AttributeValue as AttributeValueSchema
from ..models._paginated_response import PaginatedResponse


class AttributeValue:

    def __init__(self, client):
        self.client = client

    def list(self, value: Optional[str] = None, attribute_type: Optional[float] = None, limit: Optional[int] = None,
             offset: Optional[int] = None) -> PaginatedResponse[AttributeValueSchema]:
        """
        List all Attribute Values

        List all Attribute Values
        """
        data = {
            "value": value,
            "attribute_type": attribute_type,
            "limit": limit,
            "offset": offset,
        }
        data = {k: v for k, v in data.items() if v is not None}

        response = self.client.get(url=f"/v3/attribute-value/", params=data)

        response.raise_for_status()

        data = response.json()

        count = data.get('count', 0)
        next_page = data.get('next')
        previous_page = data.get('previous')
        results = data.get('results')

        parsed_results = []
        for result in results:
            parsed_results.append(AttributeValueSchema(**result))

        parsed_paginated_response = {"count": count, "next": next_page, "previous": previous_page,
                                     "results": parsed_results}

        return PaginatedResponse(**parsed_paginated_response)

    def create(self, value: Optional[str] = None, attribute_type: Optional[Any] = None,
               display_order: Optional[int] = None) -> AttributeValueSchema:
        """
        Create a new Attribute Value

        Create a new Attribute Value
        """
        data = {
            "value": value,
            "attribute_type": attribute_type,
            "display_order": display_order,
        }
        data = {k: v for k, v in data.items() if v is not None}

        response = self.client.post(url=f"/v3/attribute-value/", json=data)

        response.raise_for_status()

        return AttributeValueSchema(**response.json())

    def retrieve(self, id: int) -> AttributeValueSchema:
        """
        Retrieve a Attribute Value by ID

        Retrieve a Attribute Value by ID
        """

        response = self.client.get(url=f"/v3/attribute-value/{id}/")

        response.raise_for_status()

        return AttributeValueSchema(**response.json())

    def update(self, id: int, value: Optional[str] = None, attribute_type: Optional[Any] = None,
               display_order: Optional[int] = None) -> AttributeValueSchema:
        """
        Partially update a Attribute Value by ID

        Partially update a Attribute Value by ID
        """
        data = {
            "id": id,
            "value": value,
            "attribute_type": attribute_type,
            "display_order": display_order,
        }
        data = {k: v for k, v in data.items() if v is not None}

        response = self.client.patch(url=f"/v3/attribute-value/{id}/", json=data)

        response.raise_for_status()

        return AttributeValueSchema(**response.json())

    def destroy(self, id: int) -> AttributeValueSchema:
        """
        Destroy a Attribute Value by ID

        Destroy a Attribute Value by ID
        """

        response = self.client.delete(url=f"/v3/attribute-value/{id}/")

        response.raise_for_status()

        return AttributeValueSchema(**response.json())

