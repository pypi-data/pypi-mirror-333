"""
Auto generated by Mercado Radar SDK Generator
2025-03-11 18:50:44
"""
from datetime import datetime
from typing import Optional, List, Any

from ..models._paginated_response import PaginatedResponse
from ..models._seller import Seller as SellerSchema


class Seller:

    def __init__(self, client):
        self.client = client

    def list(self, name: Optional[str] = None, url: Optional[str] = None, is_official_store: Optional[bool] = None,
             type: Optional[List[Any]] = None, site_id: Optional[float] = None, corporate_name: Optional[str] = None,
             corporate_identification_number: Optional[str] = None,
             corporate_identification_type: Optional[List[Any]] = None, address: Optional[str] = None,
             city_id: Optional[float] = None, street: Optional[str] = None, street_number: Optional[str] = None,
             complement: Optional[str] = None, neighborhood: Optional[str] = None, zip_code: Optional[str] = None,
             city_name: Optional[str] = None, state: Optional[str] = None, uf: Optional[str] = None,
             country: Optional[List[Any]] = None, limit: Optional[int] = None, offset: Optional[int] = None) -> \
    PaginatedResponse[SellerSchema]:
        """
        List all Sellers

        List all Sellers
        """
        data = {
            "name": name,
            "url": url,
            "is_official_store": is_official_store,
            "type": type,
            "site_id": site_id,
            "corporate_name": corporate_name,
            "corporate_identification_number": corporate_identification_number,
            "corporate_identification_type": corporate_identification_type,
            "address": address,
            "city_id": city_id,
            "street": street,
            "street_number": street_number,
            "complement": complement,
            "neighborhood": neighborhood,
            "zip_code": zip_code,
            "city_name": city_name,
            "state": state,
            "uf": uf,
            "country": country,
            "limit": limit,
            "offset": offset,
        }
        data = {k: v for k, v in data.items() if v is not None}

        response = self.client.get(url=f"/v3/seller/", params=data)

        response.raise_for_status()

        data = response.json()

        count = data.get('count', 0)
        next_page = data.get('next')
        previous_page = data.get('previous')
        results = data.get('results')

        parsed_results = []
        for result in results:
            parsed_results.append(SellerSchema(**result))

        parsed_paginated_response = {"count": count, "next": next_page, "previous": previous_page,
                                     "results": parsed_results}

        return PaginatedResponse(**parsed_paginated_response)

    def create(self, name: Optional[str] = None, url: Optional[str] = None, site: Optional[Any] = None,
               corporate_identification_name: Optional[str] = None, corporate_identification_type: Optional[str] = None,
               corporate_identification_number: Optional[str] = None, is_official_store: Optional[bool] = None,
               type: Optional[Any] = None, address: Optional[str] = None, address_updated_at: Optional[datetime] = None,
               street: Optional[str] = None, street_number: Optional[str] = None, complement: Optional[str] = None,
               neighborhood: Optional[str] = None, zip_code: Optional[str] = None, city_name: Optional[str] = None,
               state: Optional[str] = None, uf: Optional[str] = None, country: Optional[str] = None) -> SellerSchema:
        """
        Create a new Seller

        Create a new Seller
        """
        data = {
            "name": name,
            "url": url,
            "site": site,
            "corporate_identification_name": corporate_identification_name,
            "corporate_identification_type": corporate_identification_type,
            "corporate_identification_number": corporate_identification_number,
            "is_official_store": is_official_store,
            "type": type,
            "address": address,
            "address_updated_at": address_updated_at,
            "street": street,
            "street_number": street_number,
            "complement": complement,
            "neighborhood": neighborhood,
            "zip_code": zip_code,
            "city_name": city_name,
            "state": state,
            "uf": uf,
            "country": country,
        }
        data = {k: v for k, v in data.items() if v is not None}

        response = self.client.post(url=f"/v3/seller/", json=data)

        response.raise_for_status()

        return SellerSchema(**response.json())

    def retrieve(self, id: int) -> SellerSchema:
        """
        Retrieve a Seller by ID

        Retrieve a Seller by ID
        """

        response = self.client.get(url=f"/v3/seller/{id}/")

        response.raise_for_status()

        return SellerSchema(**response.json())

    def update(self, id: int, name: Optional[str] = None, url: Optional[str] = None, site: Optional[Any] = None,
               corporate_identification_name: Optional[str] = None, corporate_identification_type: Optional[str] = None,
               corporate_identification_number: Optional[str] = None, is_official_store: Optional[bool] = None,
               type: Optional[Any] = None, address: Optional[str] = None, address_updated_at: Optional[datetime] = None,
               street: Optional[str] = None, street_number: Optional[str] = None, complement: Optional[str] = None,
               neighborhood: Optional[str] = None, zip_code: Optional[str] = None, city_name: Optional[str] = None,
               state: Optional[str] = None, uf: Optional[str] = None, country: Optional[str] = None) -> SellerSchema:
        """
        Partially update a Seller by ID

        Partially update a Seller by ID
        """
        data = {
            "id": id,
            "name": name,
            "url": url,
            "site": site,
            "corporate_identification_name": corporate_identification_name,
            "corporate_identification_type": corporate_identification_type,
            "corporate_identification_number": corporate_identification_number,
            "is_official_store": is_official_store,
            "type": type,
            "address": address,
            "address_updated_at": address_updated_at,
            "street": street,
            "street_number": street_number,
            "complement": complement,
            "neighborhood": neighborhood,
            "zip_code": zip_code,
            "city_name": city_name,
            "state": state,
            "uf": uf,
            "country": country,
        }
        data = {k: v for k, v in data.items() if v is not None}

        response = self.client.patch(url=f"/v3/seller/{id}/", json=data)

        response.raise_for_status()

        return SellerSchema(**response.json())

    def destroy(self, id: int) -> SellerSchema:
        """
        Destroy a Seller by ID

        Destroy a Seller by ID
        """

        response = self.client.delete(url=f"/v3/seller/{id}/")

        response.raise_for_status()

        return SellerSchema(**response.json())

