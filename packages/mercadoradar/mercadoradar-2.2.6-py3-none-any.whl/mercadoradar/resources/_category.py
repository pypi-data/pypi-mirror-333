"""
Auto generated by Mercado Radar SDK Generator
2025-03-11 18:50:44
"""
from typing import Optional, Any

from ..models._category import Category as CategorySchema
from ..models._paginated_response import PaginatedResponse


class Category:

    def __init__(self, client):
        self.client = client

    def list(self, name: Optional[str] = None, parent_id: Optional[float] = None, path_from_root: Optional[str] = None,
             children_categories: Optional[str] = None, limit: Optional[int] = None, offset: Optional[int] = None) -> \
    PaginatedResponse[CategorySchema]:
        """
        List all Categorys

        List all Categorys
        """
        data = {
            "name": name,
            "parent_id": parent_id,
            "path_from_root": path_from_root,
            "children_categories": children_categories,
            "limit": limit,
            "offset": offset,
        }
        data = {k: v for k, v in data.items() if v is not None}

        response = self.client.get(url=f"/v3/category/", params=data)

        response.raise_for_status()

        data = response.json()

        count = data.get('count', 0)
        next_page = data.get('next')
        previous_page = data.get('previous')
        results = data.get('results')

        parsed_results = []
        for result in results:
            parsed_results.append(CategorySchema(**result))

        parsed_paginated_response = {"count": count, "next": next_page, "previous": previous_page,
                                     "results": parsed_results}

        return PaginatedResponse(**parsed_paginated_response)

    def create(self, id: str, name: Optional[str] = None, path_from_root: Optional[Any] = None,
               children_categories: Optional[Any] = None, domain_id: Optional[str] = None,
               parent: Optional[str] = None) -> CategorySchema:
        """
        Create a new Category

        Create a new Category
        """
        data = {
            "id": id,
            "name": name,
            "path_from_root": path_from_root,
            "children_categories": children_categories,
            "domain_id": domain_id,
            "parent": parent,
        }
        data = {k: v for k, v in data.items() if v is not None}

        response = self.client.post(url=f"/v3/category/", json=data)

        response.raise_for_status()

        return CategorySchema(**response.json())

    def retrieve(self, id: str) -> CategorySchema:
        """
        Retrieve a Category by ID

        Retrieve a Category by ID
        """

        response = self.client.get(url=f"/v3/category/{id}/")

        response.raise_for_status()

        return CategorySchema(**response.json())

    def update(self, id: str, name: Optional[str] = None, path_from_root: Optional[Any] = None,
               children_categories: Optional[Any] = None, domain_id: Optional[str] = None,
               parent: Optional[str] = None) -> CategorySchema:
        """
        Partially update a Category by ID

        Partially update a Category by ID
        """
        data = {
            "id": id,
            "name": name,
            "path_from_root": path_from_root,
            "children_categories": children_categories,
            "domain_id": domain_id,
            "parent": parent,
        }
        data = {k: v for k, v in data.items() if v is not None}

        response = self.client.patch(url=f"/v3/category/{id}/", json=data)

        response.raise_for_status()

        return CategorySchema(**response.json())

    def destroy(self, id: int) -> CategorySchema:
        """
        Destroy a Category by ID

        Destroy a Category by ID
        """

        response = self.client.delete(url=f"/v3/category/{id}/")

        response.raise_for_status()

        return CategorySchema(**response.json())

