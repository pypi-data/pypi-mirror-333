"""
Auto generated by Mercado Radar SDK Generator
2025-03-11 19:06:29
"""
from typing import Optional

from ..models._paginated_response import PaginatedResponse
from ..models._verification_history import VerificationHistory as VerificationHistorySchema


class VerificationHistory:

    def __init__(self, client):
        self.client = client

    def list(self, limit: Optional[int] = None, offset: Optional[int] = None) -> PaginatedResponse[
        VerificationHistorySchema]:
        """
        List all Verifications

        List all Verifications
        """
        data = {
            "limit": limit,
            "offset": offset,
        }
        data = {k: v for k, v in data.items() if v is not None}

        response = self.client.get(url=f"/v3/verification-history/", params=data)

        response.raise_for_status()

        data = response.json()

        count = data.get('count', 0)
        next_page = data.get('next')
        previous_page = data.get('previous')
        results = data.get('results')

        parsed_results = []
        for result in results:
            parsed_results.append(VerificationHistorySchema(**result))

        parsed_paginated_response = {"count": count, "next": next_page, "previous": previous_page,
                                     "results": parsed_results}

        return PaginatedResponse(**parsed_paginated_response)

    def create(self, type: Optional[str] = None, object_type: Optional[str] = None, object_id: Optional[int] = None,
               is_verified: Optional[bool] = None, reason: Optional[str] = None,
               suggestion: Optional[str] = None) -> VerificationHistorySchema:
        """
        Create a new Verification History for a object

        Create a new Verification History for a object

type:

* `BRAND` - Marca
* `CATEGORY` - Categoria
* `IS_KIT` - É kit
* `IS_KIT_SAME_PRODUCT` - É kit do mesmo produto
* `UNITS_PER_KIT` - Unidades por kit
* `PRODUCT_ATTRIBUTE` - Atributo do produto
* `ATTRIBUTE` - Atributo
* `CRAWLER_SEARCH` - Busca

object_type:

* `product` - Product
        """
        data = {
            "type": type,
            "object_type": object_type,
            "object_id": object_id,
            "is_verified": is_verified,
            "reason": reason,
            "suggestion": suggestion,
        }
        data = {k: v for k, v in data.items() if v is not None}

        response = self.client.post(url=f"/v3/verification-history/", json=data)

        response.raise_for_status()

        return VerificationHistorySchema(**response.json())

    def retrieve(self, id: str) -> VerificationHistorySchema:
        """
        Retrieve a Verification History by ID

        Retrieve a Verification History by ID
        """

        response = self.client.get(url=f"/v3/verification-history/{id}/")

        response.raise_for_status()

        return VerificationHistorySchema(**response.json())

    def destroy(self, id: int) -> VerificationHistorySchema:
        """
        Destroy a Verification History by ID

        Destroy a Verification History by ID
        """

        response = self.client.delete(url=f"/v3/verification-history/{id}/")

        response.raise_for_status()

        return VerificationHistorySchema(**response.json())

