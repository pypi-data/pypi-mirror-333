"""
Auto generated by Mercado Radar SDK Generator
2025-03-11 19:52:27
"""
import json
from typing import Optional

from ..models._attribute_type import AttributeType as AttributeTypeSchema
from ..models._paginated_response import PaginatedResponse


class AttributeType:

    def __init__(self, client):
        self.client = client

    def list(self, value: Optional[str] = None, has_unit: Optional[bool] = None,
             has_predefined_values: Optional[bool] = None, limit: Optional[int] = None, offset: Optional[int] = None) -> \
    PaginatedResponse[AttributeTypeSchema]:
        """
        List all Attribute Types

        List all Attribute Types
        """
        data = {
            "value": value,
            "has_unit": has_unit,
            "has_predefined_values": has_predefined_values,
            "limit": limit,
            "offset": offset,
        }
        data = {k: v for k, v in data.items() if v is not None}
        data = json.dumps(data, default=str)

        response = self.client.get(url=f"/v3/attribute-type/", params=data)

        response.raise_for_status()

        data = response.json()

        count = data.get('count', 0)
        next_page = data.get('next')
        previous_page = data.get('previous')
        results = data.get('results')

        parsed_results = []
        for result in results:
            parsed_results.append(AttributeTypeSchema(**result))

        parsed_paginated_response = {"count": count, "next": next_page, "previous": previous_page,
                                     "results": parsed_results}

        return PaginatedResponse(**parsed_paginated_response)

    def create(self, value: Optional[str] = None, has_unit: Optional[bool] = None,
               has_predefined_values: Optional[bool] = None) -> AttributeTypeSchema:
        """
        Create a new Attribute Type

        Create a new Attribute Type
        """
        data = {
            "value": value,
            "has_unit": has_unit,
            "has_predefined_values": has_predefined_values,
        }
        data = {k: v for k, v in data.items() if v is not None}
        data = json.dumps(data, default=str)

        response = self.client.post(url=f"/v3/attribute-type/", content=data)

        response.raise_for_status()

        return AttributeTypeSchema(**response.json())

    def retrieve(self, id: int) -> AttributeTypeSchema:
        """
        Retrieve a Attribute Type by ID

        Retrieve a Attribute Type by ID
        """

        response = self.client.get(url=f"/v3/attribute-type/{id}/")

        response.raise_for_status()

        return AttributeTypeSchema(**response.json())

    def update(self, id: int, value: Optional[str] = None, has_unit: Optional[bool] = None,
               has_predefined_values: Optional[bool] = None) -> AttributeTypeSchema:
        """
        Partially update a Attribute Type by ID

        Partially update a Attribute Type by ID
        """
        data = {
            "id": id,
            "value": value,
            "has_unit": has_unit,
            "has_predefined_values": has_predefined_values,
        }
        data = {k: v for k, v in data.items() if v is not None}
        data = json.dumps(data, default=str)

        response = self.client.patch(url=f"/v3/attribute-type/{id}/", content=data)

        response.raise_for_status()

        return AttributeTypeSchema(**response.json())

    def destroy(self, id: int) -> AttributeTypeSchema:
        """
        Destroy a Attribute Type by ID

        Destroy a Attribute Type by ID
        """

        response = self.client.delete(url=f"/v3/attribute-type/{id}/")

        response.raise_for_status()

        return AttributeTypeSchema(**response.json())

