"""
Auto generated by Mercado Radar SDK Generator
2025-03-11 19:52:27
"""
import json
from datetime import datetime
from typing import Optional, List, Any

from ..models._paginated_response import PaginatedResponse
from ..models._product import Product as ProductSchema


class Product:

    def __init__(self, client):
        self.client = client

    def list(self, name: Optional[str] = None, sku_code: Optional[str] = None, url: Optional[str] = None,
             site_id: Optional[float] = None, category_id: Optional[float] = None, seller_id: Optional[float] = None,
             brand_id: Optional[float] = None, regular_price_min: Optional[float] = None,
             regular_price_max: Optional[float] = None, sales_price_min: Optional[float] = None,
             sales_price_max: Optional[float] = None, installment_price_min: Optional[float] = None,
             installment_price_max: Optional[float] = None, status: Optional[List[Any]] = None,
             is_kit: Optional[bool] = None, is_kit_same_product: Optional[bool] = None,
             units_per_kit_min: Optional[int] = None, units_per_kit_max: Optional[int] = None,
             is_buy_box: Optional[bool] = None, attributes_ids: Optional[str] = None,
             attributes_values: Optional[str] = None, attributes_values_min: Optional[str] = None,
             attributes_values_max: Optional[str] = None, is_international_order: Optional[bool] = None,
             limit: Optional[int] = None, offset: Optional[int] = None) -> PaginatedResponse[ProductSchema]:
        """
        List all Products

        List all Products
        """
        data = {
            "name": name,
            "sku_code": sku_code,
            "url": url,
            "site_id": site_id,
            "category_id": category_id,
            "seller_id": seller_id,
            "brand_id": brand_id,
            "regular_price_min": regular_price_min,
            "regular_price_max": regular_price_max,
            "sales_price_min": sales_price_min,
            "sales_price_max": sales_price_max,
            "installment_price_min": installment_price_min,
            "installment_price_max": installment_price_max,
            "status": status,
            "is_kit": is_kit,
            "is_kit_same_product": is_kit_same_product,
            "units_per_kit_min": units_per_kit_min,
            "units_per_kit_max": units_per_kit_max,
            "is_buy_box": is_buy_box,
            "attributes_ids": attributes_ids,
            "attributes_values": attributes_values,
            "attributes_values_min": attributes_values_min,
            "attributes_values_max": attributes_values_max,
            "is_international_order": is_international_order,
            "limit": limit,
            "offset": offset,
        }
        data = {k: v for k, v in data.items() if v is not None}
        data = json.dumps(data, default=str)

        response = self.client.get(url=f"/v3/product/", params=data)

        response.raise_for_status()

        data = response.json()

        count = data.get('count', 0)
        next_page = data.get('next')
        previous_page = data.get('previous')
        results = data.get('results')

        parsed_results = []
        for result in results:
            parsed_results.append(ProductSchema(**result))

        parsed_paginated_response = {"count": count, "next": next_page, "previous": previous_page,
                                     "results": parsed_results}

        return PaginatedResponse(**parsed_paginated_response)

    def create(self, name: Optional[str] = None, sku_code: Optional[str] = None, url: Optional[str] = None,
               picture_url: Optional[str] = None, description: Optional[str] = None, status: Optional[str] = None,
               site_id: Optional[int] = None, seller_id: Optional[int] = None, category_id: Optional[str] = None,
               category_updated_at: Optional[datetime] = None, category_verified_at: Optional[datetime] = None,
               brand_id: Optional[int] = None, brand_verified_at: Optional[datetime] = None,
               regular_price: Optional[float] = None, sales_price: Optional[float] = None,
               installment_price: Optional[float] = None, previous_regular_price: Optional[float] = None,
               previous_sales_price: Optional[float] = None, previous_installment_price: Optional[float] = None,
               price_updated_at: Optional[datetime] = None, is_international_order: Optional[bool] = None,
               is_kit: Optional[bool] = None, is_kit_verified_at: Optional[datetime] = None,
               is_kit_same_product: Optional[bool] = None, is_kit_same_product_verified_at: Optional[datetime] = None,
               units_per_kit: Optional[int] = None, units_per_kit_verified_at: Optional[datetime] = None,
               is_buy_box: Optional[bool] = None) -> ProductSchema:
        """
        Create a new Product

        Create a new Product
        """
        data = {
            "name": name,
            "sku_code": sku_code,
            "url": url,
            "picture_url": picture_url,
            "description": description,
            "status": status,
            "site_id": site_id,
            "seller_id": seller_id,
            "category_id": category_id,
            "category_updated_at": category_updated_at,
            "category_verified_at": category_verified_at,
            "brand_id": brand_id,
            "brand_verified_at": brand_verified_at,
            "regular_price": regular_price,
            "sales_price": sales_price,
            "installment_price": installment_price,
            "previous_regular_price": previous_regular_price,
            "previous_sales_price": previous_sales_price,
            "previous_installment_price": previous_installment_price,
            "price_updated_at": price_updated_at,
            "is_international_order": is_international_order,
            "is_kit": is_kit,
            "is_kit_verified_at": is_kit_verified_at,
            "is_kit_same_product": is_kit_same_product,
            "is_kit_same_product_verified_at": is_kit_same_product_verified_at,
            "units_per_kit": units_per_kit,
            "units_per_kit_verified_at": units_per_kit_verified_at,
            "is_buy_box": is_buy_box,
        }
        data = {k: v for k, v in data.items() if v is not None}
        data = json.dumps(data, default=str)

        response = self.client.post(url=f"/v3/product/", content=data)

        response.raise_for_status()

        return ProductSchema(**response.json())

    def retrieve(self, id: int) -> ProductSchema:
        """
        Retrieve a Product by ID

        Retrieve a Product by ID
        """

        response = self.client.get(url=f"/v3/product/{id}/")

        response.raise_for_status()

        return ProductSchema(**response.json())

    def update(self, id: int, name: Optional[str] = None, sku_code: Optional[str] = None, url: Optional[str] = None,
               picture_url: Optional[str] = None, description: Optional[str] = None, status: Optional[str] = None,
               site_id: Optional[int] = None, seller_id: Optional[int] = None, category_id: Optional[str] = None,
               category_updated_at: Optional[datetime] = None, category_verified_at: Optional[datetime] = None,
               brand_id: Optional[int] = None, brand_verified_at: Optional[datetime] = None,
               regular_price: Optional[float] = None, sales_price: Optional[float] = None,
               installment_price: Optional[float] = None, previous_regular_price: Optional[float] = None,
               previous_sales_price: Optional[float] = None, previous_installment_price: Optional[float] = None,
               price_updated_at: Optional[datetime] = None, is_international_order: Optional[bool] = None,
               is_kit: Optional[bool] = None, is_kit_verified_at: Optional[datetime] = None,
               is_kit_same_product: Optional[bool] = None, is_kit_same_product_verified_at: Optional[datetime] = None,
               units_per_kit: Optional[int] = None, units_per_kit_verified_at: Optional[datetime] = None,
               is_buy_box: Optional[bool] = None) -> ProductSchema:
        """
        Partially update a Product by ID

        Partially update a Product by ID
        """
        data = {
            "id": id,
            "name": name,
            "sku_code": sku_code,
            "url": url,
            "picture_url": picture_url,
            "description": description,
            "status": status,
            "site_id": site_id,
            "seller_id": seller_id,
            "category_id": category_id,
            "category_updated_at": category_updated_at,
            "category_verified_at": category_verified_at,
            "brand_id": brand_id,
            "brand_verified_at": brand_verified_at,
            "regular_price": regular_price,
            "sales_price": sales_price,
            "installment_price": installment_price,
            "previous_regular_price": previous_regular_price,
            "previous_sales_price": previous_sales_price,
            "previous_installment_price": previous_installment_price,
            "price_updated_at": price_updated_at,
            "is_international_order": is_international_order,
            "is_kit": is_kit,
            "is_kit_verified_at": is_kit_verified_at,
            "is_kit_same_product": is_kit_same_product,
            "is_kit_same_product_verified_at": is_kit_same_product_verified_at,
            "units_per_kit": units_per_kit,
            "units_per_kit_verified_at": units_per_kit_verified_at,
            "is_buy_box": is_buy_box,
        }
        data = {k: v for k, v in data.items() if v is not None}
        data = json.dumps(data, default=str)

        response = self.client.patch(url=f"/v3/product/{id}/", content=data)

        response.raise_for_status()

        return ProductSchema(**response.json())

    def destroy(self, id: int) -> ProductSchema:
        """
        Destroy a Product by ID

        Destroy a Product by ID
        """

        response = self.client.delete(url=f"/v3/product/{id}/")

        response.raise_for_status()

        return ProductSchema(**response.json())
