"""
Auto generated by Mercado Radar SDK Generator
2025-03-11 19:10:02
"""
import os

import httpx

from .resources import (_account, _attribute_type, _attribute_value, _brand, _category, _filter, _product,
                        _product_attribute_value, _product_history, _search, _seller, _site, _ticket, _user,
                        _verification_history, )

__all__ = ["MercadoRadar"]


class MercadoRadar(httpx.Client):
    base_url: str
    token: str

    account: _account.Account
    attribute_type: _attribute_type.AttributeType
    attribute_value: _attribute_value.AttributeValue
    brand: _brand.Brand
    category: _category.Category
    filter: _filter.Filter
    product: _product.Product
    product_attribute_value: _product_attribute_value.ProductAttributeValue
    product_history: _product_history.ProductHistory
    search: _search.Search
    seller: _seller.Seller
    site: _site.Site
    ticket: _ticket.Ticket
    user: _user.User
    verification_history: _verification_history.VerificationHistory

    def __init__(self, token: str | None = None, base_url: str | None = None, headers: dict | None = None) -> None:
        if headers is None:
            headers = {}
        if token is None:
            token = os.getenv("MERCADORADAR_TOKEN")
        if token is None:
            raise ValueError(
                "The token option must be set either by passing token to the client or by setting the MERCADORADAR_TOKEN environment variable")

        if base_url is None:
            base_url = os.getenv("MERCADORADAR_BASE_URL", "https://api-pricing.mercadoradar.com.br")

        headers.update({"Authorization": f"Token {token}"})

        timeout = httpx.Timeout(connect=None, read=None, write=None, pool=None)

        super().__init__(base_url=base_url, headers=headers, http2=True, timeout=timeout)

        self.account = _account.Account(self)
        self.attribute_type = _attribute_type.AttributeType(self)
        self.attribute_value = _attribute_value.AttributeValue(self)
        self.brand = _brand.Brand(self)
        self.category = _category.Category(self)
        self.filter = _filter.Filter(self)
        self.product = _product.Product(self)
        self.product_attribute_value = _product_attribute_value.ProductAttributeValue(self)
        self.product_history = _product_history.ProductHistory(self)
        self.search = _search.Search(self)
        self.seller = _seller.Seller(self)
        self.site = _site.Site(self)
        self.ticket = _ticket.Ticket(self)
        self.user = _user.User(self)
        self.verification_history = _verification_history.VerificationHistory(self)
