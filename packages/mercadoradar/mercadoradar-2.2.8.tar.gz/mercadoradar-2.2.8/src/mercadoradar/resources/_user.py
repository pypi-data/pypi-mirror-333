"""
Auto generated by Mercado Radar SDK Generator
2025-03-11 19:10:02
"""
import json
from typing import Optional, List, Any

from ..models._paginated_response import PaginatedResponse
from ..models._user import User as UserSchema


class User:

    def __init__(self, client):
        self.client = client

    def list(self, email: Optional[str] = None, name: Optional[str] = None, account_id: Optional[float] = None,
             access_level: Optional[List[Any]] = None, limit: Optional[int] = None, offset: Optional[int] = None) -> \
    PaginatedResponse[UserSchema]:
        """
        List all Users

        List all Users
        """
        data = {
            "email": email,
            "name": name,
            "account_id": account_id,
            "access_level": access_level,
            "limit": limit,
            "offset": offset,
        }
        data = {k: v for k, v in data.items() if v is not None}
        data = json.dumps(data, default=str)

        response = self.client.get(url=f"/v3/user/", params=data)

        response.raise_for_status()

        data = response.json()

        count = data.get('count', 0)
        next_page = data.get('next')
        previous_page = data.get('previous')
        results = data.get('results')

        parsed_results = []
        for result in results:
            parsed_results.append(UserSchema(**result))

        parsed_paginated_response = {"count": count, "next": next_page, "previous": previous_page,
                                     "results": parsed_results}

        return PaginatedResponse(**parsed_paginated_response)

    def create(self, first_name: Optional[str] = None, last_name: Optional[str] = None, email: Optional[str] = None,
               password: Optional[str] = None) -> UserSchema:
        """
        Create a new User

        Create a new User
        """
        data = {
            "first_name": first_name,
            "last_name": last_name,
            "email": email,
            "password": password,
        }
        data = {k: v for k, v in data.items() if v is not None}
        data = json.dumps(data, default=str)

        response = self.client.post(url=f"/v3/user/", json=data)

        response.raise_for_status()

        return UserSchema(**response.json())

    def retrieve(self, id: int) -> UserSchema:
        """
        Retrieve a User by ID

        Retrieve a User by ID
        """

        response = self.client.get(url=f"/v3/user/{id}/")

        response.raise_for_status()

        return UserSchema(**response.json())

    def update(self, id: int, first_name: Optional[str] = None, last_name: Optional[str] = None,
               email: Optional[str] = None, password: Optional[str] = None) -> UserSchema:
        """
        Partially update a User by ID

        Partially update a User by ID
        """
        data = {
            "id": id,
            "first_name": first_name,
            "last_name": last_name,
            "email": email,
            "password": password,
        }
        data = {k: v for k, v in data.items() if v is not None}
        data = json.dumps(data, default=str)

        response = self.client.patch(url=f"/v3/user/{id}/", json=data)

        response.raise_for_status()

        return UserSchema(**response.json())

    def destroy(self, id: int) -> UserSchema:
        """
        Destroy a User by ID

        Destroy a User by ID
        """

        response = self.client.delete(url=f"/v3/user/{id}/")

        response.raise_for_status()

        return UserSchema(**response.json())

