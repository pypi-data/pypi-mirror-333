"""
Auto generated by Mercado Radar SDK Generator
2025-03-11 19:10:02
"""
import json
from typing import Optional, List, Any

from ..models._paginated_response import PaginatedResponse
from ..models._site import Site as SiteSchema


class Site:

    def __init__(self, client):
        self.client = client

    def list(self, name: Optional[str] = None, domain: Optional[str] = None, currency: Optional[List[Any]] = None,
             status: Optional[List[Any]] = None, is_marketplace: Optional[bool] = None,
             country: Optional[List[Any]] = None, language: Optional[List[Any]] = None, limit: Optional[int] = None,
             offset: Optional[int] = None) -> PaginatedResponse[SiteSchema]:
        """
        List all Sites

        List all Sites
        """
        data = {
            "name": name,
            "domain": domain,
            "currency": currency,
            "status": status,
            "is_marketplace": is_marketplace,
            "country": country,
            "language": language,
            "limit": limit,
            "offset": offset,
        }
        data = {k: v for k, v in data.items() if v is not None}
        data = json.dumps(data, default=str)

        response = self.client.get(url=f"/v3/site/", params=data)

        response.raise_for_status()

        data = response.json()

        count = data.get('count', 0)
        next_page = data.get('next')
        previous_page = data.get('previous')
        results = data.get('results')

        parsed_results = []
        for result in results:
            parsed_results.append(SiteSchema(**result))

        parsed_paginated_response = {"count": count, "next": next_page, "previous": previous_page,
                                     "results": parsed_results}

        return PaginatedResponse(**parsed_paginated_response)

    def create(self, name: Optional[str] = None, domain: Optional[str] = None, currency: Optional[Any] = None,
               currency_symbol: Optional[str] = None, status: Optional[Any] = None,
               is_marketplace: Optional[bool] = None, country: Optional[Any] = None, language: Optional[Any] = None,
               logo_url: Optional[str] = None, thousand_separator: Optional[Any] = None,
               decimal_separator: Optional[Any] = None) -> SiteSchema:
        """
        Create a new Site

        Create a new Site
        """
        data = {
            "name": name,
            "domain": domain,
            "currency": currency,
            "currency_symbol": currency_symbol,
            "status": status,
            "is_marketplace": is_marketplace,
            "country": country,
            "language": language,
            "logo_url": logo_url,
            "thousand_separator": thousand_separator,
            "decimal_separator": decimal_separator,
        }
        data = {k: v for k, v in data.items() if v is not None}
        data = json.dumps(data, default=str)

        response = self.client.post(url=f"/v3/site/", json=data)

        response.raise_for_status()

        return SiteSchema(**response.json())

    def retrieve(self, id: int) -> SiteSchema:
        """
        Retrieve a Site by ID

        Retrieve a Site by ID
        """

        response = self.client.get(url=f"/v3/site/{id}/")

        response.raise_for_status()

        return SiteSchema(**response.json())

    def update(self, id: int, name: Optional[str] = None, domain: Optional[str] = None, currency: Optional[Any] = None,
               currency_symbol: Optional[str] = None, status: Optional[Any] = None,
               is_marketplace: Optional[bool] = None, country: Optional[Any] = None, language: Optional[Any] = None,
               logo_url: Optional[str] = None, thousand_separator: Optional[Any] = None,
               decimal_separator: Optional[Any] = None) -> SiteSchema:
        """
        Partially update a Site by ID

        Partially update a Site by ID
        """
        data = {
            "id": id,
            "name": name,
            "domain": domain,
            "currency": currency,
            "currency_symbol": currency_symbol,
            "status": status,
            "is_marketplace": is_marketplace,
            "country": country,
            "language": language,
            "logo_url": logo_url,
            "thousand_separator": thousand_separator,
            "decimal_separator": decimal_separator,
        }
        data = {k: v for k, v in data.items() if v is not None}
        data = json.dumps(data, default=str)

        response = self.client.patch(url=f"/v3/site/{id}/", json=data)

        response.raise_for_status()

        return SiteSchema(**response.json())

    def destroy(self, id: int) -> SiteSchema:
        """
        Destroy a Site by ID

        Destroy a Site by ID
        """

        response = self.client.delete(url=f"/v3/site/{id}/")

        response.raise_for_status()

        return SiteSchema(**response.json())

