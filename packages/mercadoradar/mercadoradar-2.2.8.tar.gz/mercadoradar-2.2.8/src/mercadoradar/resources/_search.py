"""
Auto generated by Mercado Radar SDK Generator
2025-03-11 19:10:02
"""
import json
from typing import Optional, Any

from ..models._paginated_response import PaginatedResponse
from ..models._search import Search as SearchSchema


class Search:

    def __init__(self, client):
        self.client = client

    def list(self, limit: Optional[int] = None, offset: Optional[int] = None) -> PaginatedResponse[SearchSchema]:
        """
        List all Searches

        List all Searches
        """
        data = {
            "limit": limit,
            "offset": offset,
        }
        data = {k: v for k, v in data.items() if v is not None}
        data = json.dumps(data, default=str)

        response = self.client.get(url=f"/v3/search/", params=data)

        response.raise_for_status()

        data = response.json()

        count = data.get('count', 0)
        next_page = data.get('next')
        previous_page = data.get('previous')
        results = data.get('results')

        parsed_results = []
        for result in results:
            parsed_results.append(SearchSchema(**result))

        parsed_paginated_response = {"count": count, "next": next_page, "previous": previous_page,
                                     "results": parsed_results}

        return PaginatedResponse(**parsed_paginated_response)

    def create(self, url: Optional[str] = None, site: Optional[Any] = None, description: Optional[str] = None,
               total_products: Optional[int] = None, total_products_manual: Optional[int] = None,
               type: Optional[Any] = None) -> SearchSchema:
        """
        Create a new Search

        Create a new Search
        """
        data = {
            "url": url,
            "site": site,
            "description": description,
            "total_products": total_products,
            "total_products_manual": total_products_manual,
            "type": type,
        }
        data = {k: v for k, v in data.items() if v is not None}
        data = json.dumps(data, default=str)

        response = self.client.post(url=f"/v3/search/", json=data)

        response.raise_for_status()

        return SearchSchema(**response.json())

    def retrieve(self, id: int) -> SearchSchema:
        """
        Retrieve a Search by ID

        Retrieve a Search by ID
        """

        response = self.client.get(url=f"/v3/search/{id}/")

        response.raise_for_status()

        return SearchSchema(**response.json())

    def update(self, id: int, url: Optional[str] = None, site: Optional[Any] = None, description: Optional[str] = None,
               total_products: Optional[int] = None, total_products_manual: Optional[int] = None,
               type: Optional[Any] = None) -> SearchSchema:
        """
        Partially update a Search by ID

        Partially update a Search by ID
        """
        data = {
            "id": id,
            "url": url,
            "site": site,
            "description": description,
            "total_products": total_products,
            "total_products_manual": total_products_manual,
            "type": type,
        }
        data = {k: v for k, v in data.items() if v is not None}
        data = json.dumps(data, default=str)

        response = self.client.patch(url=f"/v3/search/{id}/", json=data)

        response.raise_for_status()

        return SearchSchema(**response.json())

    def destroy(self, id: int) -> SearchSchema:
        """
        Destroy a Search by ID

        Destroy a Search by ID
        """

        response = self.client.delete(url=f"/v3/search/{id}/")

        response.raise_for_status()

        return SearchSchema(**response.json())

