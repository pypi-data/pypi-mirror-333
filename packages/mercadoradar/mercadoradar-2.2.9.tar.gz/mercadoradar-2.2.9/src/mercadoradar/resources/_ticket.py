"""
Auto generated by Mercado Radar SDK Generator
2025-03-11 19:52:27
"""
import json
from typing import Optional, List, Any

from ..models._paginated_response import PaginatedResponse
from ..models._ticket import Ticket as TicketSchema


class Ticket:

    def __init__(self, client):
        self.client = client

    def list(self, responsible_id: Optional[int] = None, customer_id: Optional[int] = None,
             status: Optional[List[Any]] = None, category: Optional[List[Any]] = None,
             created_at_after: Optional[str] = None, created_at_before: Optional[str] = None,
             closed_at_after: Optional[str] = None, closed_at_before: Optional[str] = None,
             days_open_min: Optional[str] = None, days_open_max: Optional[str] = None, limit: Optional[int] = None,
             offset: Optional[int] = None) -> PaginatedResponse[TicketSchema]:
        """
        List all Tickets

        List all Tickets
        """
        data = {
            "responsible_id": responsible_id,
            "customer_id": customer_id,
            "status": status,
            "category": category,
            "created_at_after": created_at_after,
            "created_at_before": created_at_before,
            "closed_at_after": closed_at_after,
            "closed_at_before": closed_at_before,
            "days_open_min": days_open_min,
            "days_open_max": days_open_max,
            "limit": limit,
            "offset": offset,
        }
        data = {k: v for k, v in data.items() if v is not None}
        data = json.dumps(data, default=str)

        response = self.client.get(url=f"/v3/ticket/", params=data)

        response.raise_for_status()

        data = response.json()

        count = data.get('count', 0)
        next_page = data.get('next')
        previous_page = data.get('previous')
        results = data.get('results')

        parsed_results = []
        for result in results:
            parsed_results.append(TicketSchema(**result))

        parsed_paginated_response = {"count": count, "next": next_page, "previous": previous_page,
                                     "results": parsed_results}

        return PaginatedResponse(**parsed_paginated_response)

    def create(self, title: Optional[str] = None, description: Optional[str] = None, customer: Optional[Any] = None,
               customer_id: Optional[int] = None, customer_email: Optional[str] = None,
               opened_by_user: Optional[Any] = None) -> TicketSchema:
        """
        Create a new Ticket

        Creates a new Ticket
        """
        data = {
            "title": title,
            "description": description,
            "customer": customer,
            "customer_id": customer_id,
            "customer_email": customer_email,
            "opened_by_user": opened_by_user,
        }
        data = {k: v for k, v in data.items() if v is not None}
        data = json.dumps(data, default=str)

        response = self.client.post(url=f"/v3/ticket/", content=data)

        response.raise_for_status()

        return TicketSchema(**response.json())

    def retrieve(self, id: int) -> TicketSchema:
        """
        Retrieve a Ticket by ID

        Retrieve a Ticket by ID
        """

        response = self.client.get(url=f"/v3/ticket/{id}/")

        response.raise_for_status()

        return TicketSchema(**response.json())

    def update(self, id: int, title: Optional[str] = None, description: Optional[str] = None,
               customer: Optional[Any] = None, customer_id: Optional[int] = None, customer_email: Optional[str] = None,
               opened_by_user: Optional[Any] = None) -> TicketSchema:
        """
        Partially update a Ticket by ID

        Partially update a Ticket by ID
        """
        data = {
            "id": id,
            "title": title,
            "description": description,
            "customer": customer,
            "customer_id": customer_id,
            "customer_email": customer_email,
            "opened_by_user": opened_by_user,
        }
        data = {k: v for k, v in data.items() if v is not None}
        data = json.dumps(data, default=str)

        response = self.client.patch(url=f"/v3/ticket/{id}/", content=data)

        response.raise_for_status()

        return TicketSchema(**response.json())

    def destroy(self, id: int) -> TicketSchema:
        """
        Delete a Ticket by ID

        Delete a Ticket by ID
        """

        response = self.client.delete(url=f"/v3/ticket/{id}/")

        response.raise_for_status()

        return TicketSchema(**response.json())

