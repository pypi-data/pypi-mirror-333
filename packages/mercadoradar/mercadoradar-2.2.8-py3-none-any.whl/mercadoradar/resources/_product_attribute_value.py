"""
Auto generated by Mercado Radar SDK Generator
2025-03-11 19:10:02
"""
import json
from typing import Optional, List, Any

from ..models._paginated_response import PaginatedResponse
from ..models._product_attribute_value import ProductAttributeValue as ProductAttributeValueSchema


class ProductAttributeValue:

    def __init__(self, client):
        self.client = client

    def list(self, product_id: Optional[float] = None, attribute_value_id: Optional[float] = None,
             attribute_value: Optional[str] = None, attribute_type_id: Optional[float] = None,
             attribute_type: Optional[str] = None, value_string: Optional[str] = None,
             value_numeric_min: Optional[str] = None, value_numeric_max: Optional[str] = None,
             value_type: Optional[List[Any]] = None, unit: Optional[str] = None, iso_value_min: Optional[float] = None,
             iso_value_max: Optional[float] = None, iso_value_type: Optional[List[Any]] = None,
             iso_unit: Optional[str] = None, is_verified: Optional[bool] = None, limit: Optional[int] = None,
             offset: Optional[int] = None) -> PaginatedResponse[ProductAttributeValueSchema]:
        """
        List all Product Attribute Value from Products

        Destroy a [Attribute Value](#/v3%product/v3_product_list) from [Product](#/v3%product/v3_product_list)
        """
        data = {
            "product_id": product_id,
            "attribute_value_id": attribute_value_id,
            "attribute_value": attribute_value,
            "attribute_type_id": attribute_type_id,
            "attribute_type": attribute_type,
            "value_string": value_string,
            "value_numeric_min": value_numeric_min,
            "value_numeric_max": value_numeric_max,
            "value_type": value_type,
            "unit": unit,
            "iso_value_min": iso_value_min,
            "iso_value_max": iso_value_max,
            "iso_value_type": iso_value_type,
            "iso_unit": iso_unit,
            "is_verified": is_verified,
            "limit": limit,
            "offset": offset,
        }
        data = {k: v for k, v in data.items() if v is not None}
        data = json.dumps(data, default=str)

        response = self.client.get(url=f"/v3/product-attribute-value/", params=data)

        response.raise_for_status()

        data = response.json()

        count = data.get('count', 0)
        next_page = data.get('next')
        previous_page = data.get('previous')
        results = data.get('results')

        parsed_results = []
        for result in results:
            parsed_results.append(ProductAttributeValueSchema(**result))

        parsed_paginated_response = {"count": count, "next": next_page, "previous": previous_page,
                                     "results": parsed_results}

        return PaginatedResponse(**parsed_paginated_response)

    def create(self, product_id: Optional[int] = None, attribute_value_id: Optional[int] = None,
               attribute_type_id: Optional[int] = None, value: Optional[str] = None, value_type: Optional[Any] = None,
               unit: Optional[str] = None, iso_value: Optional[str] = None, iso_value_type: Optional[Any] = None,
               iso_unit: Optional[str] = None, is_verified: Optional[bool] = None) -> ProductAttributeValueSchema:
        """
        Create a new Attribute Value for a Product

        Create a new [Attribute Value](#/v3%product/v3_product_list) for a [Product](#/v3%product/v3_product_list)
        """
        data = {
            "product_id": product_id,
            "attribute_value_id": attribute_value_id,
            "attribute_type_id": attribute_type_id,
            "value": value,
            "value_type": value_type,
            "unit": unit,
            "iso_value": iso_value,
            "iso_value_type": iso_value_type,
            "iso_unit": iso_unit,
            "is_verified": is_verified,
        }
        data = {k: v for k, v in data.items() if v is not None}
        data = json.dumps(data, default=str)

        response = self.client.post(url=f"/v3/product-attribute-value/", json=data)

        response.raise_for_status()

        return ProductAttributeValueSchema(**response.json())

    def retrieve(self, id: int) -> ProductAttributeValueSchema:
        """
        Retrieve a Attribute Value for a Product by ID

        Retrieve a [Attribute Value](#/v3%product/v3_product_list) from a [Product](#/v3%product/v3_product_list) by ID
        """

        response = self.client.get(url=f"/v3/product-attribute-value/{id}/")

        response.raise_for_status()

        return ProductAttributeValueSchema(**response.json())

    def update(self, id: int, product_id: Optional[int] = None, attribute_value_id: Optional[int] = None,
               attribute_type_id: Optional[int] = None, value: Optional[str] = None, value_type: Optional[Any] = None,
               unit: Optional[str] = None, iso_value: Optional[str] = None, iso_value_type: Optional[Any] = None,
               iso_unit: Optional[str] = None, is_verified: Optional[bool] = None) -> ProductAttributeValueSchema:
        """
        Partially update a Attribute Value for a Product by ID

        Partially update a [Attribute Value](#/v3%product/v3_product_list) from a [Product](#/v3%product/v3_product_list) by ID
        """
        data = {
            "id": id,
            "product_id": product_id,
            "attribute_value_id": attribute_value_id,
            "attribute_type_id": attribute_type_id,
            "value": value,
            "value_type": value_type,
            "unit": unit,
            "iso_value": iso_value,
            "iso_value_type": iso_value_type,
            "iso_unit": iso_unit,
            "is_verified": is_verified,
        }
        data = {k: v for k, v in data.items() if v is not None}
        data = json.dumps(data, default=str)

        response = self.client.patch(url=f"/v3/product-attribute-value/{id}/", json=data)

        response.raise_for_status()

        return ProductAttributeValueSchema(**response.json())

    def destroy(self, id: int) -> ProductAttributeValueSchema:
        """
        Destroy a Attribute Value from a Product by ID

        Destroy a [Attribute Value](#/v3%product/v3_product_list) from a [Product](#/v3%product/v3_product_list) by ID
        """

        response = self.client.delete(url=f"/v3/product-attribute-value/{id}/")

        response.raise_for_status()

        return ProductAttributeValueSchema(**response.json())

