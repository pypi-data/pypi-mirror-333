[build-system]
requires = ["hatchling", "scikit-build-core~=0.10.0", "pybind11"]
build-backend = "hatchling.build"

[project]
name = "vmecpp"
dynamic = ["version"]
description = "Proxima Fusion's reimplementation of the Variational Moments Equilibrium Code (VMEC), a free-boundary ideal-MHD equilibrium solver for stellarators and Tokamaks."
readme = "README.md"
requires-python = ">=3.10"
keywords = []
authors = [
  { name = "Jonathan Schilling", email = "jons@proximafusion.com" },
  { name = "Enrico Guiraud", email = "eguiraud@proximafusion.com" },
  { name = "Philipp Jurasic", email = "jurasic@proximafusion.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Operating System :: POSIX :: Linux",
  "Operating System :: MacOS :: MacOS X",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
]
dependencies = [
  "beartype",
  "jaxtyping",
  "netCDF4",
  "numpy",
  "pydantic",
  "jax<=0.5.0", # To prevent a circular import bug in jax on arch Linux
  "simsopt>=1.8.1",
]

[project.optional-dependencies]
test = [
  "pytest",
]
docs = [
  "furo",
  "myst",
  "myst_parser >=0.13",
  "sphinx >=4.0",
  "sphinx-copybutton",
  "sphinx-autodoc-typehints",
]

[project.urls]
Documentation = "https://github.com/proximafusion/vmecpp#readme"
Issues = "https://github.com/proximafusion/vmecpp/issues"
Source = "https://github.com/proximafusion/vmecpp"

[tool.hatch.version]
path = "src/vmecpp/__about__.py"

[tool.hatch.build.targets.wheel.hooks.scikit-build]
experimental = true

[tool.hatch.build.targets.wheel.force-include]
"src/vmecpp/cpp/vmecpp/simsopt_compat" = "vmecpp/cpp/vmecpp/simsopt_compat"

[tool.cibuildwheel]
archs = ["native"]
skip = ["pp*", "*-musllinux*"]
build-frontend = "build"
test-requires = "pytest"
test-command = "pytest {package}/tests/test_simsopt_compat.py"

[tool.cibuildwheel.linux]
before-build = "yum install -y lapack-devel netcdf-devel hdf5-devel"

[tool.cibuildwheel.macos]
before-build = "brew install gcc lapack protobuf netcdf hdf5"

[tool.hatch.envs.test]
dependencies = [
  "pytest"
]

[tool.coverage.run]
source_pkgs = ["vmecpp", "tests"]
branch = true
parallel = true
omit = [
  "src/vmecpp/__about__.py",
]

[tool.coverage.paths]
vmecpp = ["src/vmecpp", "*/vmecpp/src/vmecpp"]
tests = ["tests", "*/vmecpp/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.ruff]
line-length = 88

[tool.ruff.lint]
extend-select = [
  "ARG",      # flake8-unused-arguments
  "B",        # flake8-bugbear
  "C4",       # flake8-comprehensions
  "EM",       # flake8-errmsg
  "EXE",      # flake8-executable
  "FURB",     # refurb
  "G",        # flake8-logging-format
  "I",        # isort
  "ICN",      # flake8-import-conventions
  "NPY",      # NumPy specific rules
  "PD",       # pandas-vet
  "PGH",      # pygrep-hooks
  "PIE",      # flake8-pie
  "PL",       # pylint
  "PT",       # flake8-pytest-style
  "PTH",      # flake8-use-pathlib
  "PYI",      # flake8-pyi
  "RET",      # flake8-return
  "RUF",      # Ruff-specific
  "SIM",      # flake8-simplify
  "T20",      # flake8-print
  "UP",       # pyupgrade
  "YTT",      # flake8-2020
]
ignore = [
  "ISC001",   # Conflicts with formatter
  "PLR09",    # Too many <...>
  "PLR2004",  # Magic value used in comparison
  "F722",     # Disable 'forward-annotation-syntax-error' for jaxtyping compatibility, see https://docs.kidger.site/jaxtyping/faq/#flake8-or-ruff-are-throwing-an-error
  "UP037",    # Incompatible with jaxtyping type annotations
  "PGH003",   # We don't want to use specific code rules in `pyright: ignore`, too much of a hassle
  "PTH123",   # We don't want to substitute `open("fname")` with `Path("fname").open()`
  "PTH107",   # We don't want to substitute `os.remove("foo")` with `Path("foo").unlink().`
  "G004",     # We are ok with f-strings as logging messages
  "RET504",   # We are ok with assignments before returns (as a way to document what we are returning)
]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]
"**/*_test.py" = ["T20"]
"examples/**" = ["T201"]

[tool.docformatter]
black = true  # Enables mode that plays nice with black, e.g. sets line length to 88.
