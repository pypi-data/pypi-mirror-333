name: CI

on:
  push:
    branches:
      - main
  pull_request:

env:
  PYTHON_VERSION: 3.11

jobs:
  ################################################################################################
  # Unit-Tests: Run unit tests using pytest
  ################################################################################################
  Unit-Tests:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15 # Consider increasing timeout
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, macos-14] # , windows-latest removed for now
        env: [py311, py312]

    steps:
      - uses: actions/checkout@v4

      - name: Install Pixi
        uses: prefix-dev/setup-pixi@v0.8.3
        with:
          environments: ${{ matrix.env }}
          pixi-version: v0.42.1
          cache: true
          locked: false # wont be the same because of the tag

      - name: Run pytest
        run: |
          pixi run -e ${{ matrix.env }} test

      - name: Upload coverage report artifact to be used by Codecov
        # only upload if matrix.os is ubuntu-latest and matrix.python-version is 3.12
        if: matrix.os == 'ubuntu-latest' && matrix.env == 'py312'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage-report
  ################################################################################################
  # Quality-Control: Run ruff linter
  ################################################################################################
  Quality-Control:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest]
        env: ["quality"]

    steps:
      - uses: actions/checkout@v4
      - name: Install Pixi
        uses: prefix-dev/setup-pixi@v0.8.1
        with:
          environments: ${{ matrix.PIXI_ENV }}
          pixi-version: v0.42.1
          cache: true
          locked: false

      - name: Run Quality-Control (ruff and mypy)
        run: pixi run -e ${{ matrix.env }} qc

      # - uses: actions/setup-python@v4
      #   with:
      #     python-version: ${{ env.PYTHON_VERSION }}

      # - name: Install poetry
      #   run: pip install poetry

      # - name: Determine dependencies
      #   run: poetry lock

      # - uses: actions/setup-python@v4
      #   with:
      #     python-version: ${{ env.PYTHON_VERSION }}
      #     cache: poetry

      # - name: Install Dependencies using Poetry
      #   run: poetry install

      # - name: Check formatting
      #   run: poetry run ruff format --check .
      
      # - name: Lint
      #   run: poetry run ruff check .

  # testing:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3

  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ env.PYTHON_VERSION }}

  #     - name: Install poetry
  #       run: pip install poetry

  #     - name: Determine dependencies
  #       run: poetry lock

  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ env.PYTHON_VERSION }}
  #         cache: poetry

  #     - name: Install dependencies
  #       run: poetry install

  #     - name: Run pytest
  #       run: poetry run coverage run -m pytest

  #     - name: Run Coverage
  #       run: poetry run coverage report -m
