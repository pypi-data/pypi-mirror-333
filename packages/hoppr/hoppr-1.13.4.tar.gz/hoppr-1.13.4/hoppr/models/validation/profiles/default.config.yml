# Default values for `hopctl validate sbom` configuration options and checks.
#
# Each check listed will accept a value of either `ignore`, `warn`, or `error` to configure
# desired response behavior on failure.
#
# Items can be excluded from validation altogether by specifying a pattern under the top-level
# `exclude:` key. Any items matching these patterns will not be evaluated during validation.
#
# A pattern can be one of the following forms:
#
# - `jmespath:<JMESPath search expression>`
# - An object representing objects to exclude based on the fields and patterns specified
#
# In the latter form, the name of each first child of the `exclude:` object must be one of the
# types defined as an array by the CycloneDX specification.
#
# ```yaml
# exclude:
#   <CycloneDX array object name>:  # e.g. `components`, `licenses`
#     # multiple fields defined on the same list item represent an AND relationship
#     - <field name 1>: <field value or pattern>
#       <field name 2>: <field value or pattern>
#
#     # separate list items represent an OR relationship when filtering
#     - <field name 3>: <field value or pattern>
#
#     # alternatively, exclusion filter can be specified with a JMESPath expression
#     - jmespath:<JMESPath search expression>
#
#     ...
# ```
#
# The `<field value or pattern>` above can be one of:
#
# - `regexp:/<regular expression identifying elements to exclude>/[gmi]*`
# - literal string representing the desired exclusion value
---
# Configuration for items to exclude from validation.
exclude:

  # Enveloped signature in [JSON Signature Format (JSF)](https://cyberphone.github.io/doc/security/jsf.html).
  signature:

  # The organization, person, component, or service which created the textual content of the annotation.
  annotator:

  # frames
  frames:

  # Provides the ability to document properties in a name-value store. This provides flexibility to include data not officially supported in the standard without having to use additional namespaces or create extensions. Unlike key-value stores, properties support duplicate names, each potentially having different values. Property names of interest to the general public are encouraged to be registered in the [CycloneDX Property Taxonomy](https://github.com/CycloneDX/cyclonedx-property-taxonomy). Formal registration is OPTIONAL.
  properties:

  # The hashes of the tool (if applicable).
  hashes:

  # EITHER (list of SPDX licenses and/or named licenses) OR (tuple of one SPDX License Expression)
  licenses:

  # externalReferences
  externalReferences:

  # components
  components: ["jmespath:[?type=='operating-system']"]

  # Specifies information about the data including the directional flow of data and the data classification.
  data:

  # Evidence of individual instances of a component spread across multiple locations.
  occurrences:

  # copyright
  copyright:

  # What are the ethical (or environmental) risks involved in the application of this model?
  ethicalConsiderations:

  # How does the model affect groups at risk of being systematically disadvantaged? What are the harms and benefits to the various affected groups?
  fairnessAssessments:

  # The organizations credited with vulnerability discovery.
  organizations:

  # The individuals, not associated with organizations, that are credited with vulnerability discovery.
  individuals:

  # A list of services used as tools. This may include microservices, function-as-a-service, and other types of network or intra-process services.
  services:

  # Provides the ability to document dependency relationships.
  dependencies:

  # Compositions describe constituent parts (including components, services, and dependency relationships) and their completeness. The completeness of vulnerabilities expressed in a BOM may also be described.
  compositions:

  # vulnerabilities
  vulnerabilities:

  # annotations
  annotations:

  # formulation
  formulation:

  # Data custodians are responsible for the safe custody, transport, and storage of data.
  custodians:

  # Data stewards are responsible for data content, context, and associated business rules.
  stewards:

  # Data owners are concerned with risk and appropriate access to data.
  owners:

  # List of workflows that can be declared to accomplish specific orchestrated goals and independently triggered.
  workflows:

  # A collection of graphics.
  collection:

  # The methods used to extract and/or analyze the evidence.
  methods:

  # Inputs that have the form of parameters with names and values.
  parameters:

  # The individual or organization that grants a license to another individual or organization
  licensor:

  # The individual or organization for which a license was granted to
  licensee:

  # The individual or organization that purchased the license
  purchaser:

  # The person(s) who created the BOM. Authors are common in BOMs created through manual processes. BOMs created through automated means may not have authors.
  authors:

  # Represents resources and data brought into a task at runtime by executor or task commands
  inputs:

  # Represents resources and data output from a task at runtime by executor or task commands
  outputs:

  # A contact at the organization. Multiple contacts are allowed.
  contact:

  # A collection of issues that have been resolved.
  resolves:

  # ancestors
  ancestors:

  # descendants
  descendants:

  # variants
  variants:

  # A list of zero or more commits which provide a trail describing how the component deviates from an ancestor, descendant, or variant.
  commits:

  # >A list of zero or more patches describing how the component deviates from an ancestor, descendant, or variant. Patches may be complimentary to commits or may be used in place of commits.
  patches:

  # Supporting material that helps in reproducing or understanding how reproduction is possible. This may include screenshots, payloads, and PoC exploit code.
  supportingMaterial:

  # The model performance metrics being reported. Examples may include accuracy, F1 score, precision, top-3 error rates, MSC, etc.
  performanceMetrics:

  # Zero or more release notes containing the locale and content. Multiple note objects may be specified to support release notes in a wide variety of languages.
  notes:

  # Unique top level property for Multiple Signatures. (multisignature)
  signers:

  # Unique top level property for Signature Chains. (signaturechain)
  chain:

  # Ordered list of commands or directives for the step
  commands:

  # References to component or service resources that are used to realize the resource instance.
  resourceReferences:

  # The sequence of steps for the task.
  steps:

  # A set of named filesystem or data resource shareable by workflow tasks.
  workspaces:

  # A graph of the component runtime topology for workflow's instance.
  runtimeTopology:

  # conditions
  conditions:

  # Zero or more pointers to vulnerabilities that are the equivalent of the vulnerability specified. Often times, the same vulnerability may exist in multiple sources of vulnerability intelligence, but have different identifiers. References provide a way to correlate vulnerabilities across multiple sources of vulnerability intelligence.
  references:

  # List of vulnerability ratings
  ratings:

  # Published advisories of the vulnerability if provided.
  advisories:

  # The components or services that are affected by the vulnerability.
  affects:

  # The tasks that comprise the workflow.
  tasks:

  # The graph of dependencies between tasks within the workflow.
  taskDependencies:

  # license
  license:

# Configuration for top-level SBOM field checks.
sbom-checks:

  # The `components` field is either not specified or empty
  components-field: warn

  # The `specVersion` should be 1.5
  spec-version: warn

  # The `serialNumber` field is either not specified or invalid
  unique-id: warn

  # The `vulnerabilities` field is either not specified or empty
  vulnerabilities-field: warn

# Configuration for SBOM metadata checks.
metadata-checks:

  # Configurations for the `metadata.licenses` checks
  licenses:

    # One of the `license.id`, `license.name` fields must be specified
    name-or-id: warn

    # The `license.licensing.lastRenewal` field is not specified
    last-renewal: ignore

    # The `license.licensing.purchaseOrder` field is not specified
    purchase-order: ignore

    # The `license.licensing.licenseType` field is either not specified or empty
    license-types: warn

    # The `licenses` field is either not specified or empty
    licenses-field: warn

    # The `license.licensing.expiration` field contains an expired or soon-to-expire date
    expiration: ignore

  # One of the `metadata.authors`, `metadata.tools` fields must be specified and not empty
  authors: warn

  # The `metadata.supplier` field is not specified
  supplier-field: warn

  # The `metadata.timestamp` field is either not specified or invalid
  timestamp: warn

# Configuration for SBOM component checks.
component-checks:

  # Configurations for the `components[].licenses` checks
  licenses:

    # One of the `license.id`, `license.name` fields must be specified
    name-or-id: warn

    # The `license.licensing.lastRenewal` field is not specified
    last-renewal: ignore

    # The `license.licensing.purchaseOrder` field is not specified
    purchase-order: ignore

    # The `license.licensing.licenseType` field is either not specified or empty
    license-types: warn

    # The `licenses` field is either not specified or empty
    licenses-field: warn

    # The `license.licensing.expiration` field contains an expired or soon-to-expire date
    expiration: ignore

  # The `components[].name` field is not specified
  name-field: warn

  # The `components[].supplier` field is not specified
  supplier-field: warn

  # The `components[].version` field is not specified
  version-field: warn

  # One of the `components[].purl`, `components[].cpe`, `components[].swid` fields must be specified
  unique-id: warn
