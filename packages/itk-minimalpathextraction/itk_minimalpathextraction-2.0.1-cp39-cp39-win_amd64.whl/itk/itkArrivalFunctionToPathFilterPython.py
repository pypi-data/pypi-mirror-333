# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _MinimalPathExtractionPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkArrivalFunctionToPathFilterPython
else:
    import _itkArrivalFunctionToPathFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkSingleImageCostFunctionPython
import itk.ITKCostFunctionsPython
import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_least_squares_functionPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.itkArrayPython
import itk.itkCostFunctionPython
import itk.itkArray2DPython
import itk.vnl_cost_functionPython
import itk.vnl_unary_functionPython
import itk.itkOptimizerParametersPython
import itk.itkInterpolateImageFunctionPython
import itk.itkContinuousIndexPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkImageFunctionBasePython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageRegionPython
import itk.itkFunctionBasePython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.ITKOptimizersBasePython
import itk.itkImageToPathFilterPython
import itk.itkPathSourcePython
import itk.itkPolyLineParametricPathPython
import itk.itkVectorContainerPython
import itk.itkParametricPathPython
import itk.itkPathBasePython

def itkArrivalFunctionToPathFilterID2PPP2_New():
    return itkArrivalFunctionToPathFilterID2PPP2.New()

class itkArrivalFunctionToPathFilterID2PPP2(itk.itkImageToPathFilterPython.itkImageToPathFilterID2PLPP2):
    r"""Proxy of C++ itkArrivalFunctionToPathFilterID2PPP2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkArrivalFunctionToPathFilterID2PPP2_Pointer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID2PPP2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkArrivalFunctionToPathFilterID2PPP2_Pointer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID2PPP2_Clone(self)

    def SetOptimizer(self, _arg):
        r"""
        SetOptimizer(self, _arg)

        Parameters
        ----------
        _arg: itkSingleValuedNonLinearOptimizer *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID2PPP2_SetOptimizer(self, _arg)

    def GetOptimizer(self):
        r"""GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID2PPP2_GetOptimizer(self)

    def SetCostFunction(self, _arg):
        r"""
        SetCostFunction(self, _arg)

        Parameters
        ----------
        _arg: itkSingleImageCostFunctionID2 *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID2PPP2_SetCostFunction(self, _arg)

    def GetCostFunction(self):
        r"""GetCostFunction(self) -> itkSingleImageCostFunctionID2"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID2PPP2_GetCostFunction(self)

    def SetPathEndPoint(self, point):
        r"""
        SetPathEndPoint(self, point)

        Parameters
        ----------
        point: itkPointD2 const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID2PPP2_SetPathEndPoint(self, point)

    def AddPathEndPoint(self, point):
        r"""
        AddPathEndPoint(self, point)

        Parameters
        ----------
        point: itkPointD2 const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID2PPP2_AddPathEndPoint(self, point)

    def ClearPathEndPoints(self):
        r"""ClearPathEndPoints(self)"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID2PPP2_ClearPathEndPoints(self)

    def SetTerminationValue(self, _arg):
        r"""
        SetTerminationValue(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID2PPP2_SetTerminationValue(self, _arg)

    def GetTerminationValue(self):
        r"""GetTerminationValue(self) -> double"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID2PPP2_GetTerminationValue(self)

    def Execute(self, object, event):
        r"""
        Execute(self, object, event)

        Parameters
        ----------
        object: itkObject const *
        event: itkEventObject const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID2PPP2_Execute(self, object, event)
    __swig_destroy__ = _itkArrivalFunctionToPathFilterPython.delete_itkArrivalFunctionToPathFilterID2PPP2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkArrivalFunctionToPathFilterID2PPP2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID2PPP2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkArrivalFunctionToPathFilterID2PPP2

        Create a new object of the class itkArrivalFunctionToPathFilterID2PPP2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkArrivalFunctionToPathFilterID2PPP2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkArrivalFunctionToPathFilterID2PPP2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkArrivalFunctionToPathFilterID2PPP2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkArrivalFunctionToPathFilterID2PPP2 in _itkArrivalFunctionToPathFilterPython:
_itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID2PPP2_swigregister(itkArrivalFunctionToPathFilterID2PPP2)

def itkArrivalFunctionToPathFilterID3PPP3_New():
    return itkArrivalFunctionToPathFilterID3PPP3.New()

class itkArrivalFunctionToPathFilterID3PPP3(itk.itkImageToPathFilterPython.itkImageToPathFilterID3PLPP3):
    r"""Proxy of C++ itkArrivalFunctionToPathFilterID3PPP3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkArrivalFunctionToPathFilterID3PPP3_Pointer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID3PPP3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkArrivalFunctionToPathFilterID3PPP3_Pointer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID3PPP3_Clone(self)

    def SetOptimizer(self, _arg):
        r"""
        SetOptimizer(self, _arg)

        Parameters
        ----------
        _arg: itkSingleValuedNonLinearOptimizer *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID3PPP3_SetOptimizer(self, _arg)

    def GetOptimizer(self):
        r"""GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID3PPP3_GetOptimizer(self)

    def SetCostFunction(self, _arg):
        r"""
        SetCostFunction(self, _arg)

        Parameters
        ----------
        _arg: itkSingleImageCostFunctionID3 *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID3PPP3_SetCostFunction(self, _arg)

    def GetCostFunction(self):
        r"""GetCostFunction(self) -> itkSingleImageCostFunctionID3"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID3PPP3_GetCostFunction(self)

    def SetPathEndPoint(self, point):
        r"""
        SetPathEndPoint(self, point)

        Parameters
        ----------
        point: itkPointD3 const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID3PPP3_SetPathEndPoint(self, point)

    def AddPathEndPoint(self, point):
        r"""
        AddPathEndPoint(self, point)

        Parameters
        ----------
        point: itkPointD3 const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID3PPP3_AddPathEndPoint(self, point)

    def ClearPathEndPoints(self):
        r"""ClearPathEndPoints(self)"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID3PPP3_ClearPathEndPoints(self)

    def SetTerminationValue(self, _arg):
        r"""
        SetTerminationValue(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID3PPP3_SetTerminationValue(self, _arg)

    def GetTerminationValue(self):
        r"""GetTerminationValue(self) -> double"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID3PPP3_GetTerminationValue(self)

    def Execute(self, object, event):
        r"""
        Execute(self, object, event)

        Parameters
        ----------
        object: itkObject const *
        event: itkEventObject const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID3PPP3_Execute(self, object, event)
    __swig_destroy__ = _itkArrivalFunctionToPathFilterPython.delete_itkArrivalFunctionToPathFilterID3PPP3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkArrivalFunctionToPathFilterID3PPP3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID3PPP3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkArrivalFunctionToPathFilterID3PPP3

        Create a new object of the class itkArrivalFunctionToPathFilterID3PPP3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkArrivalFunctionToPathFilterID3PPP3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkArrivalFunctionToPathFilterID3PPP3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkArrivalFunctionToPathFilterID3PPP3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkArrivalFunctionToPathFilterID3PPP3 in _itkArrivalFunctionToPathFilterPython:
_itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID3PPP3_swigregister(itkArrivalFunctionToPathFilterID3PPP3)

def itkArrivalFunctionToPathFilterID4PPP4_New():
    return itkArrivalFunctionToPathFilterID4PPP4.New()

class itkArrivalFunctionToPathFilterID4PPP4(itk.itkImageToPathFilterPython.itkImageToPathFilterID4PLPP4):
    r"""Proxy of C++ itkArrivalFunctionToPathFilterID4PPP4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkArrivalFunctionToPathFilterID4PPP4_Pointer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID4PPP4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkArrivalFunctionToPathFilterID4PPP4_Pointer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID4PPP4_Clone(self)

    def SetOptimizer(self, _arg):
        r"""
        SetOptimizer(self, _arg)

        Parameters
        ----------
        _arg: itkSingleValuedNonLinearOptimizer *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID4PPP4_SetOptimizer(self, _arg)

    def GetOptimizer(self):
        r"""GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID4PPP4_GetOptimizer(self)

    def SetCostFunction(self, _arg):
        r"""
        SetCostFunction(self, _arg)

        Parameters
        ----------
        _arg: itkSingleImageCostFunctionID4 *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID4PPP4_SetCostFunction(self, _arg)

    def GetCostFunction(self):
        r"""GetCostFunction(self) -> itkSingleImageCostFunctionID4"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID4PPP4_GetCostFunction(self)

    def SetPathEndPoint(self, point):
        r"""
        SetPathEndPoint(self, point)

        Parameters
        ----------
        point: itkPointD4 const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID4PPP4_SetPathEndPoint(self, point)

    def AddPathEndPoint(self, point):
        r"""
        AddPathEndPoint(self, point)

        Parameters
        ----------
        point: itkPointD4 const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID4PPP4_AddPathEndPoint(self, point)

    def ClearPathEndPoints(self):
        r"""ClearPathEndPoints(self)"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID4PPP4_ClearPathEndPoints(self)

    def SetTerminationValue(self, _arg):
        r"""
        SetTerminationValue(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID4PPP4_SetTerminationValue(self, _arg)

    def GetTerminationValue(self):
        r"""GetTerminationValue(self) -> double"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID4PPP4_GetTerminationValue(self)

    def Execute(self, object, event):
        r"""
        Execute(self, object, event)

        Parameters
        ----------
        object: itkObject const *
        event: itkEventObject const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID4PPP4_Execute(self, object, event)
    __swig_destroy__ = _itkArrivalFunctionToPathFilterPython.delete_itkArrivalFunctionToPathFilterID4PPP4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkArrivalFunctionToPathFilterID4PPP4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID4PPP4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkArrivalFunctionToPathFilterID4PPP4

        Create a new object of the class itkArrivalFunctionToPathFilterID4PPP4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkArrivalFunctionToPathFilterID4PPP4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkArrivalFunctionToPathFilterID4PPP4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkArrivalFunctionToPathFilterID4PPP4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkArrivalFunctionToPathFilterID4PPP4 in _itkArrivalFunctionToPathFilterPython:
_itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID4PPP4_swigregister(itkArrivalFunctionToPathFilterID4PPP4)

def itkArrivalFunctionToPathFilterIF2PPP2_New():
    return itkArrivalFunctionToPathFilterIF2PPP2.New()

class itkArrivalFunctionToPathFilterIF2PPP2(itk.itkImageToPathFilterPython.itkImageToPathFilterIF2PLPP2):
    r"""Proxy of C++ itkArrivalFunctionToPathFilterIF2PPP2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkArrivalFunctionToPathFilterIF2PPP2_Pointer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF2PPP2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkArrivalFunctionToPathFilterIF2PPP2_Pointer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF2PPP2_Clone(self)

    def SetOptimizer(self, _arg):
        r"""
        SetOptimizer(self, _arg)

        Parameters
        ----------
        _arg: itkSingleValuedNonLinearOptimizer *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF2PPP2_SetOptimizer(self, _arg)

    def GetOptimizer(self):
        r"""GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF2PPP2_GetOptimizer(self)

    def SetCostFunction(self, _arg):
        r"""
        SetCostFunction(self, _arg)

        Parameters
        ----------
        _arg: itkSingleImageCostFunctionIF2 *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF2PPP2_SetCostFunction(self, _arg)

    def GetCostFunction(self):
        r"""GetCostFunction(self) -> itkSingleImageCostFunctionIF2"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF2PPP2_GetCostFunction(self)

    def SetPathEndPoint(self, point):
        r"""
        SetPathEndPoint(self, point)

        Parameters
        ----------
        point: itkPointD2 const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF2PPP2_SetPathEndPoint(self, point)

    def AddPathEndPoint(self, point):
        r"""
        AddPathEndPoint(self, point)

        Parameters
        ----------
        point: itkPointD2 const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF2PPP2_AddPathEndPoint(self, point)

    def ClearPathEndPoints(self):
        r"""ClearPathEndPoints(self)"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF2PPP2_ClearPathEndPoints(self)

    def SetTerminationValue(self, _arg):
        r"""
        SetTerminationValue(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF2PPP2_SetTerminationValue(self, _arg)

    def GetTerminationValue(self):
        r"""GetTerminationValue(self) -> double"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF2PPP2_GetTerminationValue(self)

    def Execute(self, object, event):
        r"""
        Execute(self, object, event)

        Parameters
        ----------
        object: itkObject const *
        event: itkEventObject const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF2PPP2_Execute(self, object, event)
    __swig_destroy__ = _itkArrivalFunctionToPathFilterPython.delete_itkArrivalFunctionToPathFilterIF2PPP2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkArrivalFunctionToPathFilterIF2PPP2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF2PPP2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkArrivalFunctionToPathFilterIF2PPP2

        Create a new object of the class itkArrivalFunctionToPathFilterIF2PPP2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkArrivalFunctionToPathFilterIF2PPP2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkArrivalFunctionToPathFilterIF2PPP2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkArrivalFunctionToPathFilterIF2PPP2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkArrivalFunctionToPathFilterIF2PPP2 in _itkArrivalFunctionToPathFilterPython:
_itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF2PPP2_swigregister(itkArrivalFunctionToPathFilterIF2PPP2)

def itkArrivalFunctionToPathFilterIF3PPP3_New():
    return itkArrivalFunctionToPathFilterIF3PPP3.New()

class itkArrivalFunctionToPathFilterIF3PPP3(itk.itkImageToPathFilterPython.itkImageToPathFilterIF3PLPP3):
    r"""Proxy of C++ itkArrivalFunctionToPathFilterIF3PPP3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkArrivalFunctionToPathFilterIF3PPP3_Pointer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF3PPP3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkArrivalFunctionToPathFilterIF3PPP3_Pointer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF3PPP3_Clone(self)

    def SetOptimizer(self, _arg):
        r"""
        SetOptimizer(self, _arg)

        Parameters
        ----------
        _arg: itkSingleValuedNonLinearOptimizer *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF3PPP3_SetOptimizer(self, _arg)

    def GetOptimizer(self):
        r"""GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF3PPP3_GetOptimizer(self)

    def SetCostFunction(self, _arg):
        r"""
        SetCostFunction(self, _arg)

        Parameters
        ----------
        _arg: itkSingleImageCostFunctionIF3 *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF3PPP3_SetCostFunction(self, _arg)

    def GetCostFunction(self):
        r"""GetCostFunction(self) -> itkSingleImageCostFunctionIF3"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF3PPP3_GetCostFunction(self)

    def SetPathEndPoint(self, point):
        r"""
        SetPathEndPoint(self, point)

        Parameters
        ----------
        point: itkPointD3 const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF3PPP3_SetPathEndPoint(self, point)

    def AddPathEndPoint(self, point):
        r"""
        AddPathEndPoint(self, point)

        Parameters
        ----------
        point: itkPointD3 const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF3PPP3_AddPathEndPoint(self, point)

    def ClearPathEndPoints(self):
        r"""ClearPathEndPoints(self)"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF3PPP3_ClearPathEndPoints(self)

    def SetTerminationValue(self, _arg):
        r"""
        SetTerminationValue(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF3PPP3_SetTerminationValue(self, _arg)

    def GetTerminationValue(self):
        r"""GetTerminationValue(self) -> double"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF3PPP3_GetTerminationValue(self)

    def Execute(self, object, event):
        r"""
        Execute(self, object, event)

        Parameters
        ----------
        object: itkObject const *
        event: itkEventObject const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF3PPP3_Execute(self, object, event)
    __swig_destroy__ = _itkArrivalFunctionToPathFilterPython.delete_itkArrivalFunctionToPathFilterIF3PPP3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkArrivalFunctionToPathFilterIF3PPP3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF3PPP3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkArrivalFunctionToPathFilterIF3PPP3

        Create a new object of the class itkArrivalFunctionToPathFilterIF3PPP3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkArrivalFunctionToPathFilterIF3PPP3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkArrivalFunctionToPathFilterIF3PPP3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkArrivalFunctionToPathFilterIF3PPP3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkArrivalFunctionToPathFilterIF3PPP3 in _itkArrivalFunctionToPathFilterPython:
_itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF3PPP3_swigregister(itkArrivalFunctionToPathFilterIF3PPP3)

def itkArrivalFunctionToPathFilterIF4PPP4_New():
    return itkArrivalFunctionToPathFilterIF4PPP4.New()

class itkArrivalFunctionToPathFilterIF4PPP4(itk.itkImageToPathFilterPython.itkImageToPathFilterIF4PLPP4):
    r"""Proxy of C++ itkArrivalFunctionToPathFilterIF4PPP4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkArrivalFunctionToPathFilterIF4PPP4_Pointer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF4PPP4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkArrivalFunctionToPathFilterIF4PPP4_Pointer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF4PPP4_Clone(self)

    def SetOptimizer(self, _arg):
        r"""
        SetOptimizer(self, _arg)

        Parameters
        ----------
        _arg: itkSingleValuedNonLinearOptimizer *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF4PPP4_SetOptimizer(self, _arg)

    def GetOptimizer(self):
        r"""GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF4PPP4_GetOptimizer(self)

    def SetCostFunction(self, _arg):
        r"""
        SetCostFunction(self, _arg)

        Parameters
        ----------
        _arg: itkSingleImageCostFunctionIF4 *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF4PPP4_SetCostFunction(self, _arg)

    def GetCostFunction(self):
        r"""GetCostFunction(self) -> itkSingleImageCostFunctionIF4"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF4PPP4_GetCostFunction(self)

    def SetPathEndPoint(self, point):
        r"""
        SetPathEndPoint(self, point)

        Parameters
        ----------
        point: itkPointD4 const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF4PPP4_SetPathEndPoint(self, point)

    def AddPathEndPoint(self, point):
        r"""
        AddPathEndPoint(self, point)

        Parameters
        ----------
        point: itkPointD4 const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF4PPP4_AddPathEndPoint(self, point)

    def ClearPathEndPoints(self):
        r"""ClearPathEndPoints(self)"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF4PPP4_ClearPathEndPoints(self)

    def SetTerminationValue(self, _arg):
        r"""
        SetTerminationValue(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF4PPP4_SetTerminationValue(self, _arg)

    def GetTerminationValue(self):
        r"""GetTerminationValue(self) -> double"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF4PPP4_GetTerminationValue(self)

    def Execute(self, object, event):
        r"""
        Execute(self, object, event)

        Parameters
        ----------
        object: itkObject const *
        event: itkEventObject const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF4PPP4_Execute(self, object, event)
    __swig_destroy__ = _itkArrivalFunctionToPathFilterPython.delete_itkArrivalFunctionToPathFilterIF4PPP4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkArrivalFunctionToPathFilterIF4PPP4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF4PPP4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkArrivalFunctionToPathFilterIF4PPP4

        Create a new object of the class itkArrivalFunctionToPathFilterIF4PPP4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkArrivalFunctionToPathFilterIF4PPP4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkArrivalFunctionToPathFilterIF4PPP4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkArrivalFunctionToPathFilterIF4PPP4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkArrivalFunctionToPathFilterIF4PPP4 in _itkArrivalFunctionToPathFilterPython:
_itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF4PPP4_swigregister(itkArrivalFunctionToPathFilterIF4PPP4)

def itkArrivalFunctionToPathFilterISS2PPP2_New():
    return itkArrivalFunctionToPathFilterISS2PPP2.New()

class itkArrivalFunctionToPathFilterISS2PPP2(itk.itkImageToPathFilterPython.itkImageToPathFilterISS2PLPP2):
    r"""Proxy of C++ itkArrivalFunctionToPathFilterISS2PPP2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkArrivalFunctionToPathFilterISS2PPP2_Pointer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS2PPP2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkArrivalFunctionToPathFilterISS2PPP2_Pointer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS2PPP2_Clone(self)

    def SetOptimizer(self, _arg):
        r"""
        SetOptimizer(self, _arg)

        Parameters
        ----------
        _arg: itkSingleValuedNonLinearOptimizer *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS2PPP2_SetOptimizer(self, _arg)

    def GetOptimizer(self):
        r"""GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS2PPP2_GetOptimizer(self)

    def SetCostFunction(self, _arg):
        r"""
        SetCostFunction(self, _arg)

        Parameters
        ----------
        _arg: itkSingleImageCostFunctionISS2 *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS2PPP2_SetCostFunction(self, _arg)

    def GetCostFunction(self):
        r"""GetCostFunction(self) -> itkSingleImageCostFunctionISS2"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS2PPP2_GetCostFunction(self)

    def SetPathEndPoint(self, point):
        r"""
        SetPathEndPoint(self, point)

        Parameters
        ----------
        point: itkPointD2 const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS2PPP2_SetPathEndPoint(self, point)

    def AddPathEndPoint(self, point):
        r"""
        AddPathEndPoint(self, point)

        Parameters
        ----------
        point: itkPointD2 const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS2PPP2_AddPathEndPoint(self, point)

    def ClearPathEndPoints(self):
        r"""ClearPathEndPoints(self)"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS2PPP2_ClearPathEndPoints(self)

    def SetTerminationValue(self, _arg):
        r"""
        SetTerminationValue(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS2PPP2_SetTerminationValue(self, _arg)

    def GetTerminationValue(self):
        r"""GetTerminationValue(self) -> double"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS2PPP2_GetTerminationValue(self)

    def Execute(self, object, event):
        r"""
        Execute(self, object, event)

        Parameters
        ----------
        object: itkObject const *
        event: itkEventObject const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS2PPP2_Execute(self, object, event)
    __swig_destroy__ = _itkArrivalFunctionToPathFilterPython.delete_itkArrivalFunctionToPathFilterISS2PPP2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkArrivalFunctionToPathFilterISS2PPP2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS2PPP2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkArrivalFunctionToPathFilterISS2PPP2

        Create a new object of the class itkArrivalFunctionToPathFilterISS2PPP2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkArrivalFunctionToPathFilterISS2PPP2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkArrivalFunctionToPathFilterISS2PPP2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkArrivalFunctionToPathFilterISS2PPP2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkArrivalFunctionToPathFilterISS2PPP2 in _itkArrivalFunctionToPathFilterPython:
_itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS2PPP2_swigregister(itkArrivalFunctionToPathFilterISS2PPP2)

def itkArrivalFunctionToPathFilterISS3PPP3_New():
    return itkArrivalFunctionToPathFilterISS3PPP3.New()

class itkArrivalFunctionToPathFilterISS3PPP3(itk.itkImageToPathFilterPython.itkImageToPathFilterISS3PLPP3):
    r"""Proxy of C++ itkArrivalFunctionToPathFilterISS3PPP3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkArrivalFunctionToPathFilterISS3PPP3_Pointer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS3PPP3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkArrivalFunctionToPathFilterISS3PPP3_Pointer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS3PPP3_Clone(self)

    def SetOptimizer(self, _arg):
        r"""
        SetOptimizer(self, _arg)

        Parameters
        ----------
        _arg: itkSingleValuedNonLinearOptimizer *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS3PPP3_SetOptimizer(self, _arg)

    def GetOptimizer(self):
        r"""GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS3PPP3_GetOptimizer(self)

    def SetCostFunction(self, _arg):
        r"""
        SetCostFunction(self, _arg)

        Parameters
        ----------
        _arg: itkSingleImageCostFunctionISS3 *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS3PPP3_SetCostFunction(self, _arg)

    def GetCostFunction(self):
        r"""GetCostFunction(self) -> itkSingleImageCostFunctionISS3"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS3PPP3_GetCostFunction(self)

    def SetPathEndPoint(self, point):
        r"""
        SetPathEndPoint(self, point)

        Parameters
        ----------
        point: itkPointD3 const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS3PPP3_SetPathEndPoint(self, point)

    def AddPathEndPoint(self, point):
        r"""
        AddPathEndPoint(self, point)

        Parameters
        ----------
        point: itkPointD3 const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS3PPP3_AddPathEndPoint(self, point)

    def ClearPathEndPoints(self):
        r"""ClearPathEndPoints(self)"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS3PPP3_ClearPathEndPoints(self)

    def SetTerminationValue(self, _arg):
        r"""
        SetTerminationValue(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS3PPP3_SetTerminationValue(self, _arg)

    def GetTerminationValue(self):
        r"""GetTerminationValue(self) -> double"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS3PPP3_GetTerminationValue(self)

    def Execute(self, object, event):
        r"""
        Execute(self, object, event)

        Parameters
        ----------
        object: itkObject const *
        event: itkEventObject const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS3PPP3_Execute(self, object, event)
    __swig_destroy__ = _itkArrivalFunctionToPathFilterPython.delete_itkArrivalFunctionToPathFilterISS3PPP3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkArrivalFunctionToPathFilterISS3PPP3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS3PPP3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkArrivalFunctionToPathFilterISS3PPP3

        Create a new object of the class itkArrivalFunctionToPathFilterISS3PPP3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkArrivalFunctionToPathFilterISS3PPP3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkArrivalFunctionToPathFilterISS3PPP3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkArrivalFunctionToPathFilterISS3PPP3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkArrivalFunctionToPathFilterISS3PPP3 in _itkArrivalFunctionToPathFilterPython:
_itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS3PPP3_swigregister(itkArrivalFunctionToPathFilterISS3PPP3)

def itkArrivalFunctionToPathFilterISS4PPP4_New():
    return itkArrivalFunctionToPathFilterISS4PPP4.New()

class itkArrivalFunctionToPathFilterISS4PPP4(itk.itkImageToPathFilterPython.itkImageToPathFilterISS4PLPP4):
    r"""Proxy of C++ itkArrivalFunctionToPathFilterISS4PPP4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkArrivalFunctionToPathFilterISS4PPP4_Pointer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS4PPP4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkArrivalFunctionToPathFilterISS4PPP4_Pointer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS4PPP4_Clone(self)

    def SetOptimizer(self, _arg):
        r"""
        SetOptimizer(self, _arg)

        Parameters
        ----------
        _arg: itkSingleValuedNonLinearOptimizer *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS4PPP4_SetOptimizer(self, _arg)

    def GetOptimizer(self):
        r"""GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS4PPP4_GetOptimizer(self)

    def SetCostFunction(self, _arg):
        r"""
        SetCostFunction(self, _arg)

        Parameters
        ----------
        _arg: itkSingleImageCostFunctionISS4 *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS4PPP4_SetCostFunction(self, _arg)

    def GetCostFunction(self):
        r"""GetCostFunction(self) -> itkSingleImageCostFunctionISS4"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS4PPP4_GetCostFunction(self)

    def SetPathEndPoint(self, point):
        r"""
        SetPathEndPoint(self, point)

        Parameters
        ----------
        point: itkPointD4 const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS4PPP4_SetPathEndPoint(self, point)

    def AddPathEndPoint(self, point):
        r"""
        AddPathEndPoint(self, point)

        Parameters
        ----------
        point: itkPointD4 const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS4PPP4_AddPathEndPoint(self, point)

    def ClearPathEndPoints(self):
        r"""ClearPathEndPoints(self)"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS4PPP4_ClearPathEndPoints(self)

    def SetTerminationValue(self, _arg):
        r"""
        SetTerminationValue(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS4PPP4_SetTerminationValue(self, _arg)

    def GetTerminationValue(self):
        r"""GetTerminationValue(self) -> double"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS4PPP4_GetTerminationValue(self)

    def Execute(self, object, event):
        r"""
        Execute(self, object, event)

        Parameters
        ----------
        object: itkObject const *
        event: itkEventObject const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS4PPP4_Execute(self, object, event)
    __swig_destroy__ = _itkArrivalFunctionToPathFilterPython.delete_itkArrivalFunctionToPathFilterISS4PPP4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkArrivalFunctionToPathFilterISS4PPP4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS4PPP4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkArrivalFunctionToPathFilterISS4PPP4

        Create a new object of the class itkArrivalFunctionToPathFilterISS4PPP4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkArrivalFunctionToPathFilterISS4PPP4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkArrivalFunctionToPathFilterISS4PPP4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkArrivalFunctionToPathFilterISS4PPP4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkArrivalFunctionToPathFilterISS4PPP4 in _itkArrivalFunctionToPathFilterPython:
_itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS4PPP4_swigregister(itkArrivalFunctionToPathFilterISS4PPP4)

def itkArrivalFunctionToPathFilterIUC2PPP2_New():
    return itkArrivalFunctionToPathFilterIUC2PPP2.New()

class itkArrivalFunctionToPathFilterIUC2PPP2(itk.itkImageToPathFilterPython.itkImageToPathFilterIUC2PLPP2):
    r"""Proxy of C++ itkArrivalFunctionToPathFilterIUC2PPP2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkArrivalFunctionToPathFilterIUC2PPP2_Pointer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC2PPP2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkArrivalFunctionToPathFilterIUC2PPP2_Pointer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC2PPP2_Clone(self)

    def SetOptimizer(self, _arg):
        r"""
        SetOptimizer(self, _arg)

        Parameters
        ----------
        _arg: itkSingleValuedNonLinearOptimizer *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC2PPP2_SetOptimizer(self, _arg)

    def GetOptimizer(self):
        r"""GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC2PPP2_GetOptimizer(self)

    def SetCostFunction(self, _arg):
        r"""
        SetCostFunction(self, _arg)

        Parameters
        ----------
        _arg: itkSingleImageCostFunctionIUC2 *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC2PPP2_SetCostFunction(self, _arg)

    def GetCostFunction(self):
        r"""GetCostFunction(self) -> itkSingleImageCostFunctionIUC2"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC2PPP2_GetCostFunction(self)

    def SetPathEndPoint(self, point):
        r"""
        SetPathEndPoint(self, point)

        Parameters
        ----------
        point: itkPointD2 const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC2PPP2_SetPathEndPoint(self, point)

    def AddPathEndPoint(self, point):
        r"""
        AddPathEndPoint(self, point)

        Parameters
        ----------
        point: itkPointD2 const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC2PPP2_AddPathEndPoint(self, point)

    def ClearPathEndPoints(self):
        r"""ClearPathEndPoints(self)"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC2PPP2_ClearPathEndPoints(self)

    def SetTerminationValue(self, _arg):
        r"""
        SetTerminationValue(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC2PPP2_SetTerminationValue(self, _arg)

    def GetTerminationValue(self):
        r"""GetTerminationValue(self) -> double"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC2PPP2_GetTerminationValue(self)

    def Execute(self, object, event):
        r"""
        Execute(self, object, event)

        Parameters
        ----------
        object: itkObject const *
        event: itkEventObject const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC2PPP2_Execute(self, object, event)
    __swig_destroy__ = _itkArrivalFunctionToPathFilterPython.delete_itkArrivalFunctionToPathFilterIUC2PPP2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkArrivalFunctionToPathFilterIUC2PPP2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC2PPP2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkArrivalFunctionToPathFilterIUC2PPP2

        Create a new object of the class itkArrivalFunctionToPathFilterIUC2PPP2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkArrivalFunctionToPathFilterIUC2PPP2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkArrivalFunctionToPathFilterIUC2PPP2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkArrivalFunctionToPathFilterIUC2PPP2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkArrivalFunctionToPathFilterIUC2PPP2 in _itkArrivalFunctionToPathFilterPython:
_itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC2PPP2_swigregister(itkArrivalFunctionToPathFilterIUC2PPP2)

def itkArrivalFunctionToPathFilterIUC3PPP3_New():
    return itkArrivalFunctionToPathFilterIUC3PPP3.New()

class itkArrivalFunctionToPathFilterIUC3PPP3(itk.itkImageToPathFilterPython.itkImageToPathFilterIUC3PLPP3):
    r"""Proxy of C++ itkArrivalFunctionToPathFilterIUC3PPP3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkArrivalFunctionToPathFilterIUC3PPP3_Pointer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC3PPP3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkArrivalFunctionToPathFilterIUC3PPP3_Pointer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC3PPP3_Clone(self)

    def SetOptimizer(self, _arg):
        r"""
        SetOptimizer(self, _arg)

        Parameters
        ----------
        _arg: itkSingleValuedNonLinearOptimizer *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC3PPP3_SetOptimizer(self, _arg)

    def GetOptimizer(self):
        r"""GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC3PPP3_GetOptimizer(self)

    def SetCostFunction(self, _arg):
        r"""
        SetCostFunction(self, _arg)

        Parameters
        ----------
        _arg: itkSingleImageCostFunctionIUC3 *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC3PPP3_SetCostFunction(self, _arg)

    def GetCostFunction(self):
        r"""GetCostFunction(self) -> itkSingleImageCostFunctionIUC3"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC3PPP3_GetCostFunction(self)

    def SetPathEndPoint(self, point):
        r"""
        SetPathEndPoint(self, point)

        Parameters
        ----------
        point: itkPointD3 const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC3PPP3_SetPathEndPoint(self, point)

    def AddPathEndPoint(self, point):
        r"""
        AddPathEndPoint(self, point)

        Parameters
        ----------
        point: itkPointD3 const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC3PPP3_AddPathEndPoint(self, point)

    def ClearPathEndPoints(self):
        r"""ClearPathEndPoints(self)"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC3PPP3_ClearPathEndPoints(self)

    def SetTerminationValue(self, _arg):
        r"""
        SetTerminationValue(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC3PPP3_SetTerminationValue(self, _arg)

    def GetTerminationValue(self):
        r"""GetTerminationValue(self) -> double"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC3PPP3_GetTerminationValue(self)

    def Execute(self, object, event):
        r"""
        Execute(self, object, event)

        Parameters
        ----------
        object: itkObject const *
        event: itkEventObject const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC3PPP3_Execute(self, object, event)
    __swig_destroy__ = _itkArrivalFunctionToPathFilterPython.delete_itkArrivalFunctionToPathFilterIUC3PPP3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkArrivalFunctionToPathFilterIUC3PPP3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC3PPP3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkArrivalFunctionToPathFilterIUC3PPP3

        Create a new object of the class itkArrivalFunctionToPathFilterIUC3PPP3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkArrivalFunctionToPathFilterIUC3PPP3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkArrivalFunctionToPathFilterIUC3PPP3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkArrivalFunctionToPathFilterIUC3PPP3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkArrivalFunctionToPathFilterIUC3PPP3 in _itkArrivalFunctionToPathFilterPython:
_itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC3PPP3_swigregister(itkArrivalFunctionToPathFilterIUC3PPP3)

def itkArrivalFunctionToPathFilterIUC4PPP4_New():
    return itkArrivalFunctionToPathFilterIUC4PPP4.New()

class itkArrivalFunctionToPathFilterIUC4PPP4(itk.itkImageToPathFilterPython.itkImageToPathFilterIUC4PLPP4):
    r"""Proxy of C++ itkArrivalFunctionToPathFilterIUC4PPP4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkArrivalFunctionToPathFilterIUC4PPP4_Pointer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC4PPP4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkArrivalFunctionToPathFilterIUC4PPP4_Pointer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC4PPP4_Clone(self)

    def SetOptimizer(self, _arg):
        r"""
        SetOptimizer(self, _arg)

        Parameters
        ----------
        _arg: itkSingleValuedNonLinearOptimizer *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC4PPP4_SetOptimizer(self, _arg)

    def GetOptimizer(self):
        r"""GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC4PPP4_GetOptimizer(self)

    def SetCostFunction(self, _arg):
        r"""
        SetCostFunction(self, _arg)

        Parameters
        ----------
        _arg: itkSingleImageCostFunctionIUC4 *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC4PPP4_SetCostFunction(self, _arg)

    def GetCostFunction(self):
        r"""GetCostFunction(self) -> itkSingleImageCostFunctionIUC4"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC4PPP4_GetCostFunction(self)

    def SetPathEndPoint(self, point):
        r"""
        SetPathEndPoint(self, point)

        Parameters
        ----------
        point: itkPointD4 const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC4PPP4_SetPathEndPoint(self, point)

    def AddPathEndPoint(self, point):
        r"""
        AddPathEndPoint(self, point)

        Parameters
        ----------
        point: itkPointD4 const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC4PPP4_AddPathEndPoint(self, point)

    def ClearPathEndPoints(self):
        r"""ClearPathEndPoints(self)"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC4PPP4_ClearPathEndPoints(self)

    def SetTerminationValue(self, _arg):
        r"""
        SetTerminationValue(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC4PPP4_SetTerminationValue(self, _arg)

    def GetTerminationValue(self):
        r"""GetTerminationValue(self) -> double"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC4PPP4_GetTerminationValue(self)

    def Execute(self, object, event):
        r"""
        Execute(self, object, event)

        Parameters
        ----------
        object: itkObject const *
        event: itkEventObject const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC4PPP4_Execute(self, object, event)
    __swig_destroy__ = _itkArrivalFunctionToPathFilterPython.delete_itkArrivalFunctionToPathFilterIUC4PPP4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkArrivalFunctionToPathFilterIUC4PPP4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC4PPP4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkArrivalFunctionToPathFilterIUC4PPP4

        Create a new object of the class itkArrivalFunctionToPathFilterIUC4PPP4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkArrivalFunctionToPathFilterIUC4PPP4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkArrivalFunctionToPathFilterIUC4PPP4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkArrivalFunctionToPathFilterIUC4PPP4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkArrivalFunctionToPathFilterIUC4PPP4 in _itkArrivalFunctionToPathFilterPython:
_itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC4PPP4_swigregister(itkArrivalFunctionToPathFilterIUC4PPP4)

def itkArrivalFunctionToPathFilterIUS2PPP2_New():
    return itkArrivalFunctionToPathFilterIUS2PPP2.New()

class itkArrivalFunctionToPathFilterIUS2PPP2(itk.itkImageToPathFilterPython.itkImageToPathFilterIUS2PLPP2):
    r"""Proxy of C++ itkArrivalFunctionToPathFilterIUS2PPP2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkArrivalFunctionToPathFilterIUS2PPP2_Pointer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS2PPP2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkArrivalFunctionToPathFilterIUS2PPP2_Pointer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS2PPP2_Clone(self)

    def SetOptimizer(self, _arg):
        r"""
        SetOptimizer(self, _arg)

        Parameters
        ----------
        _arg: itkSingleValuedNonLinearOptimizer *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS2PPP2_SetOptimizer(self, _arg)

    def GetOptimizer(self):
        r"""GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS2PPP2_GetOptimizer(self)

    def SetCostFunction(self, _arg):
        r"""
        SetCostFunction(self, _arg)

        Parameters
        ----------
        _arg: itkSingleImageCostFunctionIUS2 *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS2PPP2_SetCostFunction(self, _arg)

    def GetCostFunction(self):
        r"""GetCostFunction(self) -> itkSingleImageCostFunctionIUS2"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS2PPP2_GetCostFunction(self)

    def SetPathEndPoint(self, point):
        r"""
        SetPathEndPoint(self, point)

        Parameters
        ----------
        point: itkPointD2 const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS2PPP2_SetPathEndPoint(self, point)

    def AddPathEndPoint(self, point):
        r"""
        AddPathEndPoint(self, point)

        Parameters
        ----------
        point: itkPointD2 const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS2PPP2_AddPathEndPoint(self, point)

    def ClearPathEndPoints(self):
        r"""ClearPathEndPoints(self)"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS2PPP2_ClearPathEndPoints(self)

    def SetTerminationValue(self, _arg):
        r"""
        SetTerminationValue(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS2PPP2_SetTerminationValue(self, _arg)

    def GetTerminationValue(self):
        r"""GetTerminationValue(self) -> double"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS2PPP2_GetTerminationValue(self)

    def Execute(self, object, event):
        r"""
        Execute(self, object, event)

        Parameters
        ----------
        object: itkObject const *
        event: itkEventObject const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS2PPP2_Execute(self, object, event)
    __swig_destroy__ = _itkArrivalFunctionToPathFilterPython.delete_itkArrivalFunctionToPathFilterIUS2PPP2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkArrivalFunctionToPathFilterIUS2PPP2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS2PPP2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkArrivalFunctionToPathFilterIUS2PPP2

        Create a new object of the class itkArrivalFunctionToPathFilterIUS2PPP2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkArrivalFunctionToPathFilterIUS2PPP2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkArrivalFunctionToPathFilterIUS2PPP2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkArrivalFunctionToPathFilterIUS2PPP2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkArrivalFunctionToPathFilterIUS2PPP2 in _itkArrivalFunctionToPathFilterPython:
_itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS2PPP2_swigregister(itkArrivalFunctionToPathFilterIUS2PPP2)

def itkArrivalFunctionToPathFilterIUS3PPP3_New():
    return itkArrivalFunctionToPathFilterIUS3PPP3.New()

class itkArrivalFunctionToPathFilterIUS3PPP3(itk.itkImageToPathFilterPython.itkImageToPathFilterIUS3PLPP3):
    r"""Proxy of C++ itkArrivalFunctionToPathFilterIUS3PPP3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkArrivalFunctionToPathFilterIUS3PPP3_Pointer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS3PPP3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkArrivalFunctionToPathFilterIUS3PPP3_Pointer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS3PPP3_Clone(self)

    def SetOptimizer(self, _arg):
        r"""
        SetOptimizer(self, _arg)

        Parameters
        ----------
        _arg: itkSingleValuedNonLinearOptimizer *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS3PPP3_SetOptimizer(self, _arg)

    def GetOptimizer(self):
        r"""GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS3PPP3_GetOptimizer(self)

    def SetCostFunction(self, _arg):
        r"""
        SetCostFunction(self, _arg)

        Parameters
        ----------
        _arg: itkSingleImageCostFunctionIUS3 *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS3PPP3_SetCostFunction(self, _arg)

    def GetCostFunction(self):
        r"""GetCostFunction(self) -> itkSingleImageCostFunctionIUS3"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS3PPP3_GetCostFunction(self)

    def SetPathEndPoint(self, point):
        r"""
        SetPathEndPoint(self, point)

        Parameters
        ----------
        point: itkPointD3 const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS3PPP3_SetPathEndPoint(self, point)

    def AddPathEndPoint(self, point):
        r"""
        AddPathEndPoint(self, point)

        Parameters
        ----------
        point: itkPointD3 const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS3PPP3_AddPathEndPoint(self, point)

    def ClearPathEndPoints(self):
        r"""ClearPathEndPoints(self)"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS3PPP3_ClearPathEndPoints(self)

    def SetTerminationValue(self, _arg):
        r"""
        SetTerminationValue(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS3PPP3_SetTerminationValue(self, _arg)

    def GetTerminationValue(self):
        r"""GetTerminationValue(self) -> double"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS3PPP3_GetTerminationValue(self)

    def Execute(self, object, event):
        r"""
        Execute(self, object, event)

        Parameters
        ----------
        object: itkObject const *
        event: itkEventObject const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS3PPP3_Execute(self, object, event)
    __swig_destroy__ = _itkArrivalFunctionToPathFilterPython.delete_itkArrivalFunctionToPathFilterIUS3PPP3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkArrivalFunctionToPathFilterIUS3PPP3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS3PPP3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkArrivalFunctionToPathFilterIUS3PPP3

        Create a new object of the class itkArrivalFunctionToPathFilterIUS3PPP3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkArrivalFunctionToPathFilterIUS3PPP3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkArrivalFunctionToPathFilterIUS3PPP3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkArrivalFunctionToPathFilterIUS3PPP3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkArrivalFunctionToPathFilterIUS3PPP3 in _itkArrivalFunctionToPathFilterPython:
_itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS3PPP3_swigregister(itkArrivalFunctionToPathFilterIUS3PPP3)

def itkArrivalFunctionToPathFilterIUS4PPP4_New():
    return itkArrivalFunctionToPathFilterIUS4PPP4.New()

class itkArrivalFunctionToPathFilterIUS4PPP4(itk.itkImageToPathFilterPython.itkImageToPathFilterIUS4PLPP4):
    r"""Proxy of C++ itkArrivalFunctionToPathFilterIUS4PPP4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkArrivalFunctionToPathFilterIUS4PPP4_Pointer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS4PPP4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkArrivalFunctionToPathFilterIUS4PPP4_Pointer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS4PPP4_Clone(self)

    def SetOptimizer(self, _arg):
        r"""
        SetOptimizer(self, _arg)

        Parameters
        ----------
        _arg: itkSingleValuedNonLinearOptimizer *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS4PPP4_SetOptimizer(self, _arg)

    def GetOptimizer(self):
        r"""GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS4PPP4_GetOptimizer(self)

    def SetCostFunction(self, _arg):
        r"""
        SetCostFunction(self, _arg)

        Parameters
        ----------
        _arg: itkSingleImageCostFunctionIUS4 *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS4PPP4_SetCostFunction(self, _arg)

    def GetCostFunction(self):
        r"""GetCostFunction(self) -> itkSingleImageCostFunctionIUS4"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS4PPP4_GetCostFunction(self)

    def SetPathEndPoint(self, point):
        r"""
        SetPathEndPoint(self, point)

        Parameters
        ----------
        point: itkPointD4 const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS4PPP4_SetPathEndPoint(self, point)

    def AddPathEndPoint(self, point):
        r"""
        AddPathEndPoint(self, point)

        Parameters
        ----------
        point: itkPointD4 const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS4PPP4_AddPathEndPoint(self, point)

    def ClearPathEndPoints(self):
        r"""ClearPathEndPoints(self)"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS4PPP4_ClearPathEndPoints(self)

    def SetTerminationValue(self, _arg):
        r"""
        SetTerminationValue(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS4PPP4_SetTerminationValue(self, _arg)

    def GetTerminationValue(self):
        r"""GetTerminationValue(self) -> double"""
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS4PPP4_GetTerminationValue(self)

    def Execute(self, object, event):
        r"""
        Execute(self, object, event)

        Parameters
        ----------
        object: itkObject const *
        event: itkEventObject const &

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS4PPP4_Execute(self, object, event)
    __swig_destroy__ = _itkArrivalFunctionToPathFilterPython.delete_itkArrivalFunctionToPathFilterIUS4PPP4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkArrivalFunctionToPathFilterIUS4PPP4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS4PPP4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkArrivalFunctionToPathFilterIUS4PPP4

        Create a new object of the class itkArrivalFunctionToPathFilterIUS4PPP4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkArrivalFunctionToPathFilterIUS4PPP4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkArrivalFunctionToPathFilterIUS4PPP4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkArrivalFunctionToPathFilterIUS4PPP4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkArrivalFunctionToPathFilterIUS4PPP4 in _itkArrivalFunctionToPathFilterPython:
_itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS4PPP4_swigregister(itkArrivalFunctionToPathFilterIUS4PPP4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def arrival_function_to_path_filter(*args: itkt.ImageLike,  optimizer=..., cost_function=..., path_end_point: Sequence[float]=..., termination_value: float=...,**kwargs)-> itkt.PathSourceReturn:
    """Functional interface for ArrivalFunctionToPathFilter"""
    import itk

    kwarg_typehints = { 'optimizer':optimizer,'cost_function':cost_function,'path_end_point':path_end_point,'termination_value':termination_value }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ArrivalFunctionToPathFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def arrival_function_to_path_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.MinimalPathExtraction.ArrivalFunctionToPathFilter
    arrival_function_to_path_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    arrival_function_to_path_filter.__doc__ = filter_object.__doc__



