# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _MinimalPathExtractionPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkSpeedFunctionToPathFilterPython
else:
    import _itkSpeedFunctionToPathFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkArrivalFunctionToPathFilterPython
import itk.ITKOptimizersBasePython
import itk.ITKCostFunctionsPython
import itk.vnl_cost_functionPython
import itk.vnl_unary_functionPython
import itk.vnl_least_squares_functionPython
import itk.itkCostFunctionPython
import itk.itkOptimizerParametersPython
import itk.itkArrayPython
import itk.itkArray2DPython
import itk.itkImagePython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkImageToPathFilterPython
import itk.itkPathSourcePython
import itk.itkPolyLineParametricPathPython
import itk.itkContinuousIndexPython
import itk.itkVectorContainerPython
import itk.itkParametricPathPython
import itk.itkPathBasePython
import itk.itkSingleImageCostFunctionPython
import itk.itkInterpolateImageFunctionPython
import itk.itkImageFunctionBasePython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkFunctionBasePython
import itk.itkSpeedFunctionPathInformationPython

def itkSpeedFunctionToPathFilterID2PPP2_New():
    return itkSpeedFunctionToPathFilterID2PPP2.New()

class itkSpeedFunctionToPathFilterID2PPP2(itk.itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID2PPP2):
    r"""Proxy of C++ itkSpeedFunctionToPathFilterID2PPP2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSpeedFunctionToPathFilterID2PPP2_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterID2PPP2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSpeedFunctionToPathFilterID2PPP2_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterID2PPP2_Clone(self)

    def AddPathInformation(self, info):
        r"""
        AddPathInformation(self, info)

        Parameters
        ----------
        info: itkSpeedFunctionPathInformationPD2 *

        """
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterID2PPP2_AddPathInformation(self, info)

    def ClearPathInformation(self):
        r"""ClearPathInformation(self)"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterID2PPP2_ClearPathInformation(self)

    def GetCurrentArrivalFunction(self):
        r"""GetCurrentArrivalFunction(self) -> itkImageD2_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterID2PPP2_GetCurrentArrivalFunction(self)
    __swig_destroy__ = _itkSpeedFunctionToPathFilterPython.delete_itkSpeedFunctionToPathFilterID2PPP2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSpeedFunctionToPathFilterID2PPP2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterID2PPP2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSpeedFunctionToPathFilterID2PPP2

        Create a new object of the class itkSpeedFunctionToPathFilterID2PPP2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpeedFunctionToPathFilterID2PPP2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSpeedFunctionToPathFilterID2PPP2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSpeedFunctionToPathFilterID2PPP2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSpeedFunctionToPathFilterID2PPP2 in _itkSpeedFunctionToPathFilterPython:
_itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterID2PPP2_swigregister(itkSpeedFunctionToPathFilterID2PPP2)

def itkSpeedFunctionToPathFilterID3PPP3_New():
    return itkSpeedFunctionToPathFilterID3PPP3.New()

class itkSpeedFunctionToPathFilterID3PPP3(itk.itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID3PPP3):
    r"""Proxy of C++ itkSpeedFunctionToPathFilterID3PPP3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSpeedFunctionToPathFilterID3PPP3_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterID3PPP3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSpeedFunctionToPathFilterID3PPP3_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterID3PPP3_Clone(self)

    def AddPathInformation(self, info):
        r"""
        AddPathInformation(self, info)

        Parameters
        ----------
        info: itkSpeedFunctionPathInformationPD3 *

        """
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterID3PPP3_AddPathInformation(self, info)

    def ClearPathInformation(self):
        r"""ClearPathInformation(self)"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterID3PPP3_ClearPathInformation(self)

    def GetCurrentArrivalFunction(self):
        r"""GetCurrentArrivalFunction(self) -> itkImageD3_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterID3PPP3_GetCurrentArrivalFunction(self)
    __swig_destroy__ = _itkSpeedFunctionToPathFilterPython.delete_itkSpeedFunctionToPathFilterID3PPP3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSpeedFunctionToPathFilterID3PPP3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterID3PPP3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSpeedFunctionToPathFilterID3PPP3

        Create a new object of the class itkSpeedFunctionToPathFilterID3PPP3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpeedFunctionToPathFilterID3PPP3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSpeedFunctionToPathFilterID3PPP3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSpeedFunctionToPathFilterID3PPP3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSpeedFunctionToPathFilterID3PPP3 in _itkSpeedFunctionToPathFilterPython:
_itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterID3PPP3_swigregister(itkSpeedFunctionToPathFilterID3PPP3)

def itkSpeedFunctionToPathFilterID4PPP4_New():
    return itkSpeedFunctionToPathFilterID4PPP4.New()

class itkSpeedFunctionToPathFilterID4PPP4(itk.itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterID4PPP4):
    r"""Proxy of C++ itkSpeedFunctionToPathFilterID4PPP4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSpeedFunctionToPathFilterID4PPP4_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterID4PPP4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSpeedFunctionToPathFilterID4PPP4_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterID4PPP4_Clone(self)

    def AddPathInformation(self, info):
        r"""
        AddPathInformation(self, info)

        Parameters
        ----------
        info: itkSpeedFunctionPathInformationPD4 *

        """
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterID4PPP4_AddPathInformation(self, info)

    def ClearPathInformation(self):
        r"""ClearPathInformation(self)"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterID4PPP4_ClearPathInformation(self)

    def GetCurrentArrivalFunction(self):
        r"""GetCurrentArrivalFunction(self) -> itkImageD4_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterID4PPP4_GetCurrentArrivalFunction(self)
    __swig_destroy__ = _itkSpeedFunctionToPathFilterPython.delete_itkSpeedFunctionToPathFilterID4PPP4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSpeedFunctionToPathFilterID4PPP4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterID4PPP4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSpeedFunctionToPathFilterID4PPP4

        Create a new object of the class itkSpeedFunctionToPathFilterID4PPP4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpeedFunctionToPathFilterID4PPP4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSpeedFunctionToPathFilterID4PPP4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSpeedFunctionToPathFilterID4PPP4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSpeedFunctionToPathFilterID4PPP4 in _itkSpeedFunctionToPathFilterPython:
_itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterID4PPP4_swigregister(itkSpeedFunctionToPathFilterID4PPP4)

def itkSpeedFunctionToPathFilterIF2PPP2_New():
    return itkSpeedFunctionToPathFilterIF2PPP2.New()

class itkSpeedFunctionToPathFilterIF2PPP2(itk.itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF2PPP2):
    r"""Proxy of C++ itkSpeedFunctionToPathFilterIF2PPP2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSpeedFunctionToPathFilterIF2PPP2_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIF2PPP2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSpeedFunctionToPathFilterIF2PPP2_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIF2PPP2_Clone(self)

    def AddPathInformation(self, info):
        r"""
        AddPathInformation(self, info)

        Parameters
        ----------
        info: itkSpeedFunctionPathInformationPD2 *

        """
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIF2PPP2_AddPathInformation(self, info)

    def ClearPathInformation(self):
        r"""ClearPathInformation(self)"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIF2PPP2_ClearPathInformation(self)

    def GetCurrentArrivalFunction(self):
        r"""GetCurrentArrivalFunction(self) -> itkImageF2_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIF2PPP2_GetCurrentArrivalFunction(self)
    __swig_destroy__ = _itkSpeedFunctionToPathFilterPython.delete_itkSpeedFunctionToPathFilterIF2PPP2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSpeedFunctionToPathFilterIF2PPP2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIF2PPP2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSpeedFunctionToPathFilterIF2PPP2

        Create a new object of the class itkSpeedFunctionToPathFilterIF2PPP2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpeedFunctionToPathFilterIF2PPP2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSpeedFunctionToPathFilterIF2PPP2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSpeedFunctionToPathFilterIF2PPP2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSpeedFunctionToPathFilterIF2PPP2 in _itkSpeedFunctionToPathFilterPython:
_itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIF2PPP2_swigregister(itkSpeedFunctionToPathFilterIF2PPP2)

def itkSpeedFunctionToPathFilterIF3PPP3_New():
    return itkSpeedFunctionToPathFilterIF3PPP3.New()

class itkSpeedFunctionToPathFilterIF3PPP3(itk.itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF3PPP3):
    r"""Proxy of C++ itkSpeedFunctionToPathFilterIF3PPP3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSpeedFunctionToPathFilterIF3PPP3_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIF3PPP3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSpeedFunctionToPathFilterIF3PPP3_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIF3PPP3_Clone(self)

    def AddPathInformation(self, info):
        r"""
        AddPathInformation(self, info)

        Parameters
        ----------
        info: itkSpeedFunctionPathInformationPD3 *

        """
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIF3PPP3_AddPathInformation(self, info)

    def ClearPathInformation(self):
        r"""ClearPathInformation(self)"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIF3PPP3_ClearPathInformation(self)

    def GetCurrentArrivalFunction(self):
        r"""GetCurrentArrivalFunction(self) -> itkImageF3_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIF3PPP3_GetCurrentArrivalFunction(self)
    __swig_destroy__ = _itkSpeedFunctionToPathFilterPython.delete_itkSpeedFunctionToPathFilterIF3PPP3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSpeedFunctionToPathFilterIF3PPP3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIF3PPP3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSpeedFunctionToPathFilterIF3PPP3

        Create a new object of the class itkSpeedFunctionToPathFilterIF3PPP3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpeedFunctionToPathFilterIF3PPP3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSpeedFunctionToPathFilterIF3PPP3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSpeedFunctionToPathFilterIF3PPP3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSpeedFunctionToPathFilterIF3PPP3 in _itkSpeedFunctionToPathFilterPython:
_itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIF3PPP3_swigregister(itkSpeedFunctionToPathFilterIF3PPP3)

def itkSpeedFunctionToPathFilterIF4PPP4_New():
    return itkSpeedFunctionToPathFilterIF4PPP4.New()

class itkSpeedFunctionToPathFilterIF4PPP4(itk.itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIF4PPP4):
    r"""Proxy of C++ itkSpeedFunctionToPathFilterIF4PPP4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSpeedFunctionToPathFilterIF4PPP4_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIF4PPP4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSpeedFunctionToPathFilterIF4PPP4_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIF4PPP4_Clone(self)

    def AddPathInformation(self, info):
        r"""
        AddPathInformation(self, info)

        Parameters
        ----------
        info: itkSpeedFunctionPathInformationPD4 *

        """
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIF4PPP4_AddPathInformation(self, info)

    def ClearPathInformation(self):
        r"""ClearPathInformation(self)"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIF4PPP4_ClearPathInformation(self)

    def GetCurrentArrivalFunction(self):
        r"""GetCurrentArrivalFunction(self) -> itkImageF4_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIF4PPP4_GetCurrentArrivalFunction(self)
    __swig_destroy__ = _itkSpeedFunctionToPathFilterPython.delete_itkSpeedFunctionToPathFilterIF4PPP4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSpeedFunctionToPathFilterIF4PPP4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIF4PPP4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSpeedFunctionToPathFilterIF4PPP4

        Create a new object of the class itkSpeedFunctionToPathFilterIF4PPP4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpeedFunctionToPathFilterIF4PPP4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSpeedFunctionToPathFilterIF4PPP4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSpeedFunctionToPathFilterIF4PPP4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSpeedFunctionToPathFilterIF4PPP4 in _itkSpeedFunctionToPathFilterPython:
_itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIF4PPP4_swigregister(itkSpeedFunctionToPathFilterIF4PPP4)

def itkSpeedFunctionToPathFilterISS2PPP2_New():
    return itkSpeedFunctionToPathFilterISS2PPP2.New()

class itkSpeedFunctionToPathFilterISS2PPP2(itk.itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS2PPP2):
    r"""Proxy of C++ itkSpeedFunctionToPathFilterISS2PPP2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSpeedFunctionToPathFilterISS2PPP2_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterISS2PPP2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSpeedFunctionToPathFilterISS2PPP2_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterISS2PPP2_Clone(self)

    def AddPathInformation(self, info):
        r"""
        AddPathInformation(self, info)

        Parameters
        ----------
        info: itkSpeedFunctionPathInformationPD2 *

        """
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterISS2PPP2_AddPathInformation(self, info)

    def ClearPathInformation(self):
        r"""ClearPathInformation(self)"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterISS2PPP2_ClearPathInformation(self)

    def GetCurrentArrivalFunction(self):
        r"""GetCurrentArrivalFunction(self) -> itkImageSS2_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterISS2PPP2_GetCurrentArrivalFunction(self)
    __swig_destroy__ = _itkSpeedFunctionToPathFilterPython.delete_itkSpeedFunctionToPathFilterISS2PPP2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSpeedFunctionToPathFilterISS2PPP2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterISS2PPP2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSpeedFunctionToPathFilterISS2PPP2

        Create a new object of the class itkSpeedFunctionToPathFilterISS2PPP2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpeedFunctionToPathFilterISS2PPP2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSpeedFunctionToPathFilterISS2PPP2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSpeedFunctionToPathFilterISS2PPP2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSpeedFunctionToPathFilterISS2PPP2 in _itkSpeedFunctionToPathFilterPython:
_itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterISS2PPP2_swigregister(itkSpeedFunctionToPathFilterISS2PPP2)

def itkSpeedFunctionToPathFilterISS3PPP3_New():
    return itkSpeedFunctionToPathFilterISS3PPP3.New()

class itkSpeedFunctionToPathFilterISS3PPP3(itk.itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS3PPP3):
    r"""Proxy of C++ itkSpeedFunctionToPathFilterISS3PPP3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSpeedFunctionToPathFilterISS3PPP3_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterISS3PPP3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSpeedFunctionToPathFilterISS3PPP3_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterISS3PPP3_Clone(self)

    def AddPathInformation(self, info):
        r"""
        AddPathInformation(self, info)

        Parameters
        ----------
        info: itkSpeedFunctionPathInformationPD3 *

        """
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterISS3PPP3_AddPathInformation(self, info)

    def ClearPathInformation(self):
        r"""ClearPathInformation(self)"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterISS3PPP3_ClearPathInformation(self)

    def GetCurrentArrivalFunction(self):
        r"""GetCurrentArrivalFunction(self) -> itkImageSS3_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterISS3PPP3_GetCurrentArrivalFunction(self)
    __swig_destroy__ = _itkSpeedFunctionToPathFilterPython.delete_itkSpeedFunctionToPathFilterISS3PPP3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSpeedFunctionToPathFilterISS3PPP3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterISS3PPP3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSpeedFunctionToPathFilterISS3PPP3

        Create a new object of the class itkSpeedFunctionToPathFilterISS3PPP3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpeedFunctionToPathFilterISS3PPP3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSpeedFunctionToPathFilterISS3PPP3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSpeedFunctionToPathFilterISS3PPP3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSpeedFunctionToPathFilterISS3PPP3 in _itkSpeedFunctionToPathFilterPython:
_itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterISS3PPP3_swigregister(itkSpeedFunctionToPathFilterISS3PPP3)

def itkSpeedFunctionToPathFilterISS4PPP4_New():
    return itkSpeedFunctionToPathFilterISS4PPP4.New()

class itkSpeedFunctionToPathFilterISS4PPP4(itk.itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterISS4PPP4):
    r"""Proxy of C++ itkSpeedFunctionToPathFilterISS4PPP4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSpeedFunctionToPathFilterISS4PPP4_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterISS4PPP4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSpeedFunctionToPathFilterISS4PPP4_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterISS4PPP4_Clone(self)

    def AddPathInformation(self, info):
        r"""
        AddPathInformation(self, info)

        Parameters
        ----------
        info: itkSpeedFunctionPathInformationPD4 *

        """
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterISS4PPP4_AddPathInformation(self, info)

    def ClearPathInformation(self):
        r"""ClearPathInformation(self)"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterISS4PPP4_ClearPathInformation(self)

    def GetCurrentArrivalFunction(self):
        r"""GetCurrentArrivalFunction(self) -> itkImageSS4_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterISS4PPP4_GetCurrentArrivalFunction(self)
    __swig_destroy__ = _itkSpeedFunctionToPathFilterPython.delete_itkSpeedFunctionToPathFilterISS4PPP4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSpeedFunctionToPathFilterISS4PPP4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterISS4PPP4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSpeedFunctionToPathFilterISS4PPP4

        Create a new object of the class itkSpeedFunctionToPathFilterISS4PPP4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpeedFunctionToPathFilterISS4PPP4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSpeedFunctionToPathFilterISS4PPP4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSpeedFunctionToPathFilterISS4PPP4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSpeedFunctionToPathFilterISS4PPP4 in _itkSpeedFunctionToPathFilterPython:
_itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterISS4PPP4_swigregister(itkSpeedFunctionToPathFilterISS4PPP4)

def itkSpeedFunctionToPathFilterIUC2PPP2_New():
    return itkSpeedFunctionToPathFilterIUC2PPP2.New()

class itkSpeedFunctionToPathFilterIUC2PPP2(itk.itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC2PPP2):
    r"""Proxy of C++ itkSpeedFunctionToPathFilterIUC2PPP2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSpeedFunctionToPathFilterIUC2PPP2_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIUC2PPP2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSpeedFunctionToPathFilterIUC2PPP2_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIUC2PPP2_Clone(self)

    def AddPathInformation(self, info):
        r"""
        AddPathInformation(self, info)

        Parameters
        ----------
        info: itkSpeedFunctionPathInformationPD2 *

        """
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIUC2PPP2_AddPathInformation(self, info)

    def ClearPathInformation(self):
        r"""ClearPathInformation(self)"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIUC2PPP2_ClearPathInformation(self)

    def GetCurrentArrivalFunction(self):
        r"""GetCurrentArrivalFunction(self) -> itkImageUC2_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIUC2PPP2_GetCurrentArrivalFunction(self)
    __swig_destroy__ = _itkSpeedFunctionToPathFilterPython.delete_itkSpeedFunctionToPathFilterIUC2PPP2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSpeedFunctionToPathFilterIUC2PPP2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIUC2PPP2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSpeedFunctionToPathFilterIUC2PPP2

        Create a new object of the class itkSpeedFunctionToPathFilterIUC2PPP2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpeedFunctionToPathFilterIUC2PPP2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSpeedFunctionToPathFilterIUC2PPP2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSpeedFunctionToPathFilterIUC2PPP2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSpeedFunctionToPathFilterIUC2PPP2 in _itkSpeedFunctionToPathFilterPython:
_itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIUC2PPP2_swigregister(itkSpeedFunctionToPathFilterIUC2PPP2)

def itkSpeedFunctionToPathFilterIUC3PPP3_New():
    return itkSpeedFunctionToPathFilterIUC3PPP3.New()

class itkSpeedFunctionToPathFilterIUC3PPP3(itk.itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC3PPP3):
    r"""Proxy of C++ itkSpeedFunctionToPathFilterIUC3PPP3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSpeedFunctionToPathFilterIUC3PPP3_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIUC3PPP3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSpeedFunctionToPathFilterIUC3PPP3_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIUC3PPP3_Clone(self)

    def AddPathInformation(self, info):
        r"""
        AddPathInformation(self, info)

        Parameters
        ----------
        info: itkSpeedFunctionPathInformationPD3 *

        """
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIUC3PPP3_AddPathInformation(self, info)

    def ClearPathInformation(self):
        r"""ClearPathInformation(self)"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIUC3PPP3_ClearPathInformation(self)

    def GetCurrentArrivalFunction(self):
        r"""GetCurrentArrivalFunction(self) -> itkImageUC3_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIUC3PPP3_GetCurrentArrivalFunction(self)
    __swig_destroy__ = _itkSpeedFunctionToPathFilterPython.delete_itkSpeedFunctionToPathFilterIUC3PPP3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSpeedFunctionToPathFilterIUC3PPP3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIUC3PPP3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSpeedFunctionToPathFilterIUC3PPP3

        Create a new object of the class itkSpeedFunctionToPathFilterIUC3PPP3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpeedFunctionToPathFilterIUC3PPP3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSpeedFunctionToPathFilterIUC3PPP3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSpeedFunctionToPathFilterIUC3PPP3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSpeedFunctionToPathFilterIUC3PPP3 in _itkSpeedFunctionToPathFilterPython:
_itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIUC3PPP3_swigregister(itkSpeedFunctionToPathFilterIUC3PPP3)

def itkSpeedFunctionToPathFilterIUC4PPP4_New():
    return itkSpeedFunctionToPathFilterIUC4PPP4.New()

class itkSpeedFunctionToPathFilterIUC4PPP4(itk.itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUC4PPP4):
    r"""Proxy of C++ itkSpeedFunctionToPathFilterIUC4PPP4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSpeedFunctionToPathFilterIUC4PPP4_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIUC4PPP4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSpeedFunctionToPathFilterIUC4PPP4_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIUC4PPP4_Clone(self)

    def AddPathInformation(self, info):
        r"""
        AddPathInformation(self, info)

        Parameters
        ----------
        info: itkSpeedFunctionPathInformationPD4 *

        """
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIUC4PPP4_AddPathInformation(self, info)

    def ClearPathInformation(self):
        r"""ClearPathInformation(self)"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIUC4PPP4_ClearPathInformation(self)

    def GetCurrentArrivalFunction(self):
        r"""GetCurrentArrivalFunction(self) -> itkImageUC4_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIUC4PPP4_GetCurrentArrivalFunction(self)
    __swig_destroy__ = _itkSpeedFunctionToPathFilterPython.delete_itkSpeedFunctionToPathFilterIUC4PPP4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSpeedFunctionToPathFilterIUC4PPP4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIUC4PPP4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSpeedFunctionToPathFilterIUC4PPP4

        Create a new object of the class itkSpeedFunctionToPathFilterIUC4PPP4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpeedFunctionToPathFilterIUC4PPP4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSpeedFunctionToPathFilterIUC4PPP4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSpeedFunctionToPathFilterIUC4PPP4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSpeedFunctionToPathFilterIUC4PPP4 in _itkSpeedFunctionToPathFilterPython:
_itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIUC4PPP4_swigregister(itkSpeedFunctionToPathFilterIUC4PPP4)

def itkSpeedFunctionToPathFilterIUS2PPP2_New():
    return itkSpeedFunctionToPathFilterIUS2PPP2.New()

class itkSpeedFunctionToPathFilterIUS2PPP2(itk.itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS2PPP2):
    r"""Proxy of C++ itkSpeedFunctionToPathFilterIUS2PPP2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSpeedFunctionToPathFilterIUS2PPP2_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIUS2PPP2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSpeedFunctionToPathFilterIUS2PPP2_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIUS2PPP2_Clone(self)

    def AddPathInformation(self, info):
        r"""
        AddPathInformation(self, info)

        Parameters
        ----------
        info: itkSpeedFunctionPathInformationPD2 *

        """
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIUS2PPP2_AddPathInformation(self, info)

    def ClearPathInformation(self):
        r"""ClearPathInformation(self)"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIUS2PPP2_ClearPathInformation(self)

    def GetCurrentArrivalFunction(self):
        r"""GetCurrentArrivalFunction(self) -> itkImageUS2_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIUS2PPP2_GetCurrentArrivalFunction(self)
    __swig_destroy__ = _itkSpeedFunctionToPathFilterPython.delete_itkSpeedFunctionToPathFilterIUS2PPP2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSpeedFunctionToPathFilterIUS2PPP2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIUS2PPP2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSpeedFunctionToPathFilterIUS2PPP2

        Create a new object of the class itkSpeedFunctionToPathFilterIUS2PPP2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpeedFunctionToPathFilterIUS2PPP2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSpeedFunctionToPathFilterIUS2PPP2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSpeedFunctionToPathFilterIUS2PPP2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSpeedFunctionToPathFilterIUS2PPP2 in _itkSpeedFunctionToPathFilterPython:
_itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIUS2PPP2_swigregister(itkSpeedFunctionToPathFilterIUS2PPP2)

def itkSpeedFunctionToPathFilterIUS3PPP3_New():
    return itkSpeedFunctionToPathFilterIUS3PPP3.New()

class itkSpeedFunctionToPathFilterIUS3PPP3(itk.itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS3PPP3):
    r"""Proxy of C++ itkSpeedFunctionToPathFilterIUS3PPP3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSpeedFunctionToPathFilterIUS3PPP3_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIUS3PPP3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSpeedFunctionToPathFilterIUS3PPP3_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIUS3PPP3_Clone(self)

    def AddPathInformation(self, info):
        r"""
        AddPathInformation(self, info)

        Parameters
        ----------
        info: itkSpeedFunctionPathInformationPD3 *

        """
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIUS3PPP3_AddPathInformation(self, info)

    def ClearPathInformation(self):
        r"""ClearPathInformation(self)"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIUS3PPP3_ClearPathInformation(self)

    def GetCurrentArrivalFunction(self):
        r"""GetCurrentArrivalFunction(self) -> itkImageUS3_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIUS3PPP3_GetCurrentArrivalFunction(self)
    __swig_destroy__ = _itkSpeedFunctionToPathFilterPython.delete_itkSpeedFunctionToPathFilterIUS3PPP3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSpeedFunctionToPathFilterIUS3PPP3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIUS3PPP3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSpeedFunctionToPathFilterIUS3PPP3

        Create a new object of the class itkSpeedFunctionToPathFilterIUS3PPP3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpeedFunctionToPathFilterIUS3PPP3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSpeedFunctionToPathFilterIUS3PPP3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSpeedFunctionToPathFilterIUS3PPP3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSpeedFunctionToPathFilterIUS3PPP3 in _itkSpeedFunctionToPathFilterPython:
_itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIUS3PPP3_swigregister(itkSpeedFunctionToPathFilterIUS3PPP3)

def itkSpeedFunctionToPathFilterIUS4PPP4_New():
    return itkSpeedFunctionToPathFilterIUS4PPP4.New()

class itkSpeedFunctionToPathFilterIUS4PPP4(itk.itkArrivalFunctionToPathFilterPython.itkArrivalFunctionToPathFilterIUS4PPP4):
    r"""Proxy of C++ itkSpeedFunctionToPathFilterIUS4PPP4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSpeedFunctionToPathFilterIUS4PPP4_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIUS4PPP4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSpeedFunctionToPathFilterIUS4PPP4_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIUS4PPP4_Clone(self)

    def AddPathInformation(self, info):
        r"""
        AddPathInformation(self, info)

        Parameters
        ----------
        info: itkSpeedFunctionPathInformationPD4 *

        """
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIUS4PPP4_AddPathInformation(self, info)

    def ClearPathInformation(self):
        r"""ClearPathInformation(self)"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIUS4PPP4_ClearPathInformation(self)

    def GetCurrentArrivalFunction(self):
        r"""GetCurrentArrivalFunction(self) -> itkImageUS4_Pointer"""
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIUS4PPP4_GetCurrentArrivalFunction(self)
    __swig_destroy__ = _itkSpeedFunctionToPathFilterPython.delete_itkSpeedFunctionToPathFilterIUS4PPP4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSpeedFunctionToPathFilterIUS4PPP4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIUS4PPP4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSpeedFunctionToPathFilterIUS4PPP4

        Create a new object of the class itkSpeedFunctionToPathFilterIUS4PPP4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpeedFunctionToPathFilterIUS4PPP4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSpeedFunctionToPathFilterIUS4PPP4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSpeedFunctionToPathFilterIUS4PPP4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSpeedFunctionToPathFilterIUS4PPP4 in _itkSpeedFunctionToPathFilterPython:
_itkSpeedFunctionToPathFilterPython.itkSpeedFunctionToPathFilterIUS4PPP4_swigregister(itkSpeedFunctionToPathFilterIUS4PPP4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def speed_function_to_path_filter(*args: itkt.ImageLike,  path_end_point: Union[Sequence[float], Sequence[float]]=..., optimizer=..., cost_function=..., termination_value: float=...,**kwargs)-> itkt.PathSourceReturn:
    """Functional interface for SpeedFunctionToPathFilter"""
    import itk

    kwarg_typehints = { 'path_end_point':path_end_point,'optimizer':optimizer,'cost_function':cost_function,'termination_value':termination_value }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.SpeedFunctionToPathFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def speed_function_to_path_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.MinimalPathExtraction.SpeedFunctionToPathFilter
    speed_function_to_path_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    speed_function_to_path_filter.__doc__ = filter_object.__doc__



