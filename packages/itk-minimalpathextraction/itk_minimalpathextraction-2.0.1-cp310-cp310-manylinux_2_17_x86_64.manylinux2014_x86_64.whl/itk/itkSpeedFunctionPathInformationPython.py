# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _MinimalPathExtractionPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkSpeedFunctionPathInformationPython
else:
    import _itkSpeedFunctionPathInformationPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython

def itkSpeedFunctionPathInformationPD2_New():
    return itkSpeedFunctionPathInformationPD2.New()

class itkSpeedFunctionPathInformationPD2(itk.ITKCommonBasePython.itkLightObject):
    r"""Proxy of C++ itkSpeedFunctionPathInformationPD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSpeedFunctionPathInformationPD2_Pointer"""
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSpeedFunctionPathInformationPD2_Pointer"""
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD2_Clone(self)

    def ClearInfo(self):
        r"""ClearInfo(self)"""
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD2_ClearInfo(self)

    def SetStartPoint(self, *args):
        r"""
        SetStartPoint(self, start)

        Parameters
        ----------
        start: itkPointD2 const &

        SetStartPoint(self, start)

        Parameters
        ----------
        start: std::vector< itkPointD2,std::allocator< itkPointD2 > > const &

        """
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD2_SetStartPoint(self, *args)

    def SetEndPoint(self, *args):
        r"""
        SetEndPoint(self, end)

        Parameters
        ----------
        end: itkPointD2 const &

        SetEndPoint(self, end)

        Parameters
        ----------
        end: std::vector< itkPointD2,std::allocator< itkPointD2 > > const &

        """
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD2_SetEndPoint(self, *args)

    def AddWayPoint(self, *args):
        r"""
        AddWayPoint(self, way)

        Parameters
        ----------
        way: itkPointD2 const &

        AddWayPoint(self, way)

        Parameters
        ----------
        way: std::vector< itkPointD2,std::allocator< itkPointD2 > > const &

        """
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD2_AddWayPoint(self, *args)

    def SetCurrent(self, *args):
        r"""
        SetCurrent(self, newcurrent)

        Parameters
        ----------
        newcurrent: std::vector< itkPointD2,std::allocator< itkPointD2 > > const &

        SetCurrent(self, current)

        Parameters
        ----------
        current: itkPointD2 const &

        """
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD2_SetCurrent(self, *args)

    def SetPrevious(self, *args):
        r"""
        SetPrevious(self, newprevious)

        Parameters
        ----------
        newprevious: std::vector< itkPointD2,std::allocator< itkPointD2 > > const &

        SetPrevious(self, newprevious)

        Parameters
        ----------
        newprevious: itkPointD2 const &

        """
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD2_SetPrevious(self, *args)

    def SetNext(self, *args):
        r"""
        SetNext(self, newnext)

        Parameters
        ----------
        newnext: std::vector< itkPointD2,std::allocator< itkPointD2 > > const &

        SetNext(self, newnext)

        Parameters
        ----------
        newnext: itkPointD2 const &

        """
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD2_SetNext(self, *args)

    def Advance(self):
        r"""Advance(self)"""
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD2_Advance(self)

    def GetNumberOfPoints(self):
        r"""GetNumberOfPoints(self) -> unsigned int"""
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD2_GetNumberOfPoints(self)

    def GetStartPoint(self):
        r"""GetStartPoint(self) -> vectoritkPointD2"""
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD2_GetStartPoint(self)

    def GetEndPoint(self):
        r"""GetEndPoint(self) -> vectoritkPointD2"""
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD2_GetEndPoint(self)

    def GetWayPoint(self, i):
        r"""
        GetWayPoint(self, i) -> vectoritkPointD2

        Parameters
        ----------
        i: unsigned long

        """
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD2_GetWayPoint(self, i)

    def HasNextFront(self):
        r"""HasNextFront(self) -> bool"""
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD2_HasNextFront(self)

    def GetCurrentFrontAndAdvance(self):
        r"""GetCurrentFrontAndAdvance(self) -> vectoritkPointD2"""
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD2_GetCurrentFrontAndAdvance(self)

    def PeekCurrentFront(self):
        r"""PeekCurrentFront(self) -> vectoritkPointD2"""
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD2_PeekCurrentFront(self)

    def PeekNextFront(self):
        r"""PeekNextFront(self) -> vectoritkPointD2"""
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD2_PeekNextFront(self)

    def PeekPreviousFront(self):
        r"""PeekPreviousFront(self) -> vectoritkPointD2"""
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD2_PeekPreviousFront(self)
    __swig_destroy__ = _itkSpeedFunctionPathInformationPython.delete_itkSpeedFunctionPathInformationPD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSpeedFunctionPathInformationPD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSpeedFunctionPathInformationPD2

        Create a new object of the class itkSpeedFunctionPathInformationPD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpeedFunctionPathInformationPD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSpeedFunctionPathInformationPD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSpeedFunctionPathInformationPD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSpeedFunctionPathInformationPD2 in _itkSpeedFunctionPathInformationPython:
_itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD2_swigregister(itkSpeedFunctionPathInformationPD2)

def itkSpeedFunctionPathInformationPD3_New():
    return itkSpeedFunctionPathInformationPD3.New()

class itkSpeedFunctionPathInformationPD3(itk.ITKCommonBasePython.itkLightObject):
    r"""Proxy of C++ itkSpeedFunctionPathInformationPD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSpeedFunctionPathInformationPD3_Pointer"""
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSpeedFunctionPathInformationPD3_Pointer"""
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD3_Clone(self)

    def ClearInfo(self):
        r"""ClearInfo(self)"""
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD3_ClearInfo(self)

    def SetStartPoint(self, *args):
        r"""
        SetStartPoint(self, start)

        Parameters
        ----------
        start: itkPointD3 const &

        SetStartPoint(self, start)

        Parameters
        ----------
        start: std::vector< itkPointD3,std::allocator< itkPointD3 > > const &

        """
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD3_SetStartPoint(self, *args)

    def SetEndPoint(self, *args):
        r"""
        SetEndPoint(self, end)

        Parameters
        ----------
        end: itkPointD3 const &

        SetEndPoint(self, end)

        Parameters
        ----------
        end: std::vector< itkPointD3,std::allocator< itkPointD3 > > const &

        """
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD3_SetEndPoint(self, *args)

    def AddWayPoint(self, *args):
        r"""
        AddWayPoint(self, way)

        Parameters
        ----------
        way: itkPointD3 const &

        AddWayPoint(self, way)

        Parameters
        ----------
        way: std::vector< itkPointD3,std::allocator< itkPointD3 > > const &

        """
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD3_AddWayPoint(self, *args)

    def SetCurrent(self, *args):
        r"""
        SetCurrent(self, newcurrent)

        Parameters
        ----------
        newcurrent: std::vector< itkPointD3,std::allocator< itkPointD3 > > const &

        SetCurrent(self, current)

        Parameters
        ----------
        current: itkPointD3 const &

        """
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD3_SetCurrent(self, *args)

    def SetPrevious(self, *args):
        r"""
        SetPrevious(self, newprevious)

        Parameters
        ----------
        newprevious: std::vector< itkPointD3,std::allocator< itkPointD3 > > const &

        SetPrevious(self, newprevious)

        Parameters
        ----------
        newprevious: itkPointD3 const &

        """
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD3_SetPrevious(self, *args)

    def SetNext(self, *args):
        r"""
        SetNext(self, newnext)

        Parameters
        ----------
        newnext: std::vector< itkPointD3,std::allocator< itkPointD3 > > const &

        SetNext(self, newnext)

        Parameters
        ----------
        newnext: itkPointD3 const &

        """
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD3_SetNext(self, *args)

    def Advance(self):
        r"""Advance(self)"""
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD3_Advance(self)

    def GetNumberOfPoints(self):
        r"""GetNumberOfPoints(self) -> unsigned int"""
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD3_GetNumberOfPoints(self)

    def GetStartPoint(self):
        r"""GetStartPoint(self) -> vectoritkPointD3"""
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD3_GetStartPoint(self)

    def GetEndPoint(self):
        r"""GetEndPoint(self) -> vectoritkPointD3"""
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD3_GetEndPoint(self)

    def GetWayPoint(self, i):
        r"""
        GetWayPoint(self, i) -> vectoritkPointD3

        Parameters
        ----------
        i: unsigned long

        """
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD3_GetWayPoint(self, i)

    def HasNextFront(self):
        r"""HasNextFront(self) -> bool"""
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD3_HasNextFront(self)

    def GetCurrentFrontAndAdvance(self):
        r"""GetCurrentFrontAndAdvance(self) -> vectoritkPointD3"""
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD3_GetCurrentFrontAndAdvance(self)

    def PeekCurrentFront(self):
        r"""PeekCurrentFront(self) -> vectoritkPointD3"""
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD3_PeekCurrentFront(self)

    def PeekNextFront(self):
        r"""PeekNextFront(self) -> vectoritkPointD3"""
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD3_PeekNextFront(self)

    def PeekPreviousFront(self):
        r"""PeekPreviousFront(self) -> vectoritkPointD3"""
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD3_PeekPreviousFront(self)
    __swig_destroy__ = _itkSpeedFunctionPathInformationPython.delete_itkSpeedFunctionPathInformationPD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSpeedFunctionPathInformationPD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSpeedFunctionPathInformationPD3

        Create a new object of the class itkSpeedFunctionPathInformationPD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpeedFunctionPathInformationPD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSpeedFunctionPathInformationPD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSpeedFunctionPathInformationPD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSpeedFunctionPathInformationPD3 in _itkSpeedFunctionPathInformationPython:
_itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD3_swigregister(itkSpeedFunctionPathInformationPD3)

def itkSpeedFunctionPathInformationPD4_New():
    return itkSpeedFunctionPathInformationPD4.New()

class itkSpeedFunctionPathInformationPD4(itk.ITKCommonBasePython.itkLightObject):
    r"""Proxy of C++ itkSpeedFunctionPathInformationPD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSpeedFunctionPathInformationPD4_Pointer"""
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSpeedFunctionPathInformationPD4_Pointer"""
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD4_Clone(self)

    def ClearInfo(self):
        r"""ClearInfo(self)"""
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD4_ClearInfo(self)

    def SetStartPoint(self, *args):
        r"""
        SetStartPoint(self, start)

        Parameters
        ----------
        start: itkPointD4 const &

        SetStartPoint(self, start)

        Parameters
        ----------
        start: std::vector< itkPointD4,std::allocator< itkPointD4 > > const &

        """
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD4_SetStartPoint(self, *args)

    def SetEndPoint(self, *args):
        r"""
        SetEndPoint(self, end)

        Parameters
        ----------
        end: itkPointD4 const &

        SetEndPoint(self, end)

        Parameters
        ----------
        end: std::vector< itkPointD4,std::allocator< itkPointD4 > > const &

        """
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD4_SetEndPoint(self, *args)

    def AddWayPoint(self, *args):
        r"""
        AddWayPoint(self, way)

        Parameters
        ----------
        way: itkPointD4 const &

        AddWayPoint(self, way)

        Parameters
        ----------
        way: std::vector< itkPointD4,std::allocator< itkPointD4 > > const &

        """
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD4_AddWayPoint(self, *args)

    def SetCurrent(self, *args):
        r"""
        SetCurrent(self, newcurrent)

        Parameters
        ----------
        newcurrent: std::vector< itkPointD4,std::allocator< itkPointD4 > > const &

        SetCurrent(self, current)

        Parameters
        ----------
        current: itkPointD4 const &

        """
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD4_SetCurrent(self, *args)

    def SetPrevious(self, *args):
        r"""
        SetPrevious(self, newprevious)

        Parameters
        ----------
        newprevious: std::vector< itkPointD4,std::allocator< itkPointD4 > > const &

        SetPrevious(self, newprevious)

        Parameters
        ----------
        newprevious: itkPointD4 const &

        """
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD4_SetPrevious(self, *args)

    def SetNext(self, *args):
        r"""
        SetNext(self, newnext)

        Parameters
        ----------
        newnext: std::vector< itkPointD4,std::allocator< itkPointD4 > > const &

        SetNext(self, newnext)

        Parameters
        ----------
        newnext: itkPointD4 const &

        """
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD4_SetNext(self, *args)

    def Advance(self):
        r"""Advance(self)"""
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD4_Advance(self)

    def GetNumberOfPoints(self):
        r"""GetNumberOfPoints(self) -> unsigned int"""
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD4_GetNumberOfPoints(self)

    def GetStartPoint(self):
        r"""GetStartPoint(self) -> vectoritkPointD4"""
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD4_GetStartPoint(self)

    def GetEndPoint(self):
        r"""GetEndPoint(self) -> vectoritkPointD4"""
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD4_GetEndPoint(self)

    def GetWayPoint(self, i):
        r"""
        GetWayPoint(self, i) -> vectoritkPointD4

        Parameters
        ----------
        i: unsigned long

        """
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD4_GetWayPoint(self, i)

    def HasNextFront(self):
        r"""HasNextFront(self) -> bool"""
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD4_HasNextFront(self)

    def GetCurrentFrontAndAdvance(self):
        r"""GetCurrentFrontAndAdvance(self) -> vectoritkPointD4"""
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD4_GetCurrentFrontAndAdvance(self)

    def PeekCurrentFront(self):
        r"""PeekCurrentFront(self) -> vectoritkPointD4"""
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD4_PeekCurrentFront(self)

    def PeekNextFront(self):
        r"""PeekNextFront(self) -> vectoritkPointD4"""
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD4_PeekNextFront(self)

    def PeekPreviousFront(self):
        r"""PeekPreviousFront(self) -> vectoritkPointD4"""
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD4_PeekPreviousFront(self)
    __swig_destroy__ = _itkSpeedFunctionPathInformationPython.delete_itkSpeedFunctionPathInformationPD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSpeedFunctionPathInformationPD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSpeedFunctionPathInformationPD4

        Create a new object of the class itkSpeedFunctionPathInformationPD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSpeedFunctionPathInformationPD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSpeedFunctionPathInformationPD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSpeedFunctionPathInformationPD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSpeedFunctionPathInformationPD4 in _itkSpeedFunctionPathInformationPython:
_itkSpeedFunctionPathInformationPython.itkSpeedFunctionPathInformationPD4_swigregister(itkSpeedFunctionPathInformationPD4)

