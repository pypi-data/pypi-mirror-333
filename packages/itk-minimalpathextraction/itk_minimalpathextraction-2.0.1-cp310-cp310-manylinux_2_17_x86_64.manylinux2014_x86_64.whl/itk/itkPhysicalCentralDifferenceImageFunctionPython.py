# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _MinimalPathExtractionPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkPhysicalCentralDifferenceImageFunctionPython
else:
    import _itkPhysicalCentralDifferenceImageFunctionPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkIndexPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkOffsetPython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkContinuousIndexPython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
class itkFunctionBasePF2CVdouble2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkFunctionBasePF2CVdouble2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Evaluate(self, input):
        r"""
        Evaluate(self, input) -> itkCovariantVectorD2

        Parameters
        ----------
        input: itkPointF2 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkFunctionBasePF2CVdouble2_Evaluate(self, input)
    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkFunctionBasePF2CVdouble2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFunctionBasePF2CVdouble2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkFunctionBasePF2CVdouble2_cast(obj)

# Register itkFunctionBasePF2CVdouble2 in _itkPhysicalCentralDifferenceImageFunctionPython:
_itkPhysicalCentralDifferenceImageFunctionPython.itkFunctionBasePF2CVdouble2_swigregister(itkFunctionBasePF2CVdouble2)
class itkFunctionBasePF3CVdouble3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkFunctionBasePF3CVdouble3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Evaluate(self, input):
        r"""
        Evaluate(self, input) -> itkCovariantVectorD3

        Parameters
        ----------
        input: itkPointF3 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkFunctionBasePF3CVdouble3_Evaluate(self, input)
    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkFunctionBasePF3CVdouble3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFunctionBasePF3CVdouble3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkFunctionBasePF3CVdouble3_cast(obj)

# Register itkFunctionBasePF3CVdouble3 in _itkPhysicalCentralDifferenceImageFunctionPython:
_itkPhysicalCentralDifferenceImageFunctionPython.itkFunctionBasePF3CVdouble3_swigregister(itkFunctionBasePF3CVdouble3)
class itkFunctionBasePF4CVdouble4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkFunctionBasePF4CVdouble4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Evaluate(self, input):
        r"""
        Evaluate(self, input) -> itkCovariantVectorD4

        Parameters
        ----------
        input: itkPointF4 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkFunctionBasePF4CVdouble4_Evaluate(self, input)
    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkFunctionBasePF4CVdouble4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkFunctionBasePF4CVdouble4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkFunctionBasePF4CVdouble4_cast(obj)

# Register itkFunctionBasePF4CVdouble4 in _itkPhysicalCentralDifferenceImageFunctionPython:
_itkPhysicalCentralDifferenceImageFunctionPython.itkFunctionBasePF4CVdouble4_swigregister(itkFunctionBasePF4CVdouble4)
class itkImageFunctionID2CVdouble2float(itkFunctionBasePF2CVdouble2):
    r"""Proxy of C++ itkImageFunctionID2CVdouble2float class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageD2 const *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID2CVdouble2float_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageD2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID2CVdouble2float_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> itkCovariantVectorD2

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID2CVdouble2float_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> itkCovariantVectorD2

        Parameters
        ----------
        index: itkContinuousIndexF2 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID2CVdouble2float_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex2 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexF2 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointF2 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID2CVdouble2float_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointF2 const &
        index: itkIndex2 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID2CVdouble2float_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointF2 const &
        cindex: itkContinuousIndexF2 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID2CVdouble2float_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexF2 const &
        index: itkIndex2 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID2CVdouble2float_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID2CVdouble2float_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID2CVdouble2float_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexF2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID2CVdouble2float_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexF2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID2CVdouble2float_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkImageFunctionID2CVdouble2float

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionID2CVdouble2float

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID2CVdouble2float_cast(obj)

# Register itkImageFunctionID2CVdouble2float in _itkPhysicalCentralDifferenceImageFunctionPython:
_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID2CVdouble2float_swigregister(itkImageFunctionID2CVdouble2float)
class itkImageFunctionID3CVdouble3float(itkFunctionBasePF3CVdouble3):
    r"""Proxy of C++ itkImageFunctionID3CVdouble3float class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageD3 const *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID3CVdouble3float_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageD3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID3CVdouble3float_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> itkCovariantVectorD3

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID3CVdouble3float_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> itkCovariantVectorD3

        Parameters
        ----------
        index: itkContinuousIndexF3 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID3CVdouble3float_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex3 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexF3 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointF3 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID3CVdouble3float_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointF3 const &
        index: itkIndex3 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID3CVdouble3float_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointF3 const &
        cindex: itkContinuousIndexF3 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID3CVdouble3float_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexF3 const &
        index: itkIndex3 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID3CVdouble3float_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID3CVdouble3float_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID3CVdouble3float_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexF3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID3CVdouble3float_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexF3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID3CVdouble3float_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkImageFunctionID3CVdouble3float

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionID3CVdouble3float

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID3CVdouble3float_cast(obj)

# Register itkImageFunctionID3CVdouble3float in _itkPhysicalCentralDifferenceImageFunctionPython:
_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID3CVdouble3float_swigregister(itkImageFunctionID3CVdouble3float)
class itkImageFunctionID4CVdouble4float(itkFunctionBasePF4CVdouble4):
    r"""Proxy of C++ itkImageFunctionID4CVdouble4float class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageD4 const *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID4CVdouble4float_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageD4"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID4CVdouble4float_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> itkCovariantVectorD4

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID4CVdouble4float_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> itkCovariantVectorD4

        Parameters
        ----------
        index: itkContinuousIndexF4 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID4CVdouble4float_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex4 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexF4 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointF4 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID4CVdouble4float_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointF4 const &
        index: itkIndex4 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID4CVdouble4float_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointF4 const &
        cindex: itkContinuousIndexF4 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID4CVdouble4float_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexF4 const &
        index: itkIndex4 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID4CVdouble4float_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex4"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID4CVdouble4float_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex4"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID4CVdouble4float_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexF4"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID4CVdouble4float_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexF4"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID4CVdouble4float_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkImageFunctionID4CVdouble4float

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionID4CVdouble4float

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID4CVdouble4float_cast(obj)

# Register itkImageFunctionID4CVdouble4float in _itkPhysicalCentralDifferenceImageFunctionPython:
_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionID4CVdouble4float_swigregister(itkImageFunctionID4CVdouble4float)
class itkImageFunctionIF2CVdouble2float(itkFunctionBasePF2CVdouble2):
    r"""Proxy of C++ itkImageFunctionIF2CVdouble2float class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageF2 const *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF2CVdouble2float_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageF2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF2CVdouble2float_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> itkCovariantVectorD2

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF2CVdouble2float_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> itkCovariantVectorD2

        Parameters
        ----------
        index: itkContinuousIndexF2 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF2CVdouble2float_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex2 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexF2 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointF2 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF2CVdouble2float_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointF2 const &
        index: itkIndex2 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF2CVdouble2float_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointF2 const &
        cindex: itkContinuousIndexF2 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF2CVdouble2float_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexF2 const &
        index: itkIndex2 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF2CVdouble2float_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF2CVdouble2float_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF2CVdouble2float_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexF2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF2CVdouble2float_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexF2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF2CVdouble2float_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkImageFunctionIF2CVdouble2float

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIF2CVdouble2float

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF2CVdouble2float_cast(obj)

# Register itkImageFunctionIF2CVdouble2float in _itkPhysicalCentralDifferenceImageFunctionPython:
_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF2CVdouble2float_swigregister(itkImageFunctionIF2CVdouble2float)
class itkImageFunctionIF3CVdouble3float(itkFunctionBasePF3CVdouble3):
    r"""Proxy of C++ itkImageFunctionIF3CVdouble3float class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageF3 const *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF3CVdouble3float_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageF3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF3CVdouble3float_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> itkCovariantVectorD3

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF3CVdouble3float_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> itkCovariantVectorD3

        Parameters
        ----------
        index: itkContinuousIndexF3 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF3CVdouble3float_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex3 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexF3 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointF3 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF3CVdouble3float_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointF3 const &
        index: itkIndex3 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF3CVdouble3float_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointF3 const &
        cindex: itkContinuousIndexF3 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF3CVdouble3float_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexF3 const &
        index: itkIndex3 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF3CVdouble3float_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF3CVdouble3float_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF3CVdouble3float_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexF3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF3CVdouble3float_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexF3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF3CVdouble3float_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkImageFunctionIF3CVdouble3float

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIF3CVdouble3float

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF3CVdouble3float_cast(obj)

# Register itkImageFunctionIF3CVdouble3float in _itkPhysicalCentralDifferenceImageFunctionPython:
_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF3CVdouble3float_swigregister(itkImageFunctionIF3CVdouble3float)
class itkImageFunctionIF4CVdouble4float(itkFunctionBasePF4CVdouble4):
    r"""Proxy of C++ itkImageFunctionIF4CVdouble4float class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageF4 const *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF4CVdouble4float_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageF4"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF4CVdouble4float_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> itkCovariantVectorD4

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF4CVdouble4float_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> itkCovariantVectorD4

        Parameters
        ----------
        index: itkContinuousIndexF4 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF4CVdouble4float_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex4 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexF4 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointF4 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF4CVdouble4float_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointF4 const &
        index: itkIndex4 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF4CVdouble4float_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointF4 const &
        cindex: itkContinuousIndexF4 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF4CVdouble4float_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexF4 const &
        index: itkIndex4 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF4CVdouble4float_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex4"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF4CVdouble4float_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex4"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF4CVdouble4float_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexF4"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF4CVdouble4float_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexF4"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF4CVdouble4float_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkImageFunctionIF4CVdouble4float

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIF4CVdouble4float

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF4CVdouble4float_cast(obj)

# Register itkImageFunctionIF4CVdouble4float in _itkPhysicalCentralDifferenceImageFunctionPython:
_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIF4CVdouble4float_swigregister(itkImageFunctionIF4CVdouble4float)
class itkImageFunctionISS2CVdouble2float(itkFunctionBasePF2CVdouble2):
    r"""Proxy of C++ itkImageFunctionISS2CVdouble2float class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageSS2 const *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS2CVdouble2float_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageSS2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS2CVdouble2float_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> itkCovariantVectorD2

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS2CVdouble2float_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> itkCovariantVectorD2

        Parameters
        ----------
        index: itkContinuousIndexF2 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS2CVdouble2float_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex2 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexF2 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointF2 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS2CVdouble2float_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointF2 const &
        index: itkIndex2 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS2CVdouble2float_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointF2 const &
        cindex: itkContinuousIndexF2 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS2CVdouble2float_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexF2 const &
        index: itkIndex2 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS2CVdouble2float_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS2CVdouble2float_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS2CVdouble2float_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexF2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS2CVdouble2float_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexF2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS2CVdouble2float_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkImageFunctionISS2CVdouble2float

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionISS2CVdouble2float

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS2CVdouble2float_cast(obj)

# Register itkImageFunctionISS2CVdouble2float in _itkPhysicalCentralDifferenceImageFunctionPython:
_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS2CVdouble2float_swigregister(itkImageFunctionISS2CVdouble2float)
class itkImageFunctionISS3CVdouble3float(itkFunctionBasePF3CVdouble3):
    r"""Proxy of C++ itkImageFunctionISS3CVdouble3float class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageSS3 const *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS3CVdouble3float_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageSS3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS3CVdouble3float_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> itkCovariantVectorD3

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS3CVdouble3float_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> itkCovariantVectorD3

        Parameters
        ----------
        index: itkContinuousIndexF3 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS3CVdouble3float_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex3 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexF3 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointF3 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS3CVdouble3float_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointF3 const &
        index: itkIndex3 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS3CVdouble3float_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointF3 const &
        cindex: itkContinuousIndexF3 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS3CVdouble3float_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexF3 const &
        index: itkIndex3 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS3CVdouble3float_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS3CVdouble3float_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS3CVdouble3float_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexF3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS3CVdouble3float_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexF3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS3CVdouble3float_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkImageFunctionISS3CVdouble3float

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionISS3CVdouble3float

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS3CVdouble3float_cast(obj)

# Register itkImageFunctionISS3CVdouble3float in _itkPhysicalCentralDifferenceImageFunctionPython:
_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS3CVdouble3float_swigregister(itkImageFunctionISS3CVdouble3float)
class itkImageFunctionISS4CVdouble4float(itkFunctionBasePF4CVdouble4):
    r"""Proxy of C++ itkImageFunctionISS4CVdouble4float class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageSS4 const *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS4CVdouble4float_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageSS4"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS4CVdouble4float_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> itkCovariantVectorD4

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS4CVdouble4float_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> itkCovariantVectorD4

        Parameters
        ----------
        index: itkContinuousIndexF4 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS4CVdouble4float_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex4 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexF4 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointF4 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS4CVdouble4float_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointF4 const &
        index: itkIndex4 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS4CVdouble4float_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointF4 const &
        cindex: itkContinuousIndexF4 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS4CVdouble4float_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexF4 const &
        index: itkIndex4 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS4CVdouble4float_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex4"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS4CVdouble4float_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex4"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS4CVdouble4float_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexF4"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS4CVdouble4float_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexF4"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS4CVdouble4float_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkImageFunctionISS4CVdouble4float

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionISS4CVdouble4float

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS4CVdouble4float_cast(obj)

# Register itkImageFunctionISS4CVdouble4float in _itkPhysicalCentralDifferenceImageFunctionPython:
_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionISS4CVdouble4float_swigregister(itkImageFunctionISS4CVdouble4float)
class itkImageFunctionIUC2CVdouble2float(itkFunctionBasePF2CVdouble2):
    r"""Proxy of C++ itkImageFunctionIUC2CVdouble2float class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageUC2 const *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC2CVdouble2float_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageUC2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC2CVdouble2float_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> itkCovariantVectorD2

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC2CVdouble2float_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> itkCovariantVectorD2

        Parameters
        ----------
        index: itkContinuousIndexF2 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC2CVdouble2float_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex2 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexF2 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointF2 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC2CVdouble2float_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointF2 const &
        index: itkIndex2 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC2CVdouble2float_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointF2 const &
        cindex: itkContinuousIndexF2 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC2CVdouble2float_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexF2 const &
        index: itkIndex2 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC2CVdouble2float_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC2CVdouble2float_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC2CVdouble2float_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexF2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC2CVdouble2float_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexF2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC2CVdouble2float_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkImageFunctionIUC2CVdouble2float

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIUC2CVdouble2float

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC2CVdouble2float_cast(obj)

# Register itkImageFunctionIUC2CVdouble2float in _itkPhysicalCentralDifferenceImageFunctionPython:
_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC2CVdouble2float_swigregister(itkImageFunctionIUC2CVdouble2float)
class itkImageFunctionIUC3CVdouble3float(itkFunctionBasePF3CVdouble3):
    r"""Proxy of C++ itkImageFunctionIUC3CVdouble3float class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageUC3 const *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC3CVdouble3float_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageUC3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC3CVdouble3float_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> itkCovariantVectorD3

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC3CVdouble3float_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> itkCovariantVectorD3

        Parameters
        ----------
        index: itkContinuousIndexF3 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC3CVdouble3float_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex3 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexF3 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointF3 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC3CVdouble3float_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointF3 const &
        index: itkIndex3 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC3CVdouble3float_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointF3 const &
        cindex: itkContinuousIndexF3 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC3CVdouble3float_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexF3 const &
        index: itkIndex3 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC3CVdouble3float_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC3CVdouble3float_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC3CVdouble3float_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexF3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC3CVdouble3float_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexF3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC3CVdouble3float_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkImageFunctionIUC3CVdouble3float

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIUC3CVdouble3float

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC3CVdouble3float_cast(obj)

# Register itkImageFunctionIUC3CVdouble3float in _itkPhysicalCentralDifferenceImageFunctionPython:
_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC3CVdouble3float_swigregister(itkImageFunctionIUC3CVdouble3float)
class itkImageFunctionIUC4CVdouble4float(itkFunctionBasePF4CVdouble4):
    r"""Proxy of C++ itkImageFunctionIUC4CVdouble4float class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageUC4 const *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC4CVdouble4float_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageUC4"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC4CVdouble4float_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> itkCovariantVectorD4

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC4CVdouble4float_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> itkCovariantVectorD4

        Parameters
        ----------
        index: itkContinuousIndexF4 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC4CVdouble4float_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex4 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexF4 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointF4 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC4CVdouble4float_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointF4 const &
        index: itkIndex4 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC4CVdouble4float_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointF4 const &
        cindex: itkContinuousIndexF4 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC4CVdouble4float_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexF4 const &
        index: itkIndex4 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC4CVdouble4float_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex4"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC4CVdouble4float_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex4"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC4CVdouble4float_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexF4"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC4CVdouble4float_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexF4"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC4CVdouble4float_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkImageFunctionIUC4CVdouble4float

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIUC4CVdouble4float

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC4CVdouble4float_cast(obj)

# Register itkImageFunctionIUC4CVdouble4float in _itkPhysicalCentralDifferenceImageFunctionPython:
_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUC4CVdouble4float_swigregister(itkImageFunctionIUC4CVdouble4float)
class itkImageFunctionIUS2CVdouble2float(itkFunctionBasePF2CVdouble2):
    r"""Proxy of C++ itkImageFunctionIUS2CVdouble2float class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageUS2 const *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS2CVdouble2float_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageUS2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS2CVdouble2float_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> itkCovariantVectorD2

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS2CVdouble2float_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> itkCovariantVectorD2

        Parameters
        ----------
        index: itkContinuousIndexF2 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS2CVdouble2float_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex2 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexF2 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointF2 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS2CVdouble2float_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointF2 const &
        index: itkIndex2 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS2CVdouble2float_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointF2 const &
        cindex: itkContinuousIndexF2 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS2CVdouble2float_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexF2 const &
        index: itkIndex2 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS2CVdouble2float_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS2CVdouble2float_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS2CVdouble2float_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexF2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS2CVdouble2float_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexF2"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS2CVdouble2float_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkImageFunctionIUS2CVdouble2float

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIUS2CVdouble2float

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS2CVdouble2float_cast(obj)

# Register itkImageFunctionIUS2CVdouble2float in _itkPhysicalCentralDifferenceImageFunctionPython:
_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS2CVdouble2float_swigregister(itkImageFunctionIUS2CVdouble2float)
class itkImageFunctionIUS3CVdouble3float(itkFunctionBasePF3CVdouble3):
    r"""Proxy of C++ itkImageFunctionIUS3CVdouble3float class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageUS3 const *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS3CVdouble3float_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageUS3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS3CVdouble3float_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> itkCovariantVectorD3

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS3CVdouble3float_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> itkCovariantVectorD3

        Parameters
        ----------
        index: itkContinuousIndexF3 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS3CVdouble3float_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex3 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexF3 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointF3 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS3CVdouble3float_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointF3 const &
        index: itkIndex3 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS3CVdouble3float_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointF3 const &
        cindex: itkContinuousIndexF3 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS3CVdouble3float_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexF3 const &
        index: itkIndex3 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS3CVdouble3float_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS3CVdouble3float_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS3CVdouble3float_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexF3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS3CVdouble3float_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexF3"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS3CVdouble3float_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkImageFunctionIUS3CVdouble3float

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIUS3CVdouble3float

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS3CVdouble3float_cast(obj)

# Register itkImageFunctionIUS3CVdouble3float in _itkPhysicalCentralDifferenceImageFunctionPython:
_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS3CVdouble3float_swigregister(itkImageFunctionIUS3CVdouble3float)
class itkImageFunctionIUS4CVdouble4float(itkFunctionBasePF4CVdouble4):
    r"""Proxy of C++ itkImageFunctionIUS4CVdouble4float class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInputImage(self, ptr):
        r"""
        SetInputImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageUS4 const *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS4CVdouble4float_SetInputImage(self, ptr)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageUS4"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS4CVdouble4float_GetInputImage(self)

    def EvaluateAtIndex(self, index):
        r"""
        EvaluateAtIndex(self, index) -> itkCovariantVectorD4

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS4CVdouble4float_EvaluateAtIndex(self, index)

    def EvaluateAtContinuousIndex(self, index):
        r"""
        EvaluateAtContinuousIndex(self, index) -> itkCovariantVectorD4

        Parameters
        ----------
        index: itkContinuousIndexF4 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS4CVdouble4float_EvaluateAtContinuousIndex(self, index)

    def IsInsideBuffer(self, *args):
        r"""
        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkIndex4 const &

        IsInsideBuffer(self, index) -> bool

        Parameters
        ----------
        index: itkContinuousIndexF4 const &

        IsInsideBuffer(self, point) -> bool

        Parameters
        ----------
        point: itkPointF4 const &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS4CVdouble4float_IsInsideBuffer(self, *args)

    def ConvertPointToNearestIndex(self, point, index):
        r"""
        ConvertPointToNearestIndex(self, point, index)

        Parameters
        ----------
        point: itkPointF4 const &
        index: itkIndex4 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS4CVdouble4float_ConvertPointToNearestIndex(self, point, index)

    def ConvertPointToContinuousIndex(self, point, cindex):
        r"""
        ConvertPointToContinuousIndex(self, point, cindex)

        Parameters
        ----------
        point: itkPointF4 const &
        cindex: itkContinuousIndexF4 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS4CVdouble4float_ConvertPointToContinuousIndex(self, point, cindex)

    def ConvertContinuousIndexToNearestIndex(self, cindex, index):
        r"""
        ConvertContinuousIndexToNearestIndex(self, cindex, index)

        Parameters
        ----------
        cindex: itkContinuousIndexF4 const &
        index: itkIndex4 &

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS4CVdouble4float_ConvertContinuousIndexToNearestIndex(self, cindex, index)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> itkIndex4"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS4CVdouble4float_GetStartIndex(self)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> itkIndex4"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS4CVdouble4float_GetEndIndex(self)

    def GetStartContinuousIndex(self):
        r"""GetStartContinuousIndex(self) -> itkContinuousIndexF4"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS4CVdouble4float_GetStartContinuousIndex(self)

    def GetEndContinuousIndex(self):
        r"""GetEndContinuousIndex(self) -> itkContinuousIndexF4"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS4CVdouble4float_GetEndContinuousIndex(self)
    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkImageFunctionIUS4CVdouble4float

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFunctionIUS4CVdouble4float

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS4CVdouble4float_cast(obj)

# Register itkImageFunctionIUS4CVdouble4float in _itkPhysicalCentralDifferenceImageFunctionPython:
_itkPhysicalCentralDifferenceImageFunctionPython.itkImageFunctionIUS4CVdouble4float_swigregister(itkImageFunctionIUS4CVdouble4float)

def itkPhysicalCentralDifferenceImageFunctionID2float_New():
    return itkPhysicalCentralDifferenceImageFunctionID2float.New()

class itkPhysicalCentralDifferenceImageFunctionID2float(itkImageFunctionID2CVdouble2float):
    r"""Proxy of C++ itkPhysicalCentralDifferenceImageFunctionID2float class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPhysicalCentralDifferenceImageFunctionID2float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionID2float___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPhysicalCentralDifferenceImageFunctionID2float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionID2float_Clone(self)
    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkPhysicalCentralDifferenceImageFunctionID2float

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPhysicalCentralDifferenceImageFunctionID2float

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionID2float_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPhysicalCentralDifferenceImageFunctionID2float

        Create a new object of the class itkPhysicalCentralDifferenceImageFunctionID2float and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhysicalCentralDifferenceImageFunctionID2float.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPhysicalCentralDifferenceImageFunctionID2float.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPhysicalCentralDifferenceImageFunctionID2float.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPhysicalCentralDifferenceImageFunctionID2float in _itkPhysicalCentralDifferenceImageFunctionPython:
_itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionID2float_swigregister(itkPhysicalCentralDifferenceImageFunctionID2float)

def itkPhysicalCentralDifferenceImageFunctionID3float_New():
    return itkPhysicalCentralDifferenceImageFunctionID3float.New()

class itkPhysicalCentralDifferenceImageFunctionID3float(itkImageFunctionID3CVdouble3float):
    r"""Proxy of C++ itkPhysicalCentralDifferenceImageFunctionID3float class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPhysicalCentralDifferenceImageFunctionID3float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionID3float___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPhysicalCentralDifferenceImageFunctionID3float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionID3float_Clone(self)
    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkPhysicalCentralDifferenceImageFunctionID3float

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPhysicalCentralDifferenceImageFunctionID3float

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionID3float_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPhysicalCentralDifferenceImageFunctionID3float

        Create a new object of the class itkPhysicalCentralDifferenceImageFunctionID3float and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhysicalCentralDifferenceImageFunctionID3float.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPhysicalCentralDifferenceImageFunctionID3float.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPhysicalCentralDifferenceImageFunctionID3float.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPhysicalCentralDifferenceImageFunctionID3float in _itkPhysicalCentralDifferenceImageFunctionPython:
_itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionID3float_swigregister(itkPhysicalCentralDifferenceImageFunctionID3float)

def itkPhysicalCentralDifferenceImageFunctionID4float_New():
    return itkPhysicalCentralDifferenceImageFunctionID4float.New()

class itkPhysicalCentralDifferenceImageFunctionID4float(itkImageFunctionID4CVdouble4float):
    r"""Proxy of C++ itkPhysicalCentralDifferenceImageFunctionID4float class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPhysicalCentralDifferenceImageFunctionID4float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionID4float___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPhysicalCentralDifferenceImageFunctionID4float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionID4float_Clone(self)
    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkPhysicalCentralDifferenceImageFunctionID4float

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPhysicalCentralDifferenceImageFunctionID4float

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionID4float_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPhysicalCentralDifferenceImageFunctionID4float

        Create a new object of the class itkPhysicalCentralDifferenceImageFunctionID4float and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhysicalCentralDifferenceImageFunctionID4float.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPhysicalCentralDifferenceImageFunctionID4float.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPhysicalCentralDifferenceImageFunctionID4float.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPhysicalCentralDifferenceImageFunctionID4float in _itkPhysicalCentralDifferenceImageFunctionPython:
_itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionID4float_swigregister(itkPhysicalCentralDifferenceImageFunctionID4float)

def itkPhysicalCentralDifferenceImageFunctionIF2float_New():
    return itkPhysicalCentralDifferenceImageFunctionIF2float.New()

class itkPhysicalCentralDifferenceImageFunctionIF2float(itkImageFunctionIF2CVdouble2float):
    r"""Proxy of C++ itkPhysicalCentralDifferenceImageFunctionIF2float class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPhysicalCentralDifferenceImageFunctionIF2float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIF2float___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPhysicalCentralDifferenceImageFunctionIF2float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIF2float_Clone(self)
    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkPhysicalCentralDifferenceImageFunctionIF2float

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPhysicalCentralDifferenceImageFunctionIF2float

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIF2float_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPhysicalCentralDifferenceImageFunctionIF2float

        Create a new object of the class itkPhysicalCentralDifferenceImageFunctionIF2float and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhysicalCentralDifferenceImageFunctionIF2float.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPhysicalCentralDifferenceImageFunctionIF2float.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPhysicalCentralDifferenceImageFunctionIF2float.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPhysicalCentralDifferenceImageFunctionIF2float in _itkPhysicalCentralDifferenceImageFunctionPython:
_itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIF2float_swigregister(itkPhysicalCentralDifferenceImageFunctionIF2float)

def itkPhysicalCentralDifferenceImageFunctionIF3float_New():
    return itkPhysicalCentralDifferenceImageFunctionIF3float.New()

class itkPhysicalCentralDifferenceImageFunctionIF3float(itkImageFunctionIF3CVdouble3float):
    r"""Proxy of C++ itkPhysicalCentralDifferenceImageFunctionIF3float class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPhysicalCentralDifferenceImageFunctionIF3float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIF3float___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPhysicalCentralDifferenceImageFunctionIF3float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIF3float_Clone(self)
    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkPhysicalCentralDifferenceImageFunctionIF3float

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPhysicalCentralDifferenceImageFunctionIF3float

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIF3float_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPhysicalCentralDifferenceImageFunctionIF3float

        Create a new object of the class itkPhysicalCentralDifferenceImageFunctionIF3float and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhysicalCentralDifferenceImageFunctionIF3float.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPhysicalCentralDifferenceImageFunctionIF3float.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPhysicalCentralDifferenceImageFunctionIF3float.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPhysicalCentralDifferenceImageFunctionIF3float in _itkPhysicalCentralDifferenceImageFunctionPython:
_itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIF3float_swigregister(itkPhysicalCentralDifferenceImageFunctionIF3float)

def itkPhysicalCentralDifferenceImageFunctionIF4float_New():
    return itkPhysicalCentralDifferenceImageFunctionIF4float.New()

class itkPhysicalCentralDifferenceImageFunctionIF4float(itkImageFunctionIF4CVdouble4float):
    r"""Proxy of C++ itkPhysicalCentralDifferenceImageFunctionIF4float class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPhysicalCentralDifferenceImageFunctionIF4float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIF4float___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPhysicalCentralDifferenceImageFunctionIF4float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIF4float_Clone(self)
    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkPhysicalCentralDifferenceImageFunctionIF4float

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPhysicalCentralDifferenceImageFunctionIF4float

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIF4float_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPhysicalCentralDifferenceImageFunctionIF4float

        Create a new object of the class itkPhysicalCentralDifferenceImageFunctionIF4float and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhysicalCentralDifferenceImageFunctionIF4float.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPhysicalCentralDifferenceImageFunctionIF4float.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPhysicalCentralDifferenceImageFunctionIF4float.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPhysicalCentralDifferenceImageFunctionIF4float in _itkPhysicalCentralDifferenceImageFunctionPython:
_itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIF4float_swigregister(itkPhysicalCentralDifferenceImageFunctionIF4float)

def itkPhysicalCentralDifferenceImageFunctionISS2float_New():
    return itkPhysicalCentralDifferenceImageFunctionISS2float.New()

class itkPhysicalCentralDifferenceImageFunctionISS2float(itkImageFunctionISS2CVdouble2float):
    r"""Proxy of C++ itkPhysicalCentralDifferenceImageFunctionISS2float class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPhysicalCentralDifferenceImageFunctionISS2float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionISS2float___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPhysicalCentralDifferenceImageFunctionISS2float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionISS2float_Clone(self)
    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkPhysicalCentralDifferenceImageFunctionISS2float

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPhysicalCentralDifferenceImageFunctionISS2float

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionISS2float_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPhysicalCentralDifferenceImageFunctionISS2float

        Create a new object of the class itkPhysicalCentralDifferenceImageFunctionISS2float and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhysicalCentralDifferenceImageFunctionISS2float.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPhysicalCentralDifferenceImageFunctionISS2float.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPhysicalCentralDifferenceImageFunctionISS2float.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPhysicalCentralDifferenceImageFunctionISS2float in _itkPhysicalCentralDifferenceImageFunctionPython:
_itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionISS2float_swigregister(itkPhysicalCentralDifferenceImageFunctionISS2float)

def itkPhysicalCentralDifferenceImageFunctionISS3float_New():
    return itkPhysicalCentralDifferenceImageFunctionISS3float.New()

class itkPhysicalCentralDifferenceImageFunctionISS3float(itkImageFunctionISS3CVdouble3float):
    r"""Proxy of C++ itkPhysicalCentralDifferenceImageFunctionISS3float class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPhysicalCentralDifferenceImageFunctionISS3float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionISS3float___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPhysicalCentralDifferenceImageFunctionISS3float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionISS3float_Clone(self)
    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkPhysicalCentralDifferenceImageFunctionISS3float

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPhysicalCentralDifferenceImageFunctionISS3float

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionISS3float_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPhysicalCentralDifferenceImageFunctionISS3float

        Create a new object of the class itkPhysicalCentralDifferenceImageFunctionISS3float and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhysicalCentralDifferenceImageFunctionISS3float.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPhysicalCentralDifferenceImageFunctionISS3float.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPhysicalCentralDifferenceImageFunctionISS3float.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPhysicalCentralDifferenceImageFunctionISS3float in _itkPhysicalCentralDifferenceImageFunctionPython:
_itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionISS3float_swigregister(itkPhysicalCentralDifferenceImageFunctionISS3float)

def itkPhysicalCentralDifferenceImageFunctionISS4float_New():
    return itkPhysicalCentralDifferenceImageFunctionISS4float.New()

class itkPhysicalCentralDifferenceImageFunctionISS4float(itkImageFunctionISS4CVdouble4float):
    r"""Proxy of C++ itkPhysicalCentralDifferenceImageFunctionISS4float class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPhysicalCentralDifferenceImageFunctionISS4float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionISS4float___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPhysicalCentralDifferenceImageFunctionISS4float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionISS4float_Clone(self)
    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkPhysicalCentralDifferenceImageFunctionISS4float

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPhysicalCentralDifferenceImageFunctionISS4float

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionISS4float_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPhysicalCentralDifferenceImageFunctionISS4float

        Create a new object of the class itkPhysicalCentralDifferenceImageFunctionISS4float and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhysicalCentralDifferenceImageFunctionISS4float.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPhysicalCentralDifferenceImageFunctionISS4float.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPhysicalCentralDifferenceImageFunctionISS4float.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPhysicalCentralDifferenceImageFunctionISS4float in _itkPhysicalCentralDifferenceImageFunctionPython:
_itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionISS4float_swigregister(itkPhysicalCentralDifferenceImageFunctionISS4float)

def itkPhysicalCentralDifferenceImageFunctionIUC2float_New():
    return itkPhysicalCentralDifferenceImageFunctionIUC2float.New()

class itkPhysicalCentralDifferenceImageFunctionIUC2float(itkImageFunctionIUC2CVdouble2float):
    r"""Proxy of C++ itkPhysicalCentralDifferenceImageFunctionIUC2float class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPhysicalCentralDifferenceImageFunctionIUC2float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUC2float___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPhysicalCentralDifferenceImageFunctionIUC2float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUC2float_Clone(self)
    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkPhysicalCentralDifferenceImageFunctionIUC2float

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPhysicalCentralDifferenceImageFunctionIUC2float

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUC2float_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPhysicalCentralDifferenceImageFunctionIUC2float

        Create a new object of the class itkPhysicalCentralDifferenceImageFunctionIUC2float and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhysicalCentralDifferenceImageFunctionIUC2float.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPhysicalCentralDifferenceImageFunctionIUC2float.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPhysicalCentralDifferenceImageFunctionIUC2float.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPhysicalCentralDifferenceImageFunctionIUC2float in _itkPhysicalCentralDifferenceImageFunctionPython:
_itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUC2float_swigregister(itkPhysicalCentralDifferenceImageFunctionIUC2float)

def itkPhysicalCentralDifferenceImageFunctionIUC3float_New():
    return itkPhysicalCentralDifferenceImageFunctionIUC3float.New()

class itkPhysicalCentralDifferenceImageFunctionIUC3float(itkImageFunctionIUC3CVdouble3float):
    r"""Proxy of C++ itkPhysicalCentralDifferenceImageFunctionIUC3float class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPhysicalCentralDifferenceImageFunctionIUC3float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUC3float___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPhysicalCentralDifferenceImageFunctionIUC3float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUC3float_Clone(self)
    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkPhysicalCentralDifferenceImageFunctionIUC3float

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPhysicalCentralDifferenceImageFunctionIUC3float

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUC3float_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPhysicalCentralDifferenceImageFunctionIUC3float

        Create a new object of the class itkPhysicalCentralDifferenceImageFunctionIUC3float and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhysicalCentralDifferenceImageFunctionIUC3float.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPhysicalCentralDifferenceImageFunctionIUC3float.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPhysicalCentralDifferenceImageFunctionIUC3float.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPhysicalCentralDifferenceImageFunctionIUC3float in _itkPhysicalCentralDifferenceImageFunctionPython:
_itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUC3float_swigregister(itkPhysicalCentralDifferenceImageFunctionIUC3float)

def itkPhysicalCentralDifferenceImageFunctionIUC4float_New():
    return itkPhysicalCentralDifferenceImageFunctionIUC4float.New()

class itkPhysicalCentralDifferenceImageFunctionIUC4float(itkImageFunctionIUC4CVdouble4float):
    r"""Proxy of C++ itkPhysicalCentralDifferenceImageFunctionIUC4float class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPhysicalCentralDifferenceImageFunctionIUC4float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUC4float___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPhysicalCentralDifferenceImageFunctionIUC4float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUC4float_Clone(self)
    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkPhysicalCentralDifferenceImageFunctionIUC4float

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPhysicalCentralDifferenceImageFunctionIUC4float

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUC4float_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPhysicalCentralDifferenceImageFunctionIUC4float

        Create a new object of the class itkPhysicalCentralDifferenceImageFunctionIUC4float and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhysicalCentralDifferenceImageFunctionIUC4float.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPhysicalCentralDifferenceImageFunctionIUC4float.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPhysicalCentralDifferenceImageFunctionIUC4float.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPhysicalCentralDifferenceImageFunctionIUC4float in _itkPhysicalCentralDifferenceImageFunctionPython:
_itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUC4float_swigregister(itkPhysicalCentralDifferenceImageFunctionIUC4float)

def itkPhysicalCentralDifferenceImageFunctionIUS2float_New():
    return itkPhysicalCentralDifferenceImageFunctionIUS2float.New()

class itkPhysicalCentralDifferenceImageFunctionIUS2float(itkImageFunctionIUS2CVdouble2float):
    r"""Proxy of C++ itkPhysicalCentralDifferenceImageFunctionIUS2float class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPhysicalCentralDifferenceImageFunctionIUS2float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUS2float___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPhysicalCentralDifferenceImageFunctionIUS2float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUS2float_Clone(self)
    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkPhysicalCentralDifferenceImageFunctionIUS2float

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPhysicalCentralDifferenceImageFunctionIUS2float

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUS2float_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPhysicalCentralDifferenceImageFunctionIUS2float

        Create a new object of the class itkPhysicalCentralDifferenceImageFunctionIUS2float and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhysicalCentralDifferenceImageFunctionIUS2float.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPhysicalCentralDifferenceImageFunctionIUS2float.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPhysicalCentralDifferenceImageFunctionIUS2float.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPhysicalCentralDifferenceImageFunctionIUS2float in _itkPhysicalCentralDifferenceImageFunctionPython:
_itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUS2float_swigregister(itkPhysicalCentralDifferenceImageFunctionIUS2float)

def itkPhysicalCentralDifferenceImageFunctionIUS3float_New():
    return itkPhysicalCentralDifferenceImageFunctionIUS3float.New()

class itkPhysicalCentralDifferenceImageFunctionIUS3float(itkImageFunctionIUS3CVdouble3float):
    r"""Proxy of C++ itkPhysicalCentralDifferenceImageFunctionIUS3float class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPhysicalCentralDifferenceImageFunctionIUS3float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUS3float___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPhysicalCentralDifferenceImageFunctionIUS3float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUS3float_Clone(self)
    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkPhysicalCentralDifferenceImageFunctionIUS3float

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPhysicalCentralDifferenceImageFunctionIUS3float

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUS3float_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPhysicalCentralDifferenceImageFunctionIUS3float

        Create a new object of the class itkPhysicalCentralDifferenceImageFunctionIUS3float and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhysicalCentralDifferenceImageFunctionIUS3float.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPhysicalCentralDifferenceImageFunctionIUS3float.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPhysicalCentralDifferenceImageFunctionIUS3float.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPhysicalCentralDifferenceImageFunctionIUS3float in _itkPhysicalCentralDifferenceImageFunctionPython:
_itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUS3float_swigregister(itkPhysicalCentralDifferenceImageFunctionIUS3float)

def itkPhysicalCentralDifferenceImageFunctionIUS4float_New():
    return itkPhysicalCentralDifferenceImageFunctionIUS4float.New()

class itkPhysicalCentralDifferenceImageFunctionIUS4float(itkImageFunctionIUS4CVdouble4float):
    r"""Proxy of C++ itkPhysicalCentralDifferenceImageFunctionIUS4float class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPhysicalCentralDifferenceImageFunctionIUS4float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUS4float___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPhysicalCentralDifferenceImageFunctionIUS4float_Pointer"""
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUS4float_Clone(self)
    __swig_destroy__ = _itkPhysicalCentralDifferenceImageFunctionPython.delete_itkPhysicalCentralDifferenceImageFunctionIUS4float

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPhysicalCentralDifferenceImageFunctionIUS4float

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUS4float_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPhysicalCentralDifferenceImageFunctionIUS4float

        Create a new object of the class itkPhysicalCentralDifferenceImageFunctionIUS4float and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhysicalCentralDifferenceImageFunctionIUS4float.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPhysicalCentralDifferenceImageFunctionIUS4float.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPhysicalCentralDifferenceImageFunctionIUS4float.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPhysicalCentralDifferenceImageFunctionIUS4float in _itkPhysicalCentralDifferenceImageFunctionPython:
_itkPhysicalCentralDifferenceImageFunctionPython.itkPhysicalCentralDifferenceImageFunctionIUS4float_swigregister(itkPhysicalCentralDifferenceImageFunctionIUS4float)

