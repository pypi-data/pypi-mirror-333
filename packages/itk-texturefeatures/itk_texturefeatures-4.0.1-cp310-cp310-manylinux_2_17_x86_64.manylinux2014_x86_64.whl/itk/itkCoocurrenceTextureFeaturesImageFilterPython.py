# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _TextureFeaturesPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkCoocurrenceTextureFeaturesImageFilterPython
else:
    import _itkCoocurrenceTextureFeaturesImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageSourceCommonPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkSimpleDataObjectDecoratorPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkArrayPython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterBPython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython
class vectoritkImageVF82(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageVF82_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF82_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF82___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF82___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageVF82_Pointer >::size_type"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF82___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageVF82

        Parameters
        ----------
        i: std::vector< itkImageVF82_Pointer >::difference_type
        j: std::vector< itkImageVF82_Pointer >::difference_type

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF82___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVF82_Pointer >::difference_type
        j: std::vector< itkImageVF82_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageVF82_Pointer >::difference_type
        j: std::vector< itkImageVF82_Pointer >::difference_type
        v: std::vector< itkImageVF82_Pointer,std::allocator< itkImageVF82_Pointer > > const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF82___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVF82_Pointer >::difference_type
        j: std::vector< itkImageVF82_Pointer >::difference_type

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF82___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageVF82_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF82___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageVF82

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageVF82_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageVF82_Pointer >::difference_type

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF82___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageVF82_Pointer,std::allocator< itkImageVF82_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageVF82_Pointer >::difference_type
        x: std::vector< itkImageVF82_Pointer >::value_type const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF82___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageVF82_Pointer >::value_type"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF82_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVF82_Pointer >::value_type const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF82_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF82_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageVF82_Pointer >::size_type"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF82_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageVF82_Pointer > &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF82_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageVF82_Pointer >::iterator"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF82_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageVF82_Pointer >::iterator"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF82_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageVF82_Pointer >::reverse_iterator"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF82_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageVF82_Pointer >::reverse_iterator"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF82_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF82_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageVF82_Pointer >::allocator_type"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF82_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF82_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageVF82_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVF82_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageVF82_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageVF82_Pointer >::iterator
        last: std::vector< itkImageVF82_Pointer >::iterator

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF82_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageVF82
        __init__(self, other) -> vectoritkImageVF82

        Parameters
        ----------
        other: std::vector< itkImageVF82_Pointer > const &

        __init__(self, size) -> vectoritkImageVF82

        Parameters
        ----------
        size: std::vector< itkImageVF82_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageVF82

        Parameters
        ----------
        size: std::vector< itkImageVF82_Pointer >::size_type
        value: std::vector< itkImageVF82_Pointer >::value_type const &

        """
        _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF82_swiginit(self, _itkCoocurrenceTextureFeaturesImageFilterPython.new_vectoritkImageVF82(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVF82_Pointer >::value_type const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF82_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageVF82_Pointer >::value_type const &"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF82_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageVF82_Pointer >::value_type const &"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF82_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageVF82_Pointer >::size_type
        x: std::vector< itkImageVF82_Pointer >::value_type const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF82_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageVF82_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageVF82_Pointer >::size_type
        x: std::vector< itkImageVF82_Pointer >::value_type const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF82_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageVF82_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVF82_Pointer >::iterator
        x: std::vector< itkImageVF82_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageVF82_Pointer >::iterator
        n: std::vector< itkImageVF82_Pointer >::size_type
        x: std::vector< itkImageVF82_Pointer >::value_type const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF82_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageVF82_Pointer >::size_type

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF82_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageVF82_Pointer >::size_type"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF82_capacity(self)
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_vectoritkImageVF82

# Register vectoritkImageVF82 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF82_swigregister(vectoritkImageVF82)
class vectoritkImageVF83(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageVF83_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF83_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF83___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF83___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageVF83_Pointer >::size_type"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF83___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageVF83

        Parameters
        ----------
        i: std::vector< itkImageVF83_Pointer >::difference_type
        j: std::vector< itkImageVF83_Pointer >::difference_type

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF83___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVF83_Pointer >::difference_type
        j: std::vector< itkImageVF83_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageVF83_Pointer >::difference_type
        j: std::vector< itkImageVF83_Pointer >::difference_type
        v: std::vector< itkImageVF83_Pointer,std::allocator< itkImageVF83_Pointer > > const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF83___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVF83_Pointer >::difference_type
        j: std::vector< itkImageVF83_Pointer >::difference_type

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF83___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageVF83_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF83___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageVF83

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageVF83_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageVF83_Pointer >::difference_type

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF83___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageVF83_Pointer,std::allocator< itkImageVF83_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageVF83_Pointer >::difference_type
        x: std::vector< itkImageVF83_Pointer >::value_type const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF83___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageVF83_Pointer >::value_type"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF83_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVF83_Pointer >::value_type const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF83_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF83_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageVF83_Pointer >::size_type"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF83_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageVF83_Pointer > &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF83_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageVF83_Pointer >::iterator"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF83_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageVF83_Pointer >::iterator"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF83_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageVF83_Pointer >::reverse_iterator"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF83_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageVF83_Pointer >::reverse_iterator"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF83_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF83_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageVF83_Pointer >::allocator_type"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF83_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF83_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageVF83_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVF83_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageVF83_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageVF83_Pointer >::iterator
        last: std::vector< itkImageVF83_Pointer >::iterator

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF83_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageVF83
        __init__(self, other) -> vectoritkImageVF83

        Parameters
        ----------
        other: std::vector< itkImageVF83_Pointer > const &

        __init__(self, size) -> vectoritkImageVF83

        Parameters
        ----------
        size: std::vector< itkImageVF83_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageVF83

        Parameters
        ----------
        size: std::vector< itkImageVF83_Pointer >::size_type
        value: std::vector< itkImageVF83_Pointer >::value_type const &

        """
        _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF83_swiginit(self, _itkCoocurrenceTextureFeaturesImageFilterPython.new_vectoritkImageVF83(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVF83_Pointer >::value_type const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF83_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageVF83_Pointer >::value_type const &"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF83_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageVF83_Pointer >::value_type const &"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF83_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageVF83_Pointer >::size_type
        x: std::vector< itkImageVF83_Pointer >::value_type const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF83_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageVF83_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageVF83_Pointer >::size_type
        x: std::vector< itkImageVF83_Pointer >::value_type const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF83_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageVF83_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVF83_Pointer >::iterator
        x: std::vector< itkImageVF83_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageVF83_Pointer >::iterator
        n: std::vector< itkImageVF83_Pointer >::size_type
        x: std::vector< itkImageVF83_Pointer >::value_type const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF83_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageVF83_Pointer >::size_type

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF83_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageVF83_Pointer >::size_type"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF83_capacity(self)
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_vectoritkImageVF83

# Register vectoritkImageVF83 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF83_swigregister(vectoritkImageVF83)
class vectoritkImageVF84(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageVF84_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF84_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF84___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF84___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageVF84_Pointer >::size_type"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF84___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageVF84

        Parameters
        ----------
        i: std::vector< itkImageVF84_Pointer >::difference_type
        j: std::vector< itkImageVF84_Pointer >::difference_type

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF84___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVF84_Pointer >::difference_type
        j: std::vector< itkImageVF84_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageVF84_Pointer >::difference_type
        j: std::vector< itkImageVF84_Pointer >::difference_type
        v: std::vector< itkImageVF84_Pointer,std::allocator< itkImageVF84_Pointer > > const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF84___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVF84_Pointer >::difference_type
        j: std::vector< itkImageVF84_Pointer >::difference_type

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF84___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageVF84_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF84___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageVF84

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageVF84_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageVF84_Pointer >::difference_type

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF84___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageVF84_Pointer,std::allocator< itkImageVF84_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageVF84_Pointer >::difference_type
        x: std::vector< itkImageVF84_Pointer >::value_type const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF84___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageVF84_Pointer >::value_type"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF84_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVF84_Pointer >::value_type const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF84_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF84_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageVF84_Pointer >::size_type"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF84_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageVF84_Pointer > &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF84_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageVF84_Pointer >::iterator"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF84_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageVF84_Pointer >::iterator"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF84_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageVF84_Pointer >::reverse_iterator"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF84_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageVF84_Pointer >::reverse_iterator"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF84_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF84_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageVF84_Pointer >::allocator_type"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF84_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF84_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageVF84_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVF84_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageVF84_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageVF84_Pointer >::iterator
        last: std::vector< itkImageVF84_Pointer >::iterator

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF84_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageVF84
        __init__(self, other) -> vectoritkImageVF84

        Parameters
        ----------
        other: std::vector< itkImageVF84_Pointer > const &

        __init__(self, size) -> vectoritkImageVF84

        Parameters
        ----------
        size: std::vector< itkImageVF84_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageVF84

        Parameters
        ----------
        size: std::vector< itkImageVF84_Pointer >::size_type
        value: std::vector< itkImageVF84_Pointer >::value_type const &

        """
        _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF84_swiginit(self, _itkCoocurrenceTextureFeaturesImageFilterPython.new_vectoritkImageVF84(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVF84_Pointer >::value_type const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF84_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageVF84_Pointer >::value_type const &"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF84_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageVF84_Pointer >::value_type const &"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF84_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageVF84_Pointer >::size_type
        x: std::vector< itkImageVF84_Pointer >::value_type const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF84_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageVF84_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageVF84_Pointer >::size_type
        x: std::vector< itkImageVF84_Pointer >::value_type const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF84_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageVF84_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVF84_Pointer >::iterator
        x: std::vector< itkImageVF84_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageVF84_Pointer >::iterator
        n: std::vector< itkImageVF84_Pointer >::size_type
        x: std::vector< itkImageVF84_Pointer >::value_type const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF84_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageVF84_Pointer >::size_type

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF84_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageVF84_Pointer >::size_type"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF84_capacity(self)
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_vectoritkImageVF84

# Register vectoritkImageVF84 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.vectoritkImageVF84_swigregister(vectoritkImageVF84)

def itkCoocurrenceTextureFeaturesImageFilterID2VIF2_New():
    return itkCoocurrenceTextureFeaturesImageFilterID2VIF2.New()

class itkCoocurrenceTextureFeaturesImageFilterID2VIF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterID2VIF2):
    r"""Proxy of C++ itkCoocurrenceTextureFeaturesImageFilterID2VIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCoocurrenceTextureFeaturesImageFilterID2VIF2_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2VIF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCoocurrenceTextureFeaturesImageFilterID2VIF2_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2VIF2_Clone(self)

    def SetNeighborhoodRadius(self, _arg):
        r"""
        SetNeighborhoodRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize2

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2VIF2_SetNeighborhoodRadius(self, _arg)

    def GetNeighborhoodRadius(self):
        r"""GetNeighborhoodRadius(self) -> itkSize2"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2VIF2_GetNeighborhoodRadius(self)

    def SetMaskImage(self, _arg):
        r"""
        SetMaskImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageUC2 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2VIF2_SetMaskImage(self, _arg)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageUC2"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2VIF2_GetMaskImage(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO2 *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2VIF2_SetOffsets(self, _arg)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset2 const

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2VIF2_SetOffset(self, offset)

    def GetModifiableOffsets(self):
        r"""GetModifiableOffsets(self) -> itkVectorContainerUCO2"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2VIF2_GetModifiableOffsets(self)

    def GetOffsets(self, *args):
        r"""
        GetOffsets(self) -> itkVectorContainerUCO2
        GetOffsets(self) -> itkVectorContainerUCO2
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2VIF2_GetOffsets(self, *args)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2VIF2_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2VIF2_GetNumberOfBinsPerAxis(self)

    def GetHistogramMaximum(self):
        r"""GetHistogramMaximum(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2VIF2_GetHistogramMaximum(self)

    def SetHistogramMaximum(self, _arg):
        r"""
        SetHistogramMaximum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2VIF2_SetHistogramMaximum(self, _arg)

    def GetHistogramMinimum(self):
        r"""GetHistogramMinimum(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2VIF2_GetHistogramMinimum(self)

    def SetHistogramMinimum(self, _arg):
        r"""
        SetHistogramMinimum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2VIF2_SetHistogramMinimum(self, _arg)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2VIF2_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> unsigned char"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2VIF2_GetInsidePixelValue(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2VIF2_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2VIF2_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2VIF2_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2VIF2_NormalizeOff(self)
    OutputPixelTypeCheck = _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2VIF2_OutputPixelTypeCheck
    
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkCoocurrenceTextureFeaturesImageFilterID2VIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCoocurrenceTextureFeaturesImageFilterID2VIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2VIF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCoocurrenceTextureFeaturesImageFilterID2VIF2

        Create a new object of the class itkCoocurrenceTextureFeaturesImageFilterID2VIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCoocurrenceTextureFeaturesImageFilterID2VIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCoocurrenceTextureFeaturesImageFilterID2VIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCoocurrenceTextureFeaturesImageFilterID2VIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCoocurrenceTextureFeaturesImageFilterID2VIF2 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2VIF2_swigregister(itkCoocurrenceTextureFeaturesImageFilterID2VIF2)

def itkCoocurrenceTextureFeaturesImageFilterID3VIF3_New():
    return itkCoocurrenceTextureFeaturesImageFilterID3VIF3.New()

class itkCoocurrenceTextureFeaturesImageFilterID3VIF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterID3VIF3):
    r"""Proxy of C++ itkCoocurrenceTextureFeaturesImageFilterID3VIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCoocurrenceTextureFeaturesImageFilterID3VIF3_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3VIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCoocurrenceTextureFeaturesImageFilterID3VIF3_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3VIF3_Clone(self)

    def SetNeighborhoodRadius(self, _arg):
        r"""
        SetNeighborhoodRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize3

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3VIF3_SetNeighborhoodRadius(self, _arg)

    def GetNeighborhoodRadius(self):
        r"""GetNeighborhoodRadius(self) -> itkSize3"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3VIF3_GetNeighborhoodRadius(self)

    def SetMaskImage(self, _arg):
        r"""
        SetMaskImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageUC3 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3VIF3_SetMaskImage(self, _arg)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageUC3"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3VIF3_GetMaskImage(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO3 *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3VIF3_SetOffsets(self, _arg)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset3 const

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3VIF3_SetOffset(self, offset)

    def GetModifiableOffsets(self):
        r"""GetModifiableOffsets(self) -> itkVectorContainerUCO3"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3VIF3_GetModifiableOffsets(self)

    def GetOffsets(self, *args):
        r"""
        GetOffsets(self) -> itkVectorContainerUCO3
        GetOffsets(self) -> itkVectorContainerUCO3
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3VIF3_GetOffsets(self, *args)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3VIF3_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3VIF3_GetNumberOfBinsPerAxis(self)

    def GetHistogramMaximum(self):
        r"""GetHistogramMaximum(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3VIF3_GetHistogramMaximum(self)

    def SetHistogramMaximum(self, _arg):
        r"""
        SetHistogramMaximum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3VIF3_SetHistogramMaximum(self, _arg)

    def GetHistogramMinimum(self):
        r"""GetHistogramMinimum(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3VIF3_GetHistogramMinimum(self)

    def SetHistogramMinimum(self, _arg):
        r"""
        SetHistogramMinimum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3VIF3_SetHistogramMinimum(self, _arg)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3VIF3_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> unsigned char"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3VIF3_GetInsidePixelValue(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3VIF3_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3VIF3_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3VIF3_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3VIF3_NormalizeOff(self)
    OutputPixelTypeCheck = _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3VIF3_OutputPixelTypeCheck
    
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkCoocurrenceTextureFeaturesImageFilterID3VIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCoocurrenceTextureFeaturesImageFilterID3VIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3VIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCoocurrenceTextureFeaturesImageFilterID3VIF3

        Create a new object of the class itkCoocurrenceTextureFeaturesImageFilterID3VIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCoocurrenceTextureFeaturesImageFilterID3VIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCoocurrenceTextureFeaturesImageFilterID3VIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCoocurrenceTextureFeaturesImageFilterID3VIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCoocurrenceTextureFeaturesImageFilterID3VIF3 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3VIF3_swigregister(itkCoocurrenceTextureFeaturesImageFilterID3VIF3)

def itkCoocurrenceTextureFeaturesImageFilterID4VIF4_New():
    return itkCoocurrenceTextureFeaturesImageFilterID4VIF4.New()

class itkCoocurrenceTextureFeaturesImageFilterID4VIF4(itk.itkImageToImageFilterBPython.itkImageToImageFilterID4VIF4):
    r"""Proxy of C++ itkCoocurrenceTextureFeaturesImageFilterID4VIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCoocurrenceTextureFeaturesImageFilterID4VIF4_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4VIF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCoocurrenceTextureFeaturesImageFilterID4VIF4_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4VIF4_Clone(self)

    def SetNeighborhoodRadius(self, _arg):
        r"""
        SetNeighborhoodRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize4

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4VIF4_SetNeighborhoodRadius(self, _arg)

    def GetNeighborhoodRadius(self):
        r"""GetNeighborhoodRadius(self) -> itkSize4"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4VIF4_GetNeighborhoodRadius(self)

    def SetMaskImage(self, _arg):
        r"""
        SetMaskImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageUC4 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4VIF4_SetMaskImage(self, _arg)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageUC4"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4VIF4_GetMaskImage(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO4 *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4VIF4_SetOffsets(self, _arg)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset4 const

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4VIF4_SetOffset(self, offset)

    def GetModifiableOffsets(self):
        r"""GetModifiableOffsets(self) -> itkVectorContainerUCO4"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4VIF4_GetModifiableOffsets(self)

    def GetOffsets(self, *args):
        r"""
        GetOffsets(self) -> itkVectorContainerUCO4
        GetOffsets(self) -> itkVectorContainerUCO4
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4VIF4_GetOffsets(self, *args)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4VIF4_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4VIF4_GetNumberOfBinsPerAxis(self)

    def GetHistogramMaximum(self):
        r"""GetHistogramMaximum(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4VIF4_GetHistogramMaximum(self)

    def SetHistogramMaximum(self, _arg):
        r"""
        SetHistogramMaximum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4VIF4_SetHistogramMaximum(self, _arg)

    def GetHistogramMinimum(self):
        r"""GetHistogramMinimum(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4VIF4_GetHistogramMinimum(self)

    def SetHistogramMinimum(self, _arg):
        r"""
        SetHistogramMinimum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4VIF4_SetHistogramMinimum(self, _arg)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4VIF4_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> unsigned char"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4VIF4_GetInsidePixelValue(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4VIF4_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4VIF4_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4VIF4_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4VIF4_NormalizeOff(self)
    OutputPixelTypeCheck = _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4VIF4_OutputPixelTypeCheck
    
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkCoocurrenceTextureFeaturesImageFilterID4VIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCoocurrenceTextureFeaturesImageFilterID4VIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4VIF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCoocurrenceTextureFeaturesImageFilterID4VIF4

        Create a new object of the class itkCoocurrenceTextureFeaturesImageFilterID4VIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCoocurrenceTextureFeaturesImageFilterID4VIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCoocurrenceTextureFeaturesImageFilterID4VIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCoocurrenceTextureFeaturesImageFilterID4VIF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCoocurrenceTextureFeaturesImageFilterID4VIF4 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4VIF4_swigregister(itkCoocurrenceTextureFeaturesImageFilterID4VIF4)

def itkCoocurrenceTextureFeaturesImageFilterIF2VIF2_New():
    return itkCoocurrenceTextureFeaturesImageFilterIF2VIF2.New()

class itkCoocurrenceTextureFeaturesImageFilterIF2VIF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF2VIF2):
    r"""Proxy of C++ itkCoocurrenceTextureFeaturesImageFilterIF2VIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCoocurrenceTextureFeaturesImageFilterIF2VIF2_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2VIF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCoocurrenceTextureFeaturesImageFilterIF2VIF2_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2VIF2_Clone(self)

    def SetNeighborhoodRadius(self, _arg):
        r"""
        SetNeighborhoodRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize2

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2VIF2_SetNeighborhoodRadius(self, _arg)

    def GetNeighborhoodRadius(self):
        r"""GetNeighborhoodRadius(self) -> itkSize2"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2VIF2_GetNeighborhoodRadius(self)

    def SetMaskImage(self, _arg):
        r"""
        SetMaskImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageUC2 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2VIF2_SetMaskImage(self, _arg)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageUC2"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2VIF2_GetMaskImage(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO2 *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2VIF2_SetOffsets(self, _arg)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset2 const

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2VIF2_SetOffset(self, offset)

    def GetModifiableOffsets(self):
        r"""GetModifiableOffsets(self) -> itkVectorContainerUCO2"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2VIF2_GetModifiableOffsets(self)

    def GetOffsets(self, *args):
        r"""
        GetOffsets(self) -> itkVectorContainerUCO2
        GetOffsets(self) -> itkVectorContainerUCO2
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2VIF2_GetOffsets(self, *args)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2VIF2_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2VIF2_GetNumberOfBinsPerAxis(self)

    def GetHistogramMaximum(self):
        r"""GetHistogramMaximum(self) -> float"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2VIF2_GetHistogramMaximum(self)

    def SetHistogramMaximum(self, _arg):
        r"""
        SetHistogramMaximum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2VIF2_SetHistogramMaximum(self, _arg)

    def GetHistogramMinimum(self):
        r"""GetHistogramMinimum(self) -> float"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2VIF2_GetHistogramMinimum(self)

    def SetHistogramMinimum(self, _arg):
        r"""
        SetHistogramMinimum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2VIF2_SetHistogramMinimum(self, _arg)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2VIF2_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> unsigned char"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2VIF2_GetInsidePixelValue(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2VIF2_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2VIF2_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2VIF2_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2VIF2_NormalizeOff(self)
    OutputPixelTypeCheck = _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2VIF2_OutputPixelTypeCheck
    
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkCoocurrenceTextureFeaturesImageFilterIF2VIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCoocurrenceTextureFeaturesImageFilterIF2VIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2VIF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCoocurrenceTextureFeaturesImageFilterIF2VIF2

        Create a new object of the class itkCoocurrenceTextureFeaturesImageFilterIF2VIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCoocurrenceTextureFeaturesImageFilterIF2VIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCoocurrenceTextureFeaturesImageFilterIF2VIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCoocurrenceTextureFeaturesImageFilterIF2VIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCoocurrenceTextureFeaturesImageFilterIF2VIF2 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2VIF2_swigregister(itkCoocurrenceTextureFeaturesImageFilterIF2VIF2)

def itkCoocurrenceTextureFeaturesImageFilterIF3VIF3_New():
    return itkCoocurrenceTextureFeaturesImageFilterIF3VIF3.New()

class itkCoocurrenceTextureFeaturesImageFilterIF3VIF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF3VIF3):
    r"""Proxy of C++ itkCoocurrenceTextureFeaturesImageFilterIF3VIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCoocurrenceTextureFeaturesImageFilterIF3VIF3_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3VIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCoocurrenceTextureFeaturesImageFilterIF3VIF3_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3VIF3_Clone(self)

    def SetNeighborhoodRadius(self, _arg):
        r"""
        SetNeighborhoodRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize3

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3VIF3_SetNeighborhoodRadius(self, _arg)

    def GetNeighborhoodRadius(self):
        r"""GetNeighborhoodRadius(self) -> itkSize3"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3VIF3_GetNeighborhoodRadius(self)

    def SetMaskImage(self, _arg):
        r"""
        SetMaskImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageUC3 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3VIF3_SetMaskImage(self, _arg)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageUC3"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3VIF3_GetMaskImage(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO3 *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3VIF3_SetOffsets(self, _arg)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset3 const

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3VIF3_SetOffset(self, offset)

    def GetModifiableOffsets(self):
        r"""GetModifiableOffsets(self) -> itkVectorContainerUCO3"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3VIF3_GetModifiableOffsets(self)

    def GetOffsets(self, *args):
        r"""
        GetOffsets(self) -> itkVectorContainerUCO3
        GetOffsets(self) -> itkVectorContainerUCO3
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3VIF3_GetOffsets(self, *args)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3VIF3_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3VIF3_GetNumberOfBinsPerAxis(self)

    def GetHistogramMaximum(self):
        r"""GetHistogramMaximum(self) -> float"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3VIF3_GetHistogramMaximum(self)

    def SetHistogramMaximum(self, _arg):
        r"""
        SetHistogramMaximum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3VIF3_SetHistogramMaximum(self, _arg)

    def GetHistogramMinimum(self):
        r"""GetHistogramMinimum(self) -> float"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3VIF3_GetHistogramMinimum(self)

    def SetHistogramMinimum(self, _arg):
        r"""
        SetHistogramMinimum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3VIF3_SetHistogramMinimum(self, _arg)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3VIF3_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> unsigned char"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3VIF3_GetInsidePixelValue(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3VIF3_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3VIF3_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3VIF3_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3VIF3_NormalizeOff(self)
    OutputPixelTypeCheck = _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3VIF3_OutputPixelTypeCheck
    
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkCoocurrenceTextureFeaturesImageFilterIF3VIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCoocurrenceTextureFeaturesImageFilterIF3VIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3VIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCoocurrenceTextureFeaturesImageFilterIF3VIF3

        Create a new object of the class itkCoocurrenceTextureFeaturesImageFilterIF3VIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCoocurrenceTextureFeaturesImageFilterIF3VIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCoocurrenceTextureFeaturesImageFilterIF3VIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCoocurrenceTextureFeaturesImageFilterIF3VIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCoocurrenceTextureFeaturesImageFilterIF3VIF3 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3VIF3_swigregister(itkCoocurrenceTextureFeaturesImageFilterIF3VIF3)

def itkCoocurrenceTextureFeaturesImageFilterIF4VIF4_New():
    return itkCoocurrenceTextureFeaturesImageFilterIF4VIF4.New()

class itkCoocurrenceTextureFeaturesImageFilterIF4VIF4(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF4VIF4):
    r"""Proxy of C++ itkCoocurrenceTextureFeaturesImageFilterIF4VIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCoocurrenceTextureFeaturesImageFilterIF4VIF4_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4VIF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCoocurrenceTextureFeaturesImageFilterIF4VIF4_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4VIF4_Clone(self)

    def SetNeighborhoodRadius(self, _arg):
        r"""
        SetNeighborhoodRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize4

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4VIF4_SetNeighborhoodRadius(self, _arg)

    def GetNeighborhoodRadius(self):
        r"""GetNeighborhoodRadius(self) -> itkSize4"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4VIF4_GetNeighborhoodRadius(self)

    def SetMaskImage(self, _arg):
        r"""
        SetMaskImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageUC4 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4VIF4_SetMaskImage(self, _arg)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageUC4"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4VIF4_GetMaskImage(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO4 *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4VIF4_SetOffsets(self, _arg)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset4 const

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4VIF4_SetOffset(self, offset)

    def GetModifiableOffsets(self):
        r"""GetModifiableOffsets(self) -> itkVectorContainerUCO4"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4VIF4_GetModifiableOffsets(self)

    def GetOffsets(self, *args):
        r"""
        GetOffsets(self) -> itkVectorContainerUCO4
        GetOffsets(self) -> itkVectorContainerUCO4
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4VIF4_GetOffsets(self, *args)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4VIF4_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4VIF4_GetNumberOfBinsPerAxis(self)

    def GetHistogramMaximum(self):
        r"""GetHistogramMaximum(self) -> float"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4VIF4_GetHistogramMaximum(self)

    def SetHistogramMaximum(self, _arg):
        r"""
        SetHistogramMaximum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4VIF4_SetHistogramMaximum(self, _arg)

    def GetHistogramMinimum(self):
        r"""GetHistogramMinimum(self) -> float"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4VIF4_GetHistogramMinimum(self)

    def SetHistogramMinimum(self, _arg):
        r"""
        SetHistogramMinimum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4VIF4_SetHistogramMinimum(self, _arg)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4VIF4_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> unsigned char"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4VIF4_GetInsidePixelValue(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4VIF4_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4VIF4_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4VIF4_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4VIF4_NormalizeOff(self)
    OutputPixelTypeCheck = _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4VIF4_OutputPixelTypeCheck
    
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkCoocurrenceTextureFeaturesImageFilterIF4VIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCoocurrenceTextureFeaturesImageFilterIF4VIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4VIF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCoocurrenceTextureFeaturesImageFilterIF4VIF4

        Create a new object of the class itkCoocurrenceTextureFeaturesImageFilterIF4VIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCoocurrenceTextureFeaturesImageFilterIF4VIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCoocurrenceTextureFeaturesImageFilterIF4VIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCoocurrenceTextureFeaturesImageFilterIF4VIF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCoocurrenceTextureFeaturesImageFilterIF4VIF4 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4VIF4_swigregister(itkCoocurrenceTextureFeaturesImageFilterIF4VIF4)

def itkCoocurrenceTextureFeaturesImageFilterISS2VIF2_New():
    return itkCoocurrenceTextureFeaturesImageFilterISS2VIF2.New()

class itkCoocurrenceTextureFeaturesImageFilterISS2VIF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS2VIF2):
    r"""Proxy of C++ itkCoocurrenceTextureFeaturesImageFilterISS2VIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCoocurrenceTextureFeaturesImageFilterISS2VIF2_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2VIF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCoocurrenceTextureFeaturesImageFilterISS2VIF2_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2VIF2_Clone(self)

    def SetNeighborhoodRadius(self, _arg):
        r"""
        SetNeighborhoodRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize2

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2VIF2_SetNeighborhoodRadius(self, _arg)

    def GetNeighborhoodRadius(self):
        r"""GetNeighborhoodRadius(self) -> itkSize2"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2VIF2_GetNeighborhoodRadius(self)

    def SetMaskImage(self, _arg):
        r"""
        SetMaskImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageUC2 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2VIF2_SetMaskImage(self, _arg)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageUC2"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2VIF2_GetMaskImage(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO2 *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2VIF2_SetOffsets(self, _arg)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset2 const

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2VIF2_SetOffset(self, offset)

    def GetModifiableOffsets(self):
        r"""GetModifiableOffsets(self) -> itkVectorContainerUCO2"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2VIF2_GetModifiableOffsets(self)

    def GetOffsets(self, *args):
        r"""
        GetOffsets(self) -> itkVectorContainerUCO2
        GetOffsets(self) -> itkVectorContainerUCO2
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2VIF2_GetOffsets(self, *args)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2VIF2_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2VIF2_GetNumberOfBinsPerAxis(self)

    def GetHistogramMaximum(self):
        r"""GetHistogramMaximum(self) -> short"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2VIF2_GetHistogramMaximum(self)

    def SetHistogramMaximum(self, _arg):
        r"""
        SetHistogramMaximum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2VIF2_SetHistogramMaximum(self, _arg)

    def GetHistogramMinimum(self):
        r"""GetHistogramMinimum(self) -> short"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2VIF2_GetHistogramMinimum(self)

    def SetHistogramMinimum(self, _arg):
        r"""
        SetHistogramMinimum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2VIF2_SetHistogramMinimum(self, _arg)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2VIF2_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> unsigned char"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2VIF2_GetInsidePixelValue(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2VIF2_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2VIF2_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2VIF2_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2VIF2_NormalizeOff(self)
    OutputPixelTypeCheck = _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2VIF2_OutputPixelTypeCheck
    
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkCoocurrenceTextureFeaturesImageFilterISS2VIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCoocurrenceTextureFeaturesImageFilterISS2VIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2VIF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCoocurrenceTextureFeaturesImageFilterISS2VIF2

        Create a new object of the class itkCoocurrenceTextureFeaturesImageFilterISS2VIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCoocurrenceTextureFeaturesImageFilterISS2VIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCoocurrenceTextureFeaturesImageFilterISS2VIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCoocurrenceTextureFeaturesImageFilterISS2VIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCoocurrenceTextureFeaturesImageFilterISS2VIF2 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2VIF2_swigregister(itkCoocurrenceTextureFeaturesImageFilterISS2VIF2)

def itkCoocurrenceTextureFeaturesImageFilterISS3VIF3_New():
    return itkCoocurrenceTextureFeaturesImageFilterISS3VIF3.New()

class itkCoocurrenceTextureFeaturesImageFilterISS3VIF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS3VIF3):
    r"""Proxy of C++ itkCoocurrenceTextureFeaturesImageFilterISS3VIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCoocurrenceTextureFeaturesImageFilterISS3VIF3_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3VIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCoocurrenceTextureFeaturesImageFilterISS3VIF3_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3VIF3_Clone(self)

    def SetNeighborhoodRadius(self, _arg):
        r"""
        SetNeighborhoodRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize3

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3VIF3_SetNeighborhoodRadius(self, _arg)

    def GetNeighborhoodRadius(self):
        r"""GetNeighborhoodRadius(self) -> itkSize3"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3VIF3_GetNeighborhoodRadius(self)

    def SetMaskImage(self, _arg):
        r"""
        SetMaskImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageUC3 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3VIF3_SetMaskImage(self, _arg)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageUC3"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3VIF3_GetMaskImage(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO3 *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3VIF3_SetOffsets(self, _arg)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset3 const

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3VIF3_SetOffset(self, offset)

    def GetModifiableOffsets(self):
        r"""GetModifiableOffsets(self) -> itkVectorContainerUCO3"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3VIF3_GetModifiableOffsets(self)

    def GetOffsets(self, *args):
        r"""
        GetOffsets(self) -> itkVectorContainerUCO3
        GetOffsets(self) -> itkVectorContainerUCO3
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3VIF3_GetOffsets(self, *args)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3VIF3_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3VIF3_GetNumberOfBinsPerAxis(self)

    def GetHistogramMaximum(self):
        r"""GetHistogramMaximum(self) -> short"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3VIF3_GetHistogramMaximum(self)

    def SetHistogramMaximum(self, _arg):
        r"""
        SetHistogramMaximum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3VIF3_SetHistogramMaximum(self, _arg)

    def GetHistogramMinimum(self):
        r"""GetHistogramMinimum(self) -> short"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3VIF3_GetHistogramMinimum(self)

    def SetHistogramMinimum(self, _arg):
        r"""
        SetHistogramMinimum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3VIF3_SetHistogramMinimum(self, _arg)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3VIF3_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> unsigned char"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3VIF3_GetInsidePixelValue(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3VIF3_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3VIF3_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3VIF3_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3VIF3_NormalizeOff(self)
    OutputPixelTypeCheck = _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3VIF3_OutputPixelTypeCheck
    
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkCoocurrenceTextureFeaturesImageFilterISS3VIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCoocurrenceTextureFeaturesImageFilterISS3VIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3VIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCoocurrenceTextureFeaturesImageFilterISS3VIF3

        Create a new object of the class itkCoocurrenceTextureFeaturesImageFilterISS3VIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCoocurrenceTextureFeaturesImageFilterISS3VIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCoocurrenceTextureFeaturesImageFilterISS3VIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCoocurrenceTextureFeaturesImageFilterISS3VIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCoocurrenceTextureFeaturesImageFilterISS3VIF3 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3VIF3_swigregister(itkCoocurrenceTextureFeaturesImageFilterISS3VIF3)

def itkCoocurrenceTextureFeaturesImageFilterISS4VIF4_New():
    return itkCoocurrenceTextureFeaturesImageFilterISS4VIF4.New()

class itkCoocurrenceTextureFeaturesImageFilterISS4VIF4(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS4VIF4):
    r"""Proxy of C++ itkCoocurrenceTextureFeaturesImageFilterISS4VIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCoocurrenceTextureFeaturesImageFilterISS4VIF4_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4VIF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCoocurrenceTextureFeaturesImageFilterISS4VIF4_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4VIF4_Clone(self)

    def SetNeighborhoodRadius(self, _arg):
        r"""
        SetNeighborhoodRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize4

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4VIF4_SetNeighborhoodRadius(self, _arg)

    def GetNeighborhoodRadius(self):
        r"""GetNeighborhoodRadius(self) -> itkSize4"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4VIF4_GetNeighborhoodRadius(self)

    def SetMaskImage(self, _arg):
        r"""
        SetMaskImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageUC4 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4VIF4_SetMaskImage(self, _arg)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageUC4"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4VIF4_GetMaskImage(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO4 *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4VIF4_SetOffsets(self, _arg)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset4 const

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4VIF4_SetOffset(self, offset)

    def GetModifiableOffsets(self):
        r"""GetModifiableOffsets(self) -> itkVectorContainerUCO4"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4VIF4_GetModifiableOffsets(self)

    def GetOffsets(self, *args):
        r"""
        GetOffsets(self) -> itkVectorContainerUCO4
        GetOffsets(self) -> itkVectorContainerUCO4
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4VIF4_GetOffsets(self, *args)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4VIF4_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4VIF4_GetNumberOfBinsPerAxis(self)

    def GetHistogramMaximum(self):
        r"""GetHistogramMaximum(self) -> short"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4VIF4_GetHistogramMaximum(self)

    def SetHistogramMaximum(self, _arg):
        r"""
        SetHistogramMaximum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4VIF4_SetHistogramMaximum(self, _arg)

    def GetHistogramMinimum(self):
        r"""GetHistogramMinimum(self) -> short"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4VIF4_GetHistogramMinimum(self)

    def SetHistogramMinimum(self, _arg):
        r"""
        SetHistogramMinimum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4VIF4_SetHistogramMinimum(self, _arg)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4VIF4_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> unsigned char"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4VIF4_GetInsidePixelValue(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4VIF4_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4VIF4_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4VIF4_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4VIF4_NormalizeOff(self)
    OutputPixelTypeCheck = _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4VIF4_OutputPixelTypeCheck
    
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkCoocurrenceTextureFeaturesImageFilterISS4VIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCoocurrenceTextureFeaturesImageFilterISS4VIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4VIF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCoocurrenceTextureFeaturesImageFilterISS4VIF4

        Create a new object of the class itkCoocurrenceTextureFeaturesImageFilterISS4VIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCoocurrenceTextureFeaturesImageFilterISS4VIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCoocurrenceTextureFeaturesImageFilterISS4VIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCoocurrenceTextureFeaturesImageFilterISS4VIF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCoocurrenceTextureFeaturesImageFilterISS4VIF4 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4VIF4_swigregister(itkCoocurrenceTextureFeaturesImageFilterISS4VIF4)

def itkCoocurrenceTextureFeaturesImageFilterIUC2VIF2_New():
    return itkCoocurrenceTextureFeaturesImageFilterIUC2VIF2.New()

class itkCoocurrenceTextureFeaturesImageFilterIUC2VIF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIF2):
    r"""Proxy of C++ itkCoocurrenceTextureFeaturesImageFilterIUC2VIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCoocurrenceTextureFeaturesImageFilterIUC2VIF2_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2VIF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCoocurrenceTextureFeaturesImageFilterIUC2VIF2_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2VIF2_Clone(self)

    def SetNeighborhoodRadius(self, _arg):
        r"""
        SetNeighborhoodRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize2

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2VIF2_SetNeighborhoodRadius(self, _arg)

    def GetNeighborhoodRadius(self):
        r"""GetNeighborhoodRadius(self) -> itkSize2"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2VIF2_GetNeighborhoodRadius(self)

    def SetMaskImage(self, _arg):
        r"""
        SetMaskImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageUC2 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2VIF2_SetMaskImage(self, _arg)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageUC2"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2VIF2_GetMaskImage(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO2 *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2VIF2_SetOffsets(self, _arg)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset2 const

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2VIF2_SetOffset(self, offset)

    def GetModifiableOffsets(self):
        r"""GetModifiableOffsets(self) -> itkVectorContainerUCO2"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2VIF2_GetModifiableOffsets(self)

    def GetOffsets(self, *args):
        r"""
        GetOffsets(self) -> itkVectorContainerUCO2
        GetOffsets(self) -> itkVectorContainerUCO2
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2VIF2_GetOffsets(self, *args)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2VIF2_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2VIF2_GetNumberOfBinsPerAxis(self)

    def GetHistogramMaximum(self):
        r"""GetHistogramMaximum(self) -> unsigned char"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2VIF2_GetHistogramMaximum(self)

    def SetHistogramMaximum(self, _arg):
        r"""
        SetHistogramMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2VIF2_SetHistogramMaximum(self, _arg)

    def GetHistogramMinimum(self):
        r"""GetHistogramMinimum(self) -> unsigned char"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2VIF2_GetHistogramMinimum(self)

    def SetHistogramMinimum(self, _arg):
        r"""
        SetHistogramMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2VIF2_SetHistogramMinimum(self, _arg)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2VIF2_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> unsigned char"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2VIF2_GetInsidePixelValue(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2VIF2_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2VIF2_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2VIF2_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2VIF2_NormalizeOff(self)
    OutputPixelTypeCheck = _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2VIF2_OutputPixelTypeCheck
    
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkCoocurrenceTextureFeaturesImageFilterIUC2VIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCoocurrenceTextureFeaturesImageFilterIUC2VIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2VIF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCoocurrenceTextureFeaturesImageFilterIUC2VIF2

        Create a new object of the class itkCoocurrenceTextureFeaturesImageFilterIUC2VIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCoocurrenceTextureFeaturesImageFilterIUC2VIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCoocurrenceTextureFeaturesImageFilterIUC2VIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCoocurrenceTextureFeaturesImageFilterIUC2VIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCoocurrenceTextureFeaturesImageFilterIUC2VIF2 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2VIF2_swigregister(itkCoocurrenceTextureFeaturesImageFilterIUC2VIF2)

def itkCoocurrenceTextureFeaturesImageFilterIUC3VIF3_New():
    return itkCoocurrenceTextureFeaturesImageFilterIUC3VIF3.New()

class itkCoocurrenceTextureFeaturesImageFilterIUC3VIF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIF3):
    r"""Proxy of C++ itkCoocurrenceTextureFeaturesImageFilterIUC3VIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCoocurrenceTextureFeaturesImageFilterIUC3VIF3_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3VIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCoocurrenceTextureFeaturesImageFilterIUC3VIF3_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3VIF3_Clone(self)

    def SetNeighborhoodRadius(self, _arg):
        r"""
        SetNeighborhoodRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize3

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3VIF3_SetNeighborhoodRadius(self, _arg)

    def GetNeighborhoodRadius(self):
        r"""GetNeighborhoodRadius(self) -> itkSize3"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3VIF3_GetNeighborhoodRadius(self)

    def SetMaskImage(self, _arg):
        r"""
        SetMaskImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageUC3 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3VIF3_SetMaskImage(self, _arg)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageUC3"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3VIF3_GetMaskImage(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO3 *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3VIF3_SetOffsets(self, _arg)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset3 const

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3VIF3_SetOffset(self, offset)

    def GetModifiableOffsets(self):
        r"""GetModifiableOffsets(self) -> itkVectorContainerUCO3"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3VIF3_GetModifiableOffsets(self)

    def GetOffsets(self, *args):
        r"""
        GetOffsets(self) -> itkVectorContainerUCO3
        GetOffsets(self) -> itkVectorContainerUCO3
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3VIF3_GetOffsets(self, *args)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3VIF3_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3VIF3_GetNumberOfBinsPerAxis(self)

    def GetHistogramMaximum(self):
        r"""GetHistogramMaximum(self) -> unsigned char"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3VIF3_GetHistogramMaximum(self)

    def SetHistogramMaximum(self, _arg):
        r"""
        SetHistogramMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3VIF3_SetHistogramMaximum(self, _arg)

    def GetHistogramMinimum(self):
        r"""GetHistogramMinimum(self) -> unsigned char"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3VIF3_GetHistogramMinimum(self)

    def SetHistogramMinimum(self, _arg):
        r"""
        SetHistogramMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3VIF3_SetHistogramMinimum(self, _arg)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3VIF3_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> unsigned char"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3VIF3_GetInsidePixelValue(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3VIF3_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3VIF3_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3VIF3_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3VIF3_NormalizeOff(self)
    OutputPixelTypeCheck = _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3VIF3_OutputPixelTypeCheck
    
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkCoocurrenceTextureFeaturesImageFilterIUC3VIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCoocurrenceTextureFeaturesImageFilterIUC3VIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3VIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCoocurrenceTextureFeaturesImageFilterIUC3VIF3

        Create a new object of the class itkCoocurrenceTextureFeaturesImageFilterIUC3VIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCoocurrenceTextureFeaturesImageFilterIUC3VIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCoocurrenceTextureFeaturesImageFilterIUC3VIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCoocurrenceTextureFeaturesImageFilterIUC3VIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCoocurrenceTextureFeaturesImageFilterIUC3VIF3 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3VIF3_swigregister(itkCoocurrenceTextureFeaturesImageFilterIUC3VIF3)

def itkCoocurrenceTextureFeaturesImageFilterIUC4VIF4_New():
    return itkCoocurrenceTextureFeaturesImageFilterIUC4VIF4.New()

class itkCoocurrenceTextureFeaturesImageFilterIUC4VIF4(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC4VIF4):
    r"""Proxy of C++ itkCoocurrenceTextureFeaturesImageFilterIUC4VIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCoocurrenceTextureFeaturesImageFilterIUC4VIF4_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4VIF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCoocurrenceTextureFeaturesImageFilterIUC4VIF4_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4VIF4_Clone(self)

    def SetNeighborhoodRadius(self, _arg):
        r"""
        SetNeighborhoodRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize4

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4VIF4_SetNeighborhoodRadius(self, _arg)

    def GetNeighborhoodRadius(self):
        r"""GetNeighborhoodRadius(self) -> itkSize4"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4VIF4_GetNeighborhoodRadius(self)

    def SetMaskImage(self, _arg):
        r"""
        SetMaskImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageUC4 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4VIF4_SetMaskImage(self, _arg)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageUC4"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4VIF4_GetMaskImage(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO4 *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4VIF4_SetOffsets(self, _arg)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset4 const

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4VIF4_SetOffset(self, offset)

    def GetModifiableOffsets(self):
        r"""GetModifiableOffsets(self) -> itkVectorContainerUCO4"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4VIF4_GetModifiableOffsets(self)

    def GetOffsets(self, *args):
        r"""
        GetOffsets(self) -> itkVectorContainerUCO4
        GetOffsets(self) -> itkVectorContainerUCO4
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4VIF4_GetOffsets(self, *args)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4VIF4_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4VIF4_GetNumberOfBinsPerAxis(self)

    def GetHistogramMaximum(self):
        r"""GetHistogramMaximum(self) -> unsigned char"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4VIF4_GetHistogramMaximum(self)

    def SetHistogramMaximum(self, _arg):
        r"""
        SetHistogramMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4VIF4_SetHistogramMaximum(self, _arg)

    def GetHistogramMinimum(self):
        r"""GetHistogramMinimum(self) -> unsigned char"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4VIF4_GetHistogramMinimum(self)

    def SetHistogramMinimum(self, _arg):
        r"""
        SetHistogramMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4VIF4_SetHistogramMinimum(self, _arg)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4VIF4_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> unsigned char"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4VIF4_GetInsidePixelValue(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4VIF4_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4VIF4_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4VIF4_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4VIF4_NormalizeOff(self)
    OutputPixelTypeCheck = _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4VIF4_OutputPixelTypeCheck
    
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkCoocurrenceTextureFeaturesImageFilterIUC4VIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCoocurrenceTextureFeaturesImageFilterIUC4VIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4VIF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCoocurrenceTextureFeaturesImageFilterIUC4VIF4

        Create a new object of the class itkCoocurrenceTextureFeaturesImageFilterIUC4VIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCoocurrenceTextureFeaturesImageFilterIUC4VIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCoocurrenceTextureFeaturesImageFilterIUC4VIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCoocurrenceTextureFeaturesImageFilterIUC4VIF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCoocurrenceTextureFeaturesImageFilterIUC4VIF4 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4VIF4_swigregister(itkCoocurrenceTextureFeaturesImageFilterIUC4VIF4)

def itkCoocurrenceTextureFeaturesImageFilterIUS2VIF2_New():
    return itkCoocurrenceTextureFeaturesImageFilterIUS2VIF2.New()

class itkCoocurrenceTextureFeaturesImageFilterIUS2VIF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIF2):
    r"""Proxy of C++ itkCoocurrenceTextureFeaturesImageFilterIUS2VIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCoocurrenceTextureFeaturesImageFilterIUS2VIF2_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2VIF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCoocurrenceTextureFeaturesImageFilterIUS2VIF2_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2VIF2_Clone(self)

    def SetNeighborhoodRadius(self, _arg):
        r"""
        SetNeighborhoodRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize2

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2VIF2_SetNeighborhoodRadius(self, _arg)

    def GetNeighborhoodRadius(self):
        r"""GetNeighborhoodRadius(self) -> itkSize2"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2VIF2_GetNeighborhoodRadius(self)

    def SetMaskImage(self, _arg):
        r"""
        SetMaskImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageUC2 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2VIF2_SetMaskImage(self, _arg)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageUC2"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2VIF2_GetMaskImage(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO2 *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2VIF2_SetOffsets(self, _arg)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset2 const

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2VIF2_SetOffset(self, offset)

    def GetModifiableOffsets(self):
        r"""GetModifiableOffsets(self) -> itkVectorContainerUCO2"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2VIF2_GetModifiableOffsets(self)

    def GetOffsets(self, *args):
        r"""
        GetOffsets(self) -> itkVectorContainerUCO2
        GetOffsets(self) -> itkVectorContainerUCO2
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2VIF2_GetOffsets(self, *args)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2VIF2_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2VIF2_GetNumberOfBinsPerAxis(self)

    def GetHistogramMaximum(self):
        r"""GetHistogramMaximum(self) -> unsigned short"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2VIF2_GetHistogramMaximum(self)

    def SetHistogramMaximum(self, _arg):
        r"""
        SetHistogramMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2VIF2_SetHistogramMaximum(self, _arg)

    def GetHistogramMinimum(self):
        r"""GetHistogramMinimum(self) -> unsigned short"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2VIF2_GetHistogramMinimum(self)

    def SetHistogramMinimum(self, _arg):
        r"""
        SetHistogramMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2VIF2_SetHistogramMinimum(self, _arg)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2VIF2_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> unsigned char"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2VIF2_GetInsidePixelValue(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2VIF2_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2VIF2_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2VIF2_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2VIF2_NormalizeOff(self)
    OutputPixelTypeCheck = _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2VIF2_OutputPixelTypeCheck
    
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkCoocurrenceTextureFeaturesImageFilterIUS2VIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCoocurrenceTextureFeaturesImageFilterIUS2VIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2VIF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCoocurrenceTextureFeaturesImageFilterIUS2VIF2

        Create a new object of the class itkCoocurrenceTextureFeaturesImageFilterIUS2VIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCoocurrenceTextureFeaturesImageFilterIUS2VIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCoocurrenceTextureFeaturesImageFilterIUS2VIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCoocurrenceTextureFeaturesImageFilterIUS2VIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCoocurrenceTextureFeaturesImageFilterIUS2VIF2 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2VIF2_swigregister(itkCoocurrenceTextureFeaturesImageFilterIUS2VIF2)

def itkCoocurrenceTextureFeaturesImageFilterIUS3VIF3_New():
    return itkCoocurrenceTextureFeaturesImageFilterIUS3VIF3.New()

class itkCoocurrenceTextureFeaturesImageFilterIUS3VIF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIF3):
    r"""Proxy of C++ itkCoocurrenceTextureFeaturesImageFilterIUS3VIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCoocurrenceTextureFeaturesImageFilterIUS3VIF3_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3VIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCoocurrenceTextureFeaturesImageFilterIUS3VIF3_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3VIF3_Clone(self)

    def SetNeighborhoodRadius(self, _arg):
        r"""
        SetNeighborhoodRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize3

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3VIF3_SetNeighborhoodRadius(self, _arg)

    def GetNeighborhoodRadius(self):
        r"""GetNeighborhoodRadius(self) -> itkSize3"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3VIF3_GetNeighborhoodRadius(self)

    def SetMaskImage(self, _arg):
        r"""
        SetMaskImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageUC3 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3VIF3_SetMaskImage(self, _arg)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageUC3"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3VIF3_GetMaskImage(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO3 *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3VIF3_SetOffsets(self, _arg)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset3 const

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3VIF3_SetOffset(self, offset)

    def GetModifiableOffsets(self):
        r"""GetModifiableOffsets(self) -> itkVectorContainerUCO3"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3VIF3_GetModifiableOffsets(self)

    def GetOffsets(self, *args):
        r"""
        GetOffsets(self) -> itkVectorContainerUCO3
        GetOffsets(self) -> itkVectorContainerUCO3
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3VIF3_GetOffsets(self, *args)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3VIF3_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3VIF3_GetNumberOfBinsPerAxis(self)

    def GetHistogramMaximum(self):
        r"""GetHistogramMaximum(self) -> unsigned short"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3VIF3_GetHistogramMaximum(self)

    def SetHistogramMaximum(self, _arg):
        r"""
        SetHistogramMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3VIF3_SetHistogramMaximum(self, _arg)

    def GetHistogramMinimum(self):
        r"""GetHistogramMinimum(self) -> unsigned short"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3VIF3_GetHistogramMinimum(self)

    def SetHistogramMinimum(self, _arg):
        r"""
        SetHistogramMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3VIF3_SetHistogramMinimum(self, _arg)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3VIF3_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> unsigned char"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3VIF3_GetInsidePixelValue(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3VIF3_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3VIF3_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3VIF3_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3VIF3_NormalizeOff(self)
    OutputPixelTypeCheck = _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3VIF3_OutputPixelTypeCheck
    
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkCoocurrenceTextureFeaturesImageFilterIUS3VIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCoocurrenceTextureFeaturesImageFilterIUS3VIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3VIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCoocurrenceTextureFeaturesImageFilterIUS3VIF3

        Create a new object of the class itkCoocurrenceTextureFeaturesImageFilterIUS3VIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCoocurrenceTextureFeaturesImageFilterIUS3VIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCoocurrenceTextureFeaturesImageFilterIUS3VIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCoocurrenceTextureFeaturesImageFilterIUS3VIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCoocurrenceTextureFeaturesImageFilterIUS3VIF3 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3VIF3_swigregister(itkCoocurrenceTextureFeaturesImageFilterIUS3VIF3)

def itkCoocurrenceTextureFeaturesImageFilterIUS4VIF4_New():
    return itkCoocurrenceTextureFeaturesImageFilterIUS4VIF4.New()

class itkCoocurrenceTextureFeaturesImageFilterIUS4VIF4(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS4VIF4):
    r"""Proxy of C++ itkCoocurrenceTextureFeaturesImageFilterIUS4VIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCoocurrenceTextureFeaturesImageFilterIUS4VIF4_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4VIF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCoocurrenceTextureFeaturesImageFilterIUS4VIF4_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4VIF4_Clone(self)

    def SetNeighborhoodRadius(self, _arg):
        r"""
        SetNeighborhoodRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize4

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4VIF4_SetNeighborhoodRadius(self, _arg)

    def GetNeighborhoodRadius(self):
        r"""GetNeighborhoodRadius(self) -> itkSize4"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4VIF4_GetNeighborhoodRadius(self)

    def SetMaskImage(self, _arg):
        r"""
        SetMaskImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageUC4 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4VIF4_SetMaskImage(self, _arg)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageUC4"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4VIF4_GetMaskImage(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO4 *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4VIF4_SetOffsets(self, _arg)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset4 const

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4VIF4_SetOffset(self, offset)

    def GetModifiableOffsets(self):
        r"""GetModifiableOffsets(self) -> itkVectorContainerUCO4"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4VIF4_GetModifiableOffsets(self)

    def GetOffsets(self, *args):
        r"""
        GetOffsets(self) -> itkVectorContainerUCO4
        GetOffsets(self) -> itkVectorContainerUCO4
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4VIF4_GetOffsets(self, *args)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4VIF4_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4VIF4_GetNumberOfBinsPerAxis(self)

    def GetHistogramMaximum(self):
        r"""GetHistogramMaximum(self) -> unsigned short"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4VIF4_GetHistogramMaximum(self)

    def SetHistogramMaximum(self, _arg):
        r"""
        SetHistogramMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4VIF4_SetHistogramMaximum(self, _arg)

    def GetHistogramMinimum(self):
        r"""GetHistogramMinimum(self) -> unsigned short"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4VIF4_GetHistogramMinimum(self)

    def SetHistogramMinimum(self, _arg):
        r"""
        SetHistogramMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4VIF4_SetHistogramMinimum(self, _arg)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4VIF4_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> unsigned char"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4VIF4_GetInsidePixelValue(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4VIF4_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4VIF4_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4VIF4_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4VIF4_NormalizeOff(self)
    OutputPixelTypeCheck = _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4VIF4_OutputPixelTypeCheck
    
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkCoocurrenceTextureFeaturesImageFilterIUS4VIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCoocurrenceTextureFeaturesImageFilterIUS4VIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4VIF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCoocurrenceTextureFeaturesImageFilterIUS4VIF4

        Create a new object of the class itkCoocurrenceTextureFeaturesImageFilterIUS4VIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCoocurrenceTextureFeaturesImageFilterIUS4VIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCoocurrenceTextureFeaturesImageFilterIUS4VIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCoocurrenceTextureFeaturesImageFilterIUS4VIF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCoocurrenceTextureFeaturesImageFilterIUS4VIF4 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4VIF4_swigregister(itkCoocurrenceTextureFeaturesImageFilterIUS4VIF4)

def itkImageFileWriterIVF82_New():
    return itkImageFileWriterIVF82.New()

class itkImageFileWriterIVF82(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageFileWriterIVF82 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageFileWriterIVF82_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF82___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageFileWriterIVF82_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF82_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF82 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF82_SetInput(self, input)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF82
        GetInput(self, idx) -> itkImageVF82

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF82_GetInput(self, *args)

    def SetFileName(self, *args):
        r"""
        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: char const *

        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: std::string const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF82_SetFileName(self, *args)

    def GetFileName(self):
        r"""GetFileName(self) -> char const *"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF82_GetFileName(self)

    def SetImageIO(self, io):
        r"""
        SetImageIO(self, io)

        Parameters
        ----------
        io: itk::ImageIOBase *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF82_SetImageIO(self, io)

    def GetModifiableImageIO(self):
        r"""GetModifiableImageIO(self) -> itk::ImageIOBase *"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF82_GetModifiableImageIO(self)

    def GetImageIO(self, *args):
        r"""
        GetImageIO(self) -> itk::ImageIOBase const
        GetImageIO(self) -> itk::ImageIOBase *
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF82_GetImageIO(self, *args)

    def Write(self):
        r"""Write(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF82_Write(self)

    def SetIORegion(self, region):
        r"""
        SetIORegion(self, region)

        Parameters
        ----------
        region: itkImageIORegion const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF82_SetIORegion(self, region)

    def GetIORegion(self):
        r"""GetIORegion(self) -> itkImageIORegion"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF82_GetIORegion(self)

    def SetNumberOfStreamDivisions(self, _arg):
        r"""
        SetNumberOfStreamDivisions(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF82_SetNumberOfStreamDivisions(self, _arg)

    def GetNumberOfStreamDivisions(self):
        r"""GetNumberOfStreamDivisions(self) -> unsigned int const &"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF82_GetNumberOfStreamDivisions(self)

    def SetUseCompression(self, _arg):
        r"""
        SetUseCompression(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF82_SetUseCompression(self, _arg)

    def GetUseCompression(self):
        r"""GetUseCompression(self) -> bool const &"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF82_GetUseCompression(self)

    def UseCompressionOn(self):
        r"""UseCompressionOn(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF82_UseCompressionOn(self)

    def UseCompressionOff(self):
        r"""UseCompressionOff(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF82_UseCompressionOff(self)

    def SetCompressionLevel(self, _arg):
        r"""
        SetCompressionLevel(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF82_SetCompressionLevel(self, _arg)

    def GetCompressionLevel(self):
        r"""GetCompressionLevel(self) -> int const &"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF82_GetCompressionLevel(self)

    def SetUseInputMetaDataDictionary(self, _arg):
        r"""
        SetUseInputMetaDataDictionary(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF82_SetUseInputMetaDataDictionary(self, _arg)

    def GetUseInputMetaDataDictionary(self):
        r"""GetUseInputMetaDataDictionary(self) -> bool const &"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF82_GetUseInputMetaDataDictionary(self)

    def UseInputMetaDataDictionaryOn(self):
        r"""UseInputMetaDataDictionaryOn(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF82_UseInputMetaDataDictionaryOn(self)

    def UseInputMetaDataDictionaryOff(self):
        r"""UseInputMetaDataDictionaryOff(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF82_UseInputMetaDataDictionaryOff(self)
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkImageFileWriterIVF82

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFileWriterIVF82

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF82_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterIVF82

        Create a new object of the class itkImageFileWriterIVF82 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterIVF82.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterIVF82.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterIVF82.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterIVF82 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF82_swigregister(itkImageFileWriterIVF82)

def itkImageFileWriterIVF83_New():
    return itkImageFileWriterIVF83.New()

class itkImageFileWriterIVF83(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageFileWriterIVF83 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageFileWriterIVF83_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF83___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageFileWriterIVF83_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF83_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF83 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF83_SetInput(self, input)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF83
        GetInput(self, idx) -> itkImageVF83

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF83_GetInput(self, *args)

    def SetFileName(self, *args):
        r"""
        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: char const *

        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: std::string const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF83_SetFileName(self, *args)

    def GetFileName(self):
        r"""GetFileName(self) -> char const *"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF83_GetFileName(self)

    def SetImageIO(self, io):
        r"""
        SetImageIO(self, io)

        Parameters
        ----------
        io: itk::ImageIOBase *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF83_SetImageIO(self, io)

    def GetModifiableImageIO(self):
        r"""GetModifiableImageIO(self) -> itk::ImageIOBase *"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF83_GetModifiableImageIO(self)

    def GetImageIO(self, *args):
        r"""
        GetImageIO(self) -> itk::ImageIOBase const
        GetImageIO(self) -> itk::ImageIOBase *
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF83_GetImageIO(self, *args)

    def Write(self):
        r"""Write(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF83_Write(self)

    def SetIORegion(self, region):
        r"""
        SetIORegion(self, region)

        Parameters
        ----------
        region: itkImageIORegion const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF83_SetIORegion(self, region)

    def GetIORegion(self):
        r"""GetIORegion(self) -> itkImageIORegion"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF83_GetIORegion(self)

    def SetNumberOfStreamDivisions(self, _arg):
        r"""
        SetNumberOfStreamDivisions(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF83_SetNumberOfStreamDivisions(self, _arg)

    def GetNumberOfStreamDivisions(self):
        r"""GetNumberOfStreamDivisions(self) -> unsigned int const &"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF83_GetNumberOfStreamDivisions(self)

    def SetUseCompression(self, _arg):
        r"""
        SetUseCompression(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF83_SetUseCompression(self, _arg)

    def GetUseCompression(self):
        r"""GetUseCompression(self) -> bool const &"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF83_GetUseCompression(self)

    def UseCompressionOn(self):
        r"""UseCompressionOn(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF83_UseCompressionOn(self)

    def UseCompressionOff(self):
        r"""UseCompressionOff(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF83_UseCompressionOff(self)

    def SetCompressionLevel(self, _arg):
        r"""
        SetCompressionLevel(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF83_SetCompressionLevel(self, _arg)

    def GetCompressionLevel(self):
        r"""GetCompressionLevel(self) -> int const &"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF83_GetCompressionLevel(self)

    def SetUseInputMetaDataDictionary(self, _arg):
        r"""
        SetUseInputMetaDataDictionary(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF83_SetUseInputMetaDataDictionary(self, _arg)

    def GetUseInputMetaDataDictionary(self):
        r"""GetUseInputMetaDataDictionary(self) -> bool const &"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF83_GetUseInputMetaDataDictionary(self)

    def UseInputMetaDataDictionaryOn(self):
        r"""UseInputMetaDataDictionaryOn(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF83_UseInputMetaDataDictionaryOn(self)

    def UseInputMetaDataDictionaryOff(self):
        r"""UseInputMetaDataDictionaryOff(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF83_UseInputMetaDataDictionaryOff(self)
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkImageFileWriterIVF83

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFileWriterIVF83

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF83_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterIVF83

        Create a new object of the class itkImageFileWriterIVF83 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterIVF83.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterIVF83.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterIVF83.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterIVF83 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF83_swigregister(itkImageFileWriterIVF83)

def itkImageFileWriterIVF84_New():
    return itkImageFileWriterIVF84.New()

class itkImageFileWriterIVF84(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageFileWriterIVF84 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageFileWriterIVF84_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF84___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageFileWriterIVF84_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF84_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF84 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF84_SetInput(self, input)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF84
        GetInput(self, idx) -> itkImageVF84

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF84_GetInput(self, *args)

    def SetFileName(self, *args):
        r"""
        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: char const *

        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: std::string const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF84_SetFileName(self, *args)

    def GetFileName(self):
        r"""GetFileName(self) -> char const *"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF84_GetFileName(self)

    def SetImageIO(self, io):
        r"""
        SetImageIO(self, io)

        Parameters
        ----------
        io: itk::ImageIOBase *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF84_SetImageIO(self, io)

    def GetModifiableImageIO(self):
        r"""GetModifiableImageIO(self) -> itk::ImageIOBase *"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF84_GetModifiableImageIO(self)

    def GetImageIO(self, *args):
        r"""
        GetImageIO(self) -> itk::ImageIOBase const
        GetImageIO(self) -> itk::ImageIOBase *
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF84_GetImageIO(self, *args)

    def Write(self):
        r"""Write(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF84_Write(self)

    def SetIORegion(self, region):
        r"""
        SetIORegion(self, region)

        Parameters
        ----------
        region: itkImageIORegion const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF84_SetIORegion(self, region)

    def GetIORegion(self):
        r"""GetIORegion(self) -> itkImageIORegion"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF84_GetIORegion(self)

    def SetNumberOfStreamDivisions(self, _arg):
        r"""
        SetNumberOfStreamDivisions(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF84_SetNumberOfStreamDivisions(self, _arg)

    def GetNumberOfStreamDivisions(self):
        r"""GetNumberOfStreamDivisions(self) -> unsigned int const &"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF84_GetNumberOfStreamDivisions(self)

    def SetUseCompression(self, _arg):
        r"""
        SetUseCompression(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF84_SetUseCompression(self, _arg)

    def GetUseCompression(self):
        r"""GetUseCompression(self) -> bool const &"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF84_GetUseCompression(self)

    def UseCompressionOn(self):
        r"""UseCompressionOn(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF84_UseCompressionOn(self)

    def UseCompressionOff(self):
        r"""UseCompressionOff(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF84_UseCompressionOff(self)

    def SetCompressionLevel(self, _arg):
        r"""
        SetCompressionLevel(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF84_SetCompressionLevel(self, _arg)

    def GetCompressionLevel(self):
        r"""GetCompressionLevel(self) -> int const &"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF84_GetCompressionLevel(self)

    def SetUseInputMetaDataDictionary(self, _arg):
        r"""
        SetUseInputMetaDataDictionary(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF84_SetUseInputMetaDataDictionary(self, _arg)

    def GetUseInputMetaDataDictionary(self):
        r"""GetUseInputMetaDataDictionary(self) -> bool const &"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF84_GetUseInputMetaDataDictionary(self)

    def UseInputMetaDataDictionaryOn(self):
        r"""UseInputMetaDataDictionaryOn(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF84_UseInputMetaDataDictionaryOn(self)

    def UseInputMetaDataDictionaryOff(self):
        r"""UseInputMetaDataDictionaryOff(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF84_UseInputMetaDataDictionaryOff(self)
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkImageFileWriterIVF84

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFileWriterIVF84

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF84_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterIVF84

        Create a new object of the class itkImageFileWriterIVF84 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterIVF84.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterIVF84.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterIVF84.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterIVF84 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileWriterIVF84_swigregister(itkImageFileWriterIVF84)
class itkImageSourceIVF82(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageSourceIVF82 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetOutput(self, *args):
        r"""
        GetOutput(self) -> itkImageVF82
        GetOutput(self) -> itkImageVF82
        GetOutput(self, idx) -> itkImageVF82

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageSourceIVF82_GetOutput(self, *args)

    def GraftOutput(self, *args):
        r"""
        GraftOutput(self, graft)

        Parameters
        ----------
        graft: itkDataObject *

        GraftOutput(self, key, graft)

        Parameters
        ----------
        key: std::string const &
        graft: itkDataObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageSourceIVF82_GraftOutput(self, *args)

    def GraftNthOutput(self, idx, graft):
        r"""
        GraftNthOutput(self, idx, graft)

        Parameters
        ----------
        idx: unsigned int
        graft: itkDataObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageSourceIVF82_GraftNthOutput(self, idx, graft)

    def MakeOutput(self, *args):
        r"""
        MakeOutput(self, idx) -> itkDataObject_Pointer

        Parameters
        ----------
        idx: unsigned long

        MakeOutput(self, arg0) -> itkDataObject_Pointer

        Parameters
        ----------
        arg0: std::string const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageSourceIVF82_MakeOutput(self, *args)
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkImageSourceIVF82

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageSourceIVF82

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageSourceIVF82_cast(obj)

# Register itkImageSourceIVF82 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkImageSourceIVF82_swigregister(itkImageSourceIVF82)
class itkImageSourceIVF83(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageSourceIVF83 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetOutput(self, *args):
        r"""
        GetOutput(self) -> itkImageVF83
        GetOutput(self) -> itkImageVF83
        GetOutput(self, idx) -> itkImageVF83

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageSourceIVF83_GetOutput(self, *args)

    def GraftOutput(self, *args):
        r"""
        GraftOutput(self, graft)

        Parameters
        ----------
        graft: itkDataObject *

        GraftOutput(self, key, graft)

        Parameters
        ----------
        key: std::string const &
        graft: itkDataObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageSourceIVF83_GraftOutput(self, *args)

    def GraftNthOutput(self, idx, graft):
        r"""
        GraftNthOutput(self, idx, graft)

        Parameters
        ----------
        idx: unsigned int
        graft: itkDataObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageSourceIVF83_GraftNthOutput(self, idx, graft)

    def MakeOutput(self, *args):
        r"""
        MakeOutput(self, idx) -> itkDataObject_Pointer

        Parameters
        ----------
        idx: unsigned long

        MakeOutput(self, arg0) -> itkDataObject_Pointer

        Parameters
        ----------
        arg0: std::string const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageSourceIVF83_MakeOutput(self, *args)
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkImageSourceIVF83

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageSourceIVF83

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageSourceIVF83_cast(obj)

# Register itkImageSourceIVF83 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkImageSourceIVF83_swigregister(itkImageSourceIVF83)
class itkImageSourceIVF84(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageSourceIVF84 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetOutput(self, *args):
        r"""
        GetOutput(self) -> itkImageVF84
        GetOutput(self) -> itkImageVF84
        GetOutput(self, idx) -> itkImageVF84

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageSourceIVF84_GetOutput(self, *args)

    def GraftOutput(self, *args):
        r"""
        GraftOutput(self, graft)

        Parameters
        ----------
        graft: itkDataObject *

        GraftOutput(self, key, graft)

        Parameters
        ----------
        key: std::string const &
        graft: itkDataObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageSourceIVF84_GraftOutput(self, *args)

    def GraftNthOutput(self, idx, graft):
        r"""
        GraftNthOutput(self, idx, graft)

        Parameters
        ----------
        idx: unsigned int
        graft: itkDataObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageSourceIVF84_GraftNthOutput(self, idx, graft)

    def MakeOutput(self, *args):
        r"""
        MakeOutput(self, idx) -> itkDataObject_Pointer

        Parameters
        ----------
        idx: unsigned long

        MakeOutput(self, arg0) -> itkDataObject_Pointer

        Parameters
        ----------
        arg0: std::string const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageSourceIVF84_MakeOutput(self, *args)
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkImageSourceIVF84

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageSourceIVF84

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageSourceIVF84_cast(obj)

# Register itkImageSourceIVF84 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkImageSourceIVF84_swigregister(itkImageSourceIVF84)
class itkImageToImageFilterID2IVF82(itkImageSourceIVF82):
    r"""Proxy of C++ itkImageToImageFilterID2IVF82 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD2 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterID2IVF82_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD2
        GetInput(self, idx) -> itkImageD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterID2IVF82_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterID2IVF82_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterID2IVF82_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterID2IVF82_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterID2IVF82_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterID2IVF82_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterID2IVF82_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterID2IVF82_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterID2IVF82_GetDirectionTolerance(self)
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkImageToImageFilterID2IVF82

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID2IVF82

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterID2IVF82_cast(obj)

# Register itkImageToImageFilterID2IVF82 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterID2IVF82_swigregister(itkImageToImageFilterID2IVF82)
class itkImageToImageFilterID3IVF83(itkImageSourceIVF83):
    r"""Proxy of C++ itkImageToImageFilterID3IVF83 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD3 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterID3IVF83_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD3
        GetInput(self, idx) -> itkImageD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterID3IVF83_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterID3IVF83_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterID3IVF83_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterID3IVF83_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterID3IVF83_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterID3IVF83_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterID3IVF83_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterID3IVF83_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterID3IVF83_GetDirectionTolerance(self)
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkImageToImageFilterID3IVF83

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID3IVF83

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterID3IVF83_cast(obj)

# Register itkImageToImageFilterID3IVF83 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterID3IVF83_swigregister(itkImageToImageFilterID3IVF83)
class itkImageToImageFilterID4IVF84(itkImageSourceIVF84):
    r"""Proxy of C++ itkImageToImageFilterID4IVF84 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD4 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterID4IVF84_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD4
        GetInput(self, idx) -> itkImageD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterID4IVF84_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterID4IVF84_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterID4IVF84_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterID4IVF84_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterID4IVF84_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterID4IVF84_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterID4IVF84_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterID4IVF84_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterID4IVF84_GetDirectionTolerance(self)
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkImageToImageFilterID4IVF84

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID4IVF84

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterID4IVF84_cast(obj)

# Register itkImageToImageFilterID4IVF84 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterID4IVF84_swigregister(itkImageToImageFilterID4IVF84)
class itkImageToImageFilterIF2IVF82(itkImageSourceIVF82):
    r"""Proxy of C++ itkImageToImageFilterIF2IVF82 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF2 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIF2IVF82_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF2
        GetInput(self, idx) -> itkImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIF2IVF82_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIF2IVF82_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIF2IVF82_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIF2IVF82_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIF2IVF82_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIF2IVF82_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIF2IVF82_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIF2IVF82_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIF2IVF82_GetDirectionTolerance(self)
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkImageToImageFilterIF2IVF82

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF2IVF82

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIF2IVF82_cast(obj)

# Register itkImageToImageFilterIF2IVF82 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIF2IVF82_swigregister(itkImageToImageFilterIF2IVF82)
class itkImageToImageFilterIF3IVF83(itkImageSourceIVF83):
    r"""Proxy of C++ itkImageToImageFilterIF3IVF83 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF3 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIF3IVF83_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF3
        GetInput(self, idx) -> itkImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIF3IVF83_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIF3IVF83_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIF3IVF83_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIF3IVF83_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIF3IVF83_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIF3IVF83_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIF3IVF83_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIF3IVF83_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIF3IVF83_GetDirectionTolerance(self)
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkImageToImageFilterIF3IVF83

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF3IVF83

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIF3IVF83_cast(obj)

# Register itkImageToImageFilterIF3IVF83 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIF3IVF83_swigregister(itkImageToImageFilterIF3IVF83)
class itkImageToImageFilterIF4IVF84(itkImageSourceIVF84):
    r"""Proxy of C++ itkImageToImageFilterIF4IVF84 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF4 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIF4IVF84_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF4
        GetInput(self, idx) -> itkImageF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIF4IVF84_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIF4IVF84_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIF4IVF84_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIF4IVF84_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIF4IVF84_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIF4IVF84_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIF4IVF84_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIF4IVF84_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIF4IVF84_GetDirectionTolerance(self)
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkImageToImageFilterIF4IVF84

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF4IVF84

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIF4IVF84_cast(obj)

# Register itkImageToImageFilterIF4IVF84 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIF4IVF84_swigregister(itkImageToImageFilterIF4IVF84)
class itkImageToImageFilterISS2IVF82(itkImageSourceIVF82):
    r"""Proxy of C++ itkImageToImageFilterISS2IVF82 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS2 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterISS2IVF82_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS2
        GetInput(self, idx) -> itkImageSS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterISS2IVF82_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterISS2IVF82_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterISS2IVF82_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterISS2IVF82_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterISS2IVF82_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterISS2IVF82_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterISS2IVF82_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterISS2IVF82_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterISS2IVF82_GetDirectionTolerance(self)
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkImageToImageFilterISS2IVF82

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS2IVF82

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterISS2IVF82_cast(obj)

# Register itkImageToImageFilterISS2IVF82 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterISS2IVF82_swigregister(itkImageToImageFilterISS2IVF82)
class itkImageToImageFilterISS3IVF83(itkImageSourceIVF83):
    r"""Proxy of C++ itkImageToImageFilterISS3IVF83 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS3 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterISS3IVF83_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS3
        GetInput(self, idx) -> itkImageSS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterISS3IVF83_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterISS3IVF83_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterISS3IVF83_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterISS3IVF83_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterISS3IVF83_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterISS3IVF83_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterISS3IVF83_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterISS3IVF83_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterISS3IVF83_GetDirectionTolerance(self)
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkImageToImageFilterISS3IVF83

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS3IVF83

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterISS3IVF83_cast(obj)

# Register itkImageToImageFilterISS3IVF83 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterISS3IVF83_swigregister(itkImageToImageFilterISS3IVF83)
class itkImageToImageFilterISS4IVF84(itkImageSourceIVF84):
    r"""Proxy of C++ itkImageToImageFilterISS4IVF84 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS4 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterISS4IVF84_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS4
        GetInput(self, idx) -> itkImageSS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterISS4IVF84_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterISS4IVF84_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterISS4IVF84_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterISS4IVF84_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterISS4IVF84_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterISS4IVF84_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterISS4IVF84_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterISS4IVF84_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterISS4IVF84_GetDirectionTolerance(self)
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkImageToImageFilterISS4IVF84

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS4IVF84

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterISS4IVF84_cast(obj)

# Register itkImageToImageFilterISS4IVF84 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterISS4IVF84_swigregister(itkImageToImageFilterISS4IVF84)
class itkImageToImageFilterIUC2IVF82(itkImageSourceIVF82):
    r"""Proxy of C++ itkImageToImageFilterIUC2IVF82 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC2 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUC2IVF82_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC2
        GetInput(self, idx) -> itkImageUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUC2IVF82_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUC2IVF82_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUC2IVF82_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUC2IVF82_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUC2IVF82_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUC2IVF82_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUC2IVF82_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUC2IVF82_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUC2IVF82_GetDirectionTolerance(self)
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkImageToImageFilterIUC2IVF82

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC2IVF82

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUC2IVF82_cast(obj)

# Register itkImageToImageFilterIUC2IVF82 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUC2IVF82_swigregister(itkImageToImageFilterIUC2IVF82)
class itkImageToImageFilterIUC3IVF83(itkImageSourceIVF83):
    r"""Proxy of C++ itkImageToImageFilterIUC3IVF83 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC3 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUC3IVF83_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC3
        GetInput(self, idx) -> itkImageUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUC3IVF83_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUC3IVF83_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUC3IVF83_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUC3IVF83_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUC3IVF83_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUC3IVF83_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUC3IVF83_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUC3IVF83_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUC3IVF83_GetDirectionTolerance(self)
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkImageToImageFilterIUC3IVF83

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC3IVF83

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUC3IVF83_cast(obj)

# Register itkImageToImageFilterIUC3IVF83 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUC3IVF83_swigregister(itkImageToImageFilterIUC3IVF83)
class itkImageToImageFilterIUC4IVF84(itkImageSourceIVF84):
    r"""Proxy of C++ itkImageToImageFilterIUC4IVF84 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC4 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUC4IVF84_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC4
        GetInput(self, idx) -> itkImageUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUC4IVF84_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUC4IVF84_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUC4IVF84_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUC4IVF84_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUC4IVF84_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUC4IVF84_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUC4IVF84_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUC4IVF84_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUC4IVF84_GetDirectionTolerance(self)
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkImageToImageFilterIUC4IVF84

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC4IVF84

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUC4IVF84_cast(obj)

# Register itkImageToImageFilterIUC4IVF84 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUC4IVF84_swigregister(itkImageToImageFilterIUC4IVF84)
class itkImageToImageFilterIUS2IVF82(itkImageSourceIVF82):
    r"""Proxy of C++ itkImageToImageFilterIUS2IVF82 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS2 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUS2IVF82_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS2
        GetInput(self, idx) -> itkImageUS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUS2IVF82_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUS2IVF82_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUS2IVF82_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUS2IVF82_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUS2IVF82_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUS2IVF82_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUS2IVF82_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUS2IVF82_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUS2IVF82_GetDirectionTolerance(self)
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkImageToImageFilterIUS2IVF82

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS2IVF82

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUS2IVF82_cast(obj)

# Register itkImageToImageFilterIUS2IVF82 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUS2IVF82_swigregister(itkImageToImageFilterIUS2IVF82)
class itkImageToImageFilterIUS3IVF83(itkImageSourceIVF83):
    r"""Proxy of C++ itkImageToImageFilterIUS3IVF83 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS3 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUS3IVF83_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS3
        GetInput(self, idx) -> itkImageUS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUS3IVF83_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUS3IVF83_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUS3IVF83_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUS3IVF83_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUS3IVF83_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUS3IVF83_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUS3IVF83_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUS3IVF83_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUS3IVF83_GetDirectionTolerance(self)
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkImageToImageFilterIUS3IVF83

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS3IVF83

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUS3IVF83_cast(obj)

# Register itkImageToImageFilterIUS3IVF83 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUS3IVF83_swigregister(itkImageToImageFilterIUS3IVF83)
class itkImageToImageFilterIUS4IVF84(itkImageSourceIVF84):
    r"""Proxy of C++ itkImageToImageFilterIUS4IVF84 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS4 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUS4IVF84_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS4
        GetInput(self, idx) -> itkImageUS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUS4IVF84_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUS4IVF84_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUS4IVF84_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUS4IVF84_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUS4IVF84_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUS4IVF84_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUS4IVF84_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUS4IVF84_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUS4IVF84_GetDirectionTolerance(self)
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkImageToImageFilterIUS4IVF84

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS4IVF84

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUS4IVF84_cast(obj)

# Register itkImageToImageFilterIUS4IVF84 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkImageToImageFilterIUS4IVF84_swigregister(itkImageToImageFilterIUS4IVF84)

def itkImageVF82_New():
    return itkImageVF82.New()

class itkImageVF82(itk.itkImagePython.itkImageBase2):
    r"""Proxy of C++ itkImageVF82 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageVF82_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageVF82___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageVF82_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageVF82_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageVF82_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVectorF8 const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageVF82_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: itkVectorF8 const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageVF82_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVectorF8

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> itkVectorF8

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageVF82_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorF8
        GetBufferPointer(self) -> itkVectorF8
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageVF82_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,8 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,8 > > const *
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageVF82_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,itk::Vector< float,8 > > *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageVF82_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageVF82 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageVF82_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,8 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,8 > > const
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageVF82_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,8 > > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,8 > > > const
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageVF82_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkImageVF82

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageVF82

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageVF82_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageVF82

        Create a new object of the class itkImageVF82 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF82.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageVF82.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageVF82.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageVF82 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkImageVF82_swigregister(itkImageVF82)

def itkImageVF83_New():
    return itkImageVF83.New()

class itkImageVF83(itk.itkImagePython.itkImageBase3):
    r"""Proxy of C++ itkImageVF83 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageVF83_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageVF83___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageVF83_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageVF83_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageVF83_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVectorF8 const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageVF83_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: itkVectorF8 const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageVF83_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVectorF8

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> itkVectorF8

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageVF83_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorF8
        GetBufferPointer(self) -> itkVectorF8
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageVF83_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,8 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,8 > > const *
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageVF83_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,itk::Vector< float,8 > > *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageVF83_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageVF83 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageVF83_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,8 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,8 > > const
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageVF83_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,8 >,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,8 >,3 > > const
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageVF83_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkImageVF83

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageVF83

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageVF83_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageVF83

        Create a new object of the class itkImageVF83 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF83.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageVF83.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageVF83.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageVF83 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkImageVF83_swigregister(itkImageVF83)

def itkImageVF84_New():
    return itkImageVF84.New()

class itkImageVF84(itk.itkImagePython.itkImageBase4):
    r"""Proxy of C++ itkImageVF84 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageVF84_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageVF84___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageVF84_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageVF84_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageVF84_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVectorF8 const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageVF84_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: itkVectorF8 const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageVF84_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVectorF8

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> itkVectorF8

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageVF84_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorF8
        GetBufferPointer(self) -> itkVectorF8
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageVF84_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,8 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,8 > > const *
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageVF84_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,itk::Vector< float,8 > > *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageVF84_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageVF84 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageVF84_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,8 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,8 > > const
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageVF84_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,8 >,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,8 >,4 > > const
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageVF84_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkImageVF84

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageVF84

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageVF84_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageVF84

        Create a new object of the class itkImageVF84 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF84.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageVF84.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageVF84.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageVF84 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkImageVF84_swigregister(itkImageVF84)
class itkVectorF8(itk.itkFixedArrayPython.itkFixedArrayF8):
    r"""Proxy of C++ itkVectorF8 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetVectorDimension():
        r"""GetVectorDimension() -> unsigned int"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkVectorF8_GetVectorDimension()

    def SetVnlVector(self, arg0):
        r"""
        SetVnlVector(self, arg0)

        Parameters
        ----------
        arg0: vnl_vectorF const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkVectorF8_SetVnlVector(self, arg0)

    def GetVnlVector(self, *args):
        r"""
        GetVnlVector(self) -> vnl_vector_refF
        GetVnlVector(self) -> vnl_vectorF
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkVectorF8_GetVnlVector(self, *args)

    def __iadd__(self, vec):
        r"""
        __iadd__(self, vec) -> itkVectorF8

        Parameters
        ----------
        vec: itkVectorF8 const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkVectorF8___iadd__(self, vec)

    def __isub__(self, vec):
        r"""
        __isub__(self, vec) -> itkVectorF8

        Parameters
        ----------
        vec: itkVectorF8 const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkVectorF8___isub__(self, vec)

    def __neg__(self):
        r"""__neg__(self) -> itkVectorF8"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkVectorF8___neg__(self)

    def __add__(self, vec):
        r"""
        __add__(self, vec) -> itkVectorF8

        Parameters
        ----------
        vec: itkVectorF8 const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkVectorF8___add__(self, vec)

    def __sub__(self, vec):
        r"""
        __sub__(self, vec) -> itkVectorF8

        Parameters
        ----------
        vec: itkVectorF8 const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkVectorF8___sub__(self, vec)

    def __mul__(self, *args):
        r"""
        __mul__(self, other) -> float

        Parameters
        ----------
        other: itkVectorF8 const &

        __mul__(self, value) -> itkVectorF8

        Parameters
        ----------
        value: float const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkVectorF8___mul__(self, *args)

    def __eq__(self, v):
        r"""
        __eq__(self, v) -> bool

        Parameters
        ----------
        v: itkVectorF8 const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkVectorF8___eq__(self, v)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkVectorF8 const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkVectorF8___ne__(self, other)

    def GetNorm(self):
        r"""GetNorm(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkVectorF8_GetNorm(self)

    def GetSquaredNorm(self):
        r"""GetSquaredNorm(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkVectorF8_GetSquaredNorm(self)

    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkVectorF8_GetNumberOfComponents()

    def Normalize(self):
        r"""Normalize(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkVectorF8_Normalize(self)

    def SetNthComponent(self, c, v):
        r"""
        SetNthComponent(self, c, v)

        Parameters
        ----------
        c: int
        v: float const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkVectorF8_SetNthComponent(self, c, v)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkVectorF8
        __init__(self, r) -> itkVectorF8

        Parameters
        ----------
        r: float const &

        __init__(self, r) -> itkVectorF8

        Parameters
        ----------
        r: float const *

        __init__(self, stdArray) -> itkVectorF8

        Parameters
        ----------
        stdArray: std::array< float,8 > const &

        __init__(self, arg0) -> itkVectorF8

        Parameters
        ----------
        arg0: itkVectorF8 const &

        """
        _itkCoocurrenceTextureFeaturesImageFilterPython.itkVectorF8_swiginit(self, _itkCoocurrenceTextureFeaturesImageFilterPython.new_itkVectorF8(*args))
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkVectorF8

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> float

        Parameters
        ----------
        d: unsigned long

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkVectorF8___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: float

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkVectorF8___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkVectorF8___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkVectorF8___repr__(self)

# Register itkVectorF8 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkVectorF8_swigregister(itkVectorF8)

def itkCoocurrenceTextureFeaturesImageFilterID2IVF82_New():
    return itkCoocurrenceTextureFeaturesImageFilterID2IVF82.New()

class itkCoocurrenceTextureFeaturesImageFilterID2IVF82(itkImageToImageFilterID2IVF82):
    r"""Proxy of C++ itkCoocurrenceTextureFeaturesImageFilterID2IVF82 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCoocurrenceTextureFeaturesImageFilterID2IVF82_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2IVF82___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCoocurrenceTextureFeaturesImageFilterID2IVF82_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2IVF82_Clone(self)

    def SetNeighborhoodRadius(self, _arg):
        r"""
        SetNeighborhoodRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize2

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2IVF82_SetNeighborhoodRadius(self, _arg)

    def GetNeighborhoodRadius(self):
        r"""GetNeighborhoodRadius(self) -> itkSize2"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2IVF82_GetNeighborhoodRadius(self)

    def SetMaskImage(self, _arg):
        r"""
        SetMaskImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageUC2 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2IVF82_SetMaskImage(self, _arg)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageUC2"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2IVF82_GetMaskImage(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO2 *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2IVF82_SetOffsets(self, _arg)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset2 const

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2IVF82_SetOffset(self, offset)

    def GetModifiableOffsets(self):
        r"""GetModifiableOffsets(self) -> itkVectorContainerUCO2"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2IVF82_GetModifiableOffsets(self)

    def GetOffsets(self, *args):
        r"""
        GetOffsets(self) -> itkVectorContainerUCO2
        GetOffsets(self) -> itkVectorContainerUCO2
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2IVF82_GetOffsets(self, *args)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2IVF82_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2IVF82_GetNumberOfBinsPerAxis(self)

    def GetHistogramMaximum(self):
        r"""GetHistogramMaximum(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2IVF82_GetHistogramMaximum(self)

    def SetHistogramMaximum(self, _arg):
        r"""
        SetHistogramMaximum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2IVF82_SetHistogramMaximum(self, _arg)

    def GetHistogramMinimum(self):
        r"""GetHistogramMinimum(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2IVF82_GetHistogramMinimum(self)

    def SetHistogramMinimum(self, _arg):
        r"""
        SetHistogramMinimum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2IVF82_SetHistogramMinimum(self, _arg)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2IVF82_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> unsigned char"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2IVF82_GetInsidePixelValue(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2IVF82_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2IVF82_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2IVF82_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2IVF82_NormalizeOff(self)
    OutputPixelTypeCheck = _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2IVF82_OutputPixelTypeCheck
    
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkCoocurrenceTextureFeaturesImageFilterID2IVF82

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCoocurrenceTextureFeaturesImageFilterID2IVF82

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2IVF82_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCoocurrenceTextureFeaturesImageFilterID2IVF82

        Create a new object of the class itkCoocurrenceTextureFeaturesImageFilterID2IVF82 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCoocurrenceTextureFeaturesImageFilterID2IVF82.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCoocurrenceTextureFeaturesImageFilterID2IVF82.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCoocurrenceTextureFeaturesImageFilterID2IVF82.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCoocurrenceTextureFeaturesImageFilterID2IVF82 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID2IVF82_swigregister(itkCoocurrenceTextureFeaturesImageFilterID2IVF82)

def itkCoocurrenceTextureFeaturesImageFilterID3IVF83_New():
    return itkCoocurrenceTextureFeaturesImageFilterID3IVF83.New()

class itkCoocurrenceTextureFeaturesImageFilterID3IVF83(itkImageToImageFilterID3IVF83):
    r"""Proxy of C++ itkCoocurrenceTextureFeaturesImageFilterID3IVF83 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCoocurrenceTextureFeaturesImageFilterID3IVF83_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3IVF83___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCoocurrenceTextureFeaturesImageFilterID3IVF83_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3IVF83_Clone(self)

    def SetNeighborhoodRadius(self, _arg):
        r"""
        SetNeighborhoodRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize3

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3IVF83_SetNeighborhoodRadius(self, _arg)

    def GetNeighborhoodRadius(self):
        r"""GetNeighborhoodRadius(self) -> itkSize3"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3IVF83_GetNeighborhoodRadius(self)

    def SetMaskImage(self, _arg):
        r"""
        SetMaskImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageUC3 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3IVF83_SetMaskImage(self, _arg)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageUC3"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3IVF83_GetMaskImage(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO3 *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3IVF83_SetOffsets(self, _arg)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset3 const

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3IVF83_SetOffset(self, offset)

    def GetModifiableOffsets(self):
        r"""GetModifiableOffsets(self) -> itkVectorContainerUCO3"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3IVF83_GetModifiableOffsets(self)

    def GetOffsets(self, *args):
        r"""
        GetOffsets(self) -> itkVectorContainerUCO3
        GetOffsets(self) -> itkVectorContainerUCO3
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3IVF83_GetOffsets(self, *args)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3IVF83_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3IVF83_GetNumberOfBinsPerAxis(self)

    def GetHistogramMaximum(self):
        r"""GetHistogramMaximum(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3IVF83_GetHistogramMaximum(self)

    def SetHistogramMaximum(self, _arg):
        r"""
        SetHistogramMaximum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3IVF83_SetHistogramMaximum(self, _arg)

    def GetHistogramMinimum(self):
        r"""GetHistogramMinimum(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3IVF83_GetHistogramMinimum(self)

    def SetHistogramMinimum(self, _arg):
        r"""
        SetHistogramMinimum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3IVF83_SetHistogramMinimum(self, _arg)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3IVF83_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> unsigned char"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3IVF83_GetInsidePixelValue(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3IVF83_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3IVF83_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3IVF83_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3IVF83_NormalizeOff(self)
    OutputPixelTypeCheck = _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3IVF83_OutputPixelTypeCheck
    
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkCoocurrenceTextureFeaturesImageFilterID3IVF83

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCoocurrenceTextureFeaturesImageFilterID3IVF83

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3IVF83_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCoocurrenceTextureFeaturesImageFilterID3IVF83

        Create a new object of the class itkCoocurrenceTextureFeaturesImageFilterID3IVF83 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCoocurrenceTextureFeaturesImageFilterID3IVF83.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCoocurrenceTextureFeaturesImageFilterID3IVF83.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCoocurrenceTextureFeaturesImageFilterID3IVF83.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCoocurrenceTextureFeaturesImageFilterID3IVF83 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID3IVF83_swigregister(itkCoocurrenceTextureFeaturesImageFilterID3IVF83)

def itkCoocurrenceTextureFeaturesImageFilterID4IVF84_New():
    return itkCoocurrenceTextureFeaturesImageFilterID4IVF84.New()

class itkCoocurrenceTextureFeaturesImageFilterID4IVF84(itkImageToImageFilterID4IVF84):
    r"""Proxy of C++ itkCoocurrenceTextureFeaturesImageFilterID4IVF84 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCoocurrenceTextureFeaturesImageFilterID4IVF84_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4IVF84___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCoocurrenceTextureFeaturesImageFilterID4IVF84_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4IVF84_Clone(self)

    def SetNeighborhoodRadius(self, _arg):
        r"""
        SetNeighborhoodRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize4

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4IVF84_SetNeighborhoodRadius(self, _arg)

    def GetNeighborhoodRadius(self):
        r"""GetNeighborhoodRadius(self) -> itkSize4"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4IVF84_GetNeighborhoodRadius(self)

    def SetMaskImage(self, _arg):
        r"""
        SetMaskImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageUC4 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4IVF84_SetMaskImage(self, _arg)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageUC4"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4IVF84_GetMaskImage(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO4 *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4IVF84_SetOffsets(self, _arg)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset4 const

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4IVF84_SetOffset(self, offset)

    def GetModifiableOffsets(self):
        r"""GetModifiableOffsets(self) -> itkVectorContainerUCO4"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4IVF84_GetModifiableOffsets(self)

    def GetOffsets(self, *args):
        r"""
        GetOffsets(self) -> itkVectorContainerUCO4
        GetOffsets(self) -> itkVectorContainerUCO4
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4IVF84_GetOffsets(self, *args)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4IVF84_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4IVF84_GetNumberOfBinsPerAxis(self)

    def GetHistogramMaximum(self):
        r"""GetHistogramMaximum(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4IVF84_GetHistogramMaximum(self)

    def SetHistogramMaximum(self, _arg):
        r"""
        SetHistogramMaximum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4IVF84_SetHistogramMaximum(self, _arg)

    def GetHistogramMinimum(self):
        r"""GetHistogramMinimum(self) -> double"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4IVF84_GetHistogramMinimum(self)

    def SetHistogramMinimum(self, _arg):
        r"""
        SetHistogramMinimum(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4IVF84_SetHistogramMinimum(self, _arg)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4IVF84_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> unsigned char"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4IVF84_GetInsidePixelValue(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4IVF84_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4IVF84_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4IVF84_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4IVF84_NormalizeOff(self)
    OutputPixelTypeCheck = _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4IVF84_OutputPixelTypeCheck
    
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkCoocurrenceTextureFeaturesImageFilterID4IVF84

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCoocurrenceTextureFeaturesImageFilterID4IVF84

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4IVF84_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCoocurrenceTextureFeaturesImageFilterID4IVF84

        Create a new object of the class itkCoocurrenceTextureFeaturesImageFilterID4IVF84 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCoocurrenceTextureFeaturesImageFilterID4IVF84.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCoocurrenceTextureFeaturesImageFilterID4IVF84.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCoocurrenceTextureFeaturesImageFilterID4IVF84.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCoocurrenceTextureFeaturesImageFilterID4IVF84 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterID4IVF84_swigregister(itkCoocurrenceTextureFeaturesImageFilterID4IVF84)

def itkCoocurrenceTextureFeaturesImageFilterIF2IVF82_New():
    return itkCoocurrenceTextureFeaturesImageFilterIF2IVF82.New()

class itkCoocurrenceTextureFeaturesImageFilterIF2IVF82(itkImageToImageFilterIF2IVF82):
    r"""Proxy of C++ itkCoocurrenceTextureFeaturesImageFilterIF2IVF82 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCoocurrenceTextureFeaturesImageFilterIF2IVF82_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2IVF82___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCoocurrenceTextureFeaturesImageFilterIF2IVF82_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2IVF82_Clone(self)

    def SetNeighborhoodRadius(self, _arg):
        r"""
        SetNeighborhoodRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize2

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2IVF82_SetNeighborhoodRadius(self, _arg)

    def GetNeighborhoodRadius(self):
        r"""GetNeighborhoodRadius(self) -> itkSize2"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2IVF82_GetNeighborhoodRadius(self)

    def SetMaskImage(self, _arg):
        r"""
        SetMaskImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageUC2 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2IVF82_SetMaskImage(self, _arg)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageUC2"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2IVF82_GetMaskImage(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO2 *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2IVF82_SetOffsets(self, _arg)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset2 const

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2IVF82_SetOffset(self, offset)

    def GetModifiableOffsets(self):
        r"""GetModifiableOffsets(self) -> itkVectorContainerUCO2"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2IVF82_GetModifiableOffsets(self)

    def GetOffsets(self, *args):
        r"""
        GetOffsets(self) -> itkVectorContainerUCO2
        GetOffsets(self) -> itkVectorContainerUCO2
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2IVF82_GetOffsets(self, *args)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2IVF82_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2IVF82_GetNumberOfBinsPerAxis(self)

    def GetHistogramMaximum(self):
        r"""GetHistogramMaximum(self) -> float"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2IVF82_GetHistogramMaximum(self)

    def SetHistogramMaximum(self, _arg):
        r"""
        SetHistogramMaximum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2IVF82_SetHistogramMaximum(self, _arg)

    def GetHistogramMinimum(self):
        r"""GetHistogramMinimum(self) -> float"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2IVF82_GetHistogramMinimum(self)

    def SetHistogramMinimum(self, _arg):
        r"""
        SetHistogramMinimum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2IVF82_SetHistogramMinimum(self, _arg)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2IVF82_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> unsigned char"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2IVF82_GetInsidePixelValue(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2IVF82_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2IVF82_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2IVF82_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2IVF82_NormalizeOff(self)
    OutputPixelTypeCheck = _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2IVF82_OutputPixelTypeCheck
    
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkCoocurrenceTextureFeaturesImageFilterIF2IVF82

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCoocurrenceTextureFeaturesImageFilterIF2IVF82

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2IVF82_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCoocurrenceTextureFeaturesImageFilterIF2IVF82

        Create a new object of the class itkCoocurrenceTextureFeaturesImageFilterIF2IVF82 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCoocurrenceTextureFeaturesImageFilterIF2IVF82.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCoocurrenceTextureFeaturesImageFilterIF2IVF82.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCoocurrenceTextureFeaturesImageFilterIF2IVF82.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCoocurrenceTextureFeaturesImageFilterIF2IVF82 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF2IVF82_swigregister(itkCoocurrenceTextureFeaturesImageFilterIF2IVF82)

def itkCoocurrenceTextureFeaturesImageFilterIF3IVF83_New():
    return itkCoocurrenceTextureFeaturesImageFilterIF3IVF83.New()

class itkCoocurrenceTextureFeaturesImageFilterIF3IVF83(itkImageToImageFilterIF3IVF83):
    r"""Proxy of C++ itkCoocurrenceTextureFeaturesImageFilterIF3IVF83 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCoocurrenceTextureFeaturesImageFilterIF3IVF83_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3IVF83___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCoocurrenceTextureFeaturesImageFilterIF3IVF83_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3IVF83_Clone(self)

    def SetNeighborhoodRadius(self, _arg):
        r"""
        SetNeighborhoodRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize3

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3IVF83_SetNeighborhoodRadius(self, _arg)

    def GetNeighborhoodRadius(self):
        r"""GetNeighborhoodRadius(self) -> itkSize3"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3IVF83_GetNeighborhoodRadius(self)

    def SetMaskImage(self, _arg):
        r"""
        SetMaskImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageUC3 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3IVF83_SetMaskImage(self, _arg)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageUC3"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3IVF83_GetMaskImage(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO3 *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3IVF83_SetOffsets(self, _arg)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset3 const

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3IVF83_SetOffset(self, offset)

    def GetModifiableOffsets(self):
        r"""GetModifiableOffsets(self) -> itkVectorContainerUCO3"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3IVF83_GetModifiableOffsets(self)

    def GetOffsets(self, *args):
        r"""
        GetOffsets(self) -> itkVectorContainerUCO3
        GetOffsets(self) -> itkVectorContainerUCO3
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3IVF83_GetOffsets(self, *args)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3IVF83_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3IVF83_GetNumberOfBinsPerAxis(self)

    def GetHistogramMaximum(self):
        r"""GetHistogramMaximum(self) -> float"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3IVF83_GetHistogramMaximum(self)

    def SetHistogramMaximum(self, _arg):
        r"""
        SetHistogramMaximum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3IVF83_SetHistogramMaximum(self, _arg)

    def GetHistogramMinimum(self):
        r"""GetHistogramMinimum(self) -> float"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3IVF83_GetHistogramMinimum(self)

    def SetHistogramMinimum(self, _arg):
        r"""
        SetHistogramMinimum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3IVF83_SetHistogramMinimum(self, _arg)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3IVF83_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> unsigned char"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3IVF83_GetInsidePixelValue(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3IVF83_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3IVF83_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3IVF83_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3IVF83_NormalizeOff(self)
    OutputPixelTypeCheck = _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3IVF83_OutputPixelTypeCheck
    
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkCoocurrenceTextureFeaturesImageFilterIF3IVF83

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCoocurrenceTextureFeaturesImageFilterIF3IVF83

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3IVF83_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCoocurrenceTextureFeaturesImageFilterIF3IVF83

        Create a new object of the class itkCoocurrenceTextureFeaturesImageFilterIF3IVF83 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCoocurrenceTextureFeaturesImageFilterIF3IVF83.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCoocurrenceTextureFeaturesImageFilterIF3IVF83.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCoocurrenceTextureFeaturesImageFilterIF3IVF83.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCoocurrenceTextureFeaturesImageFilterIF3IVF83 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF3IVF83_swigregister(itkCoocurrenceTextureFeaturesImageFilterIF3IVF83)

def itkCoocurrenceTextureFeaturesImageFilterIF4IVF84_New():
    return itkCoocurrenceTextureFeaturesImageFilterIF4IVF84.New()

class itkCoocurrenceTextureFeaturesImageFilterIF4IVF84(itkImageToImageFilterIF4IVF84):
    r"""Proxy of C++ itkCoocurrenceTextureFeaturesImageFilterIF4IVF84 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCoocurrenceTextureFeaturesImageFilterIF4IVF84_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4IVF84___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCoocurrenceTextureFeaturesImageFilterIF4IVF84_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4IVF84_Clone(self)

    def SetNeighborhoodRadius(self, _arg):
        r"""
        SetNeighborhoodRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize4

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4IVF84_SetNeighborhoodRadius(self, _arg)

    def GetNeighborhoodRadius(self):
        r"""GetNeighborhoodRadius(self) -> itkSize4"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4IVF84_GetNeighborhoodRadius(self)

    def SetMaskImage(self, _arg):
        r"""
        SetMaskImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageUC4 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4IVF84_SetMaskImage(self, _arg)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageUC4"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4IVF84_GetMaskImage(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO4 *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4IVF84_SetOffsets(self, _arg)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset4 const

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4IVF84_SetOffset(self, offset)

    def GetModifiableOffsets(self):
        r"""GetModifiableOffsets(self) -> itkVectorContainerUCO4"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4IVF84_GetModifiableOffsets(self)

    def GetOffsets(self, *args):
        r"""
        GetOffsets(self) -> itkVectorContainerUCO4
        GetOffsets(self) -> itkVectorContainerUCO4
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4IVF84_GetOffsets(self, *args)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4IVF84_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4IVF84_GetNumberOfBinsPerAxis(self)

    def GetHistogramMaximum(self):
        r"""GetHistogramMaximum(self) -> float"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4IVF84_GetHistogramMaximum(self)

    def SetHistogramMaximum(self, _arg):
        r"""
        SetHistogramMaximum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4IVF84_SetHistogramMaximum(self, _arg)

    def GetHistogramMinimum(self):
        r"""GetHistogramMinimum(self) -> float"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4IVF84_GetHistogramMinimum(self)

    def SetHistogramMinimum(self, _arg):
        r"""
        SetHistogramMinimum(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4IVF84_SetHistogramMinimum(self, _arg)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4IVF84_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> unsigned char"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4IVF84_GetInsidePixelValue(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4IVF84_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4IVF84_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4IVF84_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4IVF84_NormalizeOff(self)
    OutputPixelTypeCheck = _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4IVF84_OutputPixelTypeCheck
    
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkCoocurrenceTextureFeaturesImageFilterIF4IVF84

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCoocurrenceTextureFeaturesImageFilterIF4IVF84

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4IVF84_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCoocurrenceTextureFeaturesImageFilterIF4IVF84

        Create a new object of the class itkCoocurrenceTextureFeaturesImageFilterIF4IVF84 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCoocurrenceTextureFeaturesImageFilterIF4IVF84.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCoocurrenceTextureFeaturesImageFilterIF4IVF84.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCoocurrenceTextureFeaturesImageFilterIF4IVF84.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCoocurrenceTextureFeaturesImageFilterIF4IVF84 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIF4IVF84_swigregister(itkCoocurrenceTextureFeaturesImageFilterIF4IVF84)

def itkCoocurrenceTextureFeaturesImageFilterISS2IVF82_New():
    return itkCoocurrenceTextureFeaturesImageFilterISS2IVF82.New()

class itkCoocurrenceTextureFeaturesImageFilterISS2IVF82(itkImageToImageFilterISS2IVF82):
    r"""Proxy of C++ itkCoocurrenceTextureFeaturesImageFilterISS2IVF82 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCoocurrenceTextureFeaturesImageFilterISS2IVF82_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2IVF82___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCoocurrenceTextureFeaturesImageFilterISS2IVF82_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2IVF82_Clone(self)

    def SetNeighborhoodRadius(self, _arg):
        r"""
        SetNeighborhoodRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize2

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2IVF82_SetNeighborhoodRadius(self, _arg)

    def GetNeighborhoodRadius(self):
        r"""GetNeighborhoodRadius(self) -> itkSize2"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2IVF82_GetNeighborhoodRadius(self)

    def SetMaskImage(self, _arg):
        r"""
        SetMaskImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageUC2 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2IVF82_SetMaskImage(self, _arg)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageUC2"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2IVF82_GetMaskImage(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO2 *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2IVF82_SetOffsets(self, _arg)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset2 const

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2IVF82_SetOffset(self, offset)

    def GetModifiableOffsets(self):
        r"""GetModifiableOffsets(self) -> itkVectorContainerUCO2"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2IVF82_GetModifiableOffsets(self)

    def GetOffsets(self, *args):
        r"""
        GetOffsets(self) -> itkVectorContainerUCO2
        GetOffsets(self) -> itkVectorContainerUCO2
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2IVF82_GetOffsets(self, *args)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2IVF82_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2IVF82_GetNumberOfBinsPerAxis(self)

    def GetHistogramMaximum(self):
        r"""GetHistogramMaximum(self) -> short"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2IVF82_GetHistogramMaximum(self)

    def SetHistogramMaximum(self, _arg):
        r"""
        SetHistogramMaximum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2IVF82_SetHistogramMaximum(self, _arg)

    def GetHistogramMinimum(self):
        r"""GetHistogramMinimum(self) -> short"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2IVF82_GetHistogramMinimum(self)

    def SetHistogramMinimum(self, _arg):
        r"""
        SetHistogramMinimum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2IVF82_SetHistogramMinimum(self, _arg)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2IVF82_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> unsigned char"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2IVF82_GetInsidePixelValue(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2IVF82_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2IVF82_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2IVF82_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2IVF82_NormalizeOff(self)
    OutputPixelTypeCheck = _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2IVF82_OutputPixelTypeCheck
    
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkCoocurrenceTextureFeaturesImageFilterISS2IVF82

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCoocurrenceTextureFeaturesImageFilterISS2IVF82

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2IVF82_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCoocurrenceTextureFeaturesImageFilterISS2IVF82

        Create a new object of the class itkCoocurrenceTextureFeaturesImageFilterISS2IVF82 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCoocurrenceTextureFeaturesImageFilterISS2IVF82.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCoocurrenceTextureFeaturesImageFilterISS2IVF82.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCoocurrenceTextureFeaturesImageFilterISS2IVF82.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCoocurrenceTextureFeaturesImageFilterISS2IVF82 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS2IVF82_swigregister(itkCoocurrenceTextureFeaturesImageFilterISS2IVF82)

def itkCoocurrenceTextureFeaturesImageFilterISS3IVF83_New():
    return itkCoocurrenceTextureFeaturesImageFilterISS3IVF83.New()

class itkCoocurrenceTextureFeaturesImageFilterISS3IVF83(itkImageToImageFilterISS3IVF83):
    r"""Proxy of C++ itkCoocurrenceTextureFeaturesImageFilterISS3IVF83 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCoocurrenceTextureFeaturesImageFilterISS3IVF83_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3IVF83___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCoocurrenceTextureFeaturesImageFilterISS3IVF83_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3IVF83_Clone(self)

    def SetNeighborhoodRadius(self, _arg):
        r"""
        SetNeighborhoodRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize3

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3IVF83_SetNeighborhoodRadius(self, _arg)

    def GetNeighborhoodRadius(self):
        r"""GetNeighborhoodRadius(self) -> itkSize3"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3IVF83_GetNeighborhoodRadius(self)

    def SetMaskImage(self, _arg):
        r"""
        SetMaskImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageUC3 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3IVF83_SetMaskImage(self, _arg)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageUC3"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3IVF83_GetMaskImage(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO3 *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3IVF83_SetOffsets(self, _arg)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset3 const

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3IVF83_SetOffset(self, offset)

    def GetModifiableOffsets(self):
        r"""GetModifiableOffsets(self) -> itkVectorContainerUCO3"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3IVF83_GetModifiableOffsets(self)

    def GetOffsets(self, *args):
        r"""
        GetOffsets(self) -> itkVectorContainerUCO3
        GetOffsets(self) -> itkVectorContainerUCO3
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3IVF83_GetOffsets(self, *args)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3IVF83_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3IVF83_GetNumberOfBinsPerAxis(self)

    def GetHistogramMaximum(self):
        r"""GetHistogramMaximum(self) -> short"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3IVF83_GetHistogramMaximum(self)

    def SetHistogramMaximum(self, _arg):
        r"""
        SetHistogramMaximum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3IVF83_SetHistogramMaximum(self, _arg)

    def GetHistogramMinimum(self):
        r"""GetHistogramMinimum(self) -> short"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3IVF83_GetHistogramMinimum(self)

    def SetHistogramMinimum(self, _arg):
        r"""
        SetHistogramMinimum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3IVF83_SetHistogramMinimum(self, _arg)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3IVF83_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> unsigned char"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3IVF83_GetInsidePixelValue(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3IVF83_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3IVF83_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3IVF83_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3IVF83_NormalizeOff(self)
    OutputPixelTypeCheck = _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3IVF83_OutputPixelTypeCheck
    
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkCoocurrenceTextureFeaturesImageFilterISS3IVF83

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCoocurrenceTextureFeaturesImageFilterISS3IVF83

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3IVF83_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCoocurrenceTextureFeaturesImageFilterISS3IVF83

        Create a new object of the class itkCoocurrenceTextureFeaturesImageFilterISS3IVF83 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCoocurrenceTextureFeaturesImageFilterISS3IVF83.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCoocurrenceTextureFeaturesImageFilterISS3IVF83.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCoocurrenceTextureFeaturesImageFilterISS3IVF83.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCoocurrenceTextureFeaturesImageFilterISS3IVF83 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS3IVF83_swigregister(itkCoocurrenceTextureFeaturesImageFilterISS3IVF83)

def itkCoocurrenceTextureFeaturesImageFilterISS4IVF84_New():
    return itkCoocurrenceTextureFeaturesImageFilterISS4IVF84.New()

class itkCoocurrenceTextureFeaturesImageFilterISS4IVF84(itkImageToImageFilterISS4IVF84):
    r"""Proxy of C++ itkCoocurrenceTextureFeaturesImageFilterISS4IVF84 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCoocurrenceTextureFeaturesImageFilterISS4IVF84_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4IVF84___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCoocurrenceTextureFeaturesImageFilterISS4IVF84_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4IVF84_Clone(self)

    def SetNeighborhoodRadius(self, _arg):
        r"""
        SetNeighborhoodRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize4

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4IVF84_SetNeighborhoodRadius(self, _arg)

    def GetNeighborhoodRadius(self):
        r"""GetNeighborhoodRadius(self) -> itkSize4"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4IVF84_GetNeighborhoodRadius(self)

    def SetMaskImage(self, _arg):
        r"""
        SetMaskImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageUC4 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4IVF84_SetMaskImage(self, _arg)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageUC4"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4IVF84_GetMaskImage(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO4 *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4IVF84_SetOffsets(self, _arg)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset4 const

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4IVF84_SetOffset(self, offset)

    def GetModifiableOffsets(self):
        r"""GetModifiableOffsets(self) -> itkVectorContainerUCO4"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4IVF84_GetModifiableOffsets(self)

    def GetOffsets(self, *args):
        r"""
        GetOffsets(self) -> itkVectorContainerUCO4
        GetOffsets(self) -> itkVectorContainerUCO4
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4IVF84_GetOffsets(self, *args)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4IVF84_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4IVF84_GetNumberOfBinsPerAxis(self)

    def GetHistogramMaximum(self):
        r"""GetHistogramMaximum(self) -> short"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4IVF84_GetHistogramMaximum(self)

    def SetHistogramMaximum(self, _arg):
        r"""
        SetHistogramMaximum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4IVF84_SetHistogramMaximum(self, _arg)

    def GetHistogramMinimum(self):
        r"""GetHistogramMinimum(self) -> short"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4IVF84_GetHistogramMinimum(self)

    def SetHistogramMinimum(self, _arg):
        r"""
        SetHistogramMinimum(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4IVF84_SetHistogramMinimum(self, _arg)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4IVF84_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> unsigned char"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4IVF84_GetInsidePixelValue(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4IVF84_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4IVF84_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4IVF84_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4IVF84_NormalizeOff(self)
    OutputPixelTypeCheck = _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4IVF84_OutputPixelTypeCheck
    
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkCoocurrenceTextureFeaturesImageFilterISS4IVF84

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCoocurrenceTextureFeaturesImageFilterISS4IVF84

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4IVF84_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCoocurrenceTextureFeaturesImageFilterISS4IVF84

        Create a new object of the class itkCoocurrenceTextureFeaturesImageFilterISS4IVF84 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCoocurrenceTextureFeaturesImageFilterISS4IVF84.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCoocurrenceTextureFeaturesImageFilterISS4IVF84.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCoocurrenceTextureFeaturesImageFilterISS4IVF84.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCoocurrenceTextureFeaturesImageFilterISS4IVF84 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterISS4IVF84_swigregister(itkCoocurrenceTextureFeaturesImageFilterISS4IVF84)

def itkCoocurrenceTextureFeaturesImageFilterIUC2IVF82_New():
    return itkCoocurrenceTextureFeaturesImageFilterIUC2IVF82.New()

class itkCoocurrenceTextureFeaturesImageFilterIUC2IVF82(itkImageToImageFilterIUC2IVF82):
    r"""Proxy of C++ itkCoocurrenceTextureFeaturesImageFilterIUC2IVF82 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCoocurrenceTextureFeaturesImageFilterIUC2IVF82_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2IVF82___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCoocurrenceTextureFeaturesImageFilterIUC2IVF82_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2IVF82_Clone(self)

    def SetNeighborhoodRadius(self, _arg):
        r"""
        SetNeighborhoodRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize2

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2IVF82_SetNeighborhoodRadius(self, _arg)

    def GetNeighborhoodRadius(self):
        r"""GetNeighborhoodRadius(self) -> itkSize2"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2IVF82_GetNeighborhoodRadius(self)

    def SetMaskImage(self, _arg):
        r"""
        SetMaskImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageUC2 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2IVF82_SetMaskImage(self, _arg)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageUC2"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2IVF82_GetMaskImage(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO2 *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2IVF82_SetOffsets(self, _arg)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset2 const

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2IVF82_SetOffset(self, offset)

    def GetModifiableOffsets(self):
        r"""GetModifiableOffsets(self) -> itkVectorContainerUCO2"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2IVF82_GetModifiableOffsets(self)

    def GetOffsets(self, *args):
        r"""
        GetOffsets(self) -> itkVectorContainerUCO2
        GetOffsets(self) -> itkVectorContainerUCO2
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2IVF82_GetOffsets(self, *args)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2IVF82_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2IVF82_GetNumberOfBinsPerAxis(self)

    def GetHistogramMaximum(self):
        r"""GetHistogramMaximum(self) -> unsigned char"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2IVF82_GetHistogramMaximum(self)

    def SetHistogramMaximum(self, _arg):
        r"""
        SetHistogramMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2IVF82_SetHistogramMaximum(self, _arg)

    def GetHistogramMinimum(self):
        r"""GetHistogramMinimum(self) -> unsigned char"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2IVF82_GetHistogramMinimum(self)

    def SetHistogramMinimum(self, _arg):
        r"""
        SetHistogramMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2IVF82_SetHistogramMinimum(self, _arg)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2IVF82_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> unsigned char"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2IVF82_GetInsidePixelValue(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2IVF82_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2IVF82_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2IVF82_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2IVF82_NormalizeOff(self)
    OutputPixelTypeCheck = _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2IVF82_OutputPixelTypeCheck
    
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkCoocurrenceTextureFeaturesImageFilterIUC2IVF82

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCoocurrenceTextureFeaturesImageFilterIUC2IVF82

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2IVF82_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCoocurrenceTextureFeaturesImageFilterIUC2IVF82

        Create a new object of the class itkCoocurrenceTextureFeaturesImageFilterIUC2IVF82 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCoocurrenceTextureFeaturesImageFilterIUC2IVF82.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCoocurrenceTextureFeaturesImageFilterIUC2IVF82.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCoocurrenceTextureFeaturesImageFilterIUC2IVF82.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCoocurrenceTextureFeaturesImageFilterIUC2IVF82 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC2IVF82_swigregister(itkCoocurrenceTextureFeaturesImageFilterIUC2IVF82)

def itkCoocurrenceTextureFeaturesImageFilterIUC3IVF83_New():
    return itkCoocurrenceTextureFeaturesImageFilterIUC3IVF83.New()

class itkCoocurrenceTextureFeaturesImageFilterIUC3IVF83(itkImageToImageFilterIUC3IVF83):
    r"""Proxy of C++ itkCoocurrenceTextureFeaturesImageFilterIUC3IVF83 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCoocurrenceTextureFeaturesImageFilterIUC3IVF83_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3IVF83___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCoocurrenceTextureFeaturesImageFilterIUC3IVF83_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3IVF83_Clone(self)

    def SetNeighborhoodRadius(self, _arg):
        r"""
        SetNeighborhoodRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize3

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3IVF83_SetNeighborhoodRadius(self, _arg)

    def GetNeighborhoodRadius(self):
        r"""GetNeighborhoodRadius(self) -> itkSize3"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3IVF83_GetNeighborhoodRadius(self)

    def SetMaskImage(self, _arg):
        r"""
        SetMaskImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageUC3 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3IVF83_SetMaskImage(self, _arg)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageUC3"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3IVF83_GetMaskImage(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO3 *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3IVF83_SetOffsets(self, _arg)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset3 const

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3IVF83_SetOffset(self, offset)

    def GetModifiableOffsets(self):
        r"""GetModifiableOffsets(self) -> itkVectorContainerUCO3"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3IVF83_GetModifiableOffsets(self)

    def GetOffsets(self, *args):
        r"""
        GetOffsets(self) -> itkVectorContainerUCO3
        GetOffsets(self) -> itkVectorContainerUCO3
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3IVF83_GetOffsets(self, *args)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3IVF83_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3IVF83_GetNumberOfBinsPerAxis(self)

    def GetHistogramMaximum(self):
        r"""GetHistogramMaximum(self) -> unsigned char"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3IVF83_GetHistogramMaximum(self)

    def SetHistogramMaximum(self, _arg):
        r"""
        SetHistogramMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3IVF83_SetHistogramMaximum(self, _arg)

    def GetHistogramMinimum(self):
        r"""GetHistogramMinimum(self) -> unsigned char"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3IVF83_GetHistogramMinimum(self)

    def SetHistogramMinimum(self, _arg):
        r"""
        SetHistogramMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3IVF83_SetHistogramMinimum(self, _arg)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3IVF83_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> unsigned char"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3IVF83_GetInsidePixelValue(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3IVF83_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3IVF83_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3IVF83_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3IVF83_NormalizeOff(self)
    OutputPixelTypeCheck = _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3IVF83_OutputPixelTypeCheck
    
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkCoocurrenceTextureFeaturesImageFilterIUC3IVF83

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCoocurrenceTextureFeaturesImageFilterIUC3IVF83

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3IVF83_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCoocurrenceTextureFeaturesImageFilterIUC3IVF83

        Create a new object of the class itkCoocurrenceTextureFeaturesImageFilterIUC3IVF83 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCoocurrenceTextureFeaturesImageFilterIUC3IVF83.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCoocurrenceTextureFeaturesImageFilterIUC3IVF83.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCoocurrenceTextureFeaturesImageFilterIUC3IVF83.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCoocurrenceTextureFeaturesImageFilterIUC3IVF83 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC3IVF83_swigregister(itkCoocurrenceTextureFeaturesImageFilterIUC3IVF83)

def itkCoocurrenceTextureFeaturesImageFilterIUC4IVF84_New():
    return itkCoocurrenceTextureFeaturesImageFilterIUC4IVF84.New()

class itkCoocurrenceTextureFeaturesImageFilterIUC4IVF84(itkImageToImageFilterIUC4IVF84):
    r"""Proxy of C++ itkCoocurrenceTextureFeaturesImageFilterIUC4IVF84 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCoocurrenceTextureFeaturesImageFilterIUC4IVF84_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4IVF84___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCoocurrenceTextureFeaturesImageFilterIUC4IVF84_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4IVF84_Clone(self)

    def SetNeighborhoodRadius(self, _arg):
        r"""
        SetNeighborhoodRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize4

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4IVF84_SetNeighborhoodRadius(self, _arg)

    def GetNeighborhoodRadius(self):
        r"""GetNeighborhoodRadius(self) -> itkSize4"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4IVF84_GetNeighborhoodRadius(self)

    def SetMaskImage(self, _arg):
        r"""
        SetMaskImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageUC4 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4IVF84_SetMaskImage(self, _arg)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageUC4"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4IVF84_GetMaskImage(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO4 *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4IVF84_SetOffsets(self, _arg)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset4 const

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4IVF84_SetOffset(self, offset)

    def GetModifiableOffsets(self):
        r"""GetModifiableOffsets(self) -> itkVectorContainerUCO4"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4IVF84_GetModifiableOffsets(self)

    def GetOffsets(self, *args):
        r"""
        GetOffsets(self) -> itkVectorContainerUCO4
        GetOffsets(self) -> itkVectorContainerUCO4
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4IVF84_GetOffsets(self, *args)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4IVF84_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4IVF84_GetNumberOfBinsPerAxis(self)

    def GetHistogramMaximum(self):
        r"""GetHistogramMaximum(self) -> unsigned char"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4IVF84_GetHistogramMaximum(self)

    def SetHistogramMaximum(self, _arg):
        r"""
        SetHistogramMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4IVF84_SetHistogramMaximum(self, _arg)

    def GetHistogramMinimum(self):
        r"""GetHistogramMinimum(self) -> unsigned char"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4IVF84_GetHistogramMinimum(self)

    def SetHistogramMinimum(self, _arg):
        r"""
        SetHistogramMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4IVF84_SetHistogramMinimum(self, _arg)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4IVF84_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> unsigned char"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4IVF84_GetInsidePixelValue(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4IVF84_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4IVF84_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4IVF84_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4IVF84_NormalizeOff(self)
    OutputPixelTypeCheck = _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4IVF84_OutputPixelTypeCheck
    
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkCoocurrenceTextureFeaturesImageFilterIUC4IVF84

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCoocurrenceTextureFeaturesImageFilterIUC4IVF84

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4IVF84_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCoocurrenceTextureFeaturesImageFilterIUC4IVF84

        Create a new object of the class itkCoocurrenceTextureFeaturesImageFilterIUC4IVF84 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCoocurrenceTextureFeaturesImageFilterIUC4IVF84.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCoocurrenceTextureFeaturesImageFilterIUC4IVF84.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCoocurrenceTextureFeaturesImageFilterIUC4IVF84.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCoocurrenceTextureFeaturesImageFilterIUC4IVF84 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUC4IVF84_swigregister(itkCoocurrenceTextureFeaturesImageFilterIUC4IVF84)

def itkCoocurrenceTextureFeaturesImageFilterIUS2IVF82_New():
    return itkCoocurrenceTextureFeaturesImageFilterIUS2IVF82.New()

class itkCoocurrenceTextureFeaturesImageFilterIUS2IVF82(itkImageToImageFilterIUS2IVF82):
    r"""Proxy of C++ itkCoocurrenceTextureFeaturesImageFilterIUS2IVF82 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCoocurrenceTextureFeaturesImageFilterIUS2IVF82_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2IVF82___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCoocurrenceTextureFeaturesImageFilterIUS2IVF82_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2IVF82_Clone(self)

    def SetNeighborhoodRadius(self, _arg):
        r"""
        SetNeighborhoodRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize2

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2IVF82_SetNeighborhoodRadius(self, _arg)

    def GetNeighborhoodRadius(self):
        r"""GetNeighborhoodRadius(self) -> itkSize2"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2IVF82_GetNeighborhoodRadius(self)

    def SetMaskImage(self, _arg):
        r"""
        SetMaskImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageUC2 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2IVF82_SetMaskImage(self, _arg)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageUC2"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2IVF82_GetMaskImage(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO2 *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2IVF82_SetOffsets(self, _arg)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset2 const

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2IVF82_SetOffset(self, offset)

    def GetModifiableOffsets(self):
        r"""GetModifiableOffsets(self) -> itkVectorContainerUCO2"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2IVF82_GetModifiableOffsets(self)

    def GetOffsets(self, *args):
        r"""
        GetOffsets(self) -> itkVectorContainerUCO2
        GetOffsets(self) -> itkVectorContainerUCO2
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2IVF82_GetOffsets(self, *args)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2IVF82_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2IVF82_GetNumberOfBinsPerAxis(self)

    def GetHistogramMaximum(self):
        r"""GetHistogramMaximum(self) -> unsigned short"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2IVF82_GetHistogramMaximum(self)

    def SetHistogramMaximum(self, _arg):
        r"""
        SetHistogramMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2IVF82_SetHistogramMaximum(self, _arg)

    def GetHistogramMinimum(self):
        r"""GetHistogramMinimum(self) -> unsigned short"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2IVF82_GetHistogramMinimum(self)

    def SetHistogramMinimum(self, _arg):
        r"""
        SetHistogramMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2IVF82_SetHistogramMinimum(self, _arg)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2IVF82_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> unsigned char"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2IVF82_GetInsidePixelValue(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2IVF82_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2IVF82_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2IVF82_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2IVF82_NormalizeOff(self)
    OutputPixelTypeCheck = _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2IVF82_OutputPixelTypeCheck
    
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkCoocurrenceTextureFeaturesImageFilterIUS2IVF82

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCoocurrenceTextureFeaturesImageFilterIUS2IVF82

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2IVF82_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCoocurrenceTextureFeaturesImageFilterIUS2IVF82

        Create a new object of the class itkCoocurrenceTextureFeaturesImageFilterIUS2IVF82 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCoocurrenceTextureFeaturesImageFilterIUS2IVF82.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCoocurrenceTextureFeaturesImageFilterIUS2IVF82.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCoocurrenceTextureFeaturesImageFilterIUS2IVF82.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCoocurrenceTextureFeaturesImageFilterIUS2IVF82 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS2IVF82_swigregister(itkCoocurrenceTextureFeaturesImageFilterIUS2IVF82)

def itkCoocurrenceTextureFeaturesImageFilterIUS3IVF83_New():
    return itkCoocurrenceTextureFeaturesImageFilterIUS3IVF83.New()

class itkCoocurrenceTextureFeaturesImageFilterIUS3IVF83(itkImageToImageFilterIUS3IVF83):
    r"""Proxy of C++ itkCoocurrenceTextureFeaturesImageFilterIUS3IVF83 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCoocurrenceTextureFeaturesImageFilterIUS3IVF83_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3IVF83___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCoocurrenceTextureFeaturesImageFilterIUS3IVF83_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3IVF83_Clone(self)

    def SetNeighborhoodRadius(self, _arg):
        r"""
        SetNeighborhoodRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize3

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3IVF83_SetNeighborhoodRadius(self, _arg)

    def GetNeighborhoodRadius(self):
        r"""GetNeighborhoodRadius(self) -> itkSize3"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3IVF83_GetNeighborhoodRadius(self)

    def SetMaskImage(self, _arg):
        r"""
        SetMaskImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageUC3 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3IVF83_SetMaskImage(self, _arg)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageUC3"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3IVF83_GetMaskImage(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO3 *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3IVF83_SetOffsets(self, _arg)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset3 const

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3IVF83_SetOffset(self, offset)

    def GetModifiableOffsets(self):
        r"""GetModifiableOffsets(self) -> itkVectorContainerUCO3"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3IVF83_GetModifiableOffsets(self)

    def GetOffsets(self, *args):
        r"""
        GetOffsets(self) -> itkVectorContainerUCO3
        GetOffsets(self) -> itkVectorContainerUCO3
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3IVF83_GetOffsets(self, *args)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3IVF83_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3IVF83_GetNumberOfBinsPerAxis(self)

    def GetHistogramMaximum(self):
        r"""GetHistogramMaximum(self) -> unsigned short"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3IVF83_GetHistogramMaximum(self)

    def SetHistogramMaximum(self, _arg):
        r"""
        SetHistogramMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3IVF83_SetHistogramMaximum(self, _arg)

    def GetHistogramMinimum(self):
        r"""GetHistogramMinimum(self) -> unsigned short"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3IVF83_GetHistogramMinimum(self)

    def SetHistogramMinimum(self, _arg):
        r"""
        SetHistogramMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3IVF83_SetHistogramMinimum(self, _arg)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3IVF83_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> unsigned char"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3IVF83_GetInsidePixelValue(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3IVF83_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3IVF83_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3IVF83_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3IVF83_NormalizeOff(self)
    OutputPixelTypeCheck = _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3IVF83_OutputPixelTypeCheck
    
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkCoocurrenceTextureFeaturesImageFilterIUS3IVF83

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCoocurrenceTextureFeaturesImageFilterIUS3IVF83

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3IVF83_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCoocurrenceTextureFeaturesImageFilterIUS3IVF83

        Create a new object of the class itkCoocurrenceTextureFeaturesImageFilterIUS3IVF83 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCoocurrenceTextureFeaturesImageFilterIUS3IVF83.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCoocurrenceTextureFeaturesImageFilterIUS3IVF83.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCoocurrenceTextureFeaturesImageFilterIUS3IVF83.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCoocurrenceTextureFeaturesImageFilterIUS3IVF83 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS3IVF83_swigregister(itkCoocurrenceTextureFeaturesImageFilterIUS3IVF83)

def itkCoocurrenceTextureFeaturesImageFilterIUS4IVF84_New():
    return itkCoocurrenceTextureFeaturesImageFilterIUS4IVF84.New()

class itkCoocurrenceTextureFeaturesImageFilterIUS4IVF84(itkImageToImageFilterIUS4IVF84):
    r"""Proxy of C++ itkCoocurrenceTextureFeaturesImageFilterIUS4IVF84 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCoocurrenceTextureFeaturesImageFilterIUS4IVF84_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4IVF84___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCoocurrenceTextureFeaturesImageFilterIUS4IVF84_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4IVF84_Clone(self)

    def SetNeighborhoodRadius(self, _arg):
        r"""
        SetNeighborhoodRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize4

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4IVF84_SetNeighborhoodRadius(self, _arg)

    def GetNeighborhoodRadius(self):
        r"""GetNeighborhoodRadius(self) -> itkSize4"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4IVF84_GetNeighborhoodRadius(self)

    def SetMaskImage(self, _arg):
        r"""
        SetMaskImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageUC4 const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4IVF84_SetMaskImage(self, _arg)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageUC4"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4IVF84_GetMaskImage(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO4 *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4IVF84_SetOffsets(self, _arg)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset4 const

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4IVF84_SetOffset(self, offset)

    def GetModifiableOffsets(self):
        r"""GetModifiableOffsets(self) -> itkVectorContainerUCO4"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4IVF84_GetModifiableOffsets(self)

    def GetOffsets(self, *args):
        r"""
        GetOffsets(self) -> itkVectorContainerUCO4
        GetOffsets(self) -> itkVectorContainerUCO4
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4IVF84_GetOffsets(self, *args)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4IVF84_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4IVF84_GetNumberOfBinsPerAxis(self)

    def GetHistogramMaximum(self):
        r"""GetHistogramMaximum(self) -> unsigned short"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4IVF84_GetHistogramMaximum(self)

    def SetHistogramMaximum(self, _arg):
        r"""
        SetHistogramMaximum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4IVF84_SetHistogramMaximum(self, _arg)

    def GetHistogramMinimum(self):
        r"""GetHistogramMinimum(self) -> unsigned short"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4IVF84_GetHistogramMinimum(self)

    def SetHistogramMinimum(self, _arg):
        r"""
        SetHistogramMinimum(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4IVF84_SetHistogramMinimum(self, _arg)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4IVF84_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> unsigned char"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4IVF84_GetInsidePixelValue(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4IVF84_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4IVF84_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4IVF84_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4IVF84_NormalizeOff(self)
    OutputPixelTypeCheck = _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4IVF84_OutputPixelTypeCheck
    
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkCoocurrenceTextureFeaturesImageFilterIUS4IVF84

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCoocurrenceTextureFeaturesImageFilterIUS4IVF84

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4IVF84_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCoocurrenceTextureFeaturesImageFilterIUS4IVF84

        Create a new object of the class itkCoocurrenceTextureFeaturesImageFilterIUS4IVF84 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCoocurrenceTextureFeaturesImageFilterIUS4IVF84.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCoocurrenceTextureFeaturesImageFilterIUS4IVF84.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCoocurrenceTextureFeaturesImageFilterIUS4IVF84.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCoocurrenceTextureFeaturesImageFilterIUS4IVF84 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkCoocurrenceTextureFeaturesImageFilterIUS4IVF84_swigregister(itkCoocurrenceTextureFeaturesImageFilterIUS4IVF84)

def itkImageFileReaderIVF82_New():
    return itkImageFileReaderIVF82.New()

class itkImageFileReaderIVF82(itkImageSourceIVF82):
    r"""Proxy of C++ itkImageFileReaderIVF82 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageFileReaderIVF82_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF82___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageFileReaderIVF82_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF82_Clone(self)

    def SetFileNameInput(self, _arg):
        r"""
        SetFileNameInput(self, _arg)

        Parameters
        ----------
        _arg: itkSimpleDataObjectDecoratorstring const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF82_SetFileNameInput(self, _arg)

    def SetFileName(self, *args):
        r"""
        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: itkSimpleDataObjectDecoratorstring const *

        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: std::string const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF82_SetFileName(self, *args)

    def GetFileNameInput(self):
        r"""GetFileNameInput(self) -> itkSimpleDataObjectDecoratorstring"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF82_GetFileNameInput(self)

    def GetFileName(self):
        r"""GetFileName(self) -> std::string const &"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF82_GetFileName(self)

    def SetImageIO(self, imageIO):
        r"""
        SetImageIO(self, imageIO)

        Parameters
        ----------
        imageIO: itk::ImageIOBase *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF82_SetImageIO(self, imageIO)

    def GetModifiableImageIO(self):
        r"""GetModifiableImageIO(self) -> itk::ImageIOBase *"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF82_GetModifiableImageIO(self)

    def GetImageIO(self, *args):
        r"""
        GetImageIO(self) -> itk::ImageIOBase const
        GetImageIO(self) -> itk::ImageIOBase *
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF82_GetImageIO(self, *args)

    def SetUseStreaming(self, _arg):
        r"""
        SetUseStreaming(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF82_SetUseStreaming(self, _arg)

    def GetUseStreaming(self):
        r"""GetUseStreaming(self) -> bool const &"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF82_GetUseStreaming(self)

    def UseStreamingOn(self):
        r"""UseStreamingOn(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF82_UseStreamingOn(self)

    def UseStreamingOff(self):
        r"""UseStreamingOff(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF82_UseStreamingOff(self)
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkImageFileReaderIVF82

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFileReaderIVF82

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF82_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderIVF82

        Create a new object of the class itkImageFileReaderIVF82 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderIVF82.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderIVF82.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderIVF82.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderIVF82 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF82_swigregister(itkImageFileReaderIVF82)

def itkImageFileReaderIVF83_New():
    return itkImageFileReaderIVF83.New()

class itkImageFileReaderIVF83(itkImageSourceIVF83):
    r"""Proxy of C++ itkImageFileReaderIVF83 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageFileReaderIVF83_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF83___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageFileReaderIVF83_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF83_Clone(self)

    def SetFileNameInput(self, _arg):
        r"""
        SetFileNameInput(self, _arg)

        Parameters
        ----------
        _arg: itkSimpleDataObjectDecoratorstring const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF83_SetFileNameInput(self, _arg)

    def SetFileName(self, *args):
        r"""
        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: itkSimpleDataObjectDecoratorstring const *

        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: std::string const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF83_SetFileName(self, *args)

    def GetFileNameInput(self):
        r"""GetFileNameInput(self) -> itkSimpleDataObjectDecoratorstring"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF83_GetFileNameInput(self)

    def GetFileName(self):
        r"""GetFileName(self) -> std::string const &"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF83_GetFileName(self)

    def SetImageIO(self, imageIO):
        r"""
        SetImageIO(self, imageIO)

        Parameters
        ----------
        imageIO: itk::ImageIOBase *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF83_SetImageIO(self, imageIO)

    def GetModifiableImageIO(self):
        r"""GetModifiableImageIO(self) -> itk::ImageIOBase *"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF83_GetModifiableImageIO(self)

    def GetImageIO(self, *args):
        r"""
        GetImageIO(self) -> itk::ImageIOBase const
        GetImageIO(self) -> itk::ImageIOBase *
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF83_GetImageIO(self, *args)

    def SetUseStreaming(self, _arg):
        r"""
        SetUseStreaming(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF83_SetUseStreaming(self, _arg)

    def GetUseStreaming(self):
        r"""GetUseStreaming(self) -> bool const &"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF83_GetUseStreaming(self)

    def UseStreamingOn(self):
        r"""UseStreamingOn(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF83_UseStreamingOn(self)

    def UseStreamingOff(self):
        r"""UseStreamingOff(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF83_UseStreamingOff(self)
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkImageFileReaderIVF83

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFileReaderIVF83

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF83_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderIVF83

        Create a new object of the class itkImageFileReaderIVF83 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderIVF83.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderIVF83.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderIVF83.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderIVF83 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF83_swigregister(itkImageFileReaderIVF83)

def itkImageFileReaderIVF84_New():
    return itkImageFileReaderIVF84.New()

class itkImageFileReaderIVF84(itkImageSourceIVF84):
    r"""Proxy of C++ itkImageFileReaderIVF84 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageFileReaderIVF84_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF84___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageFileReaderIVF84_Pointer"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF84_Clone(self)

    def SetFileNameInput(self, _arg):
        r"""
        SetFileNameInput(self, _arg)

        Parameters
        ----------
        _arg: itkSimpleDataObjectDecoratorstring const *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF84_SetFileNameInput(self, _arg)

    def SetFileName(self, *args):
        r"""
        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: itkSimpleDataObjectDecoratorstring const *

        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: std::string const &

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF84_SetFileName(self, *args)

    def GetFileNameInput(self):
        r"""GetFileNameInput(self) -> itkSimpleDataObjectDecoratorstring"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF84_GetFileNameInput(self)

    def GetFileName(self):
        r"""GetFileName(self) -> std::string const &"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF84_GetFileName(self)

    def SetImageIO(self, imageIO):
        r"""
        SetImageIO(self, imageIO)

        Parameters
        ----------
        imageIO: itk::ImageIOBase *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF84_SetImageIO(self, imageIO)

    def GetModifiableImageIO(self):
        r"""GetModifiableImageIO(self) -> itk::ImageIOBase *"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF84_GetModifiableImageIO(self)

    def GetImageIO(self, *args):
        r"""
        GetImageIO(self) -> itk::ImageIOBase const
        GetImageIO(self) -> itk::ImageIOBase *
        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF84_GetImageIO(self, *args)

    def SetUseStreaming(self, _arg):
        r"""
        SetUseStreaming(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF84_SetUseStreaming(self, _arg)

    def GetUseStreaming(self):
        r"""GetUseStreaming(self) -> bool const &"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF84_GetUseStreaming(self)

    def UseStreamingOn(self):
        r"""UseStreamingOn(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF84_UseStreamingOn(self)

    def UseStreamingOff(self):
        r"""UseStreamingOff(self)"""
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF84_UseStreamingOff(self)
    __swig_destroy__ = _itkCoocurrenceTextureFeaturesImageFilterPython.delete_itkImageFileReaderIVF84

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFileReaderIVF84

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF84_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderIVF84

        Create a new object of the class itkImageFileReaderIVF84 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderIVF84.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderIVF84.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderIVF84.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderIVF84 in _itkCoocurrenceTextureFeaturesImageFilterPython:
_itkCoocurrenceTextureFeaturesImageFilterPython.itkImageFileReaderIVF84_swigregister(itkImageFileReaderIVF84)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def image_to_image_filter(*args: itkt.ImageLike, **kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ImageToImageFilter"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ImageToImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def image_to_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.TextureFeatures.ImageToImageFilter
    image_to_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    image_to_image_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def image_file_reader(*args,  file_name_input=..., file_name: str=..., image_io=..., use_streaming: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ImageFileReader"""
    import itk

    kwarg_typehints = { 'file_name_input':file_name_input,'file_name':file_name,'image_io':image_io,'use_streaming':use_streaming }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ImageFileReader.New(*args, **kwargs)

    return instance.__internal_call__()

def image_file_reader_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.TextureFeatures.ImageFileReader
    image_file_reader.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    image_file_reader.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def coocurrence_texture_features_image_filter(*args: itkt.ImageLike,  neighborhood_radius: Sequence[int]=..., mask_image: itkt.Image=..., offsets: Sequence[Sequence[int]]=..., offset: Sequence[int]=..., number_of_bins_per_axis: int=..., histogram_maximum: int=..., histogram_minimum: int=..., inside_pixel_value: int=..., normalize: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for CoocurrenceTextureFeaturesImageFilter"""
    import itk

    kwarg_typehints = { 'neighborhood_radius':neighborhood_radius,'mask_image':mask_image,'offsets':offsets,'offset':offset,'number_of_bins_per_axis':number_of_bins_per_axis,'histogram_maximum':histogram_maximum,'histogram_minimum':histogram_minimum,'inside_pixel_value':inside_pixel_value,'normalize':normalize }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.CoocurrenceTextureFeaturesImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def coocurrence_texture_features_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.TextureFeatures.CoocurrenceTextureFeaturesImageFilter
    coocurrence_texture_features_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    coocurrence_texture_features_image_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def image_source(*args, **kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ImageSource"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ImageSource.New(*args, **kwargs)

    return instance.__internal_call__()

def image_source_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.TextureFeatures.ImageSource
    image_source.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    image_source.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def image_file_writer(*args,  file_name: str=..., image_io=..., io_region=..., number_of_stream_divisions: int=..., use_compression: bool=..., compression_level: int=..., use_input_meta_data_dictionary: bool=...,**kwargs):
    """Functional interface for ImageFileWriter"""
    import itk

    kwarg_typehints = { 'file_name':file_name,'image_io':image_io,'io_region':io_region,'number_of_stream_divisions':number_of_stream_divisions,'use_compression':use_compression,'compression_level':compression_level,'use_input_meta_data_dictionary':use_input_meta_data_dictionary }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ImageFileWriter.New(*args, **kwargs)

    return instance.__internal_call__()

def image_file_writer_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.TextureFeatures.ImageFileWriter
    image_file_writer.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    image_file_writer.__doc__ = filter_object.__doc__



