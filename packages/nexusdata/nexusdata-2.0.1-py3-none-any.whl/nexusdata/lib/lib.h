/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package binance_historical_data */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "main.go"

#include <stdlib.h>

typedef struct {
    char **array;  // 指向字符串数组的指针
    int length;    // 数组长度
    char *err;     // 错误信息，成功时为 NULL
} StringArrayResult;

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


/* Return type for DumpDataWithStats */
struct DumpDataWithStats_return {
	int r0;
	char* r1;
};
extern struct DumpDataWithStats_return DumpDataWithStats(char* assetClass, char* dataType, char* dataFrequency, char** tickers, int tickersLen, char* dateStart, char* dateEnd, int maxTickers, char* storeDir);
extern StringArrayResult GetAllTickersWithData(char* assetClass, char* dataType, char* dataFrequency, char* timePeriodPerFile, char* storeDir);
extern void FreeCString(char* ptr);
extern void FreeCStringArray(char** ptr, int size);

/* Return type for GetLocalDirToData */
struct GetLocalDirToData_return {
	char* r0;
	char* r1;
};
extern struct GetLocalDirToData_return GetLocalDirToData(char* assetClass, char* dataType, char* dataFrequency, char* ticker, char* timePeriodPerFile, char* storeDir);
extern char* DeleteOutdatedDailyResults(char* assetClass, char* dataType, char* dataFrequency, char* storeDir);
extern StringArrayResult GetAllDatesWithDataForTicker(char* assetClass, char* dataType, char* dataFrequency, char* ticker, char* timePeriodPerFile, char* storeDir);
extern char* Dump(char* assetClass, char* dataType, char* dataFrequency, char** tickers, int tickersLen, char* dateStart, char* dateEnd, int maxTickers, char* token, int timestamp, char* storeDir, char* platform);

#ifdef __cplusplus
}
#endif
