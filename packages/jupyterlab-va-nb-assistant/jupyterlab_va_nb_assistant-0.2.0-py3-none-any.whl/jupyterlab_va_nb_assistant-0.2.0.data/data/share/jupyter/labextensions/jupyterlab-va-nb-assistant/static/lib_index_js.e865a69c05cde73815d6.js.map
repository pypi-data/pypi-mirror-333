{"version":3,"file":"lib_index_js.e865a69c05cde73815d6.js","mappings":"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","sources":["webpack://jupyterlab-va-nb-assistant/./src/globals.ts","webpack://jupyterlab-va-nb-assistant/./src/handler.ts","webpack://jupyterlab-va-nb-assistant/./src/index.ts","webpack://jupyterlab-va-nb-assistant/./src/style/IconsStyle.ts","webpack://jupyterlab-va-nb-assistant/./src/utils.ts","webpack://jupyterlab-va-nb-assistant/./src/widgets/AboutVoiceAtlas.tsx","webpack://jupyterlab-va-nb-assistant/./src/widgets/ChatlasDropdownMenuWidget.tsx","webpack://jupyterlab-va-nb-assistant/./src/widgets/ChatlasWidget.tsx","webpack://jupyterlab-va-nb-assistant/./src/widgets/EditSettingsWidget.tsx"],"sourcesContent":["// src/globals.ts\nexport const VA_ENDPOINT = \"https://voiceatlas.com\";\nexport const APP_VA_ENDPOINT = \"https://app.voiceatlas.com\";\nexport const HELP_VA_ENDPOINT = \"https://help.voiceatlas.com\";\nexport const BOT_VA_ENDPOINT = \"https://bot.voiceatlas.com/v1/chatlas.js\";\n// Puedes exportar tantas variables como necesites\n","import { URLExt } from '@jupyterlab/coreutils';\n\nimport { ServerConnection } from '@jupyterlab/services';\n\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI<T>(\n  endPoint = '',\n  init: RequestInit = {}\n): Promise<T> {\n  // Make request to Jupyter API\n  const settings = ServerConnection.makeSettings();\n  const requestUrl = URLExt.join(\n    settings.baseUrl,\n    'jupyterlab-va-nb-assistant', // API Namespace\n    endPoint\n  );\n\n  let response: Response;\n  try {\n    response = await ServerConnection.makeRequest(requestUrl, init, settings);\n  } catch (error) {\n    throw new ServerConnection.NetworkError(error as any);\n  }\n\n  let data: any = await response.text();\n\n  if (data.length > 0) {\n    try {\n      data = JSON.parse(data);\n    } catch (error) {\n      console.log('Not a JSON response body.', response);\n    }\n  }\n\n  if (!response.ok) {\n    throw new ServerConnection.ResponseError(response, data.message || data);\n  }\n\n  return data;\n}\n","import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\n\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { MainAreaWidget, ToolbarButton } from '@jupyterlab/apputils';\nimport { Menu } from '@lumino/widgets';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport isEqual from \"lodash.isequal\";\nimport { Dialog, showDialog, Notification } from '@jupyterlab/apputils';\nimport { DocumentRegistry } from \"@jupyterlab/docregistry\";\nimport { NotebookPanel, INotebookModel, INotebookTracker } from \"@jupyterlab/notebook\";\nimport { DisposableDelegate, IDisposable } from \"@lumino/disposable\";\n\nimport { ChatlasWidget } from './widgets/ChatlasWidget';\nimport { loadSetting, configureNewAtlas } from './utils';\nimport { aboutVoiceAtlasDialog } from './widgets/AboutVoiceAtlas';\nimport { ChatlasDropdownWidget } from './widgets/ChatlasDropdownMenuWidget';\nimport EditSettingsWidget from './widgets/EditSettingsWidget';\nimport isEmpty from 'lodash.isempty';\n\nimport { HELP_VA_ENDPOINT, APP_VA_ENDPOINT } from \"./globals\";\n\nconst PLUGIN_ID = 'jupyterlab-va-nb-assistant:plugin'\n\nlet globalAtlasId: string | undefined | null = undefined;\nlet globalNotebookName: string;\nlet globalApp: JupyterFrontEnd;\nlet globalPanel: NotebookPanel;\n\n\n/**\n * Initialization data for the jupyterlab-va-nb-assistant extension.\n */\nconst plugin: JupyterFrontEndPlugin<void> = {\n  id: PLUGIN_ID,\n  description: 'A JupyterLab extension.',\n  autoStart: true,\n  requires: [ISettingRegistry, IMainMenu, INotebookTracker],\n  activate\n};\n\nasync function activate(\n  app: JupyterFrontEnd,\n  settingRegistry: ISettingRegistry,\n  mainMenu: IMainMenu,\n  notebookTracker: INotebookTracker,\n  panel: NotebookPanel): Promise<void> {\n  console.log('JupyterLab extension jupyterlab-va-nb-assistant is activated!');\n\n  if (settingRegistry) {\n    Promise.all([app.restored, settingRegistry.load(PLUGIN_ID)])\n      .then(([, setting]) => {\n        loadSetting(setting);\n      }).catch((reason) => {\n        console.error(\n          `Something went wrong when changing the settings.\\n${reason}`\n        );\n      });\n  }\n\n  const { commands } = app;\n  const openChatlas = 'voice-atlas-jlab-ext:openChatlas';\n  const editSettings = 'voice-atlas-jlab-ext:editSettings';\n  const createNewAtlas = 'voice-atlas-jlab-ext:createNewAtlas';\n  const aboutVoiceAtlas = 'voice-atlas-jlab-ext:aboutVoiceAtlas';\n  const helpVoiceAtlas = 'voice-atlas-jlab-ext:helpVoiceAtlas';\n\n  commands.addCommand(openChatlas, {\n    label: 'Open Chatlas',\n    caption: 'Open Chatlas',\n    execute: async () => {\n      let atlasId = ''\n      await Promise.all([settingRegistry.load(PLUGIN_ID)])\n        .then(([setting]) => {\n          atlasId = loadSetting(setting);\n        }).catch((reason) => {\n          console.error(\n            `Something went wrong when getting the current atlas id.\\n${reason}`\n          );\n        });\n\n      if (isEqual(atlasId, \"\")) {\n        atlasId = await configureNewAtlas(settingRegistry, PLUGIN_ID)\n        return;\n      }\n      const content = new ChatlasWidget(atlasId, globalNotebookName)\n      content.title.label = 'Voice Atlas for JupyterLab';\n      const widget = new MainAreaWidget<ChatlasWidget>({ content })\n      app.shell.add(widget, 'main');\n    }\n  });\n\n  commands.addCommand(editSettings, {\n    label: 'Edit Settings',\n    caption: 'Settings',\n    execute: async () => { globalAtlasId ? await configureNewAtlas(settingRegistry, PLUGIN_ID, globalAtlasId) : await configureNewAtlas(settingRegistry, PLUGIN_ID) }\n  });\n\n  commands.addCommand(createNewAtlas, {\n    label: 'Create new atlas',\n    caption: 'Create new atlas.',\n    execute: () => {\n      const url = APP_VA_ENDPOINT;\n      window.open(url);\n    }\n  });\n\n  commands.addCommand(aboutVoiceAtlas, {\n    label: 'About Voice Atlas',\n    caption: 'About Voice Atlas',\n    execute: async () => {\n      const { aboutBody, aboutTitle } = aboutVoiceAtlasDialog();\n      const result = await showDialog({\n        title: aboutTitle,\n        body: aboutBody,\n        buttons: [\n          Dialog.createButton({\n            label: 'Dismiss',\n            className: 'jp-About-button jp-mod-reject jp-mod-styled'\n          })\n        ]\n      });\n\n      if (result.button.accept) {\n        return;\n      }\n    }\n  })\n\n  commands.addCommand(helpVoiceAtlas, {\n    label: 'Help',\n    caption: 'Help.',\n    execute: () => {\n      const url = HELP_VA_ENDPOINT;\n      window.open(url);\n    }\n  });\n\n  const menu = new Menu({ commands: app.commands });\n  menu.title.label = 'NLP'\n\n  menu.addItem({\n    command: createNewAtlas,\n    args: { origin: 'from menu' },\n  });\n\n  menu.addItem({\n    command: editSettings,\n    args: { origin: 'from menu' },\n  });\n\n  menu.addItem({\n    command: openChatlas,\n    args: { origin: 'from menu' },\n  });\n\n  menu.addItem({ type: 'separator' });\n\n  menu.addItem({\n    command: helpVoiceAtlas,\n    args: { origin: 'from menu' },\n  });\n\n  menu.addItem({\n    command: aboutVoiceAtlas,\n    args: { origin: 'from menu' },\n  });\n\n  mainMenu.addMenu(menu, true, { rank: 1000 });\n  app.docRegistry.addWidgetExtension(\"Notebook\", new ButtonExtension());\n\n  notebookTracker.currentChanged.connect(async (_, panel) => {\n    if (panel) {\n      notebookTracker.currentWidget?.update()\n      panel.context.ready.then(async () => {\n        let atlasId = panel.model ? panel.model.metadata['atlas-id'] as string : undefined;\n        globalAtlasId = atlasId;\n        globalNotebookName = panel.title.label.split(\".\")[0];\n        globalPanel = panel;\n\n        if (atlasId) {\n          panel.toolbar.insertItem(11, \"chatlas\", button);\n        }\n        globalApp = app;\n        const chatlasDropdownMenu = new ChatlasDropdownWidget(atlasId)\n        panel.toolbar.insertItem(10, \"chatlasActions\", chatlasDropdownMenu);\n\n        chatlasDropdownMenu.menuOptionChanged.connect(async (_: ChatlasWidget, menuOption: string) => {\n          if (isEqual(menuOption, 'set')) {\n            const newAtlasID = await showDialog({\n              body: new EditSettingsWidget(atlasId || \"\"),\n              buttons: [Dialog.cancelButton(), Dialog.okButton({ label: \"Save\" })],\n              focusNodeSelector: \"input\",\n              title: \"Settings\"\n            })\n\n            if (newAtlasID.button.label === \"Cancel\") {\n              return;\n            }\n\n            if (isEmpty(newAtlasID.value)) {\n              Notification.error(`Please, insert a valid Atlas Id. Visit help.voiceatlas.com for more information.`, { autoClose: 3000 });\n              return;\n            } else {\n              console.log(`Saving Atlas ID => ${newAtlasID.value}`)\n              if (panel.model) {\n                panel.model.metadata['atlas-id'] = newAtlasID.value;\n              }\n              app.commands.execute('docmanager:save')\n              globalAtlasId = newAtlasID.value;\n              panel.toolbar.insertItem(11, \"chatlas\", button);\n            }\n          }\n          if (isEqual(menuOption, 'delete')) {\n            if (panel.model) {\n              delete panel.model.metadata['atlas-id'];\n            }\n            app.commands.execute('docmanager:save')\n            panel.toolbar.layout?.removeWidget(button)\n            globalAtlasId = undefined\n          }\n        })\n      })\n    }\n  })\n}\n\nconst openChatlas = (): void => {\n  console.log(`Calling Chatlas => ${globalAtlasId}`)\n  const content = new ChatlasWidget(globalAtlasId!, globalNotebookName)\n  content.title.label = `Chatlas - ${globalNotebookName}`;\n  const widget = new MainAreaWidget<ChatlasWidget>({ content })\n  widget.id = `chatlas-${globalNotebookName}`\n  console.log(`Current Notebook Panel Info => ${globalPanel.id}`)\n  globalApp.shell.add(widget, 'main');\n}\n\nlet button = new ToolbarButton({\n  label: \"Chatlas\",\n  onClick: openChatlas,\n  tooltip: \"Open Chatlas.\",\n});\n\nexport class ButtonExtension\n  implements DocumentRegistry.IWidgetExtension<NotebookPanel, INotebookModel> {\n  createNew(\n    panel: NotebookPanel,\n    _: DocumentRegistry.IContext<INotebookModel>\n  ): IDisposable {\n    return new DisposableDelegate(() => {\n      button.dispose();\n    });\n  }\n}\n\nexport default plugin;\n","import { LabIcon } from '@jupyterlab/ui-components';\n\nimport voiceAtlasIconSVG from '../../style/voiceatlas_logo.svg';\nimport voiceAtlasWordmarkIconSVG from '../../style/VoiceAtlas_Wordmark.svg'\n\nexport const voiceAtlasIcon = new LabIcon({ name: 'logo', svgstr: voiceAtlasIconSVG });\nexport const voiceAtlasWordmarkIcon = new LabIcon({ name: 'wordmark', svgstr: voiceAtlasWordmarkIconSVG });\n","import { Dialog, showDialog, Notification } from '@jupyterlab/apputils';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport isEmpty from 'lodash.isempty';\nimport { requestAPI } from './handler';\n\nimport { EditSettingsWidget } from \"./widgets/EditSettingsWidget\"\n\nexport function loadSetting(setting: ISettingRegistry.ISettings): string {\n    // Read the settings and convert to the correct type\n    let atlasId = setting.get('atlasId').composite as string;\n    console.log(\n        `Atlas ID Loading Settings = ${atlasId}`\n    );\n    return atlasId;\n}\n\nexport async function configureNewAtlas(settings: ISettingRegistry, pluginId: string, atlasId: string | undefined = undefined, pathToNotebook: string | undefined = undefined): Promise<any> {\n    // Load the current Atlas ID from settings\n    let currentAtlasID;\n\n    if (atlasId) {\n        currentAtlasID = atlasId\n    } else {\n        currentAtlasID = await Promise.all([settings.load(pluginId)])\n            .then(([setting]) => {\n                return loadSetting(setting);\n            }).catch((reason) => {\n                Notification.error(`Could not get the configuration. Please contact the administrator.`, { autoClose: 3000 });\n                console.error(\n                    `Something went wrong when getting the current atlas id.\\n${reason}`\n                );\n            });\n    }\n    console.log(`Atlas ID from Configure Atlas => ${atlasId}`)\n\n    // Pass it to the AtlasIdPrompt to show it in the input\n    const newAtlasID = await showDialog({\n        body: new EditSettingsWidget(currentAtlasID || \"\"),\n        buttons: [Dialog.cancelButton(), Dialog.okButton({ label: \"Save\" })],\n        focusNodeSelector: \"input\",\n        title: \"Settings\"\n    })\n\n    if (newAtlasID.button.label === \"Cancel\") {\n        return;\n    }\n\n    if (isEmpty(newAtlasID.value)) {\n        Notification.error(`Please, insert a valid Atlas Id. Visit help.voiceatlas.com for more information.`, { autoClose: 3000 });\n        return;\n    }\n    if (atlasId) {\n        let action = 'set';\n        const saveNewAtlas = await requestAPI<any>('crud_atlas', {\n            method: 'POST',\n            body: JSON.stringify({ atlasId, action, pathToNotebook })\n        });\n        return saveNewAtlas.atlasId\n    } else {\n        // Save new atlas id in settings\n        let newAtlasId = await Promise.all([settings.load(pluginId)])\n            .then(([setting]) => {\n                setting.set('atlasId', newAtlasID.value)\n                Notification.success('Success', {\n                    autoClose: 3000\n                });\n                return newAtlasID.value\n            }).catch((reason) => {\n                Notification.error(`Could not save the configuration. Please contact the administrator.`, {\n                    autoClose: 3000\n                });\n                console.error(\n                    `Something went wrong when setting a new atlas id.\\n${reason}`\n                );\n            });\n\n        console.log(`New Atlas ID => ${newAtlasId}`)\n    }\n\n}","import * as React from 'react';\n\nimport { voiceAtlasIcon, voiceAtlasWordmarkIcon } from '../style/IconsStyle';\n\nimport { VA_ENDPOINT } from \"../globals\";\n\ninterface IAboutDialog {\n    aboutBody: JSX.Element;\n    aboutTitle: JSX.Element\n}\n\nexport function aboutVoiceAtlasDialog(): IAboutDialog {\n    const versionInfo = (\n        <span className=\"jp-About-version-info\">\n            <span className=\"jp-About-version\">1.0</span>\n        </span>\n    );\n    const aboutTitle = (\n        <span className=\"jp-About-header\">\n            <voiceAtlasIcon.react margin=\"7px 9.5px\" height=\"auto\" width=\"58px\" />\n            <div className=\"jp-About-header-info\">\n                <voiceAtlasWordmarkIcon.react height=\"auto\" width=\"196px\" />\n                {versionInfo}\n            </div>\n        </span>\n    );\n\n    const externalLinks = (\n        <span className=\"jp-About-externalLinks\">\n            <a\n                href='https://voiceatlas.com'\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"jp-Button-flat\"\n            >\n                {\"About Voice Atlas\"}\n            </a>\n        </span>\n    );\n    const copyright = (\n        <span className=\"jp-About-copyright\">\n            {'© 2019-2022 Voice Atlas by Navteca LLC'}\n        </span>\n    );\n    const aboutBody = (\n        <div className=\"jp-About-body\">\n            {externalLinks}\n            {copyright}\n        </div>\n    );\n\n    return { aboutBody, aboutTitle }\n}","import { ReactWidget } from \"@jupyterlab/apputils\";\nimport React, { useState } from 'react';\nimport { HTMLSelect } from '@jupyterlab/ui-components';\nimport { ISignal, Signal } from '@lumino/signaling';\n\ninterface IAtlasIdProps {\n    atlasId: string | undefined;\n    signal: Signal<ChatlasDropdownWidget, string>;\n};\n\nconst ChatlasDropdownMenuComponent = (info: IAtlasIdProps): JSX.Element => {\n    const [selected, setSelected] = useState<string>(\"\");\n\n    function _onSelect(event: React.ChangeEvent<HTMLSelectElement>): void {\n        event.preventDefault();\n        const newValue = event.target.value;\n        setSelected(newValue)\n        info.signal.emit(newValue)\n        console.log(`Selected Option => ${newValue}`)\n    }\n    console.log(`Info => ${info.atlasId}`)\n    const TOOLBAR_CELLTYPE_DROPDOWN_CLASS = 'jp-Notebook-toolbarCellTypeDropdown';\n    const options = [\n        { value: 'set', label: 'Add/Modify Atlas Id' },\n        { value: 'delete', label: 'Remove Chatlas' }\n    ];\n\n    return (\n        <HTMLSelect\n            className={TOOLBAR_CELLTYPE_DROPDOWN_CLASS}\n            onChange={_onSelect}\n            value={selected}\n            aria-label='Chatlas Actions'\n            title='Chatlas Actions'\n        >\n            <option value=\"\" disabled selected>Chatlas Actions</option>\n            {options.map((item, _) => {\n                return <option value={item.value}>{item.label}</option>\n            })}\n        </HTMLSelect>\n    )\n}\n\n\nexport class ChatlasDropdownWidget extends ReactWidget {\n    private _signal = new Signal<this, string>(this);\n\n    public get menuOptionChanged(): ISignal<this, string> {\n        return this._signal;\n    }\n\n    info: IAtlasIdProps = {\n        atlasId: '',\n        signal: this._signal\n    }\n\n    constructor(atlasId: string | undefined) {\n        super()\n        this.info.atlasId = atlasId;\n    }\n\n    render(): JSX.Element {\n        return <ChatlasDropdownMenuComponent {...this.info} />;\n    }\n\n}","import { Widget } from '@lumino/widgets';\nimport { BOT_VA_ENDPOINT } from \"../globals\";\n\nexport class ChatlasWidget extends Widget {\n    constructor(atlasId: string, notebookName: string) {\n        super({ node: ChatlasWidget.createChatlasWidget(atlasId, notebookName) })\n    }\n\n    private static createChatlasWidget(atlasId: string, notebookName: string): HTMLElement {\n        const script = document.createElement('script')\n        script.setAttribute(\"src\", BOT_VA_ENDPOINT)\n        script.setAttribute(\"async\", \"\")\n        document.body.appendChild(script)\n\n        // Verify if custom element already exists\n        // if exists change attribute\n        // else define it\n        const chatlas = document.createElement('app-chatlas')\n        chatlas.setAttribute('name', notebookName)\n        chatlas.setAttribute('id', notebookName)\n        chatlas.setAttribute(\"atlas-id\", atlasId)\n        chatlas.setAttribute(\"full-screen\", \"true\")\n        chatlas.setAttribute(\"voice-enabled\", \"true\")\n        document.body.appendChild(chatlas)\n        return chatlas;\n    }\n}","import { Widget } from '@lumino/widgets';\nimport isEqual from \"lodash.isequal\";\n\nexport class EditSettingsWidget extends Widget {\n    constructor(atlasId: string) {\n        super({ node: EditSettingsWidget.createSettingsWidget(atlasId) });\n    }\n\n    private static createSettingsWidget(atlasId: string): HTMLElement {\n        const body = document.createElement(\"div\");\n        const existingLabel = document.createElement(\"label\");\n        existingLabel.textContent = \"Atlas ID:\";\n\n        const input = document.createElement(\"input\");\n        input.classList.add('input')\n        input.value = isEqual(atlasId, \"\") ? \"\" : atlasId;\n        input.placeholder = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\";\n\n        body.appendChild(existingLabel);\n        body.appendChild(input);\n        return body;\n    }\n\n    get inputNode() {\n        return this.node.getElementsByTagName(\"input\")[0];\n    }\n\n    getValue() {\n        return this.inputNode.value;\n    }\n}\n\nexport default EditSettingsWidget;"],"names":[],"sourceRoot":""}