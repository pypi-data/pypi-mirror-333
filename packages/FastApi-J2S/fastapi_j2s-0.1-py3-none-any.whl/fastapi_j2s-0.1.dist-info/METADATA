Metadata-Version: 2.2
Name: FastApi_J2S
Version: 0.1
Summary: Fast Api With Dictionary
Home-page: https://github.com/staykimin/MFastApi-J2S
Author: KIMIN
Author-email: staykimin@gmail.com
License: MIT
Project-URL: Documentation, https://github.com/staykimin/FastApi-J2S
Project-URL: Funding, https://github.com/staykimin/FastApi-J2S
Project-URL: Say Thanks!, https://saweria.co/staykimin
Project-URL: Source, https://github.com/staykimin/FastApi-J2S
Project-URL: Tracker, https://github.com/staykimin/FastApi-J2S/issues
Keywords: Kimin,FastApi,FastApi-J2S,J2S
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Topic :: Utilities
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: Modul-Wrapper
Requires-Dist: Jinja2
Requires-Dist: mysql-connector-python
Requires-Dist: requests
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: keywords
Dynamic: license
Dynamic: project-url
Dynamic: requires-dist
Dynamic: summary

# Modul-Wrapper

Modul Wrapper Adalah Modul Untuk Menyimpan Semua Library Yang Akan Digunakan Dalam Bentuk Dictionary Guna Menghindari Crash Karena Penamaan Class atau Function Yang Sama Antar Library. 

## Example

Tanpa Menggunakan Deklarasi Khusus
```python
from Modul_Wrapper import Wrap

modul = Wrap(modul_path="modul.json")
datetime = modul.modul['datetime'].datetime.now().strftime("%H:%M")
print(datetime)
```

Menggunakan Deklarasi Khusus
```python
from Modul_Wrapper import Wrap

modul = Wrap(modul_path="modul.json")
datetime = modul.modul['modul_jam'].datetime.now().strftime("%H:%M")
print(datetime)
```
## Konfigurasi Modul


| Field | Description                |
| :-------- | :------------------------- |
| `folder` | Nama Library / Lokasi File Dimana Class / Function Disimpan |
| `file` |  Nama File Library / Class / Function |
| `class` |  Nama Class / Function Yang Akan Dipanggil |
| `defined` |  Akan Disimpan Menggunakan Deklarasi Khusus |

**NB: Jika Field "defined" di isi "" atau di isi Kosong, Maka Yang Untuk Memanggil Library Yang Kita Set Bisa Menggunakan "class"**

## Load / Import Library

Tanpa Menggunakan Deklarasi Khusus
```python
modul = Wrap(modul_path="modul.json")
# modul_path adalah lokasi Dimana Konfigurasi Modul Disimpan

datetime = modul.modul['datetime'].datetime.now().strftime("%H:%M")
# Memanggil Modul Dengan class "datetime" kemudian Panggil Fungsi datetime.now()
print(datetime)

datetime = modul.modul['modul_jam'].datetime.now().strftime("%H:%M")
# Memanggil Modul Dengan defined "datetime" kemudian Panggil Fungsi datetime.now()
print(datetime)
```
