# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: CI

on:
  push:
    branches:
    - main
    - test_ci
    - CK_dev
  pull_request:
    branches:
    - main
    - develop

jobs:
  build:

    runs-on: ubuntu-latest

    env:
      DEBUG_WITH_SSH: false

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.11
      uses: actions/setup-python@v2
      with:
        python-version: "3.11"

# The following command allows to connect to the ci-container via ssh
# very useful for debugging
# source: https://github.com/marketplace/actions/debugging-with-tmate

#     - name: Setup tmate session
#       uses: mxschmitt/action-tmate@v3

    - name: Install pip
      run: |
        python -m pip install uv

    - name: Installing requirements and this package
      run: |
        # install this package
        uv pip install --system -r requirements.txt
        pip install -e .

#    TODO: make this work (see __init__.py)

    - name: get test-data
      run: |
        git clone https://github.com/cknoll/atsds-demo.git

    - name: run all tests
      run: |
        python -m unittest

    - name: run some basic commands
      run: |
        cd atsds-demo
        xaiev --help
        xaiev --version
        xaiev --bootstrap

    - name: create-saliency-maps
      # on the demo dataset this only takes a few seconds
      run: |
        cd atsds-demo
        test ! -e ./XAI_results/simple_cnn_1_1/gradcam/test/00001/mask/000001.png.npy
        xaiev create-saliency-maps --xai-method gradcam --model simple_cnn_1_1 || echo "Command ended with exit code $?"
        test -e ./XAI_results/simple_cnn_1_1/gradcam/test/00001/mask/000001.png.npy || echo "Test-Command ended with exit code $?"
      # for some unknown reason the xaiev command might result in a nonzero exit code

    - name: create-eval-images and test presence of one image
      # takes about 30 seconds
      run: |
        cd atsds-demo
        test ! -e ./XAI_evaluation/simple_cnn_1_1/gradcam/test/occlusion/10/00001/000000.png
        xaiev create-eval-images --xai-method gradcam --model simple_cnn_1_1 || echo "Command ended with exit code $?"
        echo "Command ended with exit code $exit_code"
        test -e ./XAI_evaluation/simple_cnn_1_1/gradcam/test/occlusion/10/00001/000000.png


    - name: do basic evaluation (1) and check result file exists
      # takes about 30 seconds
      run: |
        cd atsds-demo
        test ! -e ./XAI_evaluation/simple_cnn_1_1/gradcam/test/revelation/results.png
        xaiev eval --xai-method gradcam --model simple_cnn_1_1 --eval-method revelation || echo "Command ended with exit code $?"
        test -e ./XAI_evaluation/simple_cnn_1_1/gradcam/test/revelation/results.png


    - name: do basic evaluation (2) and check result file exists
      # takes about 30 seconds
      run: |
        cd atsds-demo
        test ! -e ./XAI_evaluation/simple_cnn_1_1/gradcam/test/occlusion/results.png
        xaiev eval --xai-method gradcam --model simple_cnn_1_1 --eval-method occlusion
        test -e ./XAI_evaluation/simple_cnn_1_1/gradcam/test/occlusion/results.png




    # debugging (set env.DEBUG_WITH_SSH to true (see above))
    - name: Setup tmate session
      if: env.DEBUG_WITH_SSH == 'true'
      id: tmate
      uses: mxschmitt/action-tmate@v3
      with:
        detached: true

    # this exports the ad-hoc ssh-connection address to an text file such that it can be accessed via API
    # this allows to connect to the debugging ssh server without manual copy-pasting

    - name: Capture tmate output
      if: env.DEBUG_WITH_SSH == 'true'
      run: |
          echo $(cat /home/runner/work/_temp/_runner_file_commands/* | grep ::notice::SSH | awk '{print $NF}') > tmate-connection.txt

    - name: Upload tmate logs as artifact
      if: env.DEBUG_WITH_SSH == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: tmate-connection
        path: tmate-connection.txt
