Metadata-Version: 2.2
Name: thingspanel-mcp
Version: 0.1.0
Summary: MCP server for ThingsPanel IoT platform
Home-page: https://github.com/ThingsPanel/thingspanel-mcp
Author: ThingsPanel
Author-email: ThingsPanel <info@thingspanel.com>
License:                                  Apache License
                                   Version 2.0, January 2004
                                http://www.apache.org/licenses/
        
           TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
        
           1. Definitions.
        
              "License" shall mean the terms and conditions for use, reproduction,
              and distribution as defined by Sections 1 through 9 of this document.
        
              "Licensor" shall mean the copyright owner or entity authorized by
              the copyright owner that is granting the License.
        
              "Legal Entity" shall mean the union of the acting entity and all
              other entities that control, are controlled by, or are under common
              control with that entity. For the purposes of this definition,
              "control" means (i) the power, direct or indirect, to cause the
              direction or management of such entity, whether by contract or
              otherwise, or (ii) ownership of fifty percent (50%) or more of the
              outstanding shares, or (iii) beneficial ownership of such entity.
        
              "You" (or "Your") shall mean an individual or Legal Entity
              exercising permissions granted by this License.
        
              "Source" form shall mean the preferred form for making modifications,
              including but not limited to software source code, documentation
              source, and configuration files.
        
              "Object" form shall mean any form resulting from mechanical
              transformation or translation of a Source form, including but
              not limited to compiled object code, generated documentation,
              and conversions to other media types.
        
              "Work" shall mean the work of authorship, whether in Source or
              Object form, made available under the License, as indicated by a
              copyright notice that is included in or attached to the work
              (an example is provided in the Appendix below).
        
              "Derivative Works" shall mean any work, whether in Source or Object
              form, that is based on (or derived from) the Work and for which the
              editorial revisions, annotations, elaborations, or other modifications
              represent, as a whole, an original work of authorship. For the purposes
              of this License, Derivative Works shall not include works that remain
              separable from, or merely link (or bind by name) to the interfaces of,
              the Work and Derivative Works thereof.
        
              "Contribution" shall mean any work of authorship, including
              the original version of the Work and any modifications or additions
              to that Work or Derivative Works thereof, that is intentionally
              submitted to Licensor for inclusion in the Work by the copyright owner
              or by an individual or Legal Entity authorized to submit on behalf of
              the copyright owner. For the purposes of this definition, "submitted"
              means any form of electronic, verbal, or written communication sent
              to the Licensor or its representatives, including but not limited to
              communication on electronic mailing lists, source code control systems,
              and issue tracking systems that are managed by, or on behalf of, the
              Licensor for the purpose of discussing and improving the Work, but
              excluding communication that is conspicuously marked or otherwise
              designated in writing by the copyright owner as "Not a Contribution."
        
              "Contributor" shall mean Licensor and any individual or Legal Entity
              on behalf of whom a Contribution has been received by Licensor and
              subsequently incorporated within the Work.
        
           2. Grant of Copyright License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              copyright license to reproduce, prepare Derivative Works of,
              publicly display, publicly perform, sublicense, and distribute the
              Work and such Derivative Works in Source or Object form.
        
           3. Grant of Patent License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              (except as stated in this section) patent license to make, have made,
              use, offer to sell, sell, import, and otherwise transfer the Work,
              where such license applies only to those patent claims licensable
              by such Contributor that are necessarily infringed by their
              Contribution(s) alone or by combination of their Contribution(s)
              with the Work to which such Contribution(s) was submitted. If You
              institute patent litigation against any entity (including a
              cross-claim or counterclaim in a lawsuit) alleging that the Work
              or a Contribution incorporated within the Work constitutes direct
              or contributory patent infringement, then any patent licenses
              granted to You under this License for that Work shall terminate
              as of the date such litigation is filed.
        
           4. Redistribution. You may reproduce and distribute copies of the
              Work or Derivative Works thereof in any medium, with or without
              modifications, and in Source or Object form, provided that You
              meet the following conditions:
        
              (a) You must give any other recipients of the Work or
                  Derivative Works a copy of this License; and
        
              (b) You must cause any modified files to carry prominent notices
                  stating that You changed the files; and
        
              (c) You must retain, in the Source form of any Derivative Works
                  that You distribute, all copyright, patent, trademark, and
                  attribution notices from the Source form of the Work,
                  excluding those notices that do not pertain to any part of
                  the Derivative Works; and
        
              (d) If the Work includes a "NOTICE" file as part of its
                  distribution, then any Derivative Works that You distribute must
                  include a readable copy of the attribution notices contained
                  within such NOTICE file, excluding those notices that do not
                  pertain to any part of the Derivative Works, in at least one
                  of the following places: within a NOTICE file distributed as part
                  of the Derivative Works; within the Source form or documentation,
                  if provided along with the Derivative Works; or, within a
                  display generated by the Derivative Works, if and wherever such
                  third-party notices normally appear. The contents of the NOTICE
                  file are for informational purposes only and do not modify the
                  License. You may add Your own attribution notices within
                  Derivative Works that You distribute, alongside or as an addendum
                  to the NOTICE text from the Work, provided that such additional
                  attribution notices cannot be construed as modifying the License.
        
              You may add Your own copyright statement to Your modifications and
              may provide additional or different license terms and conditions
              for use, reproduction, or distribution of Your modifications, or
              for any such Derivative Works as a whole, provided Your use,
              reproduction, and distribution of the Work otherwise complies with
              the conditions stated in this License.
        
           5. Submission of Contributions. Unless You explicitly state otherwise,
              any Contribution intentionally submitted for inclusion in the Work
              by You to the Licensor shall be under the terms and conditions of
              this License, without any additional terms or conditions.
              Notwithstanding the above, nothing herein shall supersede or modify
              the terms of any separate license agreement you may have executed
              with Licensor regarding such Contributions.
        
           6. Trademarks. This License does not grant permission to use the trade
              names, trademarks, service marks, or product names of the Licensor,
              except as required for reasonable and customary use in describing the
              origin of the Work and reproducing the content of the NOTICE file.
        
           7. Disclaimer of Warranty. Unless required by applicable law or
              agreed to in writing, Licensor provides the Work (and each
              Contributor provides its Contributions) on an "AS IS" BASIS,
              WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
              implied, including, without limitation, any warranties or conditions
              of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
              PARTICULAR PURPOSE. You are solely responsible for determining the
              appropriateness of using or redistributing the Work and assume any
              risks associated with Your exercise of permissions under this License.
        
           8. Limitation of Liability. In no event and under no legal theory,
              whether in tort (including negligence), contract, or otherwise,
              unless required by applicable law (such as deliberate and grossly
              negligent acts) or agreed to in writing, shall any Contributor be
              liable to You for damages, including any direct, indirect, special,
              incidental, or consequential damages of any character arising as a
              result of this License or out of the use or inability to use the
              Work (including but not limited to damages for loss of goodwill,
              work stoppage, computer failure or malfunction, or any and all
              other commercial damages or losses), even if such Contributor
              has been advised of the possibility of such damages.
        
           9. Accepting Warranty or Additional Liability. While redistributing
              the Work or Derivative Works thereof, You may choose to offer,
              and charge a fee for, acceptance of support, warranty, indemnity,
              or other liability obligations and/or rights consistent with this
              License. However, in accepting such obligations, You may act only
              on Your own behalf and on Your sole responsibility, not on behalf
              of any other Contributor, and only if You agree to indemnify,
              defend, and hold each Contributor harmless for any liability
              incurred by, or claims asserted against, such Contributor by reason
              of your accepting any such warranty or additional liability.
        
           END OF TERMS AND CONDITIONS
        
           Copyright 2024 ThingsPanel
        
           Licensed under the Apache License, Version 2.0 (the "License");
           you may not use this file except in compliance with the License.
           You may obtain a copy of the License at
        
               http://www.apache.org/licenses/LICENSE-2.0
        
           Unless required by applicable law or agreed to in writing, software
           distributed under the License is distributed on an "AS IS" BASIS,
           WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           See the License for the specific language governing permissions and
           limitations under the License. 
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: httpx>=0.28.1
Requires-Dist: mcp[cli]==1.2.1
Requires-Dist: pydantic-settings>=2.7.0
Requires-Dist: pydantic>=2.10.4
Requires-Dist: typer>=0.15.1
Dynamic: author
Dynamic: home-page
Dynamic: requires-python

# ThingsPanel MCP

[![License](https://img.shields.io/badge/license-Apache%202.0-blue.svg)](LICENSE)
[![Python Version](https://img.shields.io/pypi/pyversions/thingspanel-mcp.svg)](https://pypi.org/project/thingspanel-mcp/)
[![PyPI version](https://badge.fury.io/py/thingspanel-mcp.svg)](https://badge.fury.io/py/thingspanel-mcp)

MCP (Model Context Protocol) server for [ThingsPanel](http://thingspanel.io/) IoT platform.

[English](README.md) | [中文](README_CN.md)

This MCP server integrates ThingsPanel IoT platform with AI models like Claude, GPT, and others that support the Model Context Protocol. It provides a standardized way for AI models to:

- Query device information and status from ThingsPanel
- Retrieve historical device data for analysis
- Manage devices (create, update, delete)
- Access product catalogs and templates
- Monitor and respond to alarms and notifications
- Send commands to IoT devices through ThingsPanel

By using this MCP server, AI assistants can directly interact with your IoT devices and data in a secure, controlled manner, enabling powerful use cases like natural language device control, data visualization requests, anomaly detection, and intelligent automation based on device data.

## Who is this for?

### Target Audience

- **IoT Solution Developers**: Engineers and developers who are building solutions on the ThingsPanel IoT platform and want to integrate AI capabilities
- **AI Integration Specialists**: Professionals looking to connect AI models with IoT systems
- **System Administrators**: IT staff responsible for managing IoT infrastructure who want to enable AI-powered analytics and control
- **Product Teams**: Teams building products that combine IoT and AI functionalities

### Problems Solved

- **Integration Complexity**: Eliminates the need to build custom integration between AI models and IoT platforms
- **Standardized Access**: Provides a consistent interface for AI models to interact with IoT data and devices
- **Security Control**: Manages authentication and authorization for AI access to IoT systems
- **Technical Barrier Reduction**: Lowers the technical barrier for adding AI capabilities to existing IoT deployments

### Ideal Use Cases

- **Natural Language IoT Control**: Enable users to control devices using natural language through AI assistants
- **Intelligent Data Analysis**: Allow AI models to access and analyze IoT sensor data for insights
- **Anomaly Detection**: Connect AI models to device data streams for real-time anomaly detection
- **Predictive Maintenance**: Enable AI-driven predictive maintenance by providing access to device history
- **Automated Reporting**: Create systems that can generate reports and visualizations of IoT data on request
- **Operational Optimization**: Use AI to optimize device operations based on historical patterns

## Features

- [x] Device Management
  - [x] List devices with pagination and filtering
  - [x] Get device details by ID
  - [x] Create new devices
  - [x] Update existing devices
  - [x] Delete devices
  - [ ] Batch device operations
  - [ ] Device grouping
- [x] Data Retrieval and Analysis
  - [x] Query historical device data
  - [x] Filter by time range
  - [x] Filter by specific attributes
  - [x] Get latest device data
  - [ ] Statistical analysis of device data
  - [ ] Data visualization endpoints
- [x] Product Management
  - [x] List products with pagination
  - [x] Get product details
  - [ ] Create and update products
  - [ ] Product template management
- [x] Alarm and Notification
  - [x] List device alarms
  - [x] Filter alarms by status, severity, and time
  - [ ] Create and update alarms
  - [ ] Acknowledge and resolve alarms
  - [ ] Configure alarm rules
- [ ] Command and Control
  - [ ] Send commands to devices
  - [ ] Schedule device actions
  - [ ] Batch command operations
- [x] Integration
  - [x] Model Context Protocol (MCP) support
  - [x] Transport options (stdio, SSE)
  - [x] Docker container support
  - [ ] Webhook support
  - [ ] Third-party API integrations

The list of tools is configurable, allowing you to enable or disable specific functionalities based on your needs or context window constraints.

## Installation

```bash
pip install thingspanel-mcp
```

Or install from source:

```bash
git clone https://github.com/yourusername/thingspanel-mcp.git
cd thingspanel-mcp
pip install -e .
```

## Configuration

Configuration is done via environment variables:

- `THINGSPANEL_URL`: ThingsPanel API URL (default: http://thingspanel.io/)
- `THINGSPANEL_API_KEY`: Your ThingsPanel API key

### Setting up your API key

The API key must be set correctly for authentication with the ThingsPanel platform. ThingsPanel uses the `x-api-key` header for authentication.

You can set your API key in several ways:

1. **Environment variable (recommended)**:
   ```bash
   export THINGSPANEL_API_KEY=your_api_key
   ```

2. **Inline with command**:
   ```bash
   THINGSPANEL_API_KEY=your_api_key thingspanel-mcp
   ```

3. **In your .env file**:
   Create a `.env` file in the project directory:
   ```
   THINGSPANEL_URL=http://thingspanel.io/
   THINGSPANEL_API_KEY=your_api_key
   ```

To verify your API key works correctly, you can test it with a direct API call:
```bash
curl -H "x-api-key: your_api_key" http://thingspanel.io/api/v1/device/group/tree
```

## Usage

Start the MCP server:

```bash
thingspanel-mcp
```

This will start the server using stdio for transport by default. You can also use SSE:

```bash
thingspanel-mcp --transport sse
```

To see all available options:

```bash
thingspanel-mcp --help
```

## Docker Usage

You can also run ThingsPanel MCP in a Docker container:

### Using Docker Compose (Recommended)

1. Set your API key in the environment:
   ```bash
   export THINGSPANEL_API_KEY=your_api_key
   ```

2. Start the services:
   ```bash
   docker-compose up -d
   ```

This will start both the ThingsPanel MCP server and the MCP Inspector for debugging.

### Using Docker Directly

1. Build the Docker image:
   ```bash
   docker build -t thingspanel-mcp .
   ```

2. Run the container:
   ```bash
   docker run -p 8000:8000 -e THINGSPANEL_API_KEY=your_api_key thingspanel-mcp
   ```

## Manual Testing

First, make sure you have set the API key as an environment variable:
```bash
export THINGSPANEL_API_KEY="your_api_key"
```

Then start the MCP Inspector. You have two options:

1. Using the built-in inspect command (recommended):
```bash
thingspanel-mcp inspect
```

2. Using npx directly:
```bash
npx @modelcontextprotocol/inspector
```

After starting the Inspector, navigate to http://localhost:5173 in your browser.

#### List Devices
```json
{
    "limit": 10,
    "offset": 0
}
```

#### Get Device Details
```json
{
    "device_id": "your_device_id"
}
```

#### Create Device
```json
{
    "device_data": {
        "deviceNumber": "test-device-001",
        "deviceName": "Test Device 001",
        "protocolType": "MQTT",
        "productId": "your_product_id",
        "description": "This is a test device"
    }
}
```
Expected response:
```json
{
    "code": 200,
    "data": {
        "id": "newly_created_device_id",
        "deviceNumber": "test-device-001",
        "deviceName": "Test Device 001",
        // ... other device details
    }
}
```

#### Update Device
```json
{
    "device_id": "your_device_id",
    "device_data": {
        "deviceName": "Updated Device Name",
        "description": "Updated device description"
    }
}
```
Expected response:
```json
{
    "code": 200,
    "msg": "success"
}
```

#### Delete Device
```json
{
    "device_id": "your_device_id"
}
```
Expected response:
```json
{
    "code": 200,
    "msg": "success"
}
```

## Debugging with MCP Inspector

The MCP Inspector is a useful tool for debugging and testing your MCP server. To use it:

1. Install and run the MCP Inspector:
   ```bash
   npx @modelcontextprotocol/inspector
   ```

2. Access the Inspector at http://localhost:5173

3. Configure the connection in the Inspector UI:
   - Transport Type: STDIO
   - Command: thingspanel-mcp
   - Arguments: (leave empty or add options if needed)

4. Click "Connect" to start testing your MCP server

Alternatively, launch the Inspector with your command directly:
```bash
npx @modelcontextprotocol/inspector -- $(which thingspanel-mcp)
```

## Troubleshooting

### "Not Found" on localhost:8000

If you see a "Not Found" error when accessing http://localhost:8000, this is normal. The MCP server is not designed to be accessed directly through a web browser. It communicates using specific protocols for AI models.

### Port conflicts with MCP Inspector

If you encounter a port conflict error like `Error: listen EADDRINUSE: address already in use :::3000`:

1. Use a different port:
   ```bash
   npx @modelcontextprotocol/inspector --port 3001 -- $(which thingspanel-mcp)
   ```

2. Find and terminate the process using port 3000:
   ```bash
   lsof -i :3000   # On macOS/Linux
   kill [PID]      # Kill the process by its ID
   ```

### Connection errors in MCP Inspector

If you encounter connection errors when trying to connect to your MCP server from the Inspector:

1. Ensure your ThingsPanel MCP server isn't already running in another terminal
2. Check that the command and arguments are correct
3. Make sure all required environment variables are set
4. Try using the full path to Python:
   ```bash
   npx @modelcontextprotocol/inspector -- $(which python) -m thingspanel_mcp
   ```

## Development

1. Clone the repository
2. Install development dependencies: `pip install -e ".[dev,lint]"`
3. Run tests: `pytest`

### Using Makefile

The project includes a Makefile to simplify common tasks:

```bash
make install     # Install development dependencies
make build       # Build the package
make test        # Run tests
make run         # Run the MCP server
make docker-build # Build the Docker image
make docker-run  # Run with Docker Compose
make docker-stop # Stop Docker Compose services
make clean       # Clean build artifacts
```

## License

Apache License 2.0
