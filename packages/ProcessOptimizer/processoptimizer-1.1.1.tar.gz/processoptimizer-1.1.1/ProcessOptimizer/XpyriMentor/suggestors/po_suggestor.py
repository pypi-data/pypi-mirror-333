import logging
from typing import Iterable

import numpy as np
from ProcessOptimizer import Optimizer
from ProcessOptimizer.space import Space

logger = logging.getLogger(__name__)


class OptimizerSuggestor:
    def __init__(
            self,
            space: Space,
            rng: np.random.Generator,
            n_initial_points: int = 0,
            **kwargs
    ):
        # We set the number of initial points to 0 by default, as initial points should
        # be generated by the initial point suggestor.
        self.optimizer = Optimizer(
            dimensions=space,
            n_initial_points=n_initial_points,
            random_state=np.random.RandomState(int(rng.random() * (2**32 - 1))),
            # Optimizer uses a legacy random state object, so we need to convert
            # the numpy random generator to a numpy random state object.
            **kwargs,
        )

    def suggest(
        self, Xi: Iterable[Iterable], yi: Iterable, n_asked: int = 1
    ) -> np.ndarray:
        if Xi != self.optimizer.Xi or yi != self.optimizer.yi:
            self.optimizer.Xi = Xi.copy()
            self.optimizer.yi = yi.copy()
            self.optimizer.update_next()
        point = self.optimizer.ask(n_asked)
        logger.debug(
            "Given Xi = %s and yi = %s, OptimizerSugggestor suggests the point: %s",
            Xi,
            yi,
            point,
        )
        return np.array(point, dtype = object).reshape(n_asked,-1)

    def __str__(self):
        return "Optimizer Suggestor"

    def __repr__(self):
        return (
            f"OptimizerSuggestor(space={self.optimizer.space}, "
            f"rng=..., "
            f"n_initial_points={self.optimizer.n_initial_points_})"
            )
