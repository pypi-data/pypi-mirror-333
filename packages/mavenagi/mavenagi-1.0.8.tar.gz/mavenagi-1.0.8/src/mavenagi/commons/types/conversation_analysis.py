# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from ...core.serialization import FieldMetadata
import pydantic
from .sentiment import Sentiment
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class ConversationAnalysis(UniversalBaseModel):
    user_request: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="userRequest")] = (
        pydantic.Field(default=None)
    )
    """
    Generated user request summary of the conversation
    """

    agent_response: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="agentResponse")] = (
        pydantic.Field(default=None)
    )
    """
    Generated agent response summary of the conversation
    """

    resolution_status: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="resolutionStatus")] = (
        pydantic.Field(default=None)
    )
    """
    Generated resolution status of the conversation
    """

    category: typing.Optional[str] = pydantic.Field(default=None)
    """
    Generated category of the conversation
    """

    sentiment: typing.Optional[Sentiment] = pydantic.Field(default=None)
    """
    Generated sentiment of the conversation
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
