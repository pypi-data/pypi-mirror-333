import flags
import numpy
import pydrake.systems.framework

class LuenbergerObserver(pydrake.systems.framework.LeafSystem):
    def __init__(self, observed_system: pydrake.systems.framework.System, observed_system_context: pydrake.systems.framework.Context, observer_gain: numpy.ndarray[numpy.float64[m, n], flags.f_contiguous]) -> None: ...
    def L(self) -> numpy.ndarray[numpy.float64[m, n]]: ...
    def get_estimated_state_output_port(self) -> pydrake.systems.framework.OutputPort: ...
    def get_observed_system_input_input_port(self) -> pydrake.systems.framework.InputPort: ...
    def get_observed_system_output_input_port(self) -> pydrake.systems.framework.InputPort: ...
    def observer_gain(self) -> numpy.ndarray[numpy.float64[m, n]]: ...

def SteadyStateKalmanFilter(A: numpy.ndarray[numpy.float64[m, n], flags.f_contiguous], C: numpy.ndarray[numpy.float64[m, n], flags.f_contiguous], W: numpy.ndarray[numpy.float64[m, n], flags.f_contiguous], V: numpy.ndarray[numpy.float64[m, n], flags.f_contiguous]) -> numpy.ndarray[numpy.float64[m, n]]: ...
