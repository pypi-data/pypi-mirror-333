# CI to release the project for Linux, Windows, and MacOS
# The purpose of this action is to verify if the release builds are working or not.

name: Preview Release

on:
  push:
    branches:
      - stag
      - main
  pull_request:
    branches:
      - stag
      - main
  workflow_dispatch:

jobs:
  macos:
    runs-on: macos-13
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin
      - name: Build wheels - x86_64
        uses: PyO3/maturin-action@v1
        with:
          target: x86_64
          args: -i python --release --out dist
      - name: Install build wheel - x86_64
        run: |
          pip install --force-reinstall dist/*.whl
          cd ~ && python -c 'import hypern'
      - name: Build wheels - universal2
        uses: PyO3/maturin-action@v1
        with:
          args: -i python --release --target universal2-apple-darwin --out dist
      - name: Install build wheel - universal2
        run: |
          pip install --force-reinstall dist/*_universal2.whl
          cd ~ && python -c 'import hypern'

  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        target: [x64, x86]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.target }}
      - uses: dtolnay/rust-toolchain@stable
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: -i python --release --out dist
      - name: Install build wheel
        shell: bash
        run: |
          pip install --force-reinstall dist/*.whl
          cd ~ && python -c 'import hypern'

  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        target: [x86_64, i686]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Build Wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: -i python${{ matrix.python-version }} --release --out dist
      - name: Install build wheel
        if: matrix.target == 'x86_64'
        run: |
          pip install --force-reinstall dist/*.whl
          cd ~ && python -c 'import hypern'

  linux-cross:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python:
          [
            { version: "3.10", abi: "cp310-cp310" },
            { version: "3.11", abi: "cp311-cp311" },
            { version: "3.12", abi: "cp312-cp312" },
          ]
        target: [aarch64, armv7]
    steps:
      - uses: actions/checkout@v3
      - name: Build Wheels
        uses: PyO3/maturin-action@v1
        env:
          PYO3_CROSS_LIB_DIR: /opt/python/${{ matrix.python.abi }}/lib
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: -i python${{matrix.python.version}} --release --out dist
      - uses: uraimo/run-on-arch-action@v2
        name: Install build wheel
        with:
          arch: ${{ matrix.target }}
          distro: ubuntu20.04
          githubToken: ${{ github.token }}
          dockerRunArgs: |
            --volume "${PWD}/dist:/artifacts"
          install: |
            apt update -y
            apt install -y --no-install-recommends software-properties-common
            add-apt-repository ppa:deadsnakes/ppa
            apt update -y
            apt install -y gcc g++ musl-dev python${{ matrix.python.version }}-dev python${{ matrix.python.version }} python${{ matrix.python.version }}-venv
          run: |
            ls -lrth /artifacts
            PYTHON=python${{ matrix.python.version }}
            $PYTHON --version
            $PYTHON -m venv venv
            source venv/bin/activate
            pip install --upgrade pip setuptools wheel
            pip install --force-reinstall dist/hypern*.whl
            cd ~ && python -c 'import hypern'
