TEMPLATE = {
    "app": {
        "api": {
            "__init__.py": "from fastapi import APIRouter\n\napi_router = APIRouter()\n\nfrom app.api import users, items, admin, ml, health\n\napi_router.include_router(users.router, prefix='/users', tags=['users'])\napi_router.include_router(items.router, prefix='/items', tags=['items'])\napi_router.include_router(admin.router, prefix='/admin', tags=['admin'])\napi_router.include_router(ml.router, prefix='/ml', tags=['machine learning'])\napi_router.include_router(health.router, prefix='/health', tags=['health'])\n",
            "users.py": "from fastapi import APIRouter, Depends, HTTPException, status\nfrom sqlalchemy.orm import Session\nfrom app.schemas.user import UserCreate, UserResponse, UserUpdate\nfrom app.crud.user import create_user, get_users, get_user, update_user, delete_user\nfrom app.utils.dependencies import get_db, get_current_user\n\nrouter = APIRouter()\n\n@router.get('/', response_model=list[UserResponse])\ndef read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    return get_users(db, skip=skip, limit=limit)\n\n@router.post('/', response_model=UserResponse, status_code=status.HTTP_201_CREATED)\ndef register_user(user: UserCreate, db: Session = Depends(get_db)):\n    existing_user = get_user_by_email(db, user.email)\n    if existing_user:\n        raise HTTPException(status_code=400, detail='Email already registered')\n    return create_user(db, user)\n\n@router.get('/{user_id}', response_model=UserResponse)\ndef read_user(user_id: int, db: Session = Depends(get_db)):\n    user = get_user(db, user_id)\n    if not user:\n        raise HTTPException(status_code=404, detail='User not found')\n    return user\n\n@router.put('/{user_id}', response_model=UserResponse)\ndef modify_user(user_id: int, user: UserUpdate, db: Session = Depends(get_db), current_user: dict = Depends(get_current_user)):\n    return update_user(db, user_id, user)\n\n@router.delete('/{user_id}', status_code=status.HTTP_204_NO_CONTENT)\ndef remove_user(user_id: int, db: Session = Depends(get_db), current_user: dict = Depends(get_current_user)):\n    delete_user(db, user_id)\n    return None\n",
            "items.py": "from fastapi import APIRouter, Depends, HTTPException, status\nfrom sqlalchemy.orm import Session\nfrom app.schemas.item import ItemCreate, ItemResponse, ItemUpdate\nfrom app.crud.item import create_item, get_item, get_items, update_item, delete_item\nfrom app.utils.dependencies import get_db, get_current_user\n\nrouter = APIRouter()\n\n@router.get('/', response_model=list[ItemResponse])\ndef read_items(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    return get_items(db, skip=skip, limit=limit)\n\n@router.post('/', response_model=ItemResponse, status_code=status.HTTP_201_CREATED)\ndef add_item(item: ItemCreate, db: Session = Depends(get_db), current_user: dict = Depends(get_current_user)):\n    return create_item(db, item, current_user.get('id'))\n\n@router.get('/{item_id}', response_model=ItemResponse)\ndef read_item(item_id: int, db: Session = Depends(get_db)):\n    item = get_item(db, item_id)\n    if not item:\n        raise HTTPException(status_code=404, detail='Item not found')\n    return item\n\n@router.put('/{item_id}', response_model=ItemResponse)\ndef modify_item(item_id: int, item: ItemUpdate, db: Session = Depends(get_db), current_user: dict = Depends(get_current_user)):\n    return update_item(db, item_id, item)\n\n@router.delete('/{item_id}', status_code=status.HTTP_204_NO_CONTENT)\ndef remove_item(item_id: int, db: Session = Depends(get_db), current_user: dict = Depends(get_current_user)):\n    delete_item(db, item_id)\n    return None\n",
            "admin.py": "from fastapi import APIRouter, Depends, HTTPException, status\nfrom sqlalchemy.orm import Session\nfrom app.schemas.stats import StatsResponse\nfrom app.crud.stats import get_system_stats\nfrom app.utils.dependencies import get_db, get_current_admin_user\n\nrouter = APIRouter()\n\n@router.get('/dashboard', response_model=StatsResponse)\ndef dashboard(db: Session = Depends(get_db), current_user: dict = Depends(get_current_admin_user)):\n    return get_system_stats(db)\n",
            "ml.py": "from fastapi import APIRouter, Depends, HTTPException, BackgroundTasks\nfrom app.schemas.ml import PredictionRequest, PredictionResponse, TrainingRequest, TrainingResponse\nfrom app.services.ml import get_prediction, train_model\nfrom app.utils.dependencies import get_current_user\nfrom app.utils.rate_limit import rate_limit\nfrom app.utils.cache import cached\n\nrouter = APIRouter()\n\n@router.post('/predict/', response_model=PredictionResponse)\n@cached(expire=300)\n@rate_limit(max_calls=100, time_window=3600)\ndef predict(data: PredictionRequest, current_user: dict = Depends(get_current_user)):\n    try:\n        pred = get_prediction(data.features)\n        return pred\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=str(e))\n\n@router.post('/train/', response_model=TrainingResponse)\ndef train(data: TrainingRequest, background_tasks: BackgroundTasks, current_user: dict = Depends(get_current_user)):\n    task_id = train_model(background_tasks, data.dataset_url, data.parameters)\n    return TrainingResponse(task_id=task_id, message='Training started')\n",
            "health.py": "from fastapi import APIRouter, Depends\nfrom sqlalchemy.orm import Session\nfrom app.utils.dependencies import get_db\nfrom app.services.health import check_system\n\nrouter = APIRouter()\n\n@router.get('/liveness')\ndef liveness():\n    return {'status': 'alive'}\n\n@router.get('/readiness')\ndef readiness(db: Session = Depends(get_db)):\n    status = check_system(db)\n    return status\n"
        },
        "schemas": {
            "__init__.py": "",
            "user.py": "from pydantic import BaseModel, EmailStr, Field, validator\nfrom typing import Optional\n\nclass UserBase(BaseModel):\n    email: EmailStr\n    name: str = Field(..., min_length=2, max_length=50)\n\nclass UserCreate(UserBase):\n    password: str = Field(..., min_length=8)\n\n    @validator('password')\n    def validate_password(cls, v):\n        if not any(c.isdigit() for c in v):\n            raise ValueError('Password must include a digit')\n        if not any(c.isupper() for c in v):\n            raise ValueError('Password must include an uppercase letter')\n        return v\n\nclass UserUpdate(BaseModel):\n    email: Optional[EmailStr] = None\n    name: Optional[str] = Field(None, min_length=2, max_length=50)\n    password: Optional[str] = Field(None, min_length=8)\n\n    @validator('password')\n    def validate_password(cls, v):\n        if v is None:\n            return v\n        if not any(c.isdigit() for c in v):\n            raise ValueError('Password must include a digit')\n        if not any(c.isupper() for c in v):\n            raise ValueError('Password must include an uppercase letter')\n        return v\n\nclass UserResponse(UserBase):\n    id: int\n    is_active: bool\n\n    class Config:\n        orm_mode = True\n",
            "item.py": "from pydantic import BaseModel, Field\nfrom typing import Optional\n\nclass ItemBase(BaseModel):\n    title: str = Field(..., min_length=1, max_length=100)\n    description: Optional[str] = Field(None, max_length=1000)\n\nclass ItemCreate(ItemBase):\n    pass\n\nclass ItemUpdate(BaseModel):\n    title: Optional[str] = Field(None, min_length=1, max_length=100)\n    description: Optional[str] = Field(None, max_length=1000)\n\nclass ItemResponse(ItemBase):\n    id: int\n    owner_id: int\n\n    class Config:\n        orm_mode = True\n",
            "ml.py": "from pydantic import BaseModel, Field, HttpUrl\nfrom typing import List, Dict, Any, Optional\n\nclass PredictionRequest(BaseModel):\n    features: List[float]\n\nclass PredictionResponse(BaseModel):\n    prediction: Any\n    confidence: Optional[float] = None\n\nclass TrainingRequest(BaseModel):\n    dataset_url: HttpUrl\n    parameters: Dict[str, Any] = {}\n\nclass TrainingResponse(BaseModel):\n    task_id: str\n    message: str\n",
            "stats.py": "from pydantic import BaseModel\nfrom typing import Dict, Any, List\n\nclass StatsResponse(BaseModel):\n    user_count: int\n    item_count: int\n    active_users_last_day: int\n    active_users_last_week: int\n    active_users_last_month: int\n    system_health: Dict[str, Any]\n    recent_activities: List[Dict[str, Any]]\n"
        },
        "models": {
            "__init__.py": "from sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n",
            "user.py": "from sqlalchemy import Column, Integer, String, Boolean, DateTime\nfrom sqlalchemy.sql import func\nfrom app.models import Base\n\nclass User(Base):\n    __tablename__ = 'users'\n    id = Column(Integer, primary_key=True, index=True)\n    email = Column(String, unique=True, index=True)\n    name = Column(String)\n    hashed_password = Column(String)\n    is_active = Column(Boolean, default=True)\n    is_admin = Column(Boolean, default=False)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\n",
            "item.py": "from sqlalchemy import Column, Integer, String, Text, ForeignKey, DateTime\nfrom sqlalchemy.sql import func\nfrom sqlalchemy.orm import relationship\nfrom app.models import Base\n\nclass Item(Base):\n    __tablename__ = 'items'\n    id = Column(Integer, primary_key=True, index=True)\n    title = Column(String, index=True)\n    description = Column(Text, nullable=True)\n    owner_id = Column(Integer, ForeignKey('users.id'))\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\n    owner = relationship('User')\n",
            "ml_model.pkl": ""
        },
        "crud": {
            "__init__.py": "",
            "user.py": "from sqlalchemy.orm import Session\nfrom app.models.user import User\nfrom app.schemas.user import UserCreate, UserUpdate\nfrom app.services.auth import get_password_hash\n\ndef get_user(db: Session, user_id: int):\n    return db.query(User).filter(User.id == user_id).first()\n\ndef get_user_by_email(db: Session, email: str):\n    return db.query(User).filter(User.email == email).first()\n\ndef get_users(db: Session, skip: int = 0, limit: int = 100):\n    return db.query(User).offset(skip).limit(limit).all()\n\ndef create_user(db: Session, user: UserCreate):\n    hashed_password = get_password_hash(user.password)\n    db_user = User(email=user.email, name=user.name, hashed_password=hashed_password)\n    db.add(db_user)\n    db.commit()\n    db.refresh(db_user)\n    return db_user\n\ndef update_user(db: Session, user_id: int, user: UserUpdate):\n    db_user = get_user(db, user_id)\n    data = user.dict(exclude_unset=True)\n    if 'password' in data:\n        data['hashed_password'] = get_password_hash(data.pop('password'))\n    for key, value in data.items():\n        setattr(db_user, key, value)\n    db.commit()\n    db.refresh(db_user)\n    return db_user\n\ndef delete_user(db: Session, user_id: int):\n    db_user = get_user(db, user_id)\n    db.delete(db_user)\n    db.commit()\n",
            "item.py": "from sqlalchemy.orm import Session\nfrom app.models.item import Item\nfrom app.schemas.item import ItemCreate, ItemUpdate\n\ndef get_item(db: Session, item_id: int):\n    return db.query(Item).filter(Item.id == item_id).first()\n\ndef get_items(db: Session, skip: int = 0, limit: int = 100):\n    return db.query(Item).offset(skip).limit(limit).all()\n\ndef create_item(db: Session, item: ItemCreate, user_id: int):\n    db_item = Item(**item.dict(), owner_id=user_id)\n    db.add(db_item)\n    db.commit()\n    db.refresh(db_item)\n    return db_item\n\ndef update_item(db: Session, item_id: int, item: ItemUpdate):\n    db_item = get_item(db, item_id)\n    data = item.dict(exclude_unset=True)\n    for key, value in data.items():\n        setattr(db_item, key, value)\n    db.commit()\n    db.refresh(db_item)\n    return db_item\n\ndef delete_item(db: Session, item_id: int):\n    db_item = get_item(db, item_id)\n    db.delete(db_item)\n    db.commit()\n",
            "stats.py": "from sqlalchemy.orm import Session\nfrom sqlalchemy import func\nfrom datetime import datetime, timedelta\nfrom app.models.user import User\nfrom app.models.item import Item\nfrom app.services.health import check_all_services\n\ndef get_system_stats(db: Session):\n    now = datetime.utcnow()\n    day_ago = now - timedelta(days=1)\n    week_ago = now - timedelta(weeks=1)\n    month_ago = now - timedelta(days=30)\n    user_count = db.query(func.count(User.id)).scalar()\n    item_count = db.query(func.count(Item.id)).scalar()\n    active_day = db.query(func.count(User.id)).filter(User.updated_at >= day_ago).scalar()\n    active_week = db.query(func.count(User.id)).filter(User.updated_at >= week_ago).scalar()\n    active_month = db.query(func.count(User.id)).filter(User.updated_at >= month_ago).scalar()\n    system_health = check_all_services()\n    recent_activities = [{'type': 'user_created', 'timestamp': now.isoformat(), 'details': 'Sample activity'}]\n    return {'user_count': user_count, 'item_count': item_count, 'active_users_last_day': active_day, 'active_users_last_week': active_week, 'active_users_last_month': active_month, 'system_health': system_health, 'recent_activities': recent_activities}\n"
        },
        "services": {
            "__init__.py": "",
            "auth.py": "from datetime import datetime, timedelta\nfrom typing import Optional\nfrom jose import jwt\nfrom passlib.context import CryptContext\nfrom app.config import settings\n\npwd_context = CryptContext(schemes=['bcrypt'], deprecated='auto')\n\ndef verify_password(plain, hashed):\n    return pwd_context.verify(plain, hashed)\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\ndef create_access_token(data: dict, expires_delta: Optional[timedelta] = None):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + (expires_delta if expires_delta else timedelta(minutes=settings.access_token_expire_minutes))\n    to_encode.update({'exp': expire})\n    encoded = jwt.encode(to_encode, settings.secret_key, algorithm=settings.algorithm)\n    return encoded\n",
            "tasks.py": "from fastapi import BackgroundTasks\nimport uuid\nfrom app.logger import logger\n\ndef send_email(email: str):\n    logger.info(f'Sending email to {email}')\n    return True\n\ndef process_background_task(bg_tasks: BackgroundTasks, task_function, *args, **kwargs):\n    task_id = str(uuid.uuid4())\n    def _run():\n        task_function(*args, **kwargs)\n    bg_tasks.add_task(_run)\n    return task_id\n",
            "ml.py": "from fastapi import BackgroundTasks\nimport uuid\nimport tempfile\nimport os\nimport requests\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nfrom app.models.ml_model import model_registry\nfrom app.logger import logger\n\ndef get_prediction(features: list):\n    try:\n        prediction, confidence = model_registry.predict(features)\n        return {'prediction': prediction, 'confidence': confidence}\n    except Exception as e:\n        logger.error(str(e))\n        raise\n\ndef train_model(background_tasks: BackgroundTasks, dataset_url: str, parameters: dict = {}):\n    task_id = str(uuid.uuid4())\n    _ = train_model_celery(task_id, dataset_url, parameters)\n    return task_id\n\ndef train_model_celery(task_id: str, dataset_url: str, parameters: dict):\n    try:\n        logger.info(f'Starting training with dataset {dataset_url}')\n        response = requests.get(dataset_url)\n        response.raise_for_status()\n        with tempfile.NamedTemporaryFile(delete=False, suffix='.csv') as tmp:\n            tmp.write(response.content)\n            tmp_path = tmp.name\n        try:\n            df = pd.read_csv(tmp_path)\n            if 'target' not in df.columns:\n                raise ValueError(\"Dataset must contain 'target' column\")\n            X = df.drop('target', axis=1)\n            y = df['target']\n            model = RandomForestClassifier(**parameters)\n            model.fit(X, y)\n            model_name = f'model_{task_id}'\n            model_registry.save_model(model, model_name, metadata={'dataset_url': dataset_url})\n            logger.info(f'Training completed for model {model_name}')\n            return {'status': 'completed', 'model_name': model_name}\n        finally:\n            os.remove(tmp_path)\n    except Exception as e:\n        logger.error(f'Training failed: {str(e)}')\n        raise\n"
        },
        "utils": {
            "__init__.py": "",
            "dependencies.py": "from fastapi import Depends\nfrom sqlalchemy.orm import Session\nfrom app.database import SessionLocal\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n",
            "cache.py": "import functools\nimport time\n\ndef cached(expire: int = 300):\n    def decorator(func):\n        cache = {}\n        def wrapper(*args, **kwargs):\n            key = (args, tuple(sorted(kwargs.items())))\n            if key in cache:\n                result, timestamp = cache[key]\n                if time.time() - timestamp < expire:\n                    return result\n            result = func(*args, **kwargs)\n            cache[key] = (result, time.time())\n            return result\n        return wrapper\n    return decorator\n",
            "rate_limit.py": "import time\nfrom functools import wraps\n\ndef rate_limit(max_calls: int, time_window: int):\n    def decorator(func):\n        calls = []\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            nonlocal calls\n            now = time.time()\n            calls = [call for call in calls if now - call < time_window]\n            if len(calls) >= max_calls:\n                raise Exception('Rate limit exceeded')\n            calls.append(now)\n            return func(*args, **kwargs)\n        return wrapper\n    return decorator\n"
        },
        "middleware.py": "from fastapi.middleware.cors import CORSMiddleware\n\ndef add_middlewares(app):\n    app.add_middleware(CORSMiddleware, allow_origins=['*'], allow_credentials=True, allow_methods=['*'], allow_headers=['*'])\n",
        "database.py": "from sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom app.config import settings\n\ndb_engine = create_engine(settings.database_url)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=db_engine)\n",
        "auth.py": "from fastapi.security import OAuth2PasswordBearer\nfrom fastapi import Depends\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl='token')\n\ndef get_current_user(token: str = Depends(oauth2_scheme)):\n    return {'user': 'demo'}\n\ndef get_current_admin_user(token: str = Depends(oauth2_scheme)):\n    return {'user': 'admin'}\n",
        "logger.py": "import logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger('app')\n",
        "config.py": "from pydantic import BaseSettings\n\nclass Settings(BaseSettings):\n    database_url: str = 'sqlite:///./test.db'\n    secret_key: str = 'supersecret'\n    algorithm: str = 'HS256'\n    access_token_expire_minutes: int = 30\n\n    class Config:\n        env_file = '.env'\n\nsettings = Settings()\n",
        "main.py": "from fastapi import FastAPI\nfrom app.api import api_router\nfrom app.middleware import add_middlewares\nfrom app.database import db_engine\nfrom app.models import Base\n\napp = FastAPI()\nadd_middlewares(app)\nBase.metadata.create_all(bind=db_engine)\napp.include_router(api_router, prefix='/api')\n\n@app.get('/')\ndef root():\n    return {'message': 'Enhanced FastAPI App'}\n"
    },
    "tests": {
        "test_main.py": "from fastapi.testclient import TestClient\nfrom app.main import app\n\nclient = TestClient(app)\n\ndef test_root():\n    response = client.get('/')\n    assert response.status_code == 200\n    assert response.json() == {'message': 'Enhanced FastAPI App'}\n",
        "test_users.py": "from fastapi.testclient import TestClient\nfrom app.main import app\n\nclient = TestClient(app)\n\ndef test_get_users():\n    response = client.get('/api/users')\n    assert response.status_code == 200\n    assert 'message' in response.json()\n"
    },
    ".env": "DATABASE_URL=sqlite:///./test.db\nSECRET_KEY=supersecret",
    "requirements.txt": "fastapi\nuvicorn\nsqlalchemy\npydantic\npytest\nhttpx\npandas\nnumpy\nscikit-learn\npython-jose\npasslib[bcrypt]",
    "Dockerfile": "FROM python:3.10\nWORKDIR /app\nCOPY . .\nRUN pip install --no-cache-dir -r requirements.txt\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n",
    "docker-compose.yml": "version: '3.8'\nservices:\n  fastapi:\n    build: .\n    ports:\n      - '8000:8000'\n    environment:\n      - DATABASE_URL=sqlite:///./test.db\n  db:\n    image: postgres:13\n    environment:\n      POSTGRES_USER: user\n      POSTGRES_PASSWORD: password\n      POSTGRES_DB: dbname\n",
    "README.md": "# Enhanced FastAPI Boilerplate\n\nA scalable and enhanced FastAPI project template with authentication, machine learning endpoints, background tasks, caching, rate limiting, and middleware support.\n"
}
