Metadata-Version: 2.2
Name: cmosskillav2
Version: 0.2.2
Summary: Python Terminal Emulator with Enhanced Developer Utilities
Author-email: CMosSkillAV2 Developer <example@example.com>
Project-URL: Homepage, https://github.com/cmosskillav2/cmosskillav2
Project-URL: Bug Tracker, https://github.com/cmosskillav2/cmosskillav2/issues
Classifier: Development Status :: 3 - Alpha
Classifier: Environment :: Console
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Terminals
Classifier: Topic :: Utilities
Requires-Python: >=3.9
Description-Content-Type: text/markdown
Requires-Dist: build>=1.2.2.post1
Requires-Dist: colorama>=0.4.6
Requires-Dist: setuptools>=76.0.0
Requires-Dist: twine>=6.1.0

# CMosSkillAV2 Terminal Emulator

A Python package that provides an enhanced terminal emulator with built-in file operations, Python execution, and developer utilities.

## Features

- **File Operations**: Built-in commands for managing files and directories (cd, ls, mkdir, touch, rm, cat)
- **Python Execution**: Run Python scripts or execute Python code directly in the terminal
- **Package Management**: Manage Python packages with built-in pip integration
- **Syntax Highlighting**: Color-coded output for better readability
- **Tab Completion**: Command and path completion with Tab key
- **Command History**: Navigate through previously entered commands

## Installation

```bash
pip install cmosskillav2
```

## Usage

After installation, you can start the terminal emulator with:

```bash
cmosskillav2
```

Or you can run it as a module:

```bash
python -m cmosskillav2
```

### Auto-Launch Features

CMosSkillAV2 offers two powerful auto-launch capabilities:

#### 1. Auto-Import Launch

When imported in interactive Python sessions, the terminal automatically launches:

```python
# In an interactive Python session
import cmosskillav2  # The terminal will automatically launch
```

You can disable this behavior by setting:

```bash
export CMOSSKILLAV2_AUTO_LAUNCH=0
```

#### 2. Auto-Console Launch

After installation, CMosSkillAV2 automatically activates whenever you start a new Python console/REPL without having to explicitly import it. This makes it instantly available in any Python interactive session.

This works in:
- Standard Python REPL (`python` without arguments)
- Interactive Python sessions (`python -i script.py`)
- IPython and Jupyter environments
- Any Python environment with PYTHONINSPECT set

You can disable the auto-console feature by setting:

```bash
export CMOSSKILLAV2_AUTO_CONSOLE=0
```

Both auto-launch features are especially useful for enhancing Python REPL environments, IPython, and Jupyter notebooks with terminal capabilities.

#### How Auto-Console Works

The package uses Python's `sitecustomize.py` mechanism to detect when Python is started in an interactive mode. It intelligently examines the Python environment to determine if it's appropriate to launch the terminal, avoiding activation during package installation, testing, or when running scripts non-interactively.

#### Debugging Auto-Launch Features

You can enable debugging output for the auto-launch functionality by setting:

```bash
export CMOSSKILLAV2_DEBUG=1
```

This will display detailed information about the Python environment and the decision-making process for auto-launching the terminal.

#### Demo Script

The package includes a demo script that shows how the auto-launch features work:

```bash
# Download the demo script
curl -o demo_autolaunch.py https://raw.githubusercontent.com/cmosskillav2/cmosskillav2/main/demo_autolaunch.py

# Run the demo
python demo_autolaunch.py

# Test interactive mode
python -i demo_autolaunch.py
```

## Available Commands

### File Operations
- `cd [directory]` - Change directory
- `ls [directory]` - List directory contents
- `mkdir [-p] directory` - Create directory
- `touch file [file2 ...]` - Create empty file(s)
- `rm [-r] file_or_directory` - Remove file(s) or directory
- `cat file [file2 ...]` - Display file contents

### Python Execution
- `python script.py [args]` - Execute Python script file
- `>>> [python_code]` - Execute Python code inline
- `pyshell` - Start interactive Python shell

### Package Management
- `pip install package` - Install Python package
- `pip uninstall package` - Uninstall Python package
- `pip list` - List installed packages
- `pip freeze` - Output installed packages in requirements format

### Shell Built-ins
- `help [command]` - Display help for commands
- `exit` or `quit` - Exit the shell
- `clear` - Clear the terminal screen

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.
