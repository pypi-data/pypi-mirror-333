[tool.poetry]
name = "galadriel"
version = "0.0.16"
description = ""
authors = [
    "Kaspar Peterson <kaspar@galadriel.com>",
    "Kristjan Peterson <kristjan@galadriel.com>",
    "Kre≈°imir Grofelnik <kresimir@galadriel.com>",
    "Isaac Reis <isaac@galadriel.com>",
    "Maciej Witowski <maciej@galadriel.com>",
    "Han Zhao <han@galadriel.com>",
]
readme = "README.md"

packages = [{ include = "galadriel" }]

[tool.poetry.dependencies]
python = "^3.10"
openai = "^1.55.3"
pynacl = "^1.5.0"
requests = "2.32.3"
click = { version = "^8.1.7"}
python-dotenv = "^1.0.1"
aiohttp = "^3.10.5"
requests-oauthlib = "^2.0.0"
aiofiles = "^22.0.0"
rich = "^13.9.4"
boto3 = "^1.35.0"
python-json-logger = "^2.0.7"
smolagents = "^1.10.0"
composio-langchain = "^0.6.19"
langchain-community = "^0.3.16"
langchain-openai = "^0.3.6"
faiss-cpu = "^1.10.0"
types-aiofiles = "^24.1.0.20241221"
"discord.py" = "^2.4.0"
pyTelegramBotAPI = "^4.26.0"
solana = "^0.35.0"
solders = "^0.21.0,<0.24.0"
anchorpy = "^0.20.0"
dextools-python = "^0.3.2"
litellm = {version = "^1.58.2"}
gradio = "^5.15.0"
audioop-lts = { version = "^0.2.1", python = "^3.13" }
cryptography = "^44.0.0"
allora_sdk = "^0.2.0"
ruff = { version = "^0.9.6", optional = true }
mypy = { version = "^1.11.2", optional = true }
py = { version = "^1.11.0", optional = true }
pytest = { version = "^8.3.2", optional = true }
pytest-asyncio = { version = "0.24.0", optional = true }
pytest-mock = { version = "^3.14.0", optional = true }
pytest-cov = { version = "^5.0.0", optional = true }
pytest-xprocess = { version = "^0.18.0", optional = true }
twine = { version = "^5.1.1", optional = true }
build = { version = "^1.2.2", optional = true }
types-requests = { version = "^2.32.0.20241016", optional = true }

[tool.poetry.extras]
dev = ["ruff", "mypy", "pytest", "py", "pytest-asyncio", "pytest-mock", "pytest-xprocess", "twine", "build", "types-requests"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
galadriel = "galadriel.cli:galadriel"

[tool.ruff]
line-length = 120
lint.ignore = [
  "F403", # undefined-local-with-import-star
  "E501", # line-too-long
]
lint.select = ["E", "F"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
docstring-code-format = true

[tool.mypy]
ignore_missing_imports = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]