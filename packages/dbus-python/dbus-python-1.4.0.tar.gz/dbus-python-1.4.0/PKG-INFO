Metadata-Version: 2.1
Name: dbus-python
Version: 1.4.0
Summary: Python bindings for libdbus
Keywords: dbus,D-Bus
Maintainer-Email: The D-Bus maintainers <dbus@lists.freedesktop.org>
License: Expat (MIT/X11)
Classifier: Development Status :: 7 - Inactive
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: C
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Topic :: Software Development :: Object Brokering
Project-URL: homepage, http://www.freedesktop.org/wiki/Software/DBusBindings/#python
Project-URL: download, http://dbus.freedesktop.org/releases/dbus-python/
Project-URL: source, https://gitlab.freedesktop.org/dbus/dbus-python/
Project-URL: tracker, https://gitlab.freedesktop.org/dbus/dbus-python/-/issues
Requires-Python: >=3.7
Provides-Extra: doc
Requires-Dist: sphinx; extra == "doc"
Requires-Dist: sphinx_rtd_theme; extra == "doc"
Provides-Extra: test
Requires-Dist: tap.py; extra == "test"
Description-Content-Type: text/x-rst

=======================================
dbus-python_: Python bindings for D-Bus
=======================================

.. _dbus-python: http://www.freedesktop.org/wiki/Software/DBusBindings#python

dbus-python is the original Python binding for ``dbus``, the reference
implementation of the D-Bus protocol.

Online documentation can be found at
<http://dbus.freedesktop.org/doc/dbus-python/>.

Problems and alternatives
=========================

dbus-python might not be the best D-Bus binding for you to use. dbus-python
does not follow the principle of "In the face of ambiguity, refuse the
temptation to guess", and can't be changed to not do so without seriously
breaking compatibility.

In addition, it uses libdbus (which has known problems with multi-threaded
use) and attempts to be main-loop-agnostic (which means you have to select
a suitable main loop for your application).

Alternative ways to get your Python code onto D-Bus include, in no
particular order:

* GDBus, part of the GIO module of `GLib`_, via GObject-Introspection and
  `PyGI`_ (uses the GLib main loop and object model)

* `dasbus`_, a higher-level wrapper around GDBus

* QtDBus, part of `Qt`_, via `PyQt`_ (uses the Qt main loop and object model)

* `dbussy`_, a CTypes wrapper around libdbus using asyncio for event handling

* `dbus-next`_, a pure-Python implementation of the D-Bus protocol
  using asyncio for event handling

* `dbus-fast`_, a fork of dbus-next emphasizing performance

* `jeepney`_, a pure-Python implementation of the D-Bus protocol with
  support for several event loop models

Inclusion in this list is not intended to imply endorsement.

.. _GLib: http://developer.gnome.org/glib/
.. _PyGI: https://live.gnome.org/PyGObject
.. _Qt:   https://www.qt.io
.. _PyQT: http://www.riverbankcomputing.co.uk/software/pyqt/intro
.. _dasbus: https://github.com/rhinstaller/dasbus
.. _dbussy: https://github.com/ldo/dbussy
.. _dbus-fast: https://github.com/bluetooth-devices/dbus-fast
.. _dbus-next: https://github.com/altdesktop/python-dbus-next
.. _jeepney: https://gitlab.com/takluyver/jeepney
