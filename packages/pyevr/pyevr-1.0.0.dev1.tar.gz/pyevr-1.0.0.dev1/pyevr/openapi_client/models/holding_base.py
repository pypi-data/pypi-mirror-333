# coding: utf-8

"""
EVR API

OpenAPI Generator'i jaoks kohandatud EVR API kirjeldus. Kasuta seda juhul, kui spetsifikatsioonile vastava EVR API kirjeldusega ei Ãµnnestu klienti genereerida.

The version of the OpenAPI document: 1.30.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from importlib import import_module
from typing import TYPE_CHECKING, Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Annotated, Self

from pyevr.openapi_client.models.eudr_number import EudrNumber

if TYPE_CHECKING:
    from pyevr.openapi_client.models.consolidated_act import ConsolidatedAct
    from pyevr.openapi_client.models.contract_for_transfer_of_cutting_rights import (
        ContractForTransferOfCuttingRights,
    )
    from pyevr.openapi_client.models.forest_act import ForestAct
    from pyevr.openapi_client.models.forest_notice import ForestNotice
    from pyevr.openapi_client.models.inventory_act import InventoryAct
    from pyevr.openapi_client.models.sales_contract import SalesContract
    from pyevr.openapi_client.models.without_forest_notice import WithoutForestNotice


class HoldingBase(BaseModel):
    """
    HoldingBase
    """  # noqa: E501

    eudr_numbers: Optional[Annotated[List[EudrNumber], Field(max_length=50)]] = Field(
        default=None,
        description="Euroopa Liidu puidu asukoha registreerimise numbrid",
        alias="eudrNumbers",
    )
    type: StrictStr
    __properties: ClassVar[List[str]] = ["eudrNumbers", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = "type"

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        "ConsolidatedAct": "ConsolidatedAct",
        "ContractForTransferOfCuttingRights": "ContractForTransferOfCuttingRights",
        "ForestAct": "ForestAct",
        "ForestNotice": "ForestNotice",
        "InventoryAct": "InventoryAct",
        "SalesContract": "SalesContract",
        "WithoutForestNotice": "WithoutForestNotice",
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(
        cls, json_str: str
    ) -> Optional[
        Union[
            ConsolidatedAct,
            ContractForTransferOfCuttingRights,
            ForestAct,
            ForestNotice,
            InventoryAct,
            SalesContract,
            WithoutForestNotice,
        ]
    ]:
        """Create an instance of HoldingBase from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in eudr_numbers (list)
        _items = []
        if self.eudr_numbers:
            for _item_eudr_numbers in self.eudr_numbers:
                if _item_eudr_numbers:
                    _items.append(_item_eudr_numbers.to_dict())
            _dict["eudrNumbers"] = _items
        # set to None if eudr_numbers (nullable) is None
        # and model_fields_set contains the field
        if self.eudr_numbers is None and "eudr_numbers" in self.model_fields_set:
            _dict["eudrNumbers"] = None

        return _dict

    @classmethod
    def from_dict(
        cls, obj: Dict[str, Any]
    ) -> Optional[
        Union[
            ConsolidatedAct,
            ContractForTransferOfCuttingRights,
            ForestAct,
            ForestNotice,
            InventoryAct,
            SalesContract,
            WithoutForestNotice,
        ]
    ]:
        """Create an instance of HoldingBase from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type == "ConsolidatedAct":
            return import_module(
                "pyevr.openapi_client.models.consolidated_act"
            ).ConsolidatedAct.from_dict(obj)
        if object_type == "ContractForTransferOfCuttingRights":
            return import_module(
                "pyevr.openapi_client.models.contract_for_transfer_of_cutting_rights"
            ).ContractForTransferOfCuttingRights.from_dict(obj)
        if object_type == "ForestAct":
            return import_module(
                "pyevr.openapi_client.models.forest_act"
            ).ForestAct.from_dict(obj)
        if object_type == "ForestNotice":
            return import_module(
                "pyevr.openapi_client.models.forest_notice"
            ).ForestNotice.from_dict(obj)
        if object_type == "InventoryAct":
            return import_module(
                "pyevr.openapi_client.models.inventory_act"
            ).InventoryAct.from_dict(obj)
        if object_type == "SalesContract":
            return import_module(
                "pyevr.openapi_client.models.sales_contract"
            ).SalesContract.from_dict(obj)
        if object_type == "WithoutForestNotice":
            return import_module(
                "pyevr.openapi_client.models.without_forest_notice"
            ).WithoutForestNotice.from_dict(obj)

        raise ValueError(
            "HoldingBase failed to lookup discriminator value from "
            + json.dumps(obj)
            + ". Discriminator property name: "
            + cls.__discriminator_property_name
            + ", mapping: "
            + json.dumps(cls.__discriminator_value_class_map)
        )
