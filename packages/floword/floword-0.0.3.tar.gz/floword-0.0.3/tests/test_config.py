from inline_snapshot import snapshot


def test_models(client):
    response = client.get("/api/config/models")
    assert response.status_code == 200
    assert response.json() == snapshot({
        "providers": ["openai", "anthropic", "bedrock", "google-vertex", "google-gla", "cohere", "groq", "mistral"],
        "models": {
            "openai": [
                "gpt-3.5-turbo",
                "gpt-3.5-turbo-0125",
                "gpt-3.5-turbo-0301",
                "gpt-3.5-turbo-0613",
                "gpt-3.5-turbo-1106",
                "gpt-3.5-turbo-16k",
                "gpt-3.5-turbo-16k-0613",
                "gpt-4",
                "gpt-4-0125-preview",
                "gpt-4-0314",
                "gpt-4-0613",
                "gpt-4-1106-preview",
                "gpt-4-32k",
                "gpt-4-32k-0314",
                "gpt-4-32k-0613",
                "gpt-4-turbo",
                "gpt-4-turbo-2024-04-09",
                "gpt-4-turbo-preview",
                "gpt-4-vision-preview",
                "gpt-4.5-preview",
                "gpt-4.5-preview-2025-02-27",
                "gpt-4o",
                "gpt-4o-2024-05-13",
                "gpt-4o-2024-08-06",
                "gpt-4o-2024-11-20",
                "gpt-4o-audio-preview",
                "gpt-4o-audio-preview-2024-10-01",
                "gpt-4o-audio-preview-2024-12-17",
                "gpt-4o-mini",
                "gpt-4o-mini-2024-07-18",
                "gpt-4o-mini-audio-preview",
                "gpt-4o-mini-audio-preview-2024-12-17",
                "o1",
                "o1-2024-12-17",
                "o1-mini",
                "o1-mini-2024-09-12",
                "o1-preview",
                "o1-preview-2024-09-12",
                "o3-mini",
                "o3-mini-2025-01-31",
            ],
            "anthropic": [
                "claude-3-7-sonnet-20250219",
                "claude-3-5-haiku-latest",
                "claude-3-5-sonnet-latest",
                "claude-3-opus-latest",
                "claude-3-5-sonnet-latest",
                "claude-3-opus-latest",
            ],
            "bedrock": [
                "amazon.titan-tg1-large",
                "amazon.titan-text-lite-v1",
                "amazon.titan-text-express-v1",
                "us.amazon.nova-pro-v1:0",
                "us.amazon.nova-lite-v1:0",
                "us.amazon.nova-micro-v1:0",
                "anthropic.claude-3-5-sonnet-20241022-v2:0",
                "us.anthropic.claude-3-5-sonnet-20241022-v2:0",
                "anthropic.claude-3-5-haiku-20241022-v1:0",
                "us.anthropic.claude-3-5-haiku-20241022-v1:0",
                "anthropic.claude-instant-v1",
                "anthropic.claude-v2:1",
                "anthropic.claude-v2",
                "anthropic.claude-3-sonnet-20240229-v1:0",
                "us.anthropic.claude-3-sonnet-20240229-v1:0",
                "anthropic.claude-3-haiku-20240307-v1:0",
                "us.anthropic.claude-3-haiku-20240307-v1:0",
                "anthropic.claude-3-opus-20240229-v1:0",
                "us.anthropic.claude-3-opus-20240229-v1:0",
                "anthropic.claude-3-5-sonnet-20240620-v1:0",
                "us.anthropic.claude-3-5-sonnet-20240620-v1:0",
                "anthropic.claude-3-7-sonnet-20250219-v1:0",
                "us.anthropic.claude-3-7-sonnet-20250219-v1:0",
                "cohere.command-text-v14",
                "cohere.command-r-v1:0",
                "cohere.command-r-plus-v1:0",
                "cohere.command-light-text-v14",
                "meta.llama3-8b-instruct-v1:0",
                "meta.llama3-70b-instruct-v1:0",
                "meta.llama3-1-8b-instruct-v1:0",
                "us.meta.llama3-1-8b-instruct-v1:0",
                "meta.llama3-1-70b-instruct-v1:0",
                "us.meta.llama3-1-70b-instruct-v1:0",
                "meta.llama3-1-405b-instruct-v1:0",
                "us.meta.llama3-2-11b-instruct-v1:0",
                "us.meta.llama3-2-90b-instruct-v1:0",
                "us.meta.llama3-2-1b-instruct-v1:0",
                "us.meta.llama3-2-3b-instruct-v1:0",
                "us.meta.llama3-3-70b-instruct-v1:0",
                "mistral.mistral-7b-instruct-v0:2",
                "mistral.mixtral-8x7b-instruct-v0:1",
                "mistral.mistral-large-2402-v1:0",
                "mistral.mistral-large-2407-v1:0",
            ],
            "cohere": [
                "c4ai-aya-expanse-32b",
                "c4ai-aya-expanse-8b",
                "command",
                "command-light",
                "command-light-nightly",
                "command-nightly",
                "command-r",
                "command-r-03-2024",
                "command-r-08-2024",
                "command-r-plus",
                "command-r-plus-04-2024",
                "command-r-plus-08-2024",
                "command-r7b-12-2024",
            ],
            "google-gla": [
                "gemini-1.0-pro",
                "gemini-1.5-flash",
                "gemini-1.5-flash-8b",
                "gemini-1.5-pro",
                "gemini-2.0-flash-exp",
                "gemini-2.0-flash-thinking-exp-01-21",
                "gemini-exp-1206",
                "gemini-2.0-flash",
                "gemini-2.0-flash-lite-preview-02-05",
            ],
            "google-vertex": [
                "gemini-1.0-pro",
                "gemini-1.5-flash",
                "gemini-1.5-flash-8b",
                "gemini-1.5-pro",
                "gemini-2.0-flash-exp",
                "gemini-2.0-flash-thinking-exp-01-21",
                "gemini-exp-1206",
                "gemini-2.0-flash",
                "gemini-2.0-flash-lite-preview-02-05",
            ],
            "groq": [
                "gemma2-9b-it",
                "llama-3.1-8b-instant",
                "llama-3.2-11b-vision-preview",
                "llama-3.2-1b-preview",
                "llama-3.2-3b-preview",
                "llama-3.2-90b-vision-preview",
                "llama-3.3-70b-specdec",
                "llama-3.3-70b-versatile",
                "llama3-70b-8192",
                "llama3-8b-8192",
                "mixtral-8x7b-32768",
            ],
            "mistral": [
                "codestral-latest",
                "mistral-large-latest",
                "mistral-moderation-latest",
                "mistral-small-latest",
            ],
        },
    })


def test_mcp(client):
    response = client.get("/api/config/mcp")
    assert response.status_code == 200
    assert response.json() == snapshot({
        "activate_servers": {
            "mock": [
                {
                    "name": "echo_text",
                    "description": "Echo the input text",
                    "inputSchema": {
                        "properties": {"text": {"title": "Text", "type": "string"}},
                        "required": ["text"],
                        "title": "echo_textArguments",
                        "type": "object",
                    },
                },
                {
                    "name": "get_user_info",
                    "description": "Get user information by ID",
                    "inputSchema": {
                        "properties": {"user_id": {"title": "User Id", "type": "integer"}},
                        "required": ["user_id"],
                        "title": "get_user_infoArguments",
                        "type": "object",
                    },
                },
                {
                    "name": "raise_error",
                    "description": "Raise an error with the given message",
                    "inputSchema": {
                        "properties": {
                            "message": {"default": "An error occurred", "title": "Message", "type": "string"}
                        },
                        "title": "raise_errorArguments",
                        "type": "object",
                    },
                },
                {
                    "name": "complex_operation",
                    "description": "Perform a complex operation with multiple parameters",
                    "inputSchema": {
                        "properties": {
                            "data": {"title": "Data", "type": "object"},
                            "options": {
                                "anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}],
                                "default": None,
                                "title": "Options",
                            },
                            "verbose": {"default": False, "title": "Verbose", "type": "boolean"},
                        },
                        "required": ["data"],
                        "title": "complex_operationArguments",
                        "type": "object",
                    },
                },
            ]
        },
        "disabled_servers": ["disabled-mock"],
        "failed_servers": {},
    })
