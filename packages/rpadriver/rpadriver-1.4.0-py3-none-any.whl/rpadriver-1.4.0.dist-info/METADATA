Metadata-Version: 2.2
Name: rpadriver
Version: 1.4.0
Summary: RPADriver: RPA helper library built on the TOS model using task-object-storage package.
Author-email: SKALER / Siili Solutions Oyj <skaler-support@siili.com>
License: Copyright 2019-2025 Siili Solutions Oyj
        
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at
        
              http://www.apache.org/licenses/LICENSE-2.0
        
        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
        
                                         Apache License
                                   Version 2.0, January 2004
                                http://www.apache.org/licenses/
        
           TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
        
           1. Definitions.
        
              "License" shall mean the terms and conditions for use, reproduction,
              and distribution as defined by Sections 1 through 9 of this document.
        
              "Licensor" shall mean the copyright owner or entity authorized by
              the copyright owner that is granting the License.
        
              "Legal Entity" shall mean the union of the acting entity and all
              other entities that control, are controlled by, or are under common
              control with that entity. For the purposes of this definition,
              "control" means (i) the power, direct or indirect, to cause the
              direction or management of such entity, whether by contract or
              otherwise, or (ii) ownership of fifty percent (50%) or more of the
              outstanding shares, or (iii) beneficial ownership of such entity.
        
              "You" (or "Your") shall mean an individual or Legal Entity
              exercising permissions granted by this License.
        
              "Source" form shall mean the preferred form for making modifications,
              including but not limited to software source code, documentation
              source, and configuration files.
        
              "Object" form shall mean any form resulting from mechanical
              transformation or translation of a Source form, including but
              not limited to compiled object code, generated documentation,
              and conversions to other media types.
        
              "Work" shall mean the work of authorship, whether in Source or
              Object form, made available under the License, as indicated by a
              copyright notice that is included in or attached to the work
              (an example is provided in the Appendix below).
        
              "Derivative Works" shall mean any work, whether in Source or Object
              form, that is based on (or derived from) the Work and for which the
              editorial revisions, annotations, elaborations, or other modifications
              represent, as a whole, an original work of authorship. For the purposes
              of this License, Derivative Works shall not include works that remain
              separable from, or merely link (or bind by name) to the interfaces of,
              the Work and Derivative Works thereof.
        
              "Contribution" shall mean any work of authorship, including
              the original version of the Work and any modifications or additions
              to that Work or Derivative Works thereof, that is intentionally
              submitted to Licensor for inclusion in the Work by the copyright owner
              or by an individual or Legal Entity authorized to submit on behalf of
              the copyright owner. For the purposes of this definition, "submitted"
              means any form of electronic, verbal, or written communication sent
              to the Licensor or its representatives, including but not limited to
              communication on electronic mailing lists, source code control systems,
              and issue tracking systems that are managed by, or on behalf of, the
              Licensor for the purpose of discussing and improving the Work, but
              excluding communication that is conspicuously marked or otherwise
              designated in writing by the copyright owner as "Not a Contribution."
        
              "Contributor" shall mean Licensor and any individual or Legal Entity
              on behalf of whom a Contribution has been received by Licensor and
              subsequently incorporated within the Work.
        
           2. Grant of Copyright License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              copyright license to reproduce, prepare Derivative Works of,
              publicly display, publicly perform, sublicense, and distribute the
              Work and such Derivative Works in Source or Object form.
        
           3. Grant of Patent License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              (except as stated in this section) patent license to make, have made,
              use, offer to sell, sell, import, and otherwise transfer the Work,
              where such license applies only to those patent claims licensable
              by such Contributor that are necessarily infringed by their
              Contribution(s) alone or by combination of their Contribution(s)
              with the Work to which such Contribution(s) was submitted. If You
              institute patent litigation against any entity (including a
              cross-claim or counterclaim in a lawsuit) alleging that the Work
              or a Contribution incorporated within the Work constitutes direct
              or contributory patent infringement, then any patent licenses
              granted to You under this License for that Work shall terminate
              as of the date such litigation is filed.
        
           4. Redistribution. You may reproduce and distribute copies of the
              Work or Derivative Works thereof in any medium, with or without
              modifications, and in Source or Object form, provided that You
              meet the following conditions:
        
              (a) You must give any other recipients of the Work or
                  Derivative Works a copy of this License; and
        
              (b) You must cause any modified files to carry prominent notices
                  stating that You changed the files; and
        
              (c) You must retain, in the Source form of any Derivative Works
                  that You distribute, all copyright, patent, trademark, and
                  attribution notices from the Source form of the Work,
                  excluding those notices that do not pertain to any part of
                  the Derivative Works; and
        
              (d) If the Work includes a "NOTICE" text file as part of its
                  distribution, then any Derivative Works that You distribute must
                  include a readable copy of the attribution notices contained
                  within such NOTICE file, excluding those notices that do not
                  pertain to any part of the Derivative Works, in at least one
                  of the following places: within a NOTICE text file distributed
                  as part of the Derivative Works; within the Source form or
                  documentation, if provided along with the Derivative Works; or,
                  within a display generated by the Derivative Works, if and
                  wherever such third-party notices normally appear. The contents
                  of the NOTICE file are for informational purposes only and
                  do not modify the License. You may add Your own attribution
                  notices within Derivative Works that You distribute, alongside
                  or as an addendum to the NOTICE text from the Work, provided
                  that such additional attribution notices cannot be construed
                  as modifying the License.
        
              You may add Your own copyright statement to Your modifications and
              may provide additional or different license terms and conditions
              for use, reproduction, or distribution of Your modifications, or
              for any such Derivative Works as a whole, provided Your use,
              reproduction, and distribution of the Work otherwise complies with
              the conditions stated in this License.
        
           5. Submission of Contributions. Unless You explicitly state otherwise,
              any Contribution intentionally submitted for inclusion in the Work
              by You to the Licensor shall be under the terms and conditions of
              this License, without any additional terms or conditions.
              Notwithstanding the above, nothing herein shall supersede or modify
              the terms of any separate license agreement you may have executed
              with Licensor regarding such Contributions.
        
           6. Trademarks. This License does not grant permission to use the trade
              names, trademarks, service marks, or product names of the Licensor,
              except as required for reasonable and customary use in describing the
              origin of the Work and reproducing the content of the NOTICE file.
        
           7. Disclaimer of Warranty. Unless required by applicable law or
              agreed to in writing, Licensor provides the Work (and each
              Contributor provides its Contributions) on an "AS IS" BASIS,
              WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
              implied, including, without limitation, any warranties or conditions
              of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
              PARTICULAR PURPOSE. You are solely responsible for determining the
              appropriateness of using or redistributing the Work and assume any
              risks associated with Your exercise of permissions under this License.
        
           8. Limitation of Liability. In no event and under no legal theory,
              whether in tort (including negligence), contract, or otherwise,
              unless required by applicable law (such as deliberate and grossly
              negligent acts) or agreed to in writing, shall any Contributor be
              liable to You for damages, including any direct, indirect, special,
              incidental, or consequential damages of any character arising as a
              result of this License or out of the use or inability to use the
              Work (including but not limited to damages for loss of goodwill,
              work stoppage, computer failure or malfunction, or any and all
              other commercial damages or losses), even if such Contributor
              has been advised of the possibility of such damages.
        
           9. Accepting Warranty or Additional Liability. While redistributing
              the Work or Derivative Works thereof, You may choose to offer,
              and charge a fee for, acceptance of support, warranty, indemnity,
              or other liability obligations and/or rights consistent with this
              License. However, in accepting such obligations, You may act only
              on Your own behalf and on Your sole responsibility, not on behalf
              of any other Contributor, and only if You agree to indemnify,
              defend, and hold each Contributor harmless for any liability
              incurred by, or claims asserted against, such Contributor by reason
              of your accepting any such warranty or additional liability.
        
           END OF TERMS AND CONDITIONS
        
           APPENDIX: How to apply the Apache License to your work.
        
              To apply the Apache License to your work, attach the following
              boilerplate notice, with the fields enclosed by brackets "[]"
              replaced with your own identifying information. (Don't include
              the brackets!)  The text should be enclosed in the appropriate
              comment syntax for the file format. We also recommend that a
              file or class name and description of purpose be included on the
              same "printed page" as the copyright notice for easier
              identification within third-party archives.
        
        
Project-URL: Homepage, https://pypi.org/project/rpadriver/
Classifier: Programming Language :: Python :: 3
Classifier: Operating System :: OS Independent
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: Apache Software License
Requires-Python: >=3.9
Description-Content-Type: text/x-rst
License-File: LICENSE
Requires-Dist: task-object-storage~=1.2
Requires-Dist: packaging
Requires-Dist: Pillow>=9.3.0

RPADriver
=========

The goal of RPADriver is to make Robot Framework a true RPA tool. This is a RPA helper library built on
the TOS model using ``task-object-storage`` package.

Requirements
------------

* MongoDB
* Python >= 3.9
* robotframework >3 (>=3.2 for RPAListener)
* task-object-storage


Overview
--------

RPADriver relies on the concept of stages: Every RPA process can usually be divided to at least two stages:

* Producer
* Consumer

There is always one producer, but there might be many consumers (1... *n*). The naming convention is as follows:

+--------------+----------+
| Type         | Name     |
+==============+==========+
| Producer     | stage_0  |
+--------------+----------+
| Consumer 1   | stage_1  |
+--------------+----------+
| Consumer 2   | stage_2  |
+--------------+----------+
| Consumer *n* | stage_n  |
+--------------+----------+

Producer creates task objects, and consumers fetch them from the database for processing.
Splitting the work into stages gives more control over the process execution enables stages to be run (and retried) in isolation.

RPADriver consists of two packages:

`RPALibrary`_
    Used to implement RPA processes largely as Python code, in stage definitions that inherit from ``Producer`` and ``Consumer`` superclasses. Robot Framework acts only as a thin wrapper.
`RPAListener`_
    Enables RPA process stages to be defined in Robot Framework test data, while still leveraging ``TOSLibrary``.

RPALibrary
----------

``RPALibrary`` is the classic library originally included as a helper with ``TOSLibrary``.
With this you create robot stage definition in Python code, but still have support for
Robot Framework keywords.


Conventional project structure
++++++++++++++++++++++++++++++

Conventional project structure looks like this

::

    .
    ├── keywords
    ├── libraries
    ├── pipelines
    │   ├── Jenkinsfile
    │   ├── consumer.groovy
    │   └── producer.groovy
    ├── resources
    │   └── settings.py
    ├── stages
    ├── tasks
    │   └── main.robot
    └── run.py

where

* ``keywords``: Robot Framework keyword files.
* ``libraries``: module for all the Python library code.
* ``pipelines``: Jenkins pipelines.
* ``resources``: place to store all miscellaneous files: settings, configs, templates.
* ``stages``: module for the stage definitions (in Python code).
* ``tasks``: Robot Framework suites.
* ``run.py``: startup script for the robot.

The robot control flow is ``run.py`` -> ``tasks/main.robot`` -> ``stages.StageN``.


Producer
--------

To build a Producer stage, you need to create a new file ``stages/Stage0.py`` with a class
called ``Stage0`` inside. This class should inherit from ``Producer``.
The class needs at least one method: ``process_data(self)``.
This method is the main action to do for every data item that will become task object payload.
Optionally, if you need to first prefetch the data into memory (e.g., into a list), you will need
to define a method called ``preloop_action``. This will then feed ``process_data`` with data items
one at a time. When prelooping, you will need to define ``process_data`` like this: ``process_data(self, item)``,
where ``item`` is one of the pre-prepared data items.

Call ``Stage0.Main Loop`` from Robot Framework to start the loop action (your defined Python methods will be
called automatically inside the library).


By inheriting from ``Producer`` you get:

* Automatic task object creation.
* Automatic looping of the data.
* Automatic error handling.
* Every software robot you and your team builds will follow the same conventions.


Consumer
--------

To build a Consumer stage, you need to create a new file ``stages/Stage1.py`` with a class
called ``Stage1`` inside (the number depending on your stage number).
This class should inherit from ``Consumer``.
The class needs at least one method: ``main_action(self, to)``, where ``to`` is a task object
fetched by the library from your MongoDB database. All you need to do is to define what to do
for every task object.

Call ``Stage1.Main Loop`` from Robot Framework to start the loop action (your defined Python methods will be
called automatically inside the library).


By inheriting from ``Consumer`` you get:

* Automatic task object fetching.
* Automatic error handling.
* Every software robot you and your team builds will follow the same conventions.


Example usage
+++++++++++++

Note that the examples here are overly simplified.


Startup script (``run.py``):

.. code-block:: python

    def main():
        return robot.run("tasks")

    if __name__ == '__main__':
        sys.exit(main())


Main Robot file definition (``tasks/main.robot``):

.. code-block:: robotframework

    *** Settings ***
    Library             TOSLibrary    ${db_server}:${db_port}  ${db_name}
    Library             ../stages/Stage0.py
    Library             ../stages/Stage1.py

    *** Tasks ***
    Create task objects from raw data
        [Tags]                      stage_0
        Stage0.Main Loop            no_screenshots=True

    Do action on the task objects
        [Tags]                      stage_1
        Stage1.Main Loop



Producer stage definition (``stages/Stage0.py``):

.. code-block:: python

    from RPALibrary import Producer


    class Stage0(Producer):

        def preloop_action(self):
            """Read and preprocess an Excel worksheet."""
            data = self.read_excel()
            data = self.filter_rows(data)
            return data

        def process_data(self, item):
            """
            Do some some operations for every data item (e.g.
            Excel row). This should return a dictionary.
            The return value will be used as the payload for the task object.
            The task objects are created automatically in ``Producer`` object.

            Having ``item`` parameter in the method signature is important.
            """
            item = self.reader.clean_item(item)
            return item



Consumer stage definition  (``stages/Stage1.py``)

.. code-block:: python

    from RPALibrary import Consumer

    from .errors import SYSTEM_OFFLINE


    class Stage1(Consumer):
        def main_action(self, to):
            """The library will pass created task objects to this method."""
            self.do_some_complex_action_on_the_task_object(to)

        def action_on_fail(self, to):
            if to["last_error"] == SYSTEM_OFFLINE:
                self.handle_system_offline()
            self.return_to_main_screen()



You can also call your stage methods as Robot Framework keywords with ``run_keyword``:

.. code-block:: python

    from robot.libraries.BuiltIn import BuiltIn

    run = BuiltIn().run_keyword


    class Stage1(Consumer):
        def main_action(self, to):
            run("Do Some Complex Action On The Task Object", to)

        def action_on_fail(self, to):
            if to["last_error"] == SYSTEM_OFFLINE:
                run("Handle System Offline")
            run("Return To Main Screen")


RPAListener
-----------

RPAListener is a tool that adds transaction management for RPA automations, where the top-level workflow
has been defined natively in Robot Framework script. The library has been implemented as a
`listener library <https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#listener-interface>`_.

In the backend, the RPAListener uses Task Object Storage (TOS), meaning that it relies on MongoDB
for work item persistence.

For more information about TOS, see https://skaler.gitlab-siili.io/skaler-core/task-object-storage
For more information about Robot Framework, see http://robotframework.org.


Background
----------

RPA processes usually consist of sequential stages. Some stages are to be executed only once (batch).
Others are transactional, where identical steps are performed to a number of work items in a
repetitive manner. RPAListener automates the management of task iterations and work items during
transactional stages.


Usage
-----

After installation, RPAListener can be imported in the Settings-table.

::

    *** Settings ***
    Library    RPAListener    ${db_server}:${db_port}    ${db_name}

Database connection details (address, credentials) are passed to the library using
the `TOS convention <https://intelligent_automation.gitlab-siili.io/tos/#usage>`_.


Task Tags
---------

RPAListener requires special tags to be set on the robot tasks in order to use them as RPA process stages.
Each task should be assigned a tag prefixed with ``stage_`` depending on its sequence in the process,

Transactional stages, whose steps are to be repeated for each applicable work item,
are marked with ``repeat`` tag.

Example process consisting of one batch stage followed by one transactional stage:

::

    *** Tasks ***
    Initial Stage
        [Tags]    stage_0
        Log    This is performed only once

    Process transactions A
        [Tags]    stage_1    repeat
        Log    Processing item '${ITEM_ID}'


Working with items
------------------

In transactional stages, RPAListener sets the workable items to the robot scope for each task iteration.
The work item's payload contents can be accessed in a dictionary named ``${ITEM}``.
The MongoDB ObjectId of the work item can be accessed as ``{ITEM_ID}`` (str).
The name of the dictionary variable can be overriden using the ``item_variable_name`` upon library import.
For example, if you want to refer to the work item as ``&{PERSON}`` in your script:

::

    Library     RPAListener    db_server=localhost    db_name=newtos    item_variable_name=PERSON


RPAListener exposes ``Update Current Item`` keyword, that can be used in a transactional stage
to update the payload contents of the currently worked item, e.g. adding a key-value pair.
The keyword is used similarly to ``Set To Dictionary`` from the standard library ``Collections``,
except that the targeted dictionary is omitted:

::

    | Update Current Item | my_new_key=my_new_value | another_key=another_value |
    | Update Current Item | my_new_key | my_new_value | another_key | another_value |


Setups and Teardowns
--------------------

Default test setups and teardowns, (i.e. those set in ``*** Settings ***``) are run for each stage.
Any setups/teardowns set on the robot task with ``[Setup]`` and ``[Teardown]`` override their
default counterparts.

``Suite Setup/Teardown`` set in ``*** Settings ***`` are run as per normal,
i.e. only at the beginning and end of the robot execution.


Task Naming
-----------

Task iterations are named according to the worked item. The name determines appears
in the robot log file. By default, RPAListener uses the MongoDB Object-id as task name,
but any field from the payload can be used by specifying ``item_identifier_field``
upon library import. For example, in order to use the values from field ``payload.myField``,
RPAListener should be imported as follows:

::

    Library     RPAListener    db_server=localhost    db_name=newtos    item_identifier_field=myField


Skipping Tasks
--------------

Besides passing or failing, processing of a work item can result in the item being skipped.
This is done when the item violates a predefined business rule, and hence should not be processed further.
When skipped, keyword and task execution ends for that work item, and its status is changed to `skip`.

Skipping is perfomed with the keyword `Run Keyword And Skip On Failure`, used in conjunction with a
keyword whose failure indicates an invalid work item. For example:

::

    | Run Keyword And Skip On Failure | Should Be True | ${invoice_amount} > 0 |
    | ...    msg=Invoice is for a zero amount, no action required |


Error Handling (experimental)
-----------------------------

When processing of a work item fails, robot behaviour depends on the type of error raised.
RPAListener exposes keywords ``raise_business_exception`` and ``raise_application_exception``.
The first argument for both keywords is the error message. By default, execution continues
despite of a failing work item. If an application exception is raised with argument ``fatal``
set to ``True``, robot execution is stopped, for example:

::

    | Raise Application Exception | Something went terribly wrong | fatal=${TRUE} |

It is possible to assign a stage-specific error handling keyword, to be run upon failure.
This is done by tagging the robot task with ``error_handler=[Keyword Name]``, for example:

::

    *** Tasks ***
    My RPA Stage
        [Tags]    stage_1    repeat    error_handler=Handle My Error
            # ...

Task timeouts can be used as per normal robot convention. The timeout specified on a stage
is the maximum time allowed for working one item in said stage. If the timeout is exceeded,
the item is failed and error handler is called.


Available keywords/methods
--------------------------

See the full `API documentation <https://skaler.gitlab-siili.io/skaler-core/rpadriver/api.html>`_.


For developers
--------------

Release a new version by running:

.. code-block:: bash

  scripts/build.sh release


You can also install the `whl` package found in the `dist` directory with

.. code-block:: bash

  pip install <package-name>.whl
