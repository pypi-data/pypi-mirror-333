name: End-to-End Testing
on:
  schedule:
    - cron: "0 9 * * 1-5" # Runs at 9:00 UTC (4 AM EDT/EST) Monday to Friday
  workflow_dispatch:
    inputs:
      version:
        description: "Version to test (e.g., v0.1.1, or 'latest' for the latest release)"
        required: false
        type: string
      api_test_env:
        description: "API test environment"
        required: false
        type: choice
        options:
          - production
          - staging
        default: "production"

permissions:
  contents: read
  actions: write

jobs:
  e2e_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v2

      - name: Set up Python
        run: uv python install

      - name: Checkout specific version or latest release
        run: |
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=$(git describe --tags `git rev-list --tags --max-count=1`)
          else
            VERSION=${{ github.event.inputs.version }}
            if [ "$VERSION" = "latest" ]; then
              VERSION=$(git describe --tags `git rev-list --tags --max-count=1`)
            fi
          fi
          git checkout $VERSION
          echo "Running e2e tests for version: $VERSION"

      - name: Run E2E Tests
        id: e2e_tests
        env:
          PROD_E2E_TESTING_API_KEY: ${{ secrets.PROD_E2E_TESTING_API_KEY }}
          STAGING_E2E_TESTING_API_KEY: ${{ secrets.STAGING_E2E_TESTING_API_KEY }}
          API_TEST_ENV: ${{ github.event.inputs.api_test_env || vars.API_TEST_ENV }}
          OPENAI_KEY: ${{ secrets.OPENAI_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          RUN_E2E: true
        run: |
          echo "Running e2e tests against API environment: $API_TEST_ENV"
          uv run pytest tests/end_to_end/ -v -m e2e

      - name: Report Success
        if: success()
        uses: slackapi/slack-github-action@v2.0.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            {
              "text": ":white_check_mark: SDK E2E Testing Passed",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "* :white_check_mark: SDK E2E Testing Passed*\nEnvironment: ${{ github.event.inputs.api_test_env || vars.API_TEST_ENV }}\nVersion: ${{ github.ref }}\nCheck the <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|workflow run> for details."
                  }
                }
              ]
            }

      - name: Report Failure
        if: failure()
        uses: slackapi/slack-github-action@v2.0.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            {
              "text": ":warning: SDK E2E Testing Failed",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "* :warning: SDK E2E Testing Failed*\nEnvironment: ${{ github.event.inputs.api_test_env || vars.API_TEST_ENV }}\nVersion: ${{ github.ref }}\nCheck the <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|workflow run> for details."
                  }
                }
              ]
            }
