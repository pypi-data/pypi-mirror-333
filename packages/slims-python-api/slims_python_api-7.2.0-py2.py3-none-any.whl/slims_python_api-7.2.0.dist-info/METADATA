Metadata-Version: 2.2
Name: slims-python-api
Version: 7.2.0
Summary: A python api for SLims.
Home-page: http://www.genohm.com
Author: Genohm
Author-email: support@genohm.com
Maintainer: Genohm
Maintainer-email: support@genohm.com
License: TODO
Keywords: genohm,slims
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.13
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Programming Language :: Python :: Implementation :: PyPy
Classifier: Topic :: Internet :: WWW/HTTP :: WSGI :: Application
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: flask>=3.1.0
Requires-Dist: requests>=2.32.3
Requires-Dist: requests_oauthlib>=2.0.0
Requires-Dist: deprecation>=2.0.0
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: keywords
Dynamic: license
Dynamic: maintainer
Dynamic: maintainer-email
Dynamic: requires-dist
Dynamic: summary

# slims-python-api: Interact with SLims from python

The SLims python api allows you to interact with your SLims instance by using Python. It allows you to extend the versatile capability of SLims even further.

## Installing

The required Python version is 3.13

If you run SLIMS 7.2 you run

```
pip install 'slims-python-api>=7.2.0,<7.3.0'
```

If you run SLIMS 6.9 you run

```   
pip install 'slims-python-api>=6.9.0,<7.0.0'
````

## Documentation

The documentation can be found on the following page:

http://slims-python-api.readthedocs.io/en/latest/


## Getting Started

To get you started we provided a few cookbook examples:

### [Data Manipulation](cookbook/data-manipulation)

In this script, we demonstrate creating, modifying and removing content.


### [Flow Example](cookbook/flow-example)
Learn how to create a SLimsgate flow with python. In the given example you will create a very simple two steps flow. In the first step a content record can be selected in the UI. In the second step a new id
for that content record can be chosen.

### [Live Report](cookbook/live-report)
This web application is displaying on a web page a live report for a selected period. It shows how a webportal can be used to create a specific report directly through the api.

### [Order Submission](cookbook/order-submission)
In this sample web application, a user can create an order direclty through a web portal, with customizable appearance and formatting

### [Plotting](cookbook/plotting)
In this example, we demonstrate how graphical plots can be created with python while fetching the data through the api.


## Contributions
If you want to contribute to the project, we welcome any addition and we will merge it through a pulls request


## Questions, Suggestions
If you have any questions/suggestions or defects, please use the Agilent service desk (https://servicedesk.li.agilent.com/support)



