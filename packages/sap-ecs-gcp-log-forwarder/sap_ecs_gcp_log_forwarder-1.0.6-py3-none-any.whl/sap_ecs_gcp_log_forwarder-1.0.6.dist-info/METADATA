Metadata-Version: 2.1
Name: sap-ecs-gcp-log-forwarder
Version: 1.0.6
Summary: A package to consume events from an Google Pub/Sub, process log files, and forward them to a HTTP endpoint or file.
Home-page: https://www.sap.com/
License: SAP DEVELOPER LICENSE AGREEMENT
Keywords: SAP GCP Log Forwarder,SAP Log Forwarder
Author: SAP SE
Requires-Python: >=3.8,<4.0
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: License :: Other/Proprietary License
Classifier: Operating System :: MacOS :: MacOS X
Classifier: Operating System :: POSIX :: Linux
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Dist: google-cloud-pubsub (>=2.21.2,<3.0.0)
Requires-Dist: google-cloud-storage (>=2.16.0,<3.0.0)
Requires-Dist: python-dotenv (>=1.0.1,<2.0.0)
Requires-Dist: requests (>=2.32.3,<3.0.0)
Description-Content-Type: text/markdown

# GCP Log Forwarder

GCP Log Forwarder is a Python package that consumes events from a GCP Pub/Sub subscription, processes log files stored in Google Cloud Storage, and forwards the logs either to an HTTP endpoint or writes them to files.

![Image for sap-ecs-gcp-log-forwarder](https://raw.githubusercontent.com/sap-ecs-log-forwarders/pypi/main/gcp-log-forwarder.png)

## Features

- Consume object creation events from a GCP Pub/Sub subscription.
- Download and decompress gzipped JSON log files from Google Cloud Storage.
- Forward logs to an HTTP endpoint or write them to files.
- Support for TLS protocol.
- Support for different HTTP authentication methods (Token, API Key).
- Configurable through environment variables.
- Configurable timeout to exit the program if no messages are found for a specified duration.

## Prerequisites

- Python 3.8 or higher
- A GCP project with Pub/Sub and Cloud Storage enabled.
- GCP Service Account in your own project with appropriate permissions:
  - `roles/pubsub.subscriber` for the Pub/Sub subscription
  - `roles/storage.objectViewer` for accessing Cloud Storage objects

## Installation

### With direct internet access:
```sh
pip install sap-ecs-gcp-log-forwarder
pip install sap-ecs-gcp-log-forwarder==<version>
```

### Without direct internet access:
- Navigate to the **Download files** section on **pypi.org** for **sap-ecs-gcp-log-forwarder** and download the latest .whl (wheel) file. The file will typically have a name that includes details about compatibility (e.g., example_package-1.0-py3-none-any.whl).
- Upload the .whl file to the target machine that does not have direct internet access.
- Move to the directory where your **.whl** file is located or provide the full path when running the pip command.

Run the following command:
```sh
pip install /path/to/your_file.whl
```

**Example**:
```sh
pip install /User/Downloads/sap_ecs_gcp_log_forwarder-1.0.2-py3-none-any.whl
```

## Configuration

Set up the following environment variables to configure the GCP Log Forwarder. You can set these environment variables in your shell or in a `.env` file in the same directory as the application.

- `GOOGLE_APPLICATION_CREDENTIALS`: Path to your service account key JSON file.
- `GCP_PROJECT_ID`: The ID of the Google Project where the Cloud Storage Bucket is in.
- `PUBSUB_SUBSCRIPTION_NAME`: The name of the Pub/Sub subscription to consume events from. (Not the full path)
- `TIMEOUT_DURATION`: The time duration in seconds to wait for messages before exiting.
- `OUTPUT_METHOD`: The method to forward logs (`http` or `files`).
- `HTTP_ENDPOINT`: The HTTP endpoint to forward logs to (required if `OUTPUT_METHOD` is `http`).
- `TLS_CERT_PATH`: Path to the TLS certificate for mutual TLS connections.
- `TLS_KEY_PATH`: Path to the TLS key for mutual TLS connections.
- `AUTH_METHOD`: Authentication method (`token`, `api_key`). Default is `token`.
  - **Auth Token**: Set `AUTH_METHOD` to `token` and configure `AUTH_TOKEN`.
    - `AUTH_TOKEN`: Bearer/OAuth token for HTTP endpoint authentication.
  - **API Key**: Set `AUTH_METHOD` to `api_key` and configure `API_KEY`.
    - `API_KEY`: API key for HTTP endpoint API key authentication.
- `OUTPUT_DIR`: The output directory to write log files to (required if `OUTPUT_METHOD` is `files`).
- `LOG_LEVEL`: The log level for the application (default is `INFO`). Options are `DEBUG`, `INFO`, `WARNING`, `ERROR`, `CRITICAL`.

### Example of setting environment variables in a shell:

```sh
export GOOGLE_APPLICATION_CREDENTIALS="path/to/your-service-account-key.json"
export GCP_PROJECT_ID="id-of-the-google-project-where-the-cloud-storage-bucket-is-in"
export PUBSUB_SUBSCRIPTION_NAME="pubsub-subscription-name-to-consume-events-from"
export TIMEOUT_DURATION=120  # Timeout after 120 seconds of inactivity. DO NOT set for indefinite runs.

# For HTTP output
export OUTPUT_METHOD="http"
export HTTP_ENDPOINT="https://your-http-endpoint.com"

# TLS Configuration (Optional)
export TLS_CERT_PATH="/path/to/tls_cert.pem"
export TLS_KEY_PATH="/path/to/tls_key.pem"

# For Bearer/OAuth Token authentication
export AUTH_METHOD="token"
export AUTH_TOKEN="your_token"

# or API Key Authentication
export AUTH_METHOD="api_key"
export API_KEY="your_api_key"

# For file output
export OUTPUT_METHOD="files"
export OUTPUT_DIR="/path/to/output/"

# Log level
export LOG_LEVEL="DEBUG" # Options: DEBUG, INFO, WARNING, ERROR, CRITICAL. Default is INFO.
```

### Example of setting environment variables in a `.env` file:
```sh
GOOGLE_APPLICATION_CREDENTIALS="path/to/your-service-account-key.json"
GCP_PROJECT_ID="id-of-the-google-project-where-the-cloud-storage-bucket-is-in"
PUBSUB_SUBSCRIPTION_NAME="pubsub-subscription-name-to-consume-events-from"
TIMEOUT_DURATION=120  # Timeout after 120 seconds of inactivity. DO NOT set for indefinite runs.

# For HTTP output
OUTPUT_METHOD="http"
HTTP_ENDPOINT="https://your-http-endpoint.com"

# TLS Configuration (Optional)
TLS_CERT_PATH="/path/to/tls_cert.pem"
TLS_KEY_PATH="/path/to/tls_key.pem"

# For Bearer/OAuth Token authentication
AUTH_METHOD="token"
AUTH_TOKEN="your_token"

# or API Key Authentication
AUTH_METHOD="api_key"
API_KEY="your_api_key"

# For file output
OUTPUT_METHOD="files"
OUTPUT_DIR="/path/to/output/"

# Log level
LOG_LEVEL="DEBUG" # Options: DEBUG, INFO, WARNING, ERROR, CRITICAL. Default is INFO.
```

## Usage

To run the GCP Log Forwarder, use:
```sh
sap-ecs-gcp-log-forwarder
```

The program will:
- Consume events from the Pub/Sub subscription.
- Download and process log files from GCS bucket.
- Forward logs according to the configured method.
- Exit after the specified timeout duration.

## Things to remember

- If `TIMEOUT_DURATION` is not set, the program will run indefinitely.
- The service account **must** have `Storage Object Viewer` and `Pub/Sub Subscriber` permissions over the bucket and subscription respectively.

## References

1. [Pub/Sub notifications for Cloud Storage](https://cloud.google.com/storage/docs/pubsub-notifications)
2. [Create service accounts](https://cloud.google.com/iam/docs/service-accounts-create)
3. [IAM Roles and Permissions](https://cloud.google.com/iam/docs/understanding-roles)

## License

This application and its source code are licensed under the SAP Developer License Agreement. See the LICENSE file for more information.

## Release Notes

### 1.0.1
- Initial release

### 1.0.2
- Updated README with additional instructions for installing the package without direct internet access.

### 1.0.5
- Improved error handling for permission issues and retry mechanisms.
- Validates the existence of the Pub/Sub subscription before consuming messages from it.

### 1.0.6
- Point dotenv to the current working directory for the .env file.
